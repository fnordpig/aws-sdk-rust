// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_encryption_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateEncryptionConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.encryption_config {
        let mut array_3 = object.key("encryptionConfig").start_array();
        for item_4 in var_2 {
             {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_identity_provider_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateIdentityProviderConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.client_request_token {
        object.key("clientRequestToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.oidc {
        let mut object_8 = object.key("oidc").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_identity_provider_config_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
             {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_addon_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAddonInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_13) = &input.addon_name {
        object.key("addonName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.addon_version {
        object.key("addonVersion").string(var_14.as_str());
    }
    if let Some(var_15) = &input.client_request_token {
        object.key("clientRequestToken").string(var_15.as_str());
    }
    if let Some(var_16) = &input.resolve_conflicts {
        object.key("resolveConflicts").string(var_16.as_str());
    }
    if let Some(var_17) = &input.service_account_role_arn {
        object.key("serviceAccountRoleArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
             {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_cluster_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateClusterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_22) = &input.client_request_token {
        object.key("clientRequestToken").string(var_22.as_str());
    }
    if let Some(var_23) = &input.encryption_config {
        let mut array_24 = object.key("encryptionConfig").start_array();
        for item_25 in var_23 {
             {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.kubernetes_network_config {
        let mut object_28 = object.key("kubernetesNetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kubernetes_network_config_request(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.logging {
        let mut object_30 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_logging(&mut object_30, var_29)?;
        object_30.finish();
    }
    if let Some(var_31) = &input.name {
        object.key("name").string(var_31.as_str());
    }
    if let Some(var_32) = &input.outpost_config {
        let mut object_33 = object.key("outpostConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outpost_config_request(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.resources_vpc_config {
        let mut object_35 = object.key("resourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_request(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.role_arn {
        object.key("roleArn").string(var_36.as_str());
    }
    if let Some(var_37) = &input.tags {
        let mut object_38 = object.key("tags").start_object();
        for (key_39, value_40) in var_37 {
             {
                object_38.key(key_39.as_str()).string(value_40.as_str());
            }
        }
        object_38.finish();
    }
    if let Some(var_41) = &input.version {
        object.key("version").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fargate_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFargateProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.client_request_token {
        object.key("clientRequestToken").string(var_42.as_str());
    }
    if let Some(var_43) = &input.fargate_profile_name {
        object.key("fargateProfileName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.pod_execution_role_arn {
        object.key("podExecutionRoleArn").string(var_44.as_str());
    }
    if let Some(var_45) = &input.selectors {
        let mut array_46 = object.key("selectors").start_array();
        for item_47 in var_45 {
             {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_fargate_profile_selector(&mut object_48, item_47)?;
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.subnets {
        let mut array_50 = object.key("subnets").start_array();
        for item_51 in var_49 {
             {
                array_50.value().string(item_51.as_str());
            }
        }
        array_50.finish();
    }
    if let Some(var_52) = &input.tags {
        let mut object_53 = object.key("tags").start_object();
        for (key_54, value_55) in var_52 {
             {
                object_53.key(key_54.as_str()).string(value_55.as_str());
            }
        }
        object_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_nodegroup_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateNodegroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.ami_type {
        object.key("amiType").string(var_56.as_str());
    }
    if let Some(var_57) = &input.capacity_type {
        object.key("capacityType").string(var_57.as_str());
    }
    if let Some(var_58) = &input.client_request_token {
        object.key("clientRequestToken").string(var_58.as_str());
    }
    if let Some(var_59) = &input.disk_size {
        object.key("diskSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_59).into()));
    }
    if let Some(var_60) = &input.instance_types {
        let mut array_61 = object.key("instanceTypes").start_array();
        for item_62 in var_60 {
             {
                array_61.value().string(item_62.as_str());
            }
        }
        array_61.finish();
    }
    if let Some(var_63) = &input.labels {
        let mut object_64 = object.key("labels").start_object();
        for (key_65, value_66) in var_63 {
             {
                object_64.key(key_65.as_str()).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.launch_template {
        let mut object_68 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_template_specification(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.node_role {
        object.key("nodeRole").string(var_69.as_str());
    }
    if let Some(var_70) = &input.nodegroup_name {
        object.key("nodegroupName").string(var_70.as_str());
    }
    if let Some(var_71) = &input.release_version {
        object.key("releaseVersion").string(var_71.as_str());
    }
    if let Some(var_72) = &input.remote_access {
        let mut object_73 = object.key("remoteAccess").start_object();
        crate::json_ser::serialize_structure_crate_model_remote_access_config(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.scaling_config {
        let mut object_75 = object.key("scalingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_nodegroup_scaling_config(&mut object_75, var_74)?;
        object_75.finish();
    }
    if let Some(var_76) = &input.subnets {
        let mut array_77 = object.key("subnets").start_array();
        for item_78 in var_76 {
             {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("tags").start_object();
        for (key_81, value_82) in var_79 {
             {
                object_80.key(key_81.as_str()).string(value_82.as_str());
            }
        }
        object_80.finish();
    }
    if let Some(var_83) = &input.taints {
        let mut array_84 = object.key("taints").start_array();
        for item_85 in var_83 {
             {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_taint(&mut object_86, item_85)?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.update_config {
        let mut object_88 = object.key("updateConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_nodegroup_update_config(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.version {
        object.key("version").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_identity_provider_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeIdentityProviderConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.identity_provider_config {
        let mut object_91 = object.key("identityProviderConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_config(&mut object_91, var_90)?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_identity_provider_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateIdentityProviderConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_92) = &input.client_request_token {
        object.key("clientRequestToken").string(var_92.as_str());
    }
    if let Some(var_93) = &input.identity_provider_config {
        let mut object_94 = object.key("identityProviderConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_cluster_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterClusterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_95) = &input.client_request_token {
        object.key("clientRequestToken").string(var_95.as_str());
    }
    if let Some(var_96) = &input.connector_config {
        let mut object_97 = object.key("connectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_connector_config_request(&mut object_97, var_96)?;
        object_97.finish();
    }
    if let Some(var_98) = &input.name {
        object.key("name").string(var_98.as_str());
    }
    if let Some(var_99) = &input.tags {
        let mut object_100 = object.key("tags").start_object();
        for (key_101, value_102) in var_99 {
             {
                object_100.key(key_101.as_str()).string(value_102.as_str());
            }
        }
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_103) = &input.tags {
        let mut object_104 = object.key("tags").start_object();
        for (key_105, value_106) in var_103 {
             {
                object_104.key(key_105.as_str()).string(value_106.as_str());
            }
        }
        object_104.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_addon_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAddonInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.addon_version {
        object.key("addonVersion").string(var_107.as_str());
    }
    if let Some(var_108) = &input.client_request_token {
        object.key("clientRequestToken").string(var_108.as_str());
    }
    if let Some(var_109) = &input.resolve_conflicts {
        object.key("resolveConflicts").string(var_109.as_str());
    }
    if let Some(var_110) = &input.service_account_role_arn {
        object.key("serviceAccountRoleArn").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateClusterConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_111) = &input.client_request_token {
        object.key("clientRequestToken").string(var_111.as_str());
    }
    if let Some(var_112) = &input.logging {
        let mut object_113 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_logging(&mut object_113, var_112)?;
        object_113.finish();
    }
    if let Some(var_114) = &input.resources_vpc_config {
        let mut object_115 = object.key("resourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config_request(&mut object_115, var_114)?;
        object_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateClusterVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.client_request_token {
        object.key("clientRequestToken").string(var_116.as_str());
    }
    if let Some(var_117) = &input.version {
        object.key("version").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_nodegroup_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateNodegroupConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_118) = &input.client_request_token {
        object.key("clientRequestToken").string(var_118.as_str());
    }
    if let Some(var_119) = &input.labels {
        let mut object_120 = object.key("labels").start_object();
        crate::json_ser::serialize_structure_crate_model_update_labels_payload(&mut object_120, var_119)?;
        object_120.finish();
    }
    if let Some(var_121) = &input.scaling_config {
        let mut object_122 = object.key("scalingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_nodegroup_scaling_config(&mut object_122, var_121)?;
        object_122.finish();
    }
    if let Some(var_123) = &input.taints {
        let mut object_124 = object.key("taints").start_object();
        crate::json_ser::serialize_structure_crate_model_update_taints_payload(&mut object_124, var_123)?;
        object_124.finish();
    }
    if let Some(var_125) = &input.update_config {
        let mut object_126 = object.key("updateConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_nodegroup_update_config(&mut object_126, var_125)?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_nodegroup_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateNodegroupVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.client_request_token {
        object.key("clientRequestToken").string(var_127.as_str());
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
    if let Some(var_128) = &input.launch_template {
        let mut object_129 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_template_specification(&mut object_129, var_128)?;
        object_129.finish();
    }
    if let Some(var_130) = &input.release_version {
        object.key("releaseVersion").string(var_130.as_str());
    }
    if let Some(var_131) = &input.version {
        object.key("version").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_132) = &input.resources {
        let mut array_133 = object.key("resources").start_array();
        for item_134 in var_132 {
             {
                array_133.value().string(item_134.as_str());
            }
        }
        array_133.finish();
    }
    if let Some(var_135) = &input.provider {
        let mut object_136 = object.key("provider").start_object();
        crate::json_ser::serialize_structure_crate_model_provider(&mut object_136, var_135)?;
        object_136.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_identity_provider_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OidcIdentityProviderConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_137) = &input.identity_provider_config_name {
        object.key("identityProviderConfigName").string(var_137.as_str());
    }
    if let Some(var_138) = &input.issuer_url {
        object.key("issuerUrl").string(var_138.as_str());
    }
    if let Some(var_139) = &input.client_id {
        object.key("clientId").string(var_139.as_str());
    }
    if let Some(var_140) = &input.username_claim {
        object.key("usernameClaim").string(var_140.as_str());
    }
    if let Some(var_141) = &input.username_prefix {
        object.key("usernamePrefix").string(var_141.as_str());
    }
    if let Some(var_142) = &input.groups_claim {
        object.key("groupsClaim").string(var_142.as_str());
    }
    if let Some(var_143) = &input.groups_prefix {
        object.key("groupsPrefix").string(var_143.as_str());
    }
    if let Some(var_144) = &input.required_claims {
        let mut object_145 = object.key("requiredClaims").start_object();
        for (key_146, value_147) in var_144 {
             {
                object_145.key(key_146.as_str()).string(value_147.as_str());
            }
        }
        object_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kubernetes_network_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KubernetesNetworkConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_148) = &input.service_ipv4_cidr {
        object.key("serviceIpv4Cidr").string(var_148.as_str());
    }
    if let Some(var_149) = &input.ip_family {
        object.key("ipFamily").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Logging) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_150) = &input.cluster_logging {
        let mut array_151 = object.key("clusterLogging").start_array();
        for item_152 in var_150 {
             {
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_crate_model_log_setup(&mut object_153, item_152)?;
                object_153.finish();
            }
        }
        array_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outpost_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutpostConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_154) = &input.outpost_arns {
        let mut array_155 = object.key("outpostArns").start_array();
        for item_156 in var_154 {
             {
                array_155.value().string(item_156.as_str());
            }
        }
        array_155.finish();
    }
    if let Some(var_157) = &input.control_plane_instance_type {
        object.key("controlPlaneInstanceType").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VpcConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_158) = &input.subnet_ids {
        let mut array_159 = object.key("subnetIds").start_array();
        for item_160 in var_158 {
             {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    if let Some(var_161) = &input.security_group_ids {
        let mut array_162 = object.key("securityGroupIds").start_array();
        for item_163 in var_161 {
             {
                array_162.value().string(item_163.as_str());
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.endpoint_public_access {
        object.key("endpointPublicAccess").boolean(*var_164);
    }
    if let Some(var_165) = &input.endpoint_private_access {
        object.key("endpointPrivateAccess").boolean(*var_165);
    }
    if let Some(var_166) = &input.public_access_cidrs {
        let mut array_167 = object.key("publicAccessCidrs").start_array();
        for item_168 in var_166 {
             {
                array_167.value().string(item_168.as_str());
            }
        }
        array_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fargate_profile_selector(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FargateProfileSelector) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_169) = &input.namespace {
        object.key("namespace").string(var_169.as_str());
    }
    if let Some(var_170) = &input.labels {
        let mut object_171 = object.key("labels").start_object();
        for (key_172, value_173) in var_170 {
             {
                object_171.key(key_172.as_str()).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_launch_template_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LaunchTemplateSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_174) = &input.name {
        object.key("name").string(var_174.as_str());
    }
    if let Some(var_175) = &input.version {
        object.key("version").string(var_175.as_str());
    }
    if let Some(var_176) = &input.id {
        object.key("id").string(var_176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remote_access_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RemoteAccessConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_177) = &input.ec2_ssh_key {
        object.key("ec2SshKey").string(var_177.as_str());
    }
    if let Some(var_178) = &input.source_security_groups {
        let mut array_179 = object.key("sourceSecurityGroups").start_array();
        for item_180 in var_178 {
             {
                array_179.value().string(item_180.as_str());
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nodegroup_scaling_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NodegroupScalingConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.min_size {
        object.key("minSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_181).into()));
    }
    if let Some(var_182) = &input.max_size {
        object.key("maxSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_182).into()));
    }
    if let Some(var_183) = &input.desired_size {
        object.key("desiredSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_183).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_taint(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Taint) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_184) = &input.key {
        object.key("key").string(var_184.as_str());
    }
    if let Some(var_185) = &input.value {
        object.key("value").string(var_185.as_str());
    }
    if let Some(var_186) = &input.effect {
        object.key("effect").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nodegroup_update_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NodegroupUpdateConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_187) = &input.max_unavailable {
        object.key("maxUnavailable").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_187).into()));
    }
    if let Some(var_188) = &input.max_unavailable_percentage {
        object.key("maxUnavailablePercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_188).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_identity_provider_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IdentityProviderConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.r#type {
        object.key("type").string(var_189.as_str());
    }
    if let Some(var_190) = &input.name {
        object.key("name").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connector_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectorConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_191) = &input.role_arn {
        object.key("roleArn").string(var_191.as_str());
    }
    if let Some(var_192) = &input.provider {
        object.key("provider").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_labels_payload(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateLabelsPayload) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.add_or_update_labels {
        let mut object_194 = object.key("addOrUpdateLabels").start_object();
        for (key_195, value_196) in var_193 {
             {
                object_194.key(key_195.as_str()).string(value_196.as_str());
            }
        }
        object_194.finish();
    }
    if let Some(var_197) = &input.remove_labels {
        let mut array_198 = object.key("removeLabels").start_array();
        for item_199 in var_197 {
             {
                array_198.value().string(item_199.as_str());
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_taints_payload(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateTaintsPayload) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.add_or_update_taints {
        let mut array_201 = object.key("addOrUpdateTaints").start_array();
        for item_202 in var_200 {
             {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_taint(&mut object_203, item_202)?;
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.remove_taints {
        let mut array_205 = object.key("removeTaints").start_array();
        for item_206 in var_204 {
             {
                let mut object_207 = array_205.value().start_object();
                crate::json_ser::serialize_structure_crate_model_taint(&mut object_207, item_206)?;
                object_207.finish();
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provider(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Provider) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.key_arn {
        object.key("keyArn").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_setup(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LogSetup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.types {
        let mut array_210 = object.key("types").start_array();
        for item_211 in var_209 {
             {
                array_210.value().string(item_211.as_str());
            }
        }
        array_210.finish();
    }
    if let Some(var_212) = &input.enabled {
        object.key("enabled").boolean(*var_212);
    }
    Ok(())
}

