// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An internal error has occurred.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The resource is not available.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkflowError> for Error {
    fn from(err: crate::error::CreateWorkflowError) -> Self {
        match err.kind {
            crate::error::CreateWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkflowStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkflowStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkflowStepError> for Error {
    fn from(err: crate::error::CreateWorkflowStepError) -> Self {
        match err.kind {
            crate::error::CreateWorkflowStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateWorkflowStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkflowStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateWorkflowStepErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateWorkflowStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorkflowStepGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWorkflowStepGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWorkflowStepGroupError> for Error {
    fn from(err: crate::error::CreateWorkflowStepGroupError) -> Self {
        match err.kind {
            crate::error::CreateWorkflowStepGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateWorkflowStepGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateWorkflowStepGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateWorkflowStepGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateWorkflowStepGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkflowError> for Error {
    fn from(err: crate::error::DeleteWorkflowError) -> Self {
        match err.kind {
            crate::error::DeleteWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkflowErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkflowStepError> for Error {
    fn from(err: crate::error::DeleteWorkflowStepError) -> Self {
        match err.kind {
            crate::error::DeleteWorkflowStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteWorkflowStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkflowStepErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWorkflowStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteWorkflowStepErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteWorkflowStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowStepGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWorkflowStepGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWorkflowStepGroupError> for Error {
    fn from(err: crate::error::DeleteWorkflowStepGroupError) -> Self {
        match err.kind {
            crate::error::DeleteWorkflowStepGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteWorkflowStepGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteWorkflowStepGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWorkflowStepGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteWorkflowStepGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteWorkflowStepGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetTemplateError> for Error {
    fn from(err: crate::error::GetTemplateError) -> Self {
        match err.kind {
            crate::error::GetTemplateErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTemplateErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTemplateErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetTemplateErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetTemplateErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTemplateStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetTemplateStepError> for Error {
    fn from(err: crate::error::GetTemplateStepError) -> Self {
        match err.kind {
            crate::error::GetTemplateStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTemplateStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTemplateStepErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetTemplateStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetTemplateStepErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetTemplateStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateStepGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTemplateStepGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetTemplateStepGroupError> for Error {
    fn from(err: crate::error::GetTemplateStepGroupError) -> Self {
        match err.kind {
            crate::error::GetTemplateStepGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetTemplateStepGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetTemplateStepGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetTemplateStepGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetTemplateStepGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetTemplateStepGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkflowError> for Error {
    fn from(err: crate::error::GetWorkflowError) -> Self {
        match err.kind {
            crate::error::GetWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkflowErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkflowStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkflowStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkflowStepError> for Error {
    fn from(err: crate::error::GetWorkflowStepError) -> Self {
        match err.kind {
            crate::error::GetWorkflowStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetWorkflowStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkflowStepErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetWorkflowStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetWorkflowStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkflowStepGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetWorkflowStepGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetWorkflowStepGroupError> for Error {
    fn from(err: crate::error::GetWorkflowStepGroupError) -> Self {
        match err.kind {
            crate::error::GetWorkflowStepGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetWorkflowStepGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetWorkflowStepGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetWorkflowStepGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetWorkflowStepGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetWorkflowStepGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPluginsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPluginsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPluginsError> for Error {
    fn from(err: crate::error::ListPluginsError) -> Self {
        match err.kind {
            crate::error::ListPluginsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListPluginsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListPluginsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListPluginsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTemplatesError> for Error {
    fn from(err: crate::error::ListTemplatesError) -> Self {
        match err.kind {
            crate::error::ListTemplatesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTemplatesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTemplatesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTemplatesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplateStepGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplateStepGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTemplateStepGroupsError> for Error {
    fn from(err: crate::error::ListTemplateStepGroupsError) -> Self {
        match err.kind {
            crate::error::ListTemplateStepGroupsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTemplateStepGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTemplateStepGroupsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTemplateStepGroupsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTemplateStepGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplateStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplateStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTemplateStepsError> for Error {
    fn from(err: crate::error::ListTemplateStepsError) -> Self {
        match err.kind {
            crate::error::ListTemplateStepsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTemplateStepsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTemplateStepsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTemplateStepsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTemplateStepsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTemplateStepsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkflowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkflowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkflowsError> for Error {
    fn from(err: crate::error::ListWorkflowsError) -> Self {
        match err.kind {
            crate::error::ListWorkflowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListWorkflowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkflowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListWorkflowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListWorkflowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListWorkflowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkflowStepGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkflowStepGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkflowStepGroupsError> for Error {
    fn from(err: crate::error::ListWorkflowStepGroupsError) -> Self {
        match err.kind {
            crate::error::ListWorkflowStepGroupsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListWorkflowStepGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkflowStepGroupsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListWorkflowStepGroupsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListWorkflowStepGroupsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListWorkflowStepGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkflowStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorkflowStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWorkflowStepsError> for Error {
    fn from(err: crate::error::ListWorkflowStepsError) -> Self {
        match err.kind {
            crate::error::ListWorkflowStepsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListWorkflowStepsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListWorkflowStepsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListWorkflowStepsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListWorkflowStepsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RetryWorkflowStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RetryWorkflowStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RetryWorkflowStepError> for Error {
    fn from(err: crate::error::RetryWorkflowStepError) -> Self {
        match err.kind {
            crate::error::RetryWorkflowStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::RetryWorkflowStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::RetryWorkflowStepErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::RetryWorkflowStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::RetryWorkflowStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartWorkflowError> for Error {
    fn from(err: crate::error::StartWorkflowError) -> Self {
        match err.kind {
            crate::error::StartWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartWorkflowErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopWorkflowError> for Error {
    fn from(err: crate::error::StopWorkflowError) -> Self {
        match err.kind {
            crate::error::StopWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopWorkflowErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StopWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkflowError> for Error {
    fn from(err: crate::error::UpdateWorkflowError) -> Self {
        match err.kind {
            crate::error::UpdateWorkflowErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateWorkflowErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkflowErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateWorkflowErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateWorkflowErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateWorkflowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkflowStepError> for Error {
    fn from(err: crate::error::UpdateWorkflowStepError) -> Self {
        match err.kind {
            crate::error::UpdateWorkflowStepErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateWorkflowStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkflowStepErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateWorkflowStepErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateWorkflowStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowStepGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateWorkflowStepGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateWorkflowStepGroupError> for Error {
    fn from(err: crate::error::UpdateWorkflowStepGroupError) -> Self {
        match err.kind {
            crate::error::UpdateWorkflowStepGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateWorkflowStepGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateWorkflowStepGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateWorkflowStepGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateWorkflowStepGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateWorkflowStepGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

