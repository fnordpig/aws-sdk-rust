// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_invitation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AcceptInvitationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.administrator_account_id {
        object.key("administratorAccountId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("invitationId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.master_account {
        object.key("masterAccount").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_data_identifiers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetCustomDataIdentifiersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.ids {
        let mut array_5 = object.key("ids").start_array();
        for item_6 in var_4 {
             {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_allow_list_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAllowListInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.client_token {
        object.key("clientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.criteria {
        let mut object_9 = object.key("criteria").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_list_criteria(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.name {
        object.key("name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
             {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classification_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateClassificationJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.allow_list_ids {
        let mut array_17 = object.key("allowListIds").start_array();
        for item_18 in var_16 {
             {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.client_token {
        object.key("clientToken").string(var_19.as_str());
    }
    if let Some(var_20) = &input.custom_data_identifier_ids {
        let mut array_21 = object.key("customDataIdentifierIds").start_array();
        for item_22 in var_20 {
             {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.description {
        object.key("description").string(var_23.as_str());
    }
    if input.initial_run {
        object.key("initialRun").boolean(input.initial_run);
    }
    if let Some(var_24) = &input.job_type {
        object.key("jobType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.managed_data_identifier_ids {
        let mut array_26 = object.key("managedDataIdentifierIds").start_array();
        for item_27 in var_25 {
             {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.managed_data_identifier_selector {
        object.key("managedDataIdentifierSelector").string(var_28.as_str());
    }
    if let Some(var_29) = &input.name {
        object.key("name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.s3_job_definition {
        let mut object_31 = object.key("s3JobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_job_definition(&mut object_31, var_30)?;
        object_31.finish();
    }
    if input.sampling_percentage != 0 {
        object.key("samplingPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.sampling_percentage).into()));
    }
    if let Some(var_32) = &input.schedule_frequency {
        let mut object_33 = object.key("scheduleFrequency").start_object();
        crate::json_ser::serialize_structure_crate_model_job_schedule_frequency(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.tags {
        let mut object_35 = object.key("tags").start_object();
        for (key_36, value_37) in var_34 {
             {
                object_35.key(key_36.as_str()).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_data_identifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCustomDataIdentifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_38) = &input.client_token {
        object.key("clientToken").string(var_38.as_str());
    }
    if let Some(var_39) = &input.description {
        object.key("description").string(var_39.as_str());
    }
    if let Some(var_40) = &input.ignore_words {
        let mut array_41 = object.key("ignoreWords").start_array();
        for item_42 in var_40 {
             {
                array_41.value().string(item_42.as_str());
            }
        }
        array_41.finish();
    }
    if let Some(var_43) = &input.keywords {
        let mut array_44 = object.key("keywords").start_array();
        for item_45 in var_43 {
             {
                array_44.value().string(item_45.as_str());
            }
        }
        array_44.finish();
    }
    if input.maximum_match_distance != 0 {
        object.key("maximumMatchDistance").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_match_distance).into()));
    }
    if let Some(var_46) = &input.name {
        object.key("name").string(var_46.as_str());
    }
    if let Some(var_47) = &input.regex {
        object.key("regex").string(var_47.as_str());
    }
    if let Some(var_48) = &input.severity_levels {
        let mut array_49 = object.key("severityLevels").start_array();
        for item_50 in var_48 {
             {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_severity_level(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    if let Some(var_52) = &input.tags {
        let mut object_53 = object.key("tags").start_object();
        for (key_54, value_55) in var_52 {
             {
                object_53.key(key_54.as_str()).string(value_55.as_str());
            }
        }
        object_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_findings_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFindingsFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.action {
        object.key("action").string(var_56.as_str());
    }
    if let Some(var_57) = &input.client_token {
        object.key("clientToken").string(var_57.as_str());
    }
    if let Some(var_58) = &input.description {
        object.key("description").string(var_58.as_str());
    }
    if let Some(var_59) = &input.finding_criteria {
        let mut object_60 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.name {
        object.key("name").string(var_61.as_str());
    }
    if input.position != 0 {
        object.key("position").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.position).into()));
    }
    if let Some(var_62) = &input.tags {
        let mut object_63 = object.key("tags").start_object();
        for (key_64, value_65) in var_62 {
             {
                object_63.key(key_64.as_str()).string(value_65.as_str());
            }
        }
        object_63.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_invitations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateInvitationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.account_ids {
        let mut array_67 = object.key("accountIds").start_array();
        for item_68 in var_66 {
             {
                array_67.value().string(item_68.as_str());
            }
        }
        array_67.finish();
    }
    if input.disable_email_notification {
        object.key("disableEmailNotification").boolean(input.disable_email_notification);
    }
    if let Some(var_69) = &input.message {
        object.key("message").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_member_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMemberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_70) = &input.account {
        let mut object_71 = object.key("account").start_object();
        crate::json_ser::serialize_structure_crate_model_account_detail(&mut object_71, var_70)?;
        object_71.finish();
    }
    if let Some(var_72) = &input.tags {
        let mut object_73 = object.key("tags").start_object();
        for (key_74, value_75) in var_72 {
             {
                object_73.key(key_74.as_str()).string(value_75.as_str());
            }
        }
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_sample_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSampleFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.finding_types {
        let mut array_77 = object.key("findingTypes").start_array();
        for item_78 in var_76 {
             {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeclineInvitationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.account_ids {
        let mut array_80 = object.key("accountIds").start_array();
        for item_81 in var_79 {
             {
                array_80.value().string(item_81.as_str());
            }
        }
        array_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteInvitationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_82) = &input.account_ids {
        let mut array_83 = object.key("accountIds").start_array();
        for item_84 in var_82 {
             {
                array_83.value().string(item_84.as_str());
            }
        }
        array_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_buckets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeBucketsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_85) = &input.criteria {
        let mut object_86 = object.key("criteria").start_object();
        for (key_87, value_88) in var_85 {
             {
                let mut object_89 = object_86.key(key_87.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_bucket_criteria_additional_properties(&mut object_89, value_88)?;
                object_89.finish();
            }
        }
        object_86.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_90) = &input.next_token {
        object.key("nextToken").string(var_90.as_str());
    }
    if let Some(var_91) = &input.sort_criteria {
        let mut object_92 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_bucket_sort_criteria(&mut object_92, var_91)?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_macie_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableMacieInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_93) = &input.client_token {
        object.key("clientToken").string(var_93.as_str());
    }
    if let Some(var_94) = &input.finding_publishing_frequency {
        object.key("findingPublishingFrequency").string(var_94.as_str());
    }
    if let Some(var_95) = &input.status {
        object.key("status").string(var_95.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableOrganizationAdminAccountInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_96) = &input.admin_account_id {
        object.key("adminAccountId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.client_token {
        object.key("clientToken").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bucket_statistics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBucketStatisticsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_98) = &input.account_id {
        object.key("accountId").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.finding_ids {
        let mut array_100 = object.key("findingIds").start_array();
        for item_101 in var_99 {
             {
                array_100.value().string(item_101.as_str());
            }
        }
        array_100.finish();
    }
    if let Some(var_102) = &input.sort_criteria {
        let mut object_103 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_103, var_102)?;
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_finding_statistics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetFindingStatisticsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_104) = &input.finding_criteria {
        let mut object_105 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.group_by {
        object.key("groupBy").string(var_106.as_str());
    }
    if input.size != 0 {
        object.key("size").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.size).into()));
    }
    if let Some(var_107) = &input.sort_criteria {
        let mut object_108 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_statistics_sort_criteria(&mut object_108, var_107)?;
        object_108.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_usage_statistics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUsageStatisticsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_109) = &input.filter_by {
        let mut array_110 = object.key("filterBy").start_array();
        for item_111 in var_109 {
             {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_usage_statistics_filter(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_113) = &input.next_token {
        object.key("nextToken").string(var_113.as_str());
    }
    if let Some(var_114) = &input.sort_by {
        let mut object_115 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_usage_statistics_sort_by(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.time_range {
        object.key("timeRange").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_classification_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListClassificationJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.filter_criteria {
        let mut object_118 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_list_jobs_filter_criteria(&mut object_118, var_117)?;
        object_118.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_119) = &input.next_token {
        object.key("nextToken").string(var_119.as_str());
    }
    if let Some(var_120) = &input.sort_criteria {
        let mut object_121 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_list_jobs_sort_criteria(&mut object_121, var_120)?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_data_identifiers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCustomDataIdentifiersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_122) = &input.next_token {
        object.key("nextToken").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_123) = &input.finding_criteria {
        let mut object_124 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_124, var_123)?;
        object_124.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_125) = &input.next_token {
        object.key("nextToken").string(var_125.as_str());
    }
    if let Some(var_126) = &input.sort_criteria {
        let mut object_127 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_127, var_126)?;
        object_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_managed_data_identifiers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListManagedDataIdentifiersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_128) = &input.next_token {
        object.key("nextToken").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_classification_export_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutClassificationExportConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_129) = &input.configuration {
        let mut object_130 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_export_configuration(&mut object_130, var_129)?;
        object_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_findings_publication_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutFindingsPublicationConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.client_token {
        object.key("clientToken").string(var_131.as_str());
    }
    if let Some(var_132) = &input.security_hub_configuration {
        let mut object_133 = object.key("securityHubConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_security_hub_configuration(&mut object_133, var_132)?;
        object_133.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_resources_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchResourcesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_134) = &input.bucket_criteria {
        let mut object_135 = object.key("bucketCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_bucket_criteria(&mut object_135, var_134)?;
        object_135.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_136) = &input.next_token {
        object.key("nextToken").string(var_136.as_str());
    }
    if let Some(var_137) = &input.sort_criteria {
        let mut object_138 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_sort_criteria(&mut object_138, var_137)?;
        object_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.tags {
        let mut object_140 = object.key("tags").start_object();
        for (key_141, value_142) in var_139 {
             {
                object_140.key(key_141.as_str()).string(value_142.as_str());
            }
        }
        object_140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_custom_data_identifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TestCustomDataIdentifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.ignore_words {
        let mut array_144 = object.key("ignoreWords").start_array();
        for item_145 in var_143 {
             {
                array_144.value().string(item_145.as_str());
            }
        }
        array_144.finish();
    }
    if let Some(var_146) = &input.keywords {
        let mut array_147 = object.key("keywords").start_array();
        for item_148 in var_146 {
             {
                array_147.value().string(item_148.as_str());
            }
        }
        array_147.finish();
    }
    if input.maximum_match_distance != 0 {
        object.key("maximumMatchDistance").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_match_distance).into()));
    }
    if let Some(var_149) = &input.regex {
        object.key("regex").string(var_149.as_str());
    }
    if let Some(var_150) = &input.sample_text {
        object.key("sampleText").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_allow_list_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAllowListInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_151) = &input.criteria {
        let mut object_152 = object.key("criteria").start_object();
        crate::json_ser::serialize_structure_crate_model_allow_list_criteria(&mut object_152, var_151)?;
        object_152.finish();
    }
    if let Some(var_153) = &input.description {
        object.key("description").string(var_153.as_str());
    }
    if let Some(var_154) = &input.name {
        object.key("name").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classification_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateClassificationJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_155) = &input.job_status {
        object.key("jobStatus").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFindingsFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.action {
        object.key("action").string(var_156.as_str());
    }
    if let Some(var_157) = &input.client_token {
        object.key("clientToken").string(var_157.as_str());
    }
    if let Some(var_158) = &input.description {
        object.key("description").string(var_158.as_str());
    }
    if let Some(var_159) = &input.finding_criteria {
        let mut object_160 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.name {
        object.key("name").string(var_161.as_str());
    }
    if input.position != 0 {
        object.key("position").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.position).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_macie_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMacieSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_162) = &input.finding_publishing_frequency {
        object.key("findingPublishingFrequency").string(var_162.as_str());
    }
    if let Some(var_163) = &input.status {
        object.key("status").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_member_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMemberSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_164) = &input.status {
        object.key("status").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateOrganizationConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("autoEnable").boolean(input.auto_enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_reveal_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRevealConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_165) = &input.configuration {
        let mut object_166 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_reveal_configuration(&mut object_166, var_165)?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_allow_list_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AllowListCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_167) = &input.regex {
        object.key("regex").string(var_167.as_str());
    }
    if let Some(var_168) = &input.s3_words_list {
        let mut object_169 = object.key("s3WordsList").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_words_list(&mut object_169, var_168)?;
        object_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_job_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3JobDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_170) = &input.bucket_definitions {
        let mut array_171 = object.key("bucketDefinitions").start_array();
        for item_172 in var_170 {
             {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_bucket_definition_for_job(&mut object_173, item_172)?;
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.scoping {
        let mut object_175 = object.key("scoping").start_object();
        crate::json_ser::serialize_structure_crate_model_scoping(&mut object_175, var_174)?;
        object_175.finish();
    }
    if let Some(var_176) = &input.bucket_criteria {
        let mut object_177 = object.key("bucketCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_criteria_for_job(&mut object_177, var_176)?;
        object_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_schedule_frequency(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobScheduleFrequency) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_178) = &input.daily_schedule {
        let mut object_179 = object.key("dailySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_daily_schedule(&mut object_179, var_178)?;
        object_179.finish();
    }
    if let Some(var_180) = &input.monthly_schedule {
        let mut object_181 = object.key("monthlySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_monthly_schedule(&mut object_181, var_180)?;
        object_181.finish();
    }
    if let Some(var_182) = &input.weekly_schedule {
        let mut object_183 = object.key("weeklySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_weekly_schedule(&mut object_183, var_182)?;
        object_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity_level(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SeverityLevel) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("occurrencesThreshold").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.occurrences_threshold).into()));
    }
    if let Some(var_184) = &input.severity {
        object.key("severity").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FindingCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.criterion {
        let mut object_186 = object.key("criterion").start_object();
        for (key_187, value_188) in var_185 {
             {
                let mut object_189 = object_186.key(key_187.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion_additional_properties(&mut object_189, value_188)?;
                object_189.finish();
            }
        }
        object_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_detail(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountDetail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_190) = &input.account_id {
        object.key("accountId").string(var_190.as_str());
    }
    if let Some(var_191) = &input.email {
        object.key("email").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_criteria_additional_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BucketCriteriaAdditionalProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_192) = &input.eq {
        let mut array_193 = object.key("eq").start_array();
        for item_194 in var_192 {
             {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    if input.gt != 0 {
        object.key("gt").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.gt).into()));
    }
    if input.gte != 0 {
        object.key("gte").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.gte).into()));
    }
    if input.lt != 0 {
        object.key("lt").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.lt).into()));
    }
    if input.lte != 0 {
        object.key("lte").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.lte).into()));
    }
    if let Some(var_195) = &input.neq {
        let mut array_196 = object.key("neq").start_array();
        for item_197 in var_195 {
             {
                array_196.value().string(item_197.as_str());
            }
        }
        array_196.finish();
    }
    if let Some(var_198) = &input.prefix {
        object.key("prefix").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BucketSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.attribute_name {
        object.key("attributeName").string(var_199.as_str());
    }
    if let Some(var_200) = &input.order_by {
        object.key("orderBy").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_201) = &input.attribute_name {
        object.key("attributeName").string(var_201.as_str());
    }
    if let Some(var_202) = &input.order_by {
        object.key("orderBy").string(var_202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_statistics_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FindingStatisticsSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_203) = &input.attribute_name {
        object.key("attributeName").string(var_203.as_str());
    }
    if let Some(var_204) = &input.order_by {
        object.key("orderBy").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_statistics_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UsageStatisticsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.comparator {
        object.key("comparator").string(var_205.as_str());
    }
    if let Some(var_206) = &input.key {
        object.key("key").string(var_206.as_str());
    }
    if let Some(var_207) = &input.values {
        let mut array_208 = object.key("values").start_array();
        for item_209 in var_207 {
             {
                array_208.value().string(item_209.as_str());
            }
        }
        array_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_statistics_sort_by(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UsageStatisticsSortBy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_210) = &input.key {
        object.key("key").string(var_210.as_str());
    }
    if let Some(var_211) = &input.order_by {
        object.key("orderBy").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListJobsFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_212) = &input.excludes {
        let mut array_213 = object.key("excludes").start_array();
        for item_214 in var_212 {
             {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_list_jobs_filter_term(&mut object_215, item_214)?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.includes {
        let mut array_217 = object.key("includes").start_array();
        for item_218 in var_216 {
             {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_list_jobs_filter_term(&mut object_219, item_218)?;
                object_219.finish();
            }
        }
        array_217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListJobsSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_220) = &input.attribute_name {
        object.key("attributeName").string(var_220.as_str());
    }
    if let Some(var_221) = &input.order_by {
        object.key("orderBy").string(var_221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_export_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClassificationExportConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_222) = &input.s3_destination {
        let mut object_223 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination(&mut object_223, var_222)?;
        object_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_hub_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecurityHubConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("publishClassificationFindings").boolean(input.publish_classification_findings);
    }
     {
        object.key("publishPolicyFindings").boolean(input.publish_policy_findings);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_bucket_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesBucketCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_224) = &input.excludes {
        let mut object_225 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_criteria_block(&mut object_225, var_224)?;
        object_225.finish();
    }
    if let Some(var_226) = &input.includes {
        let mut object_227 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_criteria_block(&mut object_227, var_226)?;
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_228) = &input.attribute_name {
        object.key("attributeName").string(var_228.as_str());
    }
    if let Some(var_229) = &input.order_by {
        object.key("orderBy").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reveal_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RevealConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_230.as_str());
    }
    if let Some(var_231) = &input.status {
        object.key("status").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_words_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3WordsList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.bucket_name {
        object.key("bucketName").string(var_232.as_str());
    }
    if let Some(var_233) = &input.object_key {
        object.key("objectKey").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_definition_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3BucketDefinitionForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_234) = &input.account_id {
        object.key("accountId").string(var_234.as_str());
    }
    if let Some(var_235) = &input.buckets {
        let mut array_236 = object.key("buckets").start_array();
        for item_237 in var_235 {
             {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scoping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Scoping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_238) = &input.excludes {
        let mut object_239 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_job_scoping_block(&mut object_239, var_238)?;
        object_239.finish();
    }
    if let Some(var_240) = &input.includes {
        let mut object_241 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_job_scoping_block(&mut object_241, var_240)?;
        object_241.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_criteria_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3BucketCriteriaForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_242) = &input.excludes {
        let mut object_243 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_criteria_block_for_job(&mut object_243, var_242)?;
        object_243.finish();
    }
    if let Some(var_244) = &input.includes {
        let mut object_245 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_criteria_block_for_job(&mut object_245, var_244)?;
        object_245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_daily_schedule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DailySchedule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_monthly_schedule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonthlySchedule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.day_of_month != 0 {
        object.key("dayOfMonth").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.day_of_month).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_weekly_schedule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WeeklySchedule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_246) = &input.day_of_week {
        object.key("dayOfWeek").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criterion_additional_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CriterionAdditionalProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_247) = &input.eq {
        let mut array_248 = object.key("eq").start_array();
        for item_249 in var_247 {
             {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    if let Some(var_250) = &input.eq_exact_match {
        let mut array_251 = object.key("eqExactMatch").start_array();
        for item_252 in var_250 {
             {
                array_251.value().string(item_252.as_str());
            }
        }
        array_251.finish();
    }
    if input.gt != 0 {
        object.key("gt").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.gt).into()));
    }
    if input.gte != 0 {
        object.key("gte").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.gte).into()));
    }
    if input.lt != 0 {
        object.key("lt").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.lt).into()));
    }
    if input.lte != 0 {
        object.key("lte").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.lte).into()));
    }
    if let Some(var_253) = &input.neq {
        let mut array_254 = object.key("neq").start_array();
        for item_255 in var_253 {
             {
                array_254.value().string(item_255.as_str());
            }
        }
        array_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_filter_term(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ListJobsFilterTerm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_256) = &input.comparator {
        object.key("comparator").string(var_256.as_str());
    }
    if let Some(var_257) = &input.key {
        object.key("key").string(var_257.as_str());
    }
    if let Some(var_258) = &input.values {
        let mut array_259 = object.key("values").start_array();
        for item_260 in var_258 {
             {
                array_259.value().string(item_260.as_str());
            }
        }
        array_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Destination) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_261) = &input.bucket_name {
        object.key("bucketName").string(var_261.as_str());
    }
    if let Some(var_262) = &input.key_prefix {
        object.key("keyPrefix").string(var_262.as_str());
    }
    if let Some(var_263) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_criteria_block(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesCriteriaBlock) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_264) = &input.and {
        let mut array_265 = object.key("and").start_array();
        for item_266 in var_264 {
             {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_resources_criteria(&mut object_267, item_266)?;
                object_267.finish();
            }
        }
        array_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_scoping_block(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobScopingBlock) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_268) = &input.and {
        let mut array_269 = object.key("and").start_array();
        for item_270 in var_268 {
             {
                let mut object_271 = array_269.value().start_object();
                crate::json_ser::serialize_structure_crate_model_job_scope_term(&mut object_271, item_270)?;
                object_271.finish();
            }
        }
        array_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criteria_block_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CriteriaBlockForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_272) = &input.and {
        let mut array_273 = object.key("and").start_array();
        for item_274 in var_272 {
             {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_criteria_for_job(&mut object_275, item_274)?;
                object_275.finish();
            }
        }
        array_273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_276) = &input.simple_criterion {
        let mut object_277 = object.key("simpleCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_simple_criterion(&mut object_277, var_276)?;
        object_277.finish();
    }
    if let Some(var_278) = &input.tag_criterion {
        let mut object_279 = object.key("tagCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_tag_criterion(&mut object_279, var_278)?;
        object_279.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_scope_term(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobScopeTerm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_280) = &input.simple_scope_term {
        let mut object_281 = object.key("simpleScopeTerm").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_scope_term(&mut object_281, var_280)?;
        object_281.finish();
    }
    if let Some(var_282) = &input.tag_scope_term {
        let mut object_283 = object.key("tagScopeTerm").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_scope_term(&mut object_283, var_282)?;
        object_283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criteria_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CriteriaForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_284) = &input.simple_criterion {
        let mut object_285 = object.key("simpleCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_criterion_for_job(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.tag_criterion {
        let mut object_287 = object.key("tagCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_criterion_for_job(&mut object_287, var_286)?;
        object_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_simple_criterion(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesSimpleCriterion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_288) = &input.comparator {
        object.key("comparator").string(var_288.as_str());
    }
    if let Some(var_289) = &input.key {
        object.key("key").string(var_289.as_str());
    }
    if let Some(var_290) = &input.values {
        let mut array_291 = object.key("values").start_array();
        for item_292 in var_290 {
             {
                array_291.value().string(item_292.as_str());
            }
        }
        array_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_tag_criterion(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesTagCriterion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_293) = &input.comparator {
        object.key("comparator").string(var_293.as_str());
    }
    if let Some(var_294) = &input.tag_values {
        let mut array_295 = object.key("tagValues").start_array();
        for item_296 in var_294 {
             {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_resources_tag_criterion_pair(&mut object_297, item_296)?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_scope_term(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SimpleScopeTerm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_298) = &input.comparator {
        object.key("comparator").string(var_298.as_str());
    }
    if let Some(var_299) = &input.key {
        object.key("key").string(var_299.as_str());
    }
    if let Some(var_300) = &input.values {
        let mut array_301 = object.key("values").start_array();
        for item_302 in var_300 {
             {
                array_301.value().string(item_302.as_str());
            }
        }
        array_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_scope_term(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagScopeTerm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_303) = &input.comparator {
        object.key("comparator").string(var_303.as_str());
    }
    if let Some(var_304) = &input.key {
        object.key("key").string(var_304.as_str());
    }
    if let Some(var_305) = &input.tag_values {
        let mut array_306 = object.key("tagValues").start_array();
        for item_307 in var_305 {
             {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_value_pair(&mut object_308, item_307)?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.target {
        object.key("target").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_criterion_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SimpleCriterionForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_310) = &input.comparator {
        object.key("comparator").string(var_310.as_str());
    }
    if let Some(var_311) = &input.key {
        object.key("key").string(var_311.as_str());
    }
    if let Some(var_312) = &input.values {
        let mut array_313 = object.key("values").start_array();
        for item_314 in var_312 {
             {
                array_313.value().string(item_314.as_str());
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_criterion_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagCriterionForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_315) = &input.comparator {
        object.key("comparator").string(var_315.as_str());
    }
    if let Some(var_316) = &input.tag_values {
        let mut array_317 = object.key("tagValues").start_array();
        for item_318 in var_316 {
             {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_criterion_pair_for_job(&mut object_319, item_318)?;
                object_319.finish();
            }
        }
        array_317.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_tag_criterion_pair(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchResourcesTagCriterionPair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_320) = &input.key {
        object.key("key").string(var_320.as_str());
    }
    if let Some(var_321) = &input.value {
        object.key("value").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_value_pair(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagValuePair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_322) = &input.key {
        object.key("key").string(var_322.as_str());
    }
    if let Some(var_323) = &input.value {
        object.key("value").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_criterion_pair_for_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagCriterionPairForJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_324) = &input.key {
        object.key("key").string(var_324.as_str());
    }
    if let Some(var_325) = &input.value {
        object.key("value").string(var_325.as_str());
    }
    Ok(())
}

