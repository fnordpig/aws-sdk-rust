// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]pub fn serialize_structure_crate_model_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("Key");
    if let Some(var_2) = &input.key {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("Value");
    if let Some(var_4) = &input.value {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_serverless_v2_scaling_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ServerlessV2ScalingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_5 = writer.prefix("MinCapacity");
    if let Some(var_6) = &input.min_capacity {
        scope_5.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_6).into()));
    }
    #[allow(unused_mut)]let mut scope_7 = writer.prefix("MaxCapacity");
    if let Some(var_8) = &input.max_capacity {
        scope_7.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_8).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_filter(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_9 = writer.prefix("Name");
    if let Some(var_10) = &input.name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]let mut scope_11 = writer.prefix("Values");
    if let Some(var_12) = &input.values {
        let mut list_14 = scope_11.start_list(false, Some("Value"));
        for item_13 in var_12 {
            #[allow(unused_mut)]let mut entry_15 = list_14.entry();
            entry_15.string(item_13);
        }
        list_14.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_cloudwatch_logs_export_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CloudwatchLogsExportConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_16 = writer.prefix("EnableLogTypes");
    if let Some(var_17) = &input.enable_log_types {
        let mut list_19 = scope_16.start_list(false, None);
        for item_18 in var_17 {
            #[allow(unused_mut)]let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]let mut scope_21 = writer.prefix("DisableLogTypes");
    if let Some(var_22) = &input.disable_log_types {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]let mut entry_25 = list_24.entry();
            entry_25.string(item_23);
        }
        list_24.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_parameter(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Parameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_26 = writer.prefix("ParameterName");
    if let Some(var_27) = &input.parameter_name {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]let mut scope_28 = writer.prefix("ParameterValue");
    if let Some(var_29) = &input.parameter_value {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]let mut scope_30 = writer.prefix("Description");
    if let Some(var_31) = &input.description {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]let mut scope_32 = writer.prefix("Source");
    if let Some(var_33) = &input.source {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]let mut scope_34 = writer.prefix("ApplyType");
    if let Some(var_35) = &input.apply_type {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]let mut scope_36 = writer.prefix("DataType");
    if let Some(var_37) = &input.data_type {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]let mut scope_38 = writer.prefix("AllowedValues");
    if let Some(var_39) = &input.allowed_values {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]let mut scope_40 = writer.prefix("IsModifiable");
    if input.is_modifiable {
        scope_40.boolean(input.is_modifiable);
    }
    #[allow(unused_mut)]let mut scope_41 = writer.prefix("MinimumEngineVersion");
    if let Some(var_42) = &input.minimum_engine_version {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]let mut scope_43 = writer.prefix("ApplyMethod");
    if let Some(var_44) = &input.apply_method {
        scope_43.string(var_44.as_str());
    }
    Ok(())
}

