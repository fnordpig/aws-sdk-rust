// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_tags_to_resource(input: &crate::input::AddTagsToResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2015-02-02");
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("ResourceName");
    if let Some(var_2) = &input.resource_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("Tags");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(false, Some("Tag"));
        for item_5 in var_4 {
            #[allow(unused_mut)]let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cache_security_group_ingress(input: &crate::input::AuthorizeCacheSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeCacheSecurityGroupIngress", "2015-02-02");
    #[allow(unused_mut)]let mut scope_8 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_9) = &input.cache_security_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]let mut scope_10 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_11) = &input.ec2_security_group_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]let mut scope_12 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_13) = &input.ec2_security_group_owner_id {
        scope_12.string(var_13);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_apply_update_action(input: &crate::input::BatchApplyUpdateActionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BatchApplyUpdateAction", "2015-02-02");
    #[allow(unused_mut)]let mut scope_14 = writer.prefix("ReplicationGroupIds");
    if let Some(var_15) = &input.replication_group_ids {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]let mut scope_19 = writer.prefix("CacheClusterIds");
    if let Some(var_20) = &input.cache_cluster_ids {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]let mut scope_24 = writer.prefix("ServiceUpdateName");
    if let Some(var_25) = &input.service_update_name {
        scope_24.string(var_25);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_stop_update_action(input: &crate::input::BatchStopUpdateActionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BatchStopUpdateAction", "2015-02-02");
    #[allow(unused_mut)]let mut scope_26 = writer.prefix("ReplicationGroupIds");
    if let Some(var_27) = &input.replication_group_ids {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]let mut scope_31 = writer.prefix("CacheClusterIds");
    if let Some(var_32) = &input.cache_cluster_ids {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]let mut entry_35 = list_34.entry();
            entry_35.string(item_33);
        }
        list_34.finish();
    }
    #[allow(unused_mut)]let mut scope_36 = writer.prefix("ServiceUpdateName");
    if let Some(var_37) = &input.service_update_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_migration(input: &crate::input::CompleteMigrationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CompleteMigration", "2015-02-02");
    #[allow(unused_mut)]let mut scope_38 = writer.prefix("ReplicationGroupId");
    if let Some(var_39) = &input.replication_group_id {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]let mut scope_40 = writer.prefix("Force");
    if input.force {
        scope_40.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(input: &crate::input::CopySnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2015-02-02");
    #[allow(unused_mut)]let mut scope_41 = writer.prefix("SourceSnapshotName");
    if let Some(var_42) = &input.source_snapshot_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]let mut scope_43 = writer.prefix("TargetSnapshotName");
    if let Some(var_44) = &input.target_snapshot_name {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]let mut scope_45 = writer.prefix("TargetBucket");
    if let Some(var_46) = &input.target_bucket {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]let mut scope_47 = writer.prefix("KmsKeyId");
    if let Some(var_48) = &input.kms_key_id {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]let mut scope_49 = writer.prefix("Tags");
    if let Some(var_50) = &input.tags {
        let mut list_52 = scope_49.start_list(false, Some("Tag"));
        for item_51 in var_50 {
            #[allow(unused_mut)]let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_53, item_51)?;
        }
        list_52.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_cluster(input: &crate::input::CreateCacheClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheCluster", "2015-02-02");
    #[allow(unused_mut)]let mut scope_54 = writer.prefix("CacheClusterId");
    if let Some(var_55) = &input.cache_cluster_id {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]let mut scope_56 = writer.prefix("ReplicationGroupId");
    if let Some(var_57) = &input.replication_group_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]let mut scope_58 = writer.prefix("AZMode");
    if let Some(var_59) = &input.az_mode {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]let mut scope_60 = writer.prefix("PreferredAvailabilityZone");
    if let Some(var_61) = &input.preferred_availability_zone {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]let mut scope_62 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_63) = &input.preferred_availability_zones {
        let mut list_65 = scope_62.start_list(false, Some("PreferredAvailabilityZone"));
        for item_64 in var_63 {
            #[allow(unused_mut)]let mut entry_66 = list_65.entry();
            entry_66.string(item_64);
        }
        list_65.finish();
    }
    #[allow(unused_mut)]let mut scope_67 = writer.prefix("NumCacheNodes");
    if let Some(var_68) = &input.num_cache_nodes {
        scope_67.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_68).into()));
    }
    #[allow(unused_mut)]let mut scope_69 = writer.prefix("CacheNodeType");
    if let Some(var_70) = &input.cache_node_type {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]let mut scope_71 = writer.prefix("Engine");
    if let Some(var_72) = &input.engine {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]let mut scope_73 = writer.prefix("EngineVersion");
    if let Some(var_74) = &input.engine_version {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]let mut scope_75 = writer.prefix("CacheParameterGroupName");
    if let Some(var_76) = &input.cache_parameter_group_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]let mut scope_77 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_78) = &input.cache_subnet_group_name {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]let mut scope_79 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_80) = &input.cache_security_group_names {
        let mut list_82 = scope_79.start_list(false, Some("CacheSecurityGroupName"));
        for item_81 in var_80 {
            #[allow(unused_mut)]let mut entry_83 = list_82.entry();
            entry_83.string(item_81);
        }
        list_82.finish();
    }
    #[allow(unused_mut)]let mut scope_84 = writer.prefix("SecurityGroupIds");
    if let Some(var_85) = &input.security_group_ids {
        let mut list_87 = scope_84.start_list(false, Some("SecurityGroupId"));
        for item_86 in var_85 {
            #[allow(unused_mut)]let mut entry_88 = list_87.entry();
            entry_88.string(item_86);
        }
        list_87.finish();
    }
    #[allow(unused_mut)]let mut scope_89 = writer.prefix("Tags");
    if let Some(var_90) = &input.tags {
        let mut list_92 = scope_89.start_list(false, Some("Tag"));
        for item_91 in var_90 {
            #[allow(unused_mut)]let mut entry_93 = list_92.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_93, item_91)?;
        }
        list_92.finish();
    }
    #[allow(unused_mut)]let mut scope_94 = writer.prefix("SnapshotArns");
    if let Some(var_95) = &input.snapshot_arns {
        let mut list_97 = scope_94.start_list(false, Some("SnapshotArn"));
        for item_96 in var_95 {
            #[allow(unused_mut)]let mut entry_98 = list_97.entry();
            entry_98.string(item_96);
        }
        list_97.finish();
    }
    #[allow(unused_mut)]let mut scope_99 = writer.prefix("SnapshotName");
    if let Some(var_100) = &input.snapshot_name {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]let mut scope_103 = writer.prefix("Port");
    if let Some(var_104) = &input.port {
        scope_103.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_104).into()));
    }
    #[allow(unused_mut)]let mut scope_105 = writer.prefix("NotificationTopicArn");
    if let Some(var_106) = &input.notification_topic_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]let mut scope_107 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_108) = &input.auto_minor_version_upgrade {
        scope_107.boolean(*var_108);
    }
    #[allow(unused_mut)]let mut scope_109 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_110) = &input.snapshot_retention_limit {
        scope_109.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_110).into()));
    }
    #[allow(unused_mut)]let mut scope_111 = writer.prefix("SnapshotWindow");
    if let Some(var_112) = &input.snapshot_window {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]let mut scope_113 = writer.prefix("AuthToken");
    if let Some(var_114) = &input.auth_token {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]let mut scope_115 = writer.prefix("OutpostMode");
    if let Some(var_116) = &input.outpost_mode {
        scope_115.string(var_116.as_str());
    }
    #[allow(unused_mut)]let mut scope_117 = writer.prefix("PreferredOutpostArn");
    if let Some(var_118) = &input.preferred_outpost_arn {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]let mut scope_119 = writer.prefix("PreferredOutpostArns");
    if let Some(var_120) = &input.preferred_outpost_arns {
        let mut list_122 = scope_119.start_list(false, Some("PreferredOutpostArn"));
        for item_121 in var_120 {
            #[allow(unused_mut)]let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]let mut scope_124 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_125) = &input.log_delivery_configurations {
        let mut list_127 = scope_124.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_126 in var_125 {
            #[allow(unused_mut)]let mut entry_128 = list_127.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(entry_128, item_126)?;
        }
        list_127.finish();
    }
    #[allow(unused_mut)]let mut scope_129 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_130) = &input.transit_encryption_enabled {
        scope_129.boolean(*var_130);
    }
    #[allow(unused_mut)]let mut scope_131 = writer.prefix("NetworkType");
    if let Some(var_132) = &input.network_type {
        scope_131.string(var_132.as_str());
    }
    #[allow(unused_mut)]let mut scope_133 = writer.prefix("IpDiscovery");
    if let Some(var_134) = &input.ip_discovery {
        scope_133.string(var_134.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_parameter_group(input: &crate::input::CreateCacheParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_135 = writer.prefix("CacheParameterGroupName");
    if let Some(var_136) = &input.cache_parameter_group_name {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]let mut scope_137 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_138) = &input.cache_parameter_group_family {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]let mut scope_139 = writer.prefix("Description");
    if let Some(var_140) = &input.description {
        scope_139.string(var_140);
    }
    #[allow(unused_mut)]let mut scope_141 = writer.prefix("Tags");
    if let Some(var_142) = &input.tags {
        let mut list_144 = scope_141.start_list(false, Some("Tag"));
        for item_143 in var_142 {
            #[allow(unused_mut)]let mut entry_145 = list_144.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_145, item_143)?;
        }
        list_144.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_security_group(input: &crate::input::CreateCacheSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_146 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_147) = &input.cache_security_group_name {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]let mut scope_148 = writer.prefix("Description");
    if let Some(var_149) = &input.description {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]let mut scope_150 = writer.prefix("Tags");
    if let Some(var_151) = &input.tags {
        let mut list_153 = scope_150.start_list(false, Some("Tag"));
        for item_152 in var_151 {
            #[allow(unused_mut)]let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_154, item_152)?;
        }
        list_153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_subnet_group(input: &crate::input::CreateCacheSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_155 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_156) = &input.cache_subnet_group_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]let mut scope_157 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_158) = &input.cache_subnet_group_description {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]let mut scope_159 = writer.prefix("SubnetIds");
    if let Some(var_160) = &input.subnet_ids {
        let mut list_162 = scope_159.start_list(false, Some("SubnetIdentifier"));
        for item_161 in var_160 {
            #[allow(unused_mut)]let mut entry_163 = list_162.entry();
            entry_163.string(item_161);
        }
        list_162.finish();
    }
    #[allow(unused_mut)]let mut scope_164 = writer.prefix("Tags");
    if let Some(var_165) = &input.tags {
        let mut list_167 = scope_164.start_list(false, Some("Tag"));
        for item_166 in var_165 {
            #[allow(unused_mut)]let mut entry_168 = list_167.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_168, item_166)?;
        }
        list_167.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_replication_group(input: &crate::input::CreateGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_169 = writer.prefix("GlobalReplicationGroupIdSuffix");
    if let Some(var_170) = &input.global_replication_group_id_suffix {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]let mut scope_171 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_172) = &input.global_replication_group_description {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]let mut scope_173 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_174) = &input.primary_replication_group_id {
        scope_173.string(var_174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replication_group(input: &crate::input::CreateReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_175 = writer.prefix("ReplicationGroupId");
    if let Some(var_176) = &input.replication_group_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]let mut scope_177 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_178) = &input.replication_group_description {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]let mut scope_179 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_180) = &input.global_replication_group_id {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]let mut scope_181 = writer.prefix("PrimaryClusterId");
    if let Some(var_182) = &input.primary_cluster_id {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]let mut scope_183 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_184) = &input.automatic_failover_enabled {
        scope_183.boolean(*var_184);
    }
    #[allow(unused_mut)]let mut scope_185 = writer.prefix("MultiAZEnabled");
    if let Some(var_186) = &input.multi_az_enabled {
        scope_185.boolean(*var_186);
    }
    #[allow(unused_mut)]let mut scope_187 = writer.prefix("NumCacheClusters");
    if let Some(var_188) = &input.num_cache_clusters {
        scope_187.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_188).into()));
    }
    #[allow(unused_mut)]let mut scope_189 = writer.prefix("PreferredCacheClusterAZs");
    if let Some(var_190) = &input.preferred_cache_cluster_a_zs {
        let mut list_192 = scope_189.start_list(false, Some("AvailabilityZone"));
        for item_191 in var_190 {
            #[allow(unused_mut)]let mut entry_193 = list_192.entry();
            entry_193.string(item_191);
        }
        list_192.finish();
    }
    #[allow(unused_mut)]let mut scope_194 = writer.prefix("NumNodeGroups");
    if let Some(var_195) = &input.num_node_groups {
        scope_194.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_195).into()));
    }
    #[allow(unused_mut)]let mut scope_196 = writer.prefix("ReplicasPerNodeGroup");
    if let Some(var_197) = &input.replicas_per_node_group {
        scope_196.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_197).into()));
    }
    #[allow(unused_mut)]let mut scope_198 = writer.prefix("NodeGroupConfiguration");
    if let Some(var_199) = &input.node_group_configuration {
        let mut list_201 = scope_198.start_list(false, Some("NodeGroupConfiguration"));
        for item_200 in var_199 {
            #[allow(unused_mut)]let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_node_group_configuration(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]let mut scope_203 = writer.prefix("CacheNodeType");
    if let Some(var_204) = &input.cache_node_type {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]let mut scope_205 = writer.prefix("Engine");
    if let Some(var_206) = &input.engine {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]let mut scope_207 = writer.prefix("EngineVersion");
    if let Some(var_208) = &input.engine_version {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]let mut scope_209 = writer.prefix("CacheParameterGroupName");
    if let Some(var_210) = &input.cache_parameter_group_name {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]let mut scope_211 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_212) = &input.cache_subnet_group_name {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]let mut scope_213 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_214) = &input.cache_security_group_names {
        let mut list_216 = scope_213.start_list(false, Some("CacheSecurityGroupName"));
        for item_215 in var_214 {
            #[allow(unused_mut)]let mut entry_217 = list_216.entry();
            entry_217.string(item_215);
        }
        list_216.finish();
    }
    #[allow(unused_mut)]let mut scope_218 = writer.prefix("SecurityGroupIds");
    if let Some(var_219) = &input.security_group_ids {
        let mut list_221 = scope_218.start_list(false, Some("SecurityGroupId"));
        for item_220 in var_219 {
            #[allow(unused_mut)]let mut entry_222 = list_221.entry();
            entry_222.string(item_220);
        }
        list_221.finish();
    }
    #[allow(unused_mut)]let mut scope_223 = writer.prefix("Tags");
    if let Some(var_224) = &input.tags {
        let mut list_226 = scope_223.start_list(false, Some("Tag"));
        for item_225 in var_224 {
            #[allow(unused_mut)]let mut entry_227 = list_226.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_227, item_225)?;
        }
        list_226.finish();
    }
    #[allow(unused_mut)]let mut scope_228 = writer.prefix("SnapshotArns");
    if let Some(var_229) = &input.snapshot_arns {
        let mut list_231 = scope_228.start_list(false, Some("SnapshotArn"));
        for item_230 in var_229 {
            #[allow(unused_mut)]let mut entry_232 = list_231.entry();
            entry_232.string(item_230);
        }
        list_231.finish();
    }
    #[allow(unused_mut)]let mut scope_233 = writer.prefix("SnapshotName");
    if let Some(var_234) = &input.snapshot_name {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]let mut scope_235 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_236) = &input.preferred_maintenance_window {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]let mut scope_237 = writer.prefix("Port");
    if let Some(var_238) = &input.port {
        scope_237.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_238).into()));
    }
    #[allow(unused_mut)]let mut scope_239 = writer.prefix("NotificationTopicArn");
    if let Some(var_240) = &input.notification_topic_arn {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]let mut scope_241 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_242) = &input.auto_minor_version_upgrade {
        scope_241.boolean(*var_242);
    }
    #[allow(unused_mut)]let mut scope_243 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_244) = &input.snapshot_retention_limit {
        scope_243.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_244).into()));
    }
    #[allow(unused_mut)]let mut scope_245 = writer.prefix("SnapshotWindow");
    if let Some(var_246) = &input.snapshot_window {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]let mut scope_247 = writer.prefix("AuthToken");
    if let Some(var_248) = &input.auth_token {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]let mut scope_249 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_250) = &input.transit_encryption_enabled {
        scope_249.boolean(*var_250);
    }
    #[allow(unused_mut)]let mut scope_251 = writer.prefix("AtRestEncryptionEnabled");
    if let Some(var_252) = &input.at_rest_encryption_enabled {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]let mut scope_253 = writer.prefix("KmsKeyId");
    if let Some(var_254) = &input.kms_key_id {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]let mut scope_255 = writer.prefix("UserGroupIds");
    if let Some(var_256) = &input.user_group_ids {
        let mut list_258 = scope_255.start_list(false, None);
        for item_257 in var_256 {
            #[allow(unused_mut)]let mut entry_259 = list_258.entry();
            entry_259.string(item_257);
        }
        list_258.finish();
    }
    #[allow(unused_mut)]let mut scope_260 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_261) = &input.log_delivery_configurations {
        let mut list_263 = scope_260.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_262 in var_261 {
            #[allow(unused_mut)]let mut entry_264 = list_263.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(entry_264, item_262)?;
        }
        list_263.finish();
    }
    #[allow(unused_mut)]let mut scope_265 = writer.prefix("DataTieringEnabled");
    if let Some(var_266) = &input.data_tiering_enabled {
        scope_265.boolean(*var_266);
    }
    #[allow(unused_mut)]let mut scope_267 = writer.prefix("NetworkType");
    if let Some(var_268) = &input.network_type {
        scope_267.string(var_268.as_str());
    }
    #[allow(unused_mut)]let mut scope_269 = writer.prefix("IpDiscovery");
    if let Some(var_270) = &input.ip_discovery {
        scope_269.string(var_270.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(input: &crate::input::CreateSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2015-02-02");
    #[allow(unused_mut)]let mut scope_271 = writer.prefix("ReplicationGroupId");
    if let Some(var_272) = &input.replication_group_id {
        scope_271.string(var_272);
    }
    #[allow(unused_mut)]let mut scope_273 = writer.prefix("CacheClusterId");
    if let Some(var_274) = &input.cache_cluster_id {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]let mut scope_275 = writer.prefix("SnapshotName");
    if let Some(var_276) = &input.snapshot_name {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]let mut scope_277 = writer.prefix("KmsKeyId");
    if let Some(var_278) = &input.kms_key_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]let mut scope_279 = writer.prefix("Tags");
    if let Some(var_280) = &input.tags {
        let mut list_282 = scope_279.start_list(false, Some("Tag"));
        for item_281 in var_280 {
            #[allow(unused_mut)]let mut entry_283 = list_282.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_283, item_281)?;
        }
        list_282.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user(input: &crate::input::CreateUserInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUser", "2015-02-02");
    #[allow(unused_mut)]let mut scope_284 = writer.prefix("UserId");
    if let Some(var_285) = &input.user_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]let mut scope_286 = writer.prefix("UserName");
    if let Some(var_287) = &input.user_name {
        scope_286.string(var_287);
    }
    #[allow(unused_mut)]let mut scope_288 = writer.prefix("Engine");
    if let Some(var_289) = &input.engine {
        scope_288.string(var_289);
    }
    #[allow(unused_mut)]let mut scope_290 = writer.prefix("Passwords");
    if let Some(var_291) = &input.passwords {
        let mut list_293 = scope_290.start_list(false, None);
        for item_292 in var_291 {
            #[allow(unused_mut)]let mut entry_294 = list_293.entry();
            entry_294.string(item_292);
        }
        list_293.finish();
    }
    #[allow(unused_mut)]let mut scope_295 = writer.prefix("AccessString");
    if let Some(var_296) = &input.access_string {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]let mut scope_297 = writer.prefix("NoPasswordRequired");
    if let Some(var_298) = &input.no_password_required {
        scope_297.boolean(*var_298);
    }
    #[allow(unused_mut)]let mut scope_299 = writer.prefix("Tags");
    if let Some(var_300) = &input.tags {
        let mut list_302 = scope_299.start_list(false, Some("Tag"));
        for item_301 in var_300 {
            #[allow(unused_mut)]let mut entry_303 = list_302.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_303, item_301)?;
        }
        list_302.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user_group(input: &crate::input::CreateUserGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUserGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_304 = writer.prefix("UserGroupId");
    if let Some(var_305) = &input.user_group_id {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]let mut scope_306 = writer.prefix("Engine");
    if let Some(var_307) = &input.engine {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]let mut scope_308 = writer.prefix("UserIds");
    if let Some(var_309) = &input.user_ids {
        let mut list_311 = scope_308.start_list(false, None);
        for item_310 in var_309 {
            #[allow(unused_mut)]let mut entry_312 = list_311.entry();
            entry_312.string(item_310);
        }
        list_311.finish();
    }
    #[allow(unused_mut)]let mut scope_313 = writer.prefix("Tags");
    if let Some(var_314) = &input.tags {
        let mut list_316 = scope_313.start_list(false, Some("Tag"));
        for item_315 in var_314 {
            #[allow(unused_mut)]let mut entry_317 = list_316.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_317, item_315)?;
        }
        list_316.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_node_groups_in_global_replication_group(input: &crate::input::DecreaseNodeGroupsInGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DecreaseNodeGroupsInGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_318 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_319) = &input.global_replication_group_id {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]let mut scope_320 = writer.prefix("NodeGroupCount");
     {
        scope_320.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.node_group_count).into()));
    }
    #[allow(unused_mut)]let mut scope_321 = writer.prefix("GlobalNodeGroupsToRemove");
    if let Some(var_322) = &input.global_node_groups_to_remove {
        let mut list_324 = scope_321.start_list(false, Some("GlobalNodeGroupId"));
        for item_323 in var_322 {
            #[allow(unused_mut)]let mut entry_325 = list_324.entry();
            entry_325.string(item_323);
        }
        list_324.finish();
    }
    #[allow(unused_mut)]let mut scope_326 = writer.prefix("GlobalNodeGroupsToRetain");
    if let Some(var_327) = &input.global_node_groups_to_retain {
        let mut list_329 = scope_326.start_list(false, Some("GlobalNodeGroupId"));
        for item_328 in var_327 {
            #[allow(unused_mut)]let mut entry_330 = list_329.entry();
            entry_330.string(item_328);
        }
        list_329.finish();
    }
    #[allow(unused_mut)]let mut scope_331 = writer.prefix("ApplyImmediately");
     {
        scope_331.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_replica_count(input: &crate::input::DecreaseReplicaCountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DecreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]let mut scope_332 = writer.prefix("ReplicationGroupId");
    if let Some(var_333) = &input.replication_group_id {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]let mut scope_334 = writer.prefix("NewReplicaCount");
    if let Some(var_335) = &input.new_replica_count {
        scope_334.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_335).into()));
    }
    #[allow(unused_mut)]let mut scope_336 = writer.prefix("ReplicaConfiguration");
    if let Some(var_337) = &input.replica_configuration {
        let mut list_339 = scope_336.start_list(false, Some("ConfigureShard"));
        for item_338 in var_337 {
            #[allow(unused_mut)]let mut entry_340 = list_339.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_340, item_338)?;
        }
        list_339.finish();
    }
    #[allow(unused_mut)]let mut scope_341 = writer.prefix("ReplicasToRemove");
    if let Some(var_342) = &input.replicas_to_remove {
        let mut list_344 = scope_341.start_list(false, None);
        for item_343 in var_342 {
            #[allow(unused_mut)]let mut entry_345 = list_344.entry();
            entry_345.string(item_343);
        }
        list_344.finish();
    }
    #[allow(unused_mut)]let mut scope_346 = writer.prefix("ApplyImmediately");
     {
        scope_346.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_cluster(input: &crate::input::DeleteCacheClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheCluster", "2015-02-02");
    #[allow(unused_mut)]let mut scope_347 = writer.prefix("CacheClusterId");
    if let Some(var_348) = &input.cache_cluster_id {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]let mut scope_349 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_350) = &input.final_snapshot_identifier {
        scope_349.string(var_350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_parameter_group(input: &crate::input::DeleteCacheParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_351 = writer.prefix("CacheParameterGroupName");
    if let Some(var_352) = &input.cache_parameter_group_name {
        scope_351.string(var_352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_security_group(input: &crate::input::DeleteCacheSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_353 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_354) = &input.cache_security_group_name {
        scope_353.string(var_354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_subnet_group(input: &crate::input::DeleteCacheSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_355 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_356) = &input.cache_subnet_group_name {
        scope_355.string(var_356);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_replication_group(input: &crate::input::DeleteGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_357 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_358) = &input.global_replication_group_id {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]let mut scope_359 = writer.prefix("RetainPrimaryReplicationGroup");
     {
        scope_359.boolean(input.retain_primary_replication_group);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_replication_group(input: &crate::input::DeleteReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_360 = writer.prefix("ReplicationGroupId");
    if let Some(var_361) = &input.replication_group_id {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]let mut scope_362 = writer.prefix("RetainPrimaryCluster");
    if let Some(var_363) = &input.retain_primary_cluster {
        scope_362.boolean(*var_363);
    }
    #[allow(unused_mut)]let mut scope_364 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_365) = &input.final_snapshot_identifier {
        scope_364.string(var_365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(input: &crate::input::DeleteSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2015-02-02");
    #[allow(unused_mut)]let mut scope_366 = writer.prefix("SnapshotName");
    if let Some(var_367) = &input.snapshot_name {
        scope_366.string(var_367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user(input: &crate::input::DeleteUserInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUser", "2015-02-02");
    #[allow(unused_mut)]let mut scope_368 = writer.prefix("UserId");
    if let Some(var_369) = &input.user_id {
        scope_368.string(var_369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user_group(input: &crate::input::DeleteUserGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUserGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_370 = writer.prefix("UserGroupId");
    if let Some(var_371) = &input.user_group_id {
        scope_370.string(var_371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_clusters(input: &crate::input::DescribeCacheClustersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheClusters", "2015-02-02");
    #[allow(unused_mut)]let mut scope_372 = writer.prefix("CacheClusterId");
    if let Some(var_373) = &input.cache_cluster_id {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]let mut scope_374 = writer.prefix("MaxRecords");
    if let Some(var_375) = &input.max_records {
        scope_374.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_375).into()));
    }
    #[allow(unused_mut)]let mut scope_376 = writer.prefix("Marker");
    if let Some(var_377) = &input.marker {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]let mut scope_378 = writer.prefix("ShowCacheNodeInfo");
    if let Some(var_379) = &input.show_cache_node_info {
        scope_378.boolean(*var_379);
    }
    #[allow(unused_mut)]let mut scope_380 = writer.prefix("ShowCacheClustersNotInReplicationGroups");
    if let Some(var_381) = &input.show_cache_clusters_not_in_replication_groups {
        scope_380.boolean(*var_381);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_engine_versions(input: &crate::input::DescribeCacheEngineVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheEngineVersions", "2015-02-02");
    #[allow(unused_mut)]let mut scope_382 = writer.prefix("Engine");
    if let Some(var_383) = &input.engine {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]let mut scope_384 = writer.prefix("EngineVersion");
    if let Some(var_385) = &input.engine_version {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]let mut scope_386 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_387) = &input.cache_parameter_group_family {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]let mut scope_388 = writer.prefix("MaxRecords");
    if let Some(var_389) = &input.max_records {
        scope_388.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_389).into()));
    }
    #[allow(unused_mut)]let mut scope_390 = writer.prefix("Marker");
    if let Some(var_391) = &input.marker {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]let mut scope_392 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_392.boolean(input.default_only);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameter_groups(input: &crate::input::DescribeCacheParameterGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameterGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_393 = writer.prefix("CacheParameterGroupName");
    if let Some(var_394) = &input.cache_parameter_group_name {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]let mut scope_395 = writer.prefix("MaxRecords");
    if let Some(var_396) = &input.max_records {
        scope_395.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_396).into()));
    }
    #[allow(unused_mut)]let mut scope_397 = writer.prefix("Marker");
    if let Some(var_398) = &input.marker {
        scope_397.string(var_398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameters(input: &crate::input::DescribeCacheParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameters", "2015-02-02");
    #[allow(unused_mut)]let mut scope_399 = writer.prefix("CacheParameterGroupName");
    if let Some(var_400) = &input.cache_parameter_group_name {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]let mut scope_401 = writer.prefix("Source");
    if let Some(var_402) = &input.source {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]let mut scope_403 = writer.prefix("MaxRecords");
    if let Some(var_404) = &input.max_records {
        scope_403.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_404).into()));
    }
    #[allow(unused_mut)]let mut scope_405 = writer.prefix("Marker");
    if let Some(var_406) = &input.marker {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_security_groups(input: &crate::input::DescribeCacheSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSecurityGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_407 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_408) = &input.cache_security_group_name {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]let mut scope_409 = writer.prefix("MaxRecords");
    if let Some(var_410) = &input.max_records {
        scope_409.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_410).into()));
    }
    #[allow(unused_mut)]let mut scope_411 = writer.prefix("Marker");
    if let Some(var_412) = &input.marker {
        scope_411.string(var_412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_subnet_groups(input: &crate::input::DescribeCacheSubnetGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSubnetGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_413 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_414) = &input.cache_subnet_group_name {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]let mut scope_415 = writer.prefix("MaxRecords");
    if let Some(var_416) = &input.max_records {
        scope_415.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_416).into()));
    }
    #[allow(unused_mut)]let mut scope_417 = writer.prefix("Marker");
    if let Some(var_418) = &input.marker {
        scope_417.string(var_418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(input: &crate::input::DescribeEngineDefaultParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEngineDefaultParameters", "2015-02-02");
    #[allow(unused_mut)]let mut scope_419 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_420) = &input.cache_parameter_group_family {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]let mut scope_421 = writer.prefix("MaxRecords");
    if let Some(var_422) = &input.max_records {
        scope_421.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_422).into()));
    }
    #[allow(unused_mut)]let mut scope_423 = writer.prefix("Marker");
    if let Some(var_424) = &input.marker {
        scope_423.string(var_424);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(input: &crate::input::DescribeEventsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2015-02-02");
    #[allow(unused_mut)]let mut scope_425 = writer.prefix("SourceIdentifier");
    if let Some(var_426) = &input.source_identifier {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]let mut scope_427 = writer.prefix("SourceType");
    if let Some(var_428) = &input.source_type {
        scope_427.string(var_428.as_str());
    }
    #[allow(unused_mut)]let mut scope_429 = writer.prefix("StartTime");
    if let Some(var_430) = &input.start_time {
        scope_429.date_time(var_430, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_431 = writer.prefix("EndTime");
    if let Some(var_432) = &input.end_time {
        scope_431.date_time(var_432, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_433 = writer.prefix("Duration");
    if let Some(var_434) = &input.duration {
        scope_433.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_434).into()));
    }
    #[allow(unused_mut)]let mut scope_435 = writer.prefix("MaxRecords");
    if let Some(var_436) = &input.max_records {
        scope_435.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_436).into()));
    }
    #[allow(unused_mut)]let mut scope_437 = writer.prefix("Marker");
    if let Some(var_438) = &input.marker {
        scope_437.string(var_438);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_replication_groups(input: &crate::input::DescribeGlobalReplicationGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalReplicationGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_439 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_440) = &input.global_replication_group_id {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]let mut scope_441 = writer.prefix("MaxRecords");
    if let Some(var_442) = &input.max_records {
        scope_441.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_442).into()));
    }
    #[allow(unused_mut)]let mut scope_443 = writer.prefix("Marker");
    if let Some(var_444) = &input.marker {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]let mut scope_445 = writer.prefix("ShowMemberInfo");
    if let Some(var_446) = &input.show_member_info {
        scope_445.boolean(*var_446);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replication_groups(input: &crate::input::DescribeReplicationGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplicationGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_447 = writer.prefix("ReplicationGroupId");
    if let Some(var_448) = &input.replication_group_id {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]let mut scope_449 = writer.prefix("MaxRecords");
    if let Some(var_450) = &input.max_records {
        scope_449.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_450).into()));
    }
    #[allow(unused_mut)]let mut scope_451 = writer.prefix("Marker");
    if let Some(var_452) = &input.marker {
        scope_451.string(var_452);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes(input: &crate::input::DescribeReservedCacheNodesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedCacheNodes", "2015-02-02");
    #[allow(unused_mut)]let mut scope_453 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_454) = &input.reserved_cache_node_id {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]let mut scope_455 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_456) = &input.reserved_cache_nodes_offering_id {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]let mut scope_457 = writer.prefix("CacheNodeType");
    if let Some(var_458) = &input.cache_node_type {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]let mut scope_459 = writer.prefix("Duration");
    if let Some(var_460) = &input.duration {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]let mut scope_461 = writer.prefix("ProductDescription");
    if let Some(var_462) = &input.product_description {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]let mut scope_463 = writer.prefix("OfferingType");
    if let Some(var_464) = &input.offering_type {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]let mut scope_465 = writer.prefix("MaxRecords");
    if let Some(var_466) = &input.max_records {
        scope_465.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_466).into()));
    }
    #[allow(unused_mut)]let mut scope_467 = writer.prefix("Marker");
    if let Some(var_468) = &input.marker {
        scope_467.string(var_468);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes_offerings(input: &crate::input::DescribeReservedCacheNodesOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedCacheNodesOfferings", "2015-02-02");
    #[allow(unused_mut)]let mut scope_469 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_470) = &input.reserved_cache_nodes_offering_id {
        scope_469.string(var_470);
    }
    #[allow(unused_mut)]let mut scope_471 = writer.prefix("CacheNodeType");
    if let Some(var_472) = &input.cache_node_type {
        scope_471.string(var_472);
    }
    #[allow(unused_mut)]let mut scope_473 = writer.prefix("Duration");
    if let Some(var_474) = &input.duration {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]let mut scope_475 = writer.prefix("ProductDescription");
    if let Some(var_476) = &input.product_description {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]let mut scope_477 = writer.prefix("OfferingType");
    if let Some(var_478) = &input.offering_type {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]let mut scope_479 = writer.prefix("MaxRecords");
    if let Some(var_480) = &input.max_records {
        scope_479.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_480).into()));
    }
    #[allow(unused_mut)]let mut scope_481 = writer.prefix("Marker");
    if let Some(var_482) = &input.marker {
        scope_481.string(var_482);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_service_updates(input: &crate::input::DescribeServiceUpdatesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeServiceUpdates", "2015-02-02");
    #[allow(unused_mut)]let mut scope_483 = writer.prefix("ServiceUpdateName");
    if let Some(var_484) = &input.service_update_name {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]let mut scope_485 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_486) = &input.service_update_status {
        let mut list_488 = scope_485.start_list(false, None);
        for item_487 in var_486 {
            #[allow(unused_mut)]let mut entry_489 = list_488.entry();
            entry_489.string(item_487.as_str());
        }
        list_488.finish();
    }
    #[allow(unused_mut)]let mut scope_490 = writer.prefix("MaxRecords");
    if let Some(var_491) = &input.max_records {
        scope_490.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_491).into()));
    }
    #[allow(unused_mut)]let mut scope_492 = writer.prefix("Marker");
    if let Some(var_493) = &input.marker {
        scope_492.string(var_493);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(input: &crate::input::DescribeSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2015-02-02");
    #[allow(unused_mut)]let mut scope_494 = writer.prefix("ReplicationGroupId");
    if let Some(var_495) = &input.replication_group_id {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]let mut scope_496 = writer.prefix("CacheClusterId");
    if let Some(var_497) = &input.cache_cluster_id {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]let mut scope_498 = writer.prefix("SnapshotName");
    if let Some(var_499) = &input.snapshot_name {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]let mut scope_500 = writer.prefix("SnapshotSource");
    if let Some(var_501) = &input.snapshot_source {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]let mut scope_502 = writer.prefix("Marker");
    if let Some(var_503) = &input.marker {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]let mut scope_504 = writer.prefix("MaxRecords");
    if let Some(var_505) = &input.max_records {
        scope_504.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_505).into()));
    }
    #[allow(unused_mut)]let mut scope_506 = writer.prefix("ShowNodeGroupConfig");
    if let Some(var_507) = &input.show_node_group_config {
        scope_506.boolean(*var_507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_update_actions(input: &crate::input::DescribeUpdateActionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUpdateActions", "2015-02-02");
    #[allow(unused_mut)]let mut scope_508 = writer.prefix("ServiceUpdateName");
    if let Some(var_509) = &input.service_update_name {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]let mut scope_510 = writer.prefix("ReplicationGroupIds");
    if let Some(var_511) = &input.replication_group_ids {
        let mut list_513 = scope_510.start_list(false, None);
        for item_512 in var_511 {
            #[allow(unused_mut)]let mut entry_514 = list_513.entry();
            entry_514.string(item_512);
        }
        list_513.finish();
    }
    #[allow(unused_mut)]let mut scope_515 = writer.prefix("CacheClusterIds");
    if let Some(var_516) = &input.cache_cluster_ids {
        let mut list_518 = scope_515.start_list(false, None);
        for item_517 in var_516 {
            #[allow(unused_mut)]let mut entry_519 = list_518.entry();
            entry_519.string(item_517);
        }
        list_518.finish();
    }
    #[allow(unused_mut)]let mut scope_520 = writer.prefix("Engine");
    if let Some(var_521) = &input.engine {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]let mut scope_522 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_523) = &input.service_update_status {
        let mut list_525 = scope_522.start_list(false, None);
        for item_524 in var_523 {
            #[allow(unused_mut)]let mut entry_526 = list_525.entry();
            entry_526.string(item_524.as_str());
        }
        list_525.finish();
    }
    #[allow(unused_mut)]let mut scope_527 = writer.prefix("ServiceUpdateTimeRange");
    if let Some(var_528) = &input.service_update_time_range {
        crate::query_ser::serialize_structure_crate_model_time_range_filter(scope_527, var_528)?;
    }
    #[allow(unused_mut)]let mut scope_529 = writer.prefix("UpdateActionStatus");
    if let Some(var_530) = &input.update_action_status {
        let mut list_532 = scope_529.start_list(false, None);
        for item_531 in var_530 {
            #[allow(unused_mut)]let mut entry_533 = list_532.entry();
            entry_533.string(item_531.as_str());
        }
        list_532.finish();
    }
    #[allow(unused_mut)]let mut scope_534 = writer.prefix("ShowNodeLevelUpdateStatus");
    if let Some(var_535) = &input.show_node_level_update_status {
        scope_534.boolean(*var_535);
    }
    #[allow(unused_mut)]let mut scope_536 = writer.prefix("MaxRecords");
    if let Some(var_537) = &input.max_records {
        scope_536.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_537).into()));
    }
    #[allow(unused_mut)]let mut scope_538 = writer.prefix("Marker");
    if let Some(var_539) = &input.marker {
        scope_538.string(var_539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_user_groups(input: &crate::input::DescribeUserGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUserGroups", "2015-02-02");
    #[allow(unused_mut)]let mut scope_540 = writer.prefix("UserGroupId");
    if let Some(var_541) = &input.user_group_id {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]let mut scope_542 = writer.prefix("MaxRecords");
    if let Some(var_543) = &input.max_records {
        scope_542.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_543).into()));
    }
    #[allow(unused_mut)]let mut scope_544 = writer.prefix("Marker");
    if let Some(var_545) = &input.marker {
        scope_544.string(var_545);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_users(input: &crate::input::DescribeUsersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsers", "2015-02-02");
    #[allow(unused_mut)]let mut scope_546 = writer.prefix("Engine");
    if let Some(var_547) = &input.engine {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]let mut scope_548 = writer.prefix("UserId");
    if let Some(var_549) = &input.user_id {
        scope_548.string(var_549);
    }
    #[allow(unused_mut)]let mut scope_550 = writer.prefix("Filters");
    if let Some(var_551) = &input.filters {
        let mut list_553 = scope_550.start_list(false, None);
        for item_552 in var_551 {
            #[allow(unused_mut)]let mut entry_554 = list_553.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_554, item_552)?;
        }
        list_553.finish();
    }
    #[allow(unused_mut)]let mut scope_555 = writer.prefix("MaxRecords");
    if let Some(var_556) = &input.max_records {
        scope_555.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_556).into()));
    }
    #[allow(unused_mut)]let mut scope_557 = writer.prefix("Marker");
    if let Some(var_558) = &input.marker {
        scope_557.string(var_558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_global_replication_group(input: &crate::input::DisassociateGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_559 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_560) = &input.global_replication_group_id {
        scope_559.string(var_560);
    }
    #[allow(unused_mut)]let mut scope_561 = writer.prefix("ReplicationGroupId");
    if let Some(var_562) = &input.replication_group_id {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]let mut scope_563 = writer.prefix("ReplicationGroupRegion");
    if let Some(var_564) = &input.replication_group_region {
        scope_563.string(var_564);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_replication_group(input: &crate::input::FailoverGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_565 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_566) = &input.global_replication_group_id {
        scope_565.string(var_566);
    }
    #[allow(unused_mut)]let mut scope_567 = writer.prefix("PrimaryRegion");
    if let Some(var_568) = &input.primary_region {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]let mut scope_569 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_570) = &input.primary_replication_group_id {
        scope_569.string(var_570);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_node_groups_in_global_replication_group(input: &crate::input::IncreaseNodeGroupsInGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "IncreaseNodeGroupsInGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_571 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_572) = &input.global_replication_group_id {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]let mut scope_573 = writer.prefix("NodeGroupCount");
     {
        scope_573.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.node_group_count).into()));
    }
    #[allow(unused_mut)]let mut scope_574 = writer.prefix("RegionalConfigurations");
    if let Some(var_575) = &input.regional_configurations {
        let mut list_577 = scope_574.start_list(false, Some("RegionalConfiguration"));
        for item_576 in var_575 {
            #[allow(unused_mut)]let mut entry_578 = list_577.entry();
            crate::query_ser::serialize_structure_crate_model_regional_configuration(entry_578, item_576)?;
        }
        list_577.finish();
    }
    #[allow(unused_mut)]let mut scope_579 = writer.prefix("ApplyImmediately");
     {
        scope_579.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_replica_count(input: &crate::input::IncreaseReplicaCountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "IncreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]let mut scope_580 = writer.prefix("ReplicationGroupId");
    if let Some(var_581) = &input.replication_group_id {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]let mut scope_582 = writer.prefix("NewReplicaCount");
    if let Some(var_583) = &input.new_replica_count {
        scope_582.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_583).into()));
    }
    #[allow(unused_mut)]let mut scope_584 = writer.prefix("ReplicaConfiguration");
    if let Some(var_585) = &input.replica_configuration {
        let mut list_587 = scope_584.start_list(false, Some("ConfigureShard"));
        for item_586 in var_585 {
            #[allow(unused_mut)]let mut entry_588 = list_587.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_588, item_586)?;
        }
        list_587.finish();
    }
    #[allow(unused_mut)]let mut scope_589 = writer.prefix("ApplyImmediately");
     {
        scope_589.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_allowed_node_type_modifications(input: &crate::input::ListAllowedNodeTypeModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListAllowedNodeTypeModifications", "2015-02-02");
    #[allow(unused_mut)]let mut scope_590 = writer.prefix("CacheClusterId");
    if let Some(var_591) = &input.cache_cluster_id {
        scope_590.string(var_591);
    }
    #[allow(unused_mut)]let mut scope_592 = writer.prefix("ReplicationGroupId");
    if let Some(var_593) = &input.replication_group_id {
        scope_592.string(var_593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(input: &crate::input::ListTagsForResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2015-02-02");
    #[allow(unused_mut)]let mut scope_594 = writer.prefix("ResourceName");
    if let Some(var_595) = &input.resource_name {
        scope_594.string(var_595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_cluster(input: &crate::input::ModifyCacheClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheCluster", "2015-02-02");
    #[allow(unused_mut)]let mut scope_596 = writer.prefix("CacheClusterId");
    if let Some(var_597) = &input.cache_cluster_id {
        scope_596.string(var_597);
    }
    #[allow(unused_mut)]let mut scope_598 = writer.prefix("NumCacheNodes");
    if let Some(var_599) = &input.num_cache_nodes {
        scope_598.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_599).into()));
    }
    #[allow(unused_mut)]let mut scope_600 = writer.prefix("CacheNodeIdsToRemove");
    if let Some(var_601) = &input.cache_node_ids_to_remove {
        let mut list_603 = scope_600.start_list(false, Some("CacheNodeId"));
        for item_602 in var_601 {
            #[allow(unused_mut)]let mut entry_604 = list_603.entry();
            entry_604.string(item_602);
        }
        list_603.finish();
    }
    #[allow(unused_mut)]let mut scope_605 = writer.prefix("AZMode");
    if let Some(var_606) = &input.az_mode {
        scope_605.string(var_606.as_str());
    }
    #[allow(unused_mut)]let mut scope_607 = writer.prefix("NewAvailabilityZones");
    if let Some(var_608) = &input.new_availability_zones {
        let mut list_610 = scope_607.start_list(false, Some("PreferredAvailabilityZone"));
        for item_609 in var_608 {
            #[allow(unused_mut)]let mut entry_611 = list_610.entry();
            entry_611.string(item_609);
        }
        list_610.finish();
    }
    #[allow(unused_mut)]let mut scope_612 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_613) = &input.cache_security_group_names {
        let mut list_615 = scope_612.start_list(false, Some("CacheSecurityGroupName"));
        for item_614 in var_613 {
            #[allow(unused_mut)]let mut entry_616 = list_615.entry();
            entry_616.string(item_614);
        }
        list_615.finish();
    }
    #[allow(unused_mut)]let mut scope_617 = writer.prefix("SecurityGroupIds");
    if let Some(var_618) = &input.security_group_ids {
        let mut list_620 = scope_617.start_list(false, Some("SecurityGroupId"));
        for item_619 in var_618 {
            #[allow(unused_mut)]let mut entry_621 = list_620.entry();
            entry_621.string(item_619);
        }
        list_620.finish();
    }
    #[allow(unused_mut)]let mut scope_622 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_623) = &input.preferred_maintenance_window {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]let mut scope_624 = writer.prefix("NotificationTopicArn");
    if let Some(var_625) = &input.notification_topic_arn {
        scope_624.string(var_625);
    }
    #[allow(unused_mut)]let mut scope_626 = writer.prefix("CacheParameterGroupName");
    if let Some(var_627) = &input.cache_parameter_group_name {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]let mut scope_628 = writer.prefix("NotificationTopicStatus");
    if let Some(var_629) = &input.notification_topic_status {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]let mut scope_630 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_630.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_631 = writer.prefix("EngineVersion");
    if let Some(var_632) = &input.engine_version {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]let mut scope_633 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_634) = &input.auto_minor_version_upgrade {
        scope_633.boolean(*var_634);
    }
    #[allow(unused_mut)]let mut scope_635 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_636) = &input.snapshot_retention_limit {
        scope_635.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_636).into()));
    }
    #[allow(unused_mut)]let mut scope_637 = writer.prefix("SnapshotWindow");
    if let Some(var_638) = &input.snapshot_window {
        scope_637.string(var_638);
    }
    #[allow(unused_mut)]let mut scope_639 = writer.prefix("CacheNodeType");
    if let Some(var_640) = &input.cache_node_type {
        scope_639.string(var_640);
    }
    #[allow(unused_mut)]let mut scope_641 = writer.prefix("AuthToken");
    if let Some(var_642) = &input.auth_token {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]let mut scope_643 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_644) = &input.auth_token_update_strategy {
        scope_643.string(var_644.as_str());
    }
    #[allow(unused_mut)]let mut scope_645 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_646) = &input.log_delivery_configurations {
        let mut list_648 = scope_645.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_647 in var_646 {
            #[allow(unused_mut)]let mut entry_649 = list_648.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(entry_649, item_647)?;
        }
        list_648.finish();
    }
    #[allow(unused_mut)]let mut scope_650 = writer.prefix("IpDiscovery");
    if let Some(var_651) = &input.ip_discovery {
        scope_650.string(var_651.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_parameter_group(input: &crate::input::ModifyCacheParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_652 = writer.prefix("CacheParameterGroupName");
    if let Some(var_653) = &input.cache_parameter_group_name {
        scope_652.string(var_653);
    }
    #[allow(unused_mut)]let mut scope_654 = writer.prefix("ParameterNameValues");
    if let Some(var_655) = &input.parameter_name_values {
        let mut list_657 = scope_654.start_list(false, Some("ParameterNameValue"));
        for item_656 in var_655 {
            #[allow(unused_mut)]let mut entry_658 = list_657.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(entry_658, item_656)?;
        }
        list_657.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_subnet_group(input: &crate::input::ModifyCacheSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_659 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_660) = &input.cache_subnet_group_name {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]let mut scope_661 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_662) = &input.cache_subnet_group_description {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]let mut scope_663 = writer.prefix("SubnetIds");
    if let Some(var_664) = &input.subnet_ids {
        let mut list_666 = scope_663.start_list(false, Some("SubnetIdentifier"));
        for item_665 in var_664 {
            #[allow(unused_mut)]let mut entry_667 = list_666.entry();
            entry_667.string(item_665);
        }
        list_666.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_replication_group(input: &crate::input::ModifyGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_668 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_669) = &input.global_replication_group_id {
        scope_668.string(var_669);
    }
    #[allow(unused_mut)]let mut scope_670 = writer.prefix("ApplyImmediately");
     {
        scope_670.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_671 = writer.prefix("CacheNodeType");
    if let Some(var_672) = &input.cache_node_type {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]let mut scope_673 = writer.prefix("EngineVersion");
    if let Some(var_674) = &input.engine_version {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]let mut scope_675 = writer.prefix("CacheParameterGroupName");
    if let Some(var_676) = &input.cache_parameter_group_name {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]let mut scope_677 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_678) = &input.global_replication_group_description {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]let mut scope_679 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_680) = &input.automatic_failover_enabled {
        scope_679.boolean(*var_680);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group(input: &crate::input::ModifyReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_681 = writer.prefix("ReplicationGroupId");
    if let Some(var_682) = &input.replication_group_id {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]let mut scope_683 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_684) = &input.replication_group_description {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]let mut scope_685 = writer.prefix("PrimaryClusterId");
    if let Some(var_686) = &input.primary_cluster_id {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]let mut scope_687 = writer.prefix("SnapshottingClusterId");
    if let Some(var_688) = &input.snapshotting_cluster_id {
        scope_687.string(var_688);
    }
    #[allow(unused_mut)]let mut scope_689 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_690) = &input.automatic_failover_enabled {
        scope_689.boolean(*var_690);
    }
    #[allow(unused_mut)]let mut scope_691 = writer.prefix("MultiAZEnabled");
    if let Some(var_692) = &input.multi_az_enabled {
        scope_691.boolean(*var_692);
    }
    #[allow(unused_mut)]let mut scope_693 = writer.prefix("NodeGroupId");
    if let Some(var_694) = &input.node_group_id {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]let mut scope_695 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_696) = &input.cache_security_group_names {
        let mut list_698 = scope_695.start_list(false, Some("CacheSecurityGroupName"));
        for item_697 in var_696 {
            #[allow(unused_mut)]let mut entry_699 = list_698.entry();
            entry_699.string(item_697);
        }
        list_698.finish();
    }
    #[allow(unused_mut)]let mut scope_700 = writer.prefix("SecurityGroupIds");
    if let Some(var_701) = &input.security_group_ids {
        let mut list_703 = scope_700.start_list(false, Some("SecurityGroupId"));
        for item_702 in var_701 {
            #[allow(unused_mut)]let mut entry_704 = list_703.entry();
            entry_704.string(item_702);
        }
        list_703.finish();
    }
    #[allow(unused_mut)]let mut scope_705 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_706) = &input.preferred_maintenance_window {
        scope_705.string(var_706);
    }
    #[allow(unused_mut)]let mut scope_707 = writer.prefix("NotificationTopicArn");
    if let Some(var_708) = &input.notification_topic_arn {
        scope_707.string(var_708);
    }
    #[allow(unused_mut)]let mut scope_709 = writer.prefix("CacheParameterGroupName");
    if let Some(var_710) = &input.cache_parameter_group_name {
        scope_709.string(var_710);
    }
    #[allow(unused_mut)]let mut scope_711 = writer.prefix("NotificationTopicStatus");
    if let Some(var_712) = &input.notification_topic_status {
        scope_711.string(var_712);
    }
    #[allow(unused_mut)]let mut scope_713 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_713.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_714 = writer.prefix("EngineVersion");
    if let Some(var_715) = &input.engine_version {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]let mut scope_716 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_717) = &input.auto_minor_version_upgrade {
        scope_716.boolean(*var_717);
    }
    #[allow(unused_mut)]let mut scope_718 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_719) = &input.snapshot_retention_limit {
        scope_718.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_719).into()));
    }
    #[allow(unused_mut)]let mut scope_720 = writer.prefix("SnapshotWindow");
    if let Some(var_721) = &input.snapshot_window {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]let mut scope_722 = writer.prefix("CacheNodeType");
    if let Some(var_723) = &input.cache_node_type {
        scope_722.string(var_723);
    }
    #[allow(unused_mut)]let mut scope_724 = writer.prefix("AuthToken");
    if let Some(var_725) = &input.auth_token {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]let mut scope_726 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_727) = &input.auth_token_update_strategy {
        scope_726.string(var_727.as_str());
    }
    #[allow(unused_mut)]let mut scope_728 = writer.prefix("UserGroupIdsToAdd");
    if let Some(var_729) = &input.user_group_ids_to_add {
        let mut list_731 = scope_728.start_list(false, None);
        for item_730 in var_729 {
            #[allow(unused_mut)]let mut entry_732 = list_731.entry();
            entry_732.string(item_730);
        }
        list_731.finish();
    }
    #[allow(unused_mut)]let mut scope_733 = writer.prefix("UserGroupIdsToRemove");
    if let Some(var_734) = &input.user_group_ids_to_remove {
        let mut list_736 = scope_733.start_list(false, None);
        for item_735 in var_734 {
            #[allow(unused_mut)]let mut entry_737 = list_736.entry();
            entry_737.string(item_735);
        }
        list_736.finish();
    }
    #[allow(unused_mut)]let mut scope_738 = writer.prefix("RemoveUserGroups");
    if let Some(var_739) = &input.remove_user_groups {
        scope_738.boolean(*var_739);
    }
    #[allow(unused_mut)]let mut scope_740 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_741) = &input.log_delivery_configurations {
        let mut list_743 = scope_740.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_742 in var_741 {
            #[allow(unused_mut)]let mut entry_744 = list_743.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(entry_744, item_742)?;
        }
        list_743.finish();
    }
    #[allow(unused_mut)]let mut scope_745 = writer.prefix("IpDiscovery");
    if let Some(var_746) = &input.ip_discovery {
        scope_745.string(var_746.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group_shard_configuration(input: &crate::input::ModifyReplicationGroupShardConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroupShardConfiguration", "2015-02-02");
    #[allow(unused_mut)]let mut scope_747 = writer.prefix("ReplicationGroupId");
    if let Some(var_748) = &input.replication_group_id {
        scope_747.string(var_748);
    }
    #[allow(unused_mut)]let mut scope_749 = writer.prefix("NodeGroupCount");
     {
        scope_749.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.node_group_count).into()));
    }
    #[allow(unused_mut)]let mut scope_750 = writer.prefix("ApplyImmediately");
     {
        scope_750.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_751 = writer.prefix("ReshardingConfiguration");
    if let Some(var_752) = &input.resharding_configuration {
        let mut list_754 = scope_751.start_list(false, Some("ReshardingConfiguration"));
        for item_753 in var_752 {
            #[allow(unused_mut)]let mut entry_755 = list_754.entry();
            crate::query_ser::serialize_structure_crate_model_resharding_configuration(entry_755, item_753)?;
        }
        list_754.finish();
    }
    #[allow(unused_mut)]let mut scope_756 = writer.prefix("NodeGroupsToRemove");
    if let Some(var_757) = &input.node_groups_to_remove {
        let mut list_759 = scope_756.start_list(false, Some("NodeGroupToRemove"));
        for item_758 in var_757 {
            #[allow(unused_mut)]let mut entry_760 = list_759.entry();
            entry_760.string(item_758);
        }
        list_759.finish();
    }
    #[allow(unused_mut)]let mut scope_761 = writer.prefix("NodeGroupsToRetain");
    if let Some(var_762) = &input.node_groups_to_retain {
        let mut list_764 = scope_761.start_list(false, Some("NodeGroupToRetain"));
        for item_763 in var_762 {
            #[allow(unused_mut)]let mut entry_765 = list_764.entry();
            entry_765.string(item_763);
        }
        list_764.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user(input: &crate::input::ModifyUserInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUser", "2015-02-02");
    #[allow(unused_mut)]let mut scope_766 = writer.prefix("UserId");
    if let Some(var_767) = &input.user_id {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]let mut scope_768 = writer.prefix("AccessString");
    if let Some(var_769) = &input.access_string {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]let mut scope_770 = writer.prefix("AppendAccessString");
    if let Some(var_771) = &input.append_access_string {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]let mut scope_772 = writer.prefix("Passwords");
    if let Some(var_773) = &input.passwords {
        let mut list_775 = scope_772.start_list(false, None);
        for item_774 in var_773 {
            #[allow(unused_mut)]let mut entry_776 = list_775.entry();
            entry_776.string(item_774);
        }
        list_775.finish();
    }
    #[allow(unused_mut)]let mut scope_777 = writer.prefix("NoPasswordRequired");
    if let Some(var_778) = &input.no_password_required {
        scope_777.boolean(*var_778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user_group(input: &crate::input::ModifyUserGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUserGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_779 = writer.prefix("UserGroupId");
    if let Some(var_780) = &input.user_group_id {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]let mut scope_781 = writer.prefix("UserIdsToAdd");
    if let Some(var_782) = &input.user_ids_to_add {
        let mut list_784 = scope_781.start_list(false, None);
        for item_783 in var_782 {
            #[allow(unused_mut)]let mut entry_785 = list_784.entry();
            entry_785.string(item_783);
        }
        list_784.finish();
    }
    #[allow(unused_mut)]let mut scope_786 = writer.prefix("UserIdsToRemove");
    if let Some(var_787) = &input.user_ids_to_remove {
        let mut list_789 = scope_786.start_list(false, None);
        for item_788 in var_787 {
            #[allow(unused_mut)]let mut entry_790 = list_789.entry();
            entry_790.string(item_788);
        }
        list_789.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_cache_nodes_offering(input: &crate::input::PurchaseReservedCacheNodesOfferingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedCacheNodesOffering", "2015-02-02");
    #[allow(unused_mut)]let mut scope_791 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_792) = &input.reserved_cache_nodes_offering_id {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]let mut scope_793 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_794) = &input.reserved_cache_node_id {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]let mut scope_795 = writer.prefix("CacheNodeCount");
    if let Some(var_796) = &input.cache_node_count {
        scope_795.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_796).into()));
    }
    #[allow(unused_mut)]let mut scope_797 = writer.prefix("Tags");
    if let Some(var_798) = &input.tags {
        let mut list_800 = scope_797.start_list(false, Some("Tag"));
        for item_799 in var_798 {
            #[allow(unused_mut)]let mut entry_801 = list_800.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_801, item_799)?;
        }
        list_800.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebalance_slots_in_global_replication_group(input: &crate::input::RebalanceSlotsInGlobalReplicationGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebalanceSlotsInGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_802 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_803) = &input.global_replication_group_id {
        scope_802.string(var_803);
    }
    #[allow(unused_mut)]let mut scope_804 = writer.prefix("ApplyImmediately");
     {
        scope_804.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cache_cluster(input: &crate::input::RebootCacheClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootCacheCluster", "2015-02-02");
    #[allow(unused_mut)]let mut scope_805 = writer.prefix("CacheClusterId");
    if let Some(var_806) = &input.cache_cluster_id {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]let mut scope_807 = writer.prefix("CacheNodeIdsToReboot");
    if let Some(var_808) = &input.cache_node_ids_to_reboot {
        let mut list_810 = scope_807.start_list(false, Some("CacheNodeId"));
        for item_809 in var_808 {
            #[allow(unused_mut)]let mut entry_811 = list_810.entry();
            entry_811.string(item_809);
        }
        list_810.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(input: &crate::input::RemoveTagsFromResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2015-02-02");
    #[allow(unused_mut)]let mut scope_812 = writer.prefix("ResourceName");
    if let Some(var_813) = &input.resource_name {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]let mut scope_814 = writer.prefix("TagKeys");
    if let Some(var_815) = &input.tag_keys {
        let mut list_817 = scope_814.start_list(false, None);
        for item_816 in var_815 {
            #[allow(unused_mut)]let mut entry_818 = list_817.entry();
            entry_818.string(item_816);
        }
        list_817.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cache_parameter_group(input: &crate::input::ResetCacheParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]let mut scope_819 = writer.prefix("CacheParameterGroupName");
    if let Some(var_820) = &input.cache_parameter_group_name {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]let mut scope_821 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_821.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]let mut scope_822 = writer.prefix("ParameterNameValues");
    if let Some(var_823) = &input.parameter_name_values {
        let mut list_825 = scope_822.start_list(false, Some("ParameterNameValue"));
        for item_824 in var_823 {
            #[allow(unused_mut)]let mut entry_826 = list_825.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(entry_826, item_824)?;
        }
        list_825.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cache_security_group_ingress(input: &crate::input::RevokeCacheSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeCacheSecurityGroupIngress", "2015-02-02");
    #[allow(unused_mut)]let mut scope_827 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_828) = &input.cache_security_group_name {
        scope_827.string(var_828);
    }
    #[allow(unused_mut)]let mut scope_829 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_830) = &input.ec2_security_group_name {
        scope_829.string(var_830);
    }
    #[allow(unused_mut)]let mut scope_831 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_832) = &input.ec2_security_group_owner_id {
        scope_831.string(var_832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_migration(input: &crate::input::StartMigrationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartMigration", "2015-02-02");
    #[allow(unused_mut)]let mut scope_833 = writer.prefix("ReplicationGroupId");
    if let Some(var_834) = &input.replication_group_id {
        scope_833.string(var_834);
    }
    #[allow(unused_mut)]let mut scope_835 = writer.prefix("CustomerNodeEndpointList");
    if let Some(var_836) = &input.customer_node_endpoint_list {
        let mut list_838 = scope_835.start_list(false, None);
        for item_837 in var_836 {
            #[allow(unused_mut)]let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_customer_node_endpoint(entry_839, item_837)?;
        }
        list_838.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_test_failover(input: &crate::input::TestFailoverInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TestFailover", "2015-02-02");
    #[allow(unused_mut)]let mut scope_840 = writer.prefix("ReplicationGroupId");
    if let Some(var_841) = &input.replication_group_id {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]let mut scope_842 = writer.prefix("NodeGroupId");
    if let Some(var_843) = &input.node_group_id {
        scope_842.string(var_843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

