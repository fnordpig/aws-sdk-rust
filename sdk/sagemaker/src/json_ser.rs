// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
             {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_describe_model_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDescribeModelPackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.model_package_arn_list {
        let mut array_12 = object.key("ModelPackageArnList").start_array();
        for item_13 in var_11 {
             {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_14) = &input.action_name {
        object.key("ActionName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source {
        let mut object_16 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_action_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.action_type {
        object.key("ActionType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.status {
        object.key("Status").string(var_19.as_str());
    }
    if let Some(var_20) = &input.properties {
        let mut object_21 = object.key("Properties").start_object();
        for (key_22, value_23) in var_20 {
             {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.metadata_properties {
        let mut object_25 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
             {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_algorithm_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAlgorithmInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_30) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_31.as_str());
    }
    if let Some(var_32) = &input.training_specification {
        let mut object_33 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_training_specification(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.inference_specification {
        let mut object_35 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.validation_specification {
        let mut object_37 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_validation_specification(&mut object_37, var_36)?;
        object_37.finish();
    }
    if input.certify_for_marketplace {
        object.key("CertifyForMarketplace").boolean(input.certify_for_marketplace);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
             {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAppInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.domain_id {
        object.key("DomainId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.user_profile_name {
        object.key("UserProfileName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.app_type {
        object.key("AppType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.app_name {
        object.key("AppName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
             {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48)?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    if let Some(var_50) = &input.resource_spec {
        let mut object_51 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_51, var_50)?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_image_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAppImageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
             {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.kernel_gateway_image_config {
        let mut object_58 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(&mut object_58, var_57)?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.artifact_name {
        object.key("ArtifactName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.source {
        let mut object_61 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.artifact_type {
        object.key("ArtifactType").string(var_62.as_str());
    }
    if let Some(var_63) = &input.properties {
        let mut object_64 = object.key("Properties").start_object();
        for (key_65, value_66) in var_63 {
             {
                object_64.key(key_65.as_str()).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.metadata_properties {
        let mut object_68 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
             {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_auto_ml_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAutoMlJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.input_data_config {
        let mut array_75 = object.key("InputDataConfig").start_array();
        for item_76 in var_74 {
             {
                let mut object_77 = array_75.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_ml_channel(&mut object_77, item_76)?;
                object_77.finish();
            }
        }
        array_75.finish();
    }
    if let Some(var_78) = &input.output_data_config {
        let mut object_79 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_output_data_config(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.problem_type {
        object.key("ProblemType").string(var_80.as_str());
    }
    if let Some(var_81) = &input.auto_ml_job_objective {
        let mut object_82 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_objective(&mut object_82, var_81)?;
        object_82.finish();
    }
    if let Some(var_83) = &input.auto_ml_job_config {
        let mut object_84 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_config(&mut object_84, var_83)?;
        object_84.finish();
    }
    if let Some(var_85) = &input.role_arn {
        object.key("RoleArn").string(var_85.as_str());
    }
    if input.generate_candidate_definitions_only {
        object.key("GenerateCandidateDefinitionsOnly").boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_86) = &input.tags {
        let mut array_87 = object.key("Tags").start_array();
        for item_88 in var_86 {
             {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    if let Some(var_90) = &input.model_deploy_config {
        let mut object_91 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_deploy_config(&mut object_91, var_90)?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_code_repository_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCodeRepositoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_92) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_92.as_str());
    }
    if let Some(var_93) = &input.git_config {
        let mut object_94 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.tags {
        let mut array_96 = object.key("Tags").start_array();
        for item_97 in var_95 {
             {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_compilation_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCompilationJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.role_arn {
        object.key("RoleArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.model_package_version_arn {
        object.key("ModelPackageVersionArn").string(var_101.as_str());
    }
    if let Some(var_102) = &input.input_config {
        let mut object_103 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_config(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.output_config {
        let mut object_105 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.vpc_config {
        let mut object_107 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_neo_vpc_config(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.stopping_condition {
        let mut object_109 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.tags {
        let mut array_111 = object.key("Tags").start_array();
        for item_112 in var_110 {
             {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_context_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateContextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_114) = &input.context_name {
        object.key("ContextName").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source {
        let mut object_116 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_context_source(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.context_type {
        object.key("ContextType").string(var_117.as_str());
    }
    if let Some(var_118) = &input.description {
        object.key("Description").string(var_118.as_str());
    }
    if let Some(var_119) = &input.properties {
        let mut object_120 = object.key("Properties").start_object();
        for (key_121, value_122) in var_119 {
             {
                object_120.key(key_121.as_str()).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("Tags").start_array();
        for item_125 in var_123 {
             {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_126, item_125)?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDataQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_127.as_str());
    }
    if let Some(var_128) = &input.data_quality_baseline_config {
        let mut object_129 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_baseline_config(&mut object_129, var_128)?;
        object_129.finish();
    }
    if let Some(var_130) = &input.data_quality_app_specification {
        let mut object_131 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_app_specification(&mut object_131, var_130)?;
        object_131.finish();
    }
    if let Some(var_132) = &input.data_quality_job_input {
        let mut object_133 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_data_quality_job_input(&mut object_133, var_132)?;
        object_133.finish();
    }
    if let Some(var_134) = &input.data_quality_job_output_config {
        let mut object_135 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(&mut object_135, var_134)?;
        object_135.finish();
    }
    if let Some(var_136) = &input.job_resources {
        let mut object_137 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(&mut object_137, var_136)?;
        object_137.finish();
    }
    if let Some(var_138) = &input.network_config {
        let mut object_139 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.role_arn {
        object.key("RoleArn").string(var_140.as_str());
    }
    if let Some(var_141) = &input.stopping_condition {
        let mut object_142 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(&mut object_142, var_141)?;
        object_142.finish();
    }
    if let Some(var_143) = &input.tags {
        let mut array_144 = object.key("Tags").start_array();
        for item_145 in var_143 {
             {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_146, item_145)?;
                object_146.finish();
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_device_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDeviceFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_147.as_str());
    }
    if let Some(var_148) = &input.role_arn {
        object.key("RoleArn").string(var_148.as_str());
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149.as_str());
    }
    if let Some(var_150) = &input.output_config {
        let mut object_151 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(&mut object_151, var_150)?;
        object_151.finish();
    }
    if let Some(var_152) = &input.tags {
        let mut array_153 = object.key("Tags").start_array();
        for item_154 in var_152 {
             {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_157) = &input.domain_name {
        object.key("DomainName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.auth_mode {
        object.key("AuthMode").string(var_158.as_str());
    }
    if let Some(var_159) = &input.default_user_settings {
        let mut object_160 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.subnet_ids {
        let mut array_162 = object.key("SubnetIds").start_array();
        for item_163 in var_161 {
             {
                array_162.value().string(item_163.as_str());
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.vpc_id {
        object.key("VpcId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.tags {
        let mut array_166 = object.key("Tags").start_array();
        for item_167 in var_165 {
             {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_168, item_167)?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.app_security_group_management {
        object.key("AppSecurityGroupManagement").string(var_172.as_str());
    }
    if let Some(var_173) = &input.domain_settings {
        let mut object_174 = object.key("DomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings(&mut object_174, var_173)?;
        object_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEdgeDeploymentPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_175) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_175.as_str());
    }
    if let Some(var_176) = &input.model_configs {
        let mut array_177 = object.key("ModelConfigs").start_array();
        for item_178 in var_176 {
             {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_edge_deployment_model_config(&mut object_179, item_178)?;
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.stages {
        let mut array_182 = object.key("Stages").start_array();
        for item_183 in var_181 {
             {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(&mut object_184, item_183)?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.tags {
        let mut array_186 = object.key("Tags").start_array();
        for item_187 in var_185 {
             {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_188, item_187)?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_deployment_stage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEdgeDeploymentStageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.stages {
        let mut array_191 = object.key("Stages").start_array();
        for item_192 in var_190 {
             {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_stage(&mut object_193, item_192)?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_edge_packaging_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEdgePackagingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.model_name {
        object.key("ModelName").string(var_196.as_str());
    }
    if let Some(var_197) = &input.model_version {
        object.key("ModelVersion").string(var_197.as_str());
    }
    if let Some(var_198) = &input.role_arn {
        object.key("RoleArn").string(var_198.as_str());
    }
    if let Some(var_199) = &input.output_config {
        let mut object_200 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(&mut object_200, var_199)?;
        object_200.finish();
    }
    if let Some(var_201) = &input.resource_key {
        object.key("ResourceKey").string(var_201.as_str());
    }
    if let Some(var_202) = &input.tags {
        let mut array_203 = object.key("Tags").start_array();
        for item_204 in var_202 {
             {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_205, item_204)?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.endpoint_name {
        object.key("EndpointName").string(var_206.as_str());
    }
    if let Some(var_207) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_207.as_str());
    }
    if let Some(var_208) = &input.deployment_config {
        let mut object_209 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(&mut object_209, var_208)?;
        object_209.finish();
    }
    if let Some(var_210) = &input.tags {
        let mut array_211 = object.key("Tags").start_array();
        for item_212 in var_210 {
             {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_213, item_212)?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_endpoint_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateEndpointConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_214.as_str());
    }
    if let Some(var_215) = &input.production_variants {
        let mut array_216 = object.key("ProductionVariants").start_array();
        for item_217 in var_215 {
             {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_production_variant(&mut object_218, item_217)?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.data_capture_config {
        let mut object_220 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_capture_config(&mut object_220, var_219)?;
        object_220.finish();
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
             {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_225.as_str());
    }
    if let Some(var_226) = &input.async_inference_config {
        let mut object_227 = object.key("AsyncInferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_config(&mut object_227, var_226)?;
        object_227.finish();
    }
    if let Some(var_228) = &input.explainer_config {
        let mut object_229 = object.key("ExplainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_explainer_config(&mut object_229, var_228)?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experiment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateExperimentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_230) = &input.experiment_name {
        object.key("ExperimentName").string(var_230.as_str());
    }
    if let Some(var_231) = &input.display_name {
        object.key("DisplayName").string(var_231.as_str());
    }
    if let Some(var_232) = &input.description {
        object.key("Description").string(var_232.as_str());
    }
    if let Some(var_233) = &input.tags {
        let mut array_234 = object.key("Tags").start_array();
        for item_235 in var_233 {
             {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_236, item_235)?;
                object_236.finish();
            }
        }
        array_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_feature_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFeatureGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_238.as_str());
    }
    if let Some(var_239) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_239.as_str());
    }
    if let Some(var_240) = &input.feature_definitions {
        let mut array_241 = object.key("FeatureDefinitions").start_array();
        for item_242 in var_240 {
             {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(&mut object_243, item_242)?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.online_store_config {
        let mut object_245 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_config(&mut object_245, var_244)?;
        object_245.finish();
    }
    if let Some(var_246) = &input.offline_store_config {
        let mut object_247 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_offline_store_config(&mut object_247, var_246)?;
        object_247.finish();
    }
    if let Some(var_248) = &input.role_arn {
        object.key("RoleArn").string(var_248.as_str());
    }
    if let Some(var_249) = &input.description {
        object.key("Description").string(var_249.as_str());
    }
    if let Some(var_250) = &input.tags {
        let mut array_251 = object.key("Tags").start_array();
        for item_252 in var_250 {
             {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_253, item_252)?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_flow_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFlowDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_254) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.human_loop_request_source {
        let mut object_256 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_request_source(&mut object_256, var_255)?;
        object_256.finish();
    }
    if let Some(var_257) = &input.human_loop_activation_config {
        let mut object_258 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_config(&mut object_258, var_257)?;
        object_258.finish();
    }
    if let Some(var_259) = &input.human_loop_config {
        let mut object_260 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(&mut object_260, var_259)?;
        object_260.finish();
    }
    if let Some(var_261) = &input.output_config {
        let mut object_262 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_flow_definition_output_config(&mut object_262, var_261)?;
        object_262.finish();
    }
    if let Some(var_263) = &input.role_arn {
        object.key("RoleArn").string(var_263.as_str());
    }
    if let Some(var_264) = &input.tags {
        let mut array_265 = object.key("Tags").start_array();
        for item_266 in var_264 {
             {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_267, item_266)?;
                object_267.finish();
            }
        }
        array_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_human_task_ui_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateHumanTaskUiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_268) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_268.as_str());
    }
    if let Some(var_269) = &input.ui_template {
        let mut object_270 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_270, var_269)?;
        object_270.finish();
    }
    if let Some(var_271) = &input.tags {
        let mut array_272 = object.key("Tags").start_array();
        for item_273 in var_271 {
             {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_274, item_273)?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hyper_parameter_tuning_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateHyperParameterTuningJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_275.as_str());
    }
    if let Some(var_276) = &input.hyper_parameter_tuning_job_config {
        let mut object_277 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(&mut object_277, var_276)?;
        object_277.finish();
    }
    if let Some(var_278) = &input.training_job_definition {
        let mut object_279 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_279, var_278)?;
        object_279.finish();
    }
    if let Some(var_280) = &input.training_job_definitions {
        let mut array_281 = object.key("TrainingJobDefinitions").start_array();
        for item_282 in var_280 {
             {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_training_job_definition(&mut object_283, item_282)?;
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.warm_start_config {
        let mut object_285 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(&mut object_285, var_284)?;
        object_285.finish();
    }
    if let Some(var_286) = &input.tags {
        let mut array_287 = object.key("Tags").start_array();
        for item_288 in var_286 {
             {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_289, item_288)?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_290) = &input.description {
        object.key("Description").string(var_290.as_str());
    }
    if let Some(var_291) = &input.display_name {
        object.key("DisplayName").string(var_291.as_str());
    }
    if let Some(var_292) = &input.image_name {
        object.key("ImageName").string(var_292.as_str());
    }
    if let Some(var_293) = &input.role_arn {
        object.key("RoleArn").string(var_293.as_str());
    }
    if let Some(var_294) = &input.tags {
        let mut array_295 = object.key("Tags").start_array();
        for item_296 in var_294 {
             {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_297, item_296)?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateImageVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_298) = &input.base_image {
        object.key("BaseImage").string(var_298.as_str());
    }
    if let Some(var_299) = &input.client_token {
        object.key("ClientToken").string(var_299.as_str());
    }
    if let Some(var_300) = &input.image_name {
        object.key("ImageName").string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_inference_recommendations_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateInferenceRecommendationsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_301) = &input.job_name {
        object.key("JobName").string(var_301.as_str());
    }
    if let Some(var_302) = &input.job_type {
        object.key("JobType").string(var_302.as_str());
    }
    if let Some(var_303) = &input.role_arn {
        object.key("RoleArn").string(var_303.as_str());
    }
    if let Some(var_304) = &input.input_config {
        let mut object_305 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_input_config(&mut object_305, var_304)?;
        object_305.finish();
    }
    if let Some(var_306) = &input.job_description {
        object.key("JobDescription").string(var_306.as_str());
    }
    if let Some(var_307) = &input.stopping_conditions {
        let mut object_308 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_stopping_conditions(&mut object_308, var_307)?;
        object_308.finish();
    }
    if let Some(var_309) = &input.output_config {
        let mut object_310 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_output_config(&mut object_310, var_309)?;
        object_310.finish();
    }
    if let Some(var_311) = &input.tags {
        let mut array_312 = object.key("Tags").start_array();
        for item_313 in var_311 {
             {
                let mut object_314 = array_312.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_314, item_313)?;
                object_314.finish();
            }
        }
        array_312.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_labeling_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateLabelingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_315) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_315.as_str());
    }
    if let Some(var_316) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_316.as_str());
    }
    if let Some(var_317) = &input.input_config {
        let mut object_318 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_input_config(&mut object_318, var_317)?;
        object_318.finish();
    }
    if let Some(var_319) = &input.output_config {
        let mut object_320 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_output_config(&mut object_320, var_319)?;
        object_320.finish();
    }
    if let Some(var_321) = &input.role_arn {
        object.key("RoleArn").string(var_321.as_str());
    }
    if let Some(var_322) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_322.as_str());
    }
    if let Some(var_323) = &input.stopping_conditions {
        let mut object_324 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_stopping_conditions(&mut object_324, var_323)?;
        object_324.finish();
    }
    if let Some(var_325) = &input.labeling_job_algorithms_config {
        let mut object_326 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_algorithms_config(&mut object_326, var_325)?;
        object_326.finish();
    }
    if let Some(var_327) = &input.human_task_config {
        let mut object_328 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_task_config(&mut object_328, var_327)?;
        object_328.finish();
    }
    if let Some(var_329) = &input.tags {
        let mut array_330 = object.key("Tags").start_array();
        for item_331 in var_329 {
             {
                let mut object_332 = array_330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_332, item_331)?;
                object_332.finish();
            }
        }
        array_330.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_333) = &input.model_name {
        object.key("ModelName").string(var_333.as_str());
    }
    if let Some(var_334) = &input.primary_container {
        let mut object_335 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_container_definition(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.containers {
        let mut array_337 = object.key("Containers").start_array();
        for item_338 in var_336 {
             {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_crate_model_container_definition(&mut object_339, item_338)?;
                object_339.finish();
            }
        }
        array_337.finish();
    }
    if let Some(var_340) = &input.inference_execution_config {
        let mut object_341 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_execution_config(&mut object_341, var_340)?;
        object_341.finish();
    }
    if let Some(var_342) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_342.as_str());
    }
    if let Some(var_343) = &input.tags {
        let mut array_344 = object.key("Tags").start_array();
        for item_345 in var_343 {
             {
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_346, item_345)?;
                object_346.finish();
            }
        }
        array_344.finish();
    }
    if let Some(var_347) = &input.vpc_config {
        let mut object_348 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_348, var_347)?;
        object_348.finish();
    }
    if input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(input.enable_network_isolation);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_bias_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelBiasJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_349) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_349.as_str());
    }
    if let Some(var_350) = &input.model_bias_baseline_config {
        let mut object_351 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_baseline_config(&mut object_351, var_350)?;
        object_351.finish();
    }
    if let Some(var_352) = &input.model_bias_app_specification {
        let mut object_353 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_app_specification(&mut object_353, var_352)?;
        object_353.finish();
    }
    if let Some(var_354) = &input.model_bias_job_input {
        let mut object_355 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_bias_job_input(&mut object_355, var_354)?;
        object_355.finish();
    }
    if let Some(var_356) = &input.model_bias_job_output_config {
        let mut object_357 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(&mut object_357, var_356)?;
        object_357.finish();
    }
    if let Some(var_358) = &input.job_resources {
        let mut object_359 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(&mut object_359, var_358)?;
        object_359.finish();
    }
    if let Some(var_360) = &input.network_config {
        let mut object_361 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(&mut object_361, var_360)?;
        object_361.finish();
    }
    if let Some(var_362) = &input.role_arn {
        object.key("RoleArn").string(var_362.as_str());
    }
    if let Some(var_363) = &input.stopping_condition {
        let mut object_364 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(&mut object_364, var_363)?;
        object_364.finish();
    }
    if let Some(var_365) = &input.tags {
        let mut array_366 = object.key("Tags").start_array();
        for item_367 in var_365 {
             {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_368, item_367)?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_explainability_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelExplainabilityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_369) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_369.as_str());
    }
    if let Some(var_370) = &input.model_explainability_baseline_config {
        let mut object_371 = object.key("ModelExplainabilityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_baseline_config(&mut object_371, var_370)?;
        object_371.finish();
    }
    if let Some(var_372) = &input.model_explainability_app_specification {
        let mut object_373 = object.key("ModelExplainabilityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_app_specification(&mut object_373, var_372)?;
        object_373.finish();
    }
    if let Some(var_374) = &input.model_explainability_job_input {
        let mut object_375 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_explainability_job_input(&mut object_375, var_374)?;
        object_375.finish();
    }
    if let Some(var_376) = &input.model_explainability_job_output_config {
        let mut object_377 = object.key("ModelExplainabilityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(&mut object_377, var_376)?;
        object_377.finish();
    }
    if let Some(var_378) = &input.job_resources {
        let mut object_379 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(&mut object_379, var_378)?;
        object_379.finish();
    }
    if let Some(var_380) = &input.network_config {
        let mut object_381 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(&mut object_381, var_380)?;
        object_381.finish();
    }
    if let Some(var_382) = &input.role_arn {
        object.key("RoleArn").string(var_382.as_str());
    }
    if let Some(var_383) = &input.stopping_condition {
        let mut object_384 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(&mut object_384, var_383)?;
        object_384.finish();
    }
    if let Some(var_385) = &input.tags {
        let mut array_386 = object.key("Tags").start_array();
        for item_387 in var_385 {
             {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_388, item_387)?;
                object_388.finish();
            }
        }
        array_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelPackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_389) = &input.model_package_name {
        object.key("ModelPackageName").string(var_389.as_str());
    }
    if let Some(var_390) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_390.as_str());
    }
    if let Some(var_391) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_391.as_str());
    }
    if let Some(var_392) = &input.inference_specification {
        let mut object_393 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_inference_specification(&mut object_393, var_392)?;
        object_393.finish();
    }
    if let Some(var_394) = &input.validation_specification {
        let mut object_395 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_package_validation_specification(&mut object_395, var_394)?;
        object_395.finish();
    }
    if let Some(var_396) = &input.source_algorithm_specification {
        let mut object_397 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_source_algorithm_specification(&mut object_397, var_396)?;
        object_397.finish();
    }
    if input.certify_for_marketplace {
        object.key("CertifyForMarketplace").boolean(input.certify_for_marketplace);
    }
    if let Some(var_398) = &input.tags {
        let mut array_399 = object.key("Tags").start_array();
        for item_400 in var_398 {
             {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_401, item_400)?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_402.as_str());
    }
    if let Some(var_403) = &input.metadata_properties {
        let mut object_404 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(&mut object_404, var_403)?;
        object_404.finish();
    }
    if let Some(var_405) = &input.model_metrics {
        let mut object_406 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metrics(&mut object_406, var_405)?;
        object_406.finish();
    }
    if let Some(var_407) = &input.client_token {
        object.key("ClientToken").string(var_407.as_str());
    }
    if let Some(var_408) = &input.customer_metadata_properties {
        let mut object_409 = object.key("CustomerMetadataProperties").start_object();
        for (key_410, value_411) in var_408 {
             {
                object_409.key(key_410.as_str()).string(value_411.as_str());
            }
        }
        object_409.finish();
    }
    if let Some(var_412) = &input.drift_check_baselines {
        let mut object_413 = object.key("DriftCheckBaselines").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_baselines(&mut object_413, var_412)?;
        object_413.finish();
    }
    if let Some(var_414) = &input.domain {
        object.key("Domain").string(var_414.as_str());
    }
    if let Some(var_415) = &input.task {
        object.key("Task").string(var_415.as_str());
    }
    if let Some(var_416) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_416.as_str());
    }
    if let Some(var_417) = &input.additional_inference_specifications {
        let mut array_418 = object.key("AdditionalInferenceSpecifications").start_array();
        for item_419 in var_417 {
             {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_420, item_419)?;
                object_420.finish();
            }
        }
        array_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_package_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelPackageGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_421) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_421.as_str());
    }
    if let Some(var_422) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_422.as_str());
    }
    if let Some(var_423) = &input.tags {
        let mut array_424 = object.key("Tags").start_array();
        for item_425 in var_423 {
             {
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_426, item_425)?;
                object_426.finish();
            }
        }
        array_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateModelQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_427) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_427.as_str());
    }
    if let Some(var_428) = &input.model_quality_baseline_config {
        let mut object_429 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_baseline_config(&mut object_429, var_428)?;
        object_429.finish();
    }
    if let Some(var_430) = &input.model_quality_app_specification {
        let mut object_431 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_app_specification(&mut object_431, var_430)?;
        object_431.finish();
    }
    if let Some(var_432) = &input.model_quality_job_input {
        let mut object_433 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality_job_input(&mut object_433, var_432)?;
        object_433.finish();
    }
    if let Some(var_434) = &input.model_quality_job_output_config {
        let mut object_435 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(&mut object_435, var_434)?;
        object_435.finish();
    }
    if let Some(var_436) = &input.job_resources {
        let mut object_437 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(&mut object_437, var_436)?;
        object_437.finish();
    }
    if let Some(var_438) = &input.network_config {
        let mut object_439 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_network_config(&mut object_439, var_438)?;
        object_439.finish();
    }
    if let Some(var_440) = &input.role_arn {
        object.key("RoleArn").string(var_440.as_str());
    }
    if let Some(var_441) = &input.stopping_condition {
        let mut object_442 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(&mut object_442, var_441)?;
        object_442.finish();
    }
    if let Some(var_443) = &input.tags {
        let mut array_444 = object.key("Tags").start_array();
        for item_445 in var_443 {
             {
                let mut object_446 = array_444.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_446, item_445)?;
                object_446.finish();
            }
        }
        array_444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_447.as_str());
    }
    if let Some(var_448) = &input.monitoring_schedule_config {
        let mut object_449 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(&mut object_449, var_448)?;
        object_449.finish();
    }
    if let Some(var_450) = &input.tags {
        let mut array_451 = object.key("Tags").start_array();
        for item_452 in var_450 {
             {
                let mut object_453 = array_451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_453, item_452)?;
                object_453.finish();
            }
        }
        array_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_454) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.instance_type {
        object.key("InstanceType").string(var_455.as_str());
    }
    if let Some(var_456) = &input.subnet_id {
        object.key("SubnetId").string(var_456.as_str());
    }
    if let Some(var_457) = &input.security_group_ids {
        let mut array_458 = object.key("SecurityGroupIds").start_array();
        for item_459 in var_457 {
             {
                array_458.value().string(item_459.as_str());
            }
        }
        array_458.finish();
    }
    if let Some(var_460) = &input.role_arn {
        object.key("RoleArn").string(var_460.as_str());
    }
    if let Some(var_461) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_461.as_str());
    }
    if let Some(var_462) = &input.tags {
        let mut array_463 = object.key("Tags").start_array();
        for item_464 in var_462 {
             {
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_465, item_464)?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_466.as_str());
    }
    if let Some(var_467) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_467.as_str());
    }
    if let Some(var_468) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_468).into()));
    }
    if let Some(var_469) = &input.accelerator_types {
        let mut array_470 = object.key("AcceleratorTypes").start_array();
        for item_471 in var_469 {
             {
                array_470.value().string(item_471.as_str());
            }
        }
        array_470.finish();
    }
    if let Some(var_472) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_472.as_str());
    }
    if let Some(var_473) = &input.additional_code_repositories {
        let mut array_474 = object.key("AdditionalCodeRepositories").start_array();
        for item_475 in var_473 {
             {
                array_474.value().string(item_475.as_str());
            }
        }
        array_474.finish();
    }
    if let Some(var_476) = &input.root_access {
        object.key("RootAccess").string(var_476.as_str());
    }
    if let Some(var_477) = &input.platform_identifier {
        object.key("PlatformIdentifier").string(var_477.as_str());
    }
    if let Some(var_478) = &input.instance_metadata_service_configuration {
        let mut object_479 = object.key("InstanceMetadataServiceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(&mut object_479, var_478)?;
        object_479.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_notebook_instance_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateNotebookInstanceLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_480) = &input.notebook_instance_lifecycle_config_name {
        object.key("NotebookInstanceLifecycleConfigName").string(var_480.as_str());
    }
    if let Some(var_481) = &input.on_create {
        let mut array_482 = object.key("OnCreate").start_array();
        for item_483 in var_481 {
             {
                let mut object_484 = array_482.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(&mut object_484, item_483)?;
                object_484.finish();
            }
        }
        array_482.finish();
    }
    if let Some(var_485) = &input.on_start {
        let mut array_486 = object.key("OnStart").start_array();
        for item_487 in var_485 {
             {
                let mut object_488 = array_486.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(&mut object_488, item_487)?;
                object_488.finish();
            }
        }
        array_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pipeline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePipelineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_489) = &input.pipeline_name {
        object.key("PipelineName").string(var_489.as_str());
    }
    if let Some(var_490) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_490.as_str());
    }
    if let Some(var_491) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_491.as_str());
    }
    if let Some(var_492) = &input.pipeline_definition_s3_location {
        let mut object_493 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(&mut object_493, var_492)?;
        object_493.finish();
    }
    if let Some(var_494) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_494.as_str());
    }
    if let Some(var_495) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_495.as_str());
    }
    if let Some(var_496) = &input.role_arn {
        object.key("RoleArn").string(var_496.as_str());
    }
    if let Some(var_497) = &input.tags {
        let mut array_498 = object.key("Tags").start_array();
        for item_499 in var_497 {
             {
                let mut object_500 = array_498.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_500, item_499)?;
                object_500.finish();
            }
        }
        array_498.finish();
    }
    if let Some(var_501) = &input.parallelism_configuration {
        let mut object_502 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(&mut object_502, var_501)?;
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_domain_url_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePresignedDomainUrlInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_503) = &input.domain_id {
        object.key("DomainId").string(var_503.as_str());
    }
    if let Some(var_504) = &input.user_profile_name {
        object.key("UserProfileName").string(var_504.as_str());
    }
    if let Some(var_505) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_505).into()));
    }
    if let Some(var_506) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_506).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_presigned_notebook_instance_url_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePresignedNotebookInstanceUrlInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_507) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_507.as_str());
    }
    if let Some(var_508) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_508).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_processing_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProcessingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_509) = &input.processing_inputs {
        let mut array_510 = object.key("ProcessingInputs").start_array();
        for item_511 in var_509 {
             {
                let mut object_512 = array_510.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_input(&mut object_512, item_511)?;
                object_512.finish();
            }
        }
        array_510.finish();
    }
    if let Some(var_513) = &input.processing_output_config {
        let mut object_514 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_output_config(&mut object_514, var_513)?;
        object_514.finish();
    }
    if let Some(var_515) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_515.as_str());
    }
    if let Some(var_516) = &input.processing_resources {
        let mut object_517 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_resources(&mut object_517, var_516)?;
        object_517.finish();
    }
    if let Some(var_518) = &input.stopping_condition {
        let mut object_519 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_stopping_condition(&mut object_519, var_518)?;
        object_519.finish();
    }
    if let Some(var_520) = &input.app_specification {
        let mut object_521 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_app_specification(&mut object_521, var_520)?;
        object_521.finish();
    }
    if let Some(var_522) = &input.environment {
        let mut object_523 = object.key("Environment").start_object();
        for (key_524, value_525) in var_522 {
             {
                object_523.key(key_524.as_str()).string(value_525.as_str());
            }
        }
        object_523.finish();
    }
    if let Some(var_526) = &input.network_config {
        let mut object_527 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_527, var_526)?;
        object_527.finish();
    }
    if let Some(var_528) = &input.role_arn {
        object.key("RoleArn").string(var_528.as_str());
    }
    if let Some(var_529) = &input.tags {
        let mut array_530 = object.key("Tags").start_array();
        for item_531 in var_529 {
             {
                let mut object_532 = array_530.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_532, item_531)?;
                object_532.finish();
            }
        }
        array_530.finish();
    }
    if let Some(var_533) = &input.experiment_config {
        let mut object_534 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(&mut object_534, var_533)?;
        object_534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateProjectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_535) = &input.project_name {
        object.key("ProjectName").string(var_535.as_str());
    }
    if let Some(var_536) = &input.project_description {
        object.key("ProjectDescription").string(var_536.as_str());
    }
    if let Some(var_537) = &input.service_catalog_provisioning_details {
        let mut object_538 = object.key("ServiceCatalogProvisioningDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_details(&mut object_538, var_537)?;
        object_538.finish();
    }
    if let Some(var_539) = &input.tags {
        let mut array_540 = object.key("Tags").start_array();
        for item_541 in var_539 {
             {
                let mut object_542 = array_540.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_542, item_541)?;
                object_542.finish();
            }
        }
        array_540.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateStudioLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_543) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_543.as_str());
    }
    if let Some(var_544) = &input.studio_lifecycle_config_content {
        object.key("StudioLifecycleConfigContent").string(var_544.as_str());
    }
    if let Some(var_545) = &input.studio_lifecycle_config_app_type {
        object.key("StudioLifecycleConfigAppType").string(var_545.as_str());
    }
    if let Some(var_546) = &input.tags {
        let mut array_547 = object.key("Tags").start_array();
        for item_548 in var_546 {
             {
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_549, item_548)?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_training_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTrainingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_550) = &input.training_job_name {
        object.key("TrainingJobName").string(var_550.as_str());
    }
    if let Some(var_551) = &input.hyper_parameters {
        let mut object_552 = object.key("HyperParameters").start_object();
        for (key_553, value_554) in var_551 {
             {
                object_552.key(key_553.as_str()).string(value_554.as_str());
            }
        }
        object_552.finish();
    }
    if let Some(var_555) = &input.algorithm_specification {
        let mut object_556 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_algorithm_specification(&mut object_556, var_555)?;
        object_556.finish();
    }
    if let Some(var_557) = &input.role_arn {
        object.key("RoleArn").string(var_557.as_str());
    }
    if let Some(var_558) = &input.input_data_config {
        let mut array_559 = object.key("InputDataConfig").start_array();
        for item_560 in var_558 {
             {
                let mut object_561 = array_559.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(&mut object_561, item_560)?;
                object_561.finish();
            }
        }
        array_559.finish();
    }
    if let Some(var_562) = &input.output_data_config {
        let mut object_563 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(&mut object_563, var_562)?;
        object_563.finish();
    }
    if let Some(var_564) = &input.resource_config {
        let mut object_565 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_565, var_564)?;
        object_565.finish();
    }
    if let Some(var_566) = &input.vpc_config {
        let mut object_567 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_567, var_566)?;
        object_567.finish();
    }
    if let Some(var_568) = &input.stopping_condition {
        let mut object_569 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(&mut object_569, var_568)?;
        object_569.finish();
    }
    if let Some(var_570) = &input.tags {
        let mut array_571 = object.key("Tags").start_array();
        for item_572 in var_570 {
             {
                let mut object_573 = array_571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_573, item_572)?;
                object_573.finish();
            }
        }
        array_571.finish();
    }
    if input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object.key("EnableManagedSpotTraining").boolean(input.enable_managed_spot_training);
    }
    if let Some(var_574) = &input.checkpoint_config {
        let mut object_575 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(&mut object_575, var_574)?;
        object_575.finish();
    }
    if let Some(var_576) = &input.debug_hook_config {
        let mut object_577 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_debug_hook_config(&mut object_577, var_576)?;
        object_577.finish();
    }
    if let Some(var_578) = &input.debug_rule_configurations {
        let mut array_579 = object.key("DebugRuleConfigurations").start_array();
        for item_580 in var_578 {
             {
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_debug_rule_configuration(&mut object_581, item_580)?;
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.tensor_board_output_config {
        let mut object_583 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_output_config(&mut object_583, var_582)?;
        object_583.finish();
    }
    if let Some(var_584) = &input.experiment_config {
        let mut object_585 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(&mut object_585, var_584)?;
        object_585.finish();
    }
    if let Some(var_586) = &input.profiler_config {
        let mut object_587 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config(&mut object_587, var_586)?;
        object_587.finish();
    }
    if let Some(var_588) = &input.profiler_rule_configurations {
        let mut array_589 = object.key("ProfilerRuleConfigurations").start_array();
        for item_590 in var_588 {
             {
                let mut object_591 = array_589.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(&mut object_591, item_590)?;
                object_591.finish();
            }
        }
        array_589.finish();
    }
    if let Some(var_592) = &input.environment {
        let mut object_593 = object.key("Environment").start_object();
        for (key_594, value_595) in var_592 {
             {
                object_593.key(key_594.as_str()).string(value_595.as_str());
            }
        }
        object_593.finish();
    }
    if let Some(var_596) = &input.retry_strategy {
        let mut object_597 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_597, var_596)?;
        object_597.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_transform_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTransformJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_598) = &input.transform_job_name {
        object.key("TransformJobName").string(var_598.as_str());
    }
    if let Some(var_599) = &input.model_name {
        object.key("ModelName").string(var_599.as_str());
    }
    if let Some(var_600) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_600).into()));
    }
    if let Some(var_601) = &input.model_client_config {
        let mut object_602 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_model_client_config(&mut object_602, var_601)?;
        object_602.finish();
    }
    if let Some(var_603) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_603).into()));
    }
    if let Some(var_604) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_604.as_str());
    }
    if let Some(var_605) = &input.environment {
        let mut object_606 = object.key("Environment").start_object();
        for (key_607, value_608) in var_605 {
             {
                object_606.key(key_607.as_str()).string(value_608.as_str());
            }
        }
        object_606.finish();
    }
    if let Some(var_609) = &input.transform_input {
        let mut object_610 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_610, var_609)?;
        object_610.finish();
    }
    if let Some(var_611) = &input.transform_output {
        let mut object_612 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(&mut object_612, var_611)?;
        object_612.finish();
    }
    if let Some(var_613) = &input.data_capture_config {
        let mut object_614 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_data_capture_config(&mut object_614, var_613)?;
        object_614.finish();
    }
    if let Some(var_615) = &input.transform_resources {
        let mut object_616 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(&mut object_616, var_615)?;
        object_616.finish();
    }
    if let Some(var_617) = &input.data_processing {
        let mut object_618 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_crate_model_data_processing(&mut object_618, var_617)?;
        object_618.finish();
    }
    if let Some(var_619) = &input.tags {
        let mut array_620 = object.key("Tags").start_array();
        for item_621 in var_619 {
             {
                let mut object_622 = array_620.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_622, item_621)?;
                object_622.finish();
            }
        }
        array_620.finish();
    }
    if let Some(var_623) = &input.experiment_config {
        let mut object_624 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_experiment_config(&mut object_624, var_623)?;
        object_624.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTrialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_625) = &input.trial_name {
        object.key("TrialName").string(var_625.as_str());
    }
    if let Some(var_626) = &input.display_name {
        object.key("DisplayName").string(var_626.as_str());
    }
    if let Some(var_627) = &input.experiment_name {
        object.key("ExperimentName").string(var_627.as_str());
    }
    if let Some(var_628) = &input.metadata_properties {
        let mut object_629 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(&mut object_629, var_628)?;
        object_629.finish();
    }
    if let Some(var_630) = &input.tags {
        let mut array_631 = object.key("Tags").start_array();
        for item_632 in var_630 {
             {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_633, item_632)?;
                object_633.finish();
            }
        }
        array_631.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_634) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_634.as_str());
    }
    if let Some(var_635) = &input.display_name {
        object.key("DisplayName").string(var_635.as_str());
    }
    if let Some(var_636) = &input.status {
        let mut object_637 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(&mut object_637, var_636)?;
        object_637.finish();
    }
    if let Some(var_638) = &input.start_time {
        object.key("StartTime").date_time(var_638, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_639) = &input.end_time {
        object.key("EndTime").date_time(var_639, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_640) = &input.parameters {
        let mut object_641 = object.key("Parameters").start_object();
        for (key_642, value_643) in var_640 {
             {
                let mut object_644 = object_641.key(key_642.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(&mut object_644, value_643)?;
                object_644.finish();
            }
        }
        object_641.finish();
    }
    if let Some(var_645) = &input.input_artifacts {
        let mut object_646 = object.key("InputArtifacts").start_object();
        for (key_647, value_648) in var_645 {
             {
                let mut object_649 = object_646.key(key_647.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(&mut object_649, value_648)?;
                object_649.finish();
            }
        }
        object_646.finish();
    }
    if let Some(var_650) = &input.output_artifacts {
        let mut object_651 = object.key("OutputArtifacts").start_object();
        for (key_652, value_653) in var_650 {
             {
                let mut object_654 = object_651.key(key_652.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(&mut object_654, value_653)?;
                object_654.finish();
            }
        }
        object_651.finish();
    }
    if let Some(var_655) = &input.metadata_properties {
        let mut object_656 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_properties(&mut object_656, var_655)?;
        object_656.finish();
    }
    if let Some(var_657) = &input.tags {
        let mut array_658 = object.key("Tags").start_array();
        for item_659 in var_657 {
             {
                let mut object_660 = array_658.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_660, item_659)?;
                object_660.finish();
            }
        }
        array_658.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_661) = &input.domain_id {
        object.key("DomainId").string(var_661.as_str());
    }
    if let Some(var_662) = &input.user_profile_name {
        object.key("UserProfileName").string(var_662.as_str());
    }
    if let Some(var_663) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_663.as_str());
    }
    if let Some(var_664) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_664.as_str());
    }
    if let Some(var_665) = &input.tags {
        let mut array_666 = object.key("Tags").start_array();
        for item_667 in var_665 {
             {
                let mut object_668 = array_666.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_668, item_667)?;
                object_668.finish();
            }
        }
        array_666.finish();
    }
    if let Some(var_669) = &input.user_settings {
        let mut object_670 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_670, var_669)?;
        object_670.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workforce_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkforceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_671) = &input.cognito_config {
        let mut object_672 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_config(&mut object_672, var_671)?;
        object_672.finish();
    }
    if let Some(var_673) = &input.oidc_config {
        let mut object_674 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_674, var_673)?;
        object_674.finish();
    }
    if let Some(var_675) = &input.source_ip_config {
        let mut object_676 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(&mut object_676, var_675)?;
        object_676.finish();
    }
    if let Some(var_677) = &input.workforce_name {
        object.key("WorkforceName").string(var_677.as_str());
    }
    if let Some(var_678) = &input.tags {
        let mut array_679 = object.key("Tags").start_array();
        for item_680 in var_678 {
             {
                let mut object_681 = array_679.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_681, item_680)?;
                object_681.finish();
            }
        }
        array_679.finish();
    }
    if let Some(var_682) = &input.workforce_vpc_config {
        let mut object_683 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(&mut object_683, var_682)?;
        object_683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_684) = &input.workteam_name {
        object.key("WorkteamName").string(var_684.as_str());
    }
    if let Some(var_685) = &input.workforce_name {
        object.key("WorkforceName").string(var_685.as_str());
    }
    if let Some(var_686) = &input.member_definitions {
        let mut array_687 = object.key("MemberDefinitions").start_array();
        for item_688 in var_686 {
             {
                let mut object_689 = array_687.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(&mut object_689, item_688)?;
                object_689.finish();
            }
        }
        array_687.finish();
    }
    if let Some(var_690) = &input.description {
        object.key("Description").string(var_690.as_str());
    }
    if let Some(var_691) = &input.notification_configuration {
        let mut object_692 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(&mut object_692, var_691)?;
        object_692.finish();
    }
    if let Some(var_693) = &input.tags {
        let mut array_694 = object.key("Tags").start_array();
        for item_695 in var_693 {
             {
                let mut object_696 = array_694.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_696, item_695)?;
                object_696.finish();
            }
        }
        array_694.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_697) = &input.action_name {
        object.key("ActionName").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_algorithm_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAlgorithmInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_698) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAppInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_699) = &input.domain_id {
        object.key("DomainId").string(var_699.as_str());
    }
    if let Some(var_700) = &input.user_profile_name {
        object.key("UserProfileName").string(var_700.as_str());
    }
    if let Some(var_701) = &input.app_type {
        object.key("AppType").string(var_701.as_str());
    }
    if let Some(var_702) = &input.app_name {
        object.key("AppName").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_image_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAppImageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_703) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_704) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_704.as_str());
    }
    if let Some(var_705) = &input.source {
        let mut object_706 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_artifact_source(&mut object_706, var_705)?;
        object_706.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_707) = &input.source_arn {
        object.key("SourceArn").string(var_707.as_str());
    }
    if let Some(var_708) = &input.destination_arn {
        object.key("DestinationArn").string(var_708.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_code_repository_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCodeRepositoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_709) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_context_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteContextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_710) = &input.context_name {
        object.key("ContextName").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDataQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_711) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_device_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDeviceFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_712) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_712.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_713) = &input.domain_id {
        object.key("DomainId").string(var_713.as_str());
    }
    if let Some(var_714) = &input.retention_policy {
        let mut object_715 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_retention_policy(&mut object_715, var_714)?;
        object_715.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteEdgeDeploymentPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_716) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_edge_deployment_stage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteEdgeDeploymentStageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_717.as_str());
    }
    if let Some(var_718) = &input.stage_name {
        object.key("StageName").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_719) = &input.endpoint_name {
        object.key("EndpointName").string(var_719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_endpoint_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteEndpointConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_720) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experiment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteExperimentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_721) = &input.experiment_name {
        object.key("ExperimentName").string(var_721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_feature_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFeatureGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_722) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_flow_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFlowDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_723) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_human_task_ui_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteHumanTaskUiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_724) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_725) = &input.image_name {
        object.key("ImageName").string(var_725.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteImageVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_726) = &input.image_name {
        object.key("ImageName").string(var_726.as_str());
    }
    if let Some(var_727) = &input.version {
        object.key("Version").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_727).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_728) = &input.model_name {
        object.key("ModelName").string(var_728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_bias_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelBiasJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_729) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_729.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_explainability_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelExplainabilityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_730) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_730.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelPackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_731) = &input.model_package_name {
        object.key("ModelPackageName").string(var_731.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelPackageGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_732) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_732.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_package_group_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelPackageGroupPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_733) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_733.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_model_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteModelQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_734) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_735) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_735.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_736) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_736.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_notebook_instance_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_737) = &input.notebook_instance_lifecycle_config_name {
        object.key("NotebookInstanceLifecycleConfigName").string(var_737.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pipeline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePipelineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_738) = &input.pipeline_name {
        object.key("PipelineName").string(var_738.as_str());
    }
    if let Some(var_739) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_739.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_project_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteProjectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_740) = &input.project_name {
        object.key("ProjectName").string(var_740.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteStudioLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_741) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_741.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_742) = &input.resource_arn {
        object.key("ResourceArn").string(var_742.as_str());
    }
    if let Some(var_743) = &input.tag_keys {
        let mut array_744 = object.key("TagKeys").start_array();
        for item_745 in var_743 {
             {
                array_744.value().string(item_745.as_str());
            }
        }
        array_744.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTrialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_746) = &input.trial_name {
        object.key("TrialName").string(var_746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_747) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_748) = &input.domain_id {
        object.key("DomainId").string(var_748.as_str());
    }
    if let Some(var_749) = &input.user_profile_name {
        object.key("UserProfileName").string(var_749.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workforce_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkforceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_750) = &input.workforce_name {
        object.key("WorkforceName").string(var_750.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_751) = &input.workteam_name {
        object.key("WorkteamName").string(var_751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_752) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_752.as_str());
    }
    if let Some(var_753) = &input.device_names {
        let mut array_754 = object.key("DeviceNames").start_array();
        for item_755 in var_753 {
             {
                array_754.value().string(item_755.as_str());
            }
        }
        array_754.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_756) = &input.action_name {
        object.key("ActionName").string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_algorithm_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAlgorithmInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_757) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_757.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAppInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_758) = &input.domain_id {
        object.key("DomainId").string(var_758.as_str());
    }
    if let Some(var_759) = &input.user_profile_name {
        object.key("UserProfileName").string(var_759.as_str());
    }
    if let Some(var_760) = &input.app_type {
        object.key("AppType").string(var_760.as_str());
    }
    if let Some(var_761) = &input.app_name {
        object.key("AppName").string(var_761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_image_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAppImageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_762) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_763) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_ml_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAutoMlJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_764) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_code_repository_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeCodeRepositoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_765) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compilation_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeCompilationJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_766) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_context_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeContextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_767) = &input.context_name {
        object.key("ContextName").string(var_767.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDataQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_768) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_769) = &input.next_token {
        object.key("NextToken").string(var_769.as_str());
    }
    if let Some(var_770) = &input.device_name {
        object.key("DeviceName").string(var_770.as_str());
    }
    if let Some(var_771) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDeviceFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_772) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_773) = &input.domain_id {
        object.key("DomainId").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_deployment_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEdgeDeploymentPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_774) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_774.as_str());
    }
    if let Some(var_775) = &input.next_token {
        object.key("NextToken").string(var_775.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_edge_packaging_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEdgePackagingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_776) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_777) = &input.endpoint_name {
        object.key("EndpointName").string(var_777.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_endpoint_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEndpointConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_778) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_778.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experiment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeExperimentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_779) = &input.experiment_name {
        object.key("ExperimentName").string(var_779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFeatureGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_780) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_780.as_str());
    }
    if let Some(var_781) = &input.next_token {
        object.key("NextToken").string(var_781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_feature_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFeatureMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_782) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_782.as_str());
    }
    if let Some(var_783) = &input.feature_name {
        object.key("FeatureName").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_flow_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFlowDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_784) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_784.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_human_task_ui_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeHumanTaskUiInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_785) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_hyper_parameter_tuning_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeHyperParameterTuningJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_786) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_787) = &input.image_name {
        object.key("ImageName").string(var_787.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeImageVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_788) = &input.image_name {
        object.key("ImageName").string(var_788.as_str());
    }
    if let Some(var_789) = &input.version {
        object.key("Version").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_789).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inference_recommendations_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInferenceRecommendationsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_790) = &input.job_name {
        object.key("JobName").string(var_790.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_labeling_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLabelingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_791) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_791.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_lineage_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLineageGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_792) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_792.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_793) = &input.model_name {
        object.key("ModelName").string(var_793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_bias_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelBiasJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_794) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_794.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_explainability_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelExplainabilityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_795) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_795.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelPackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_796) = &input.model_package_name {
        object.key("ModelPackageName").string(var_796.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_package_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelPackageGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_797) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_797.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_model_quality_job_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeModelQualityJobDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_798) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_798.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_799) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_799.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_800) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_instance_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_801) = &input.notebook_instance_lifecycle_config_name {
        object.key("NotebookInstanceLifecycleConfigName").string(var_801.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePipelineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_802) = &input.pipeline_name {
        object.key("PipelineName").string(var_802.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_definition_for_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePipelineDefinitionForExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_803) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_803.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pipeline_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePipelineExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_804) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_804.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_processing_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProcessingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_805) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_805.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_project_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeProjectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_806) = &input.project_name {
        object.key("ProjectName").string(var_806.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeStudioLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_807) = &input.studio_lifecycle_config_name {
        object.key("StudioLifecycleConfigName").string(var_807.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_subscribed_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeSubscribedWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_808) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_training_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTrainingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_809) = &input.training_job_name {
        object.key("TrainingJobName").string(var_809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_transform_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTransformJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_810) = &input.transform_job_name {
        object.key("TransformJobName").string(var_810.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTrialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_811) = &input.trial_name {
        object.key("TrialName").string(var_811.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_812) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_812.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeUserProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_813) = &input.domain_id {
        object.key("DomainId").string(var_813.as_str());
    }
    if let Some(var_814) = &input.user_profile_name {
        object.key("UserProfileName").string(var_814.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workforce_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkforceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_815) = &input.workforce_name {
        object.key("WorkforceName").string(var_815.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_816) = &input.workteam_name {
        object.key("WorkteamName").string(var_816.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_817) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_817.as_str());
    }
    if let Some(var_818) = &input.trial_name {
        object.key("TrialName").string(var_818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_fleet_report_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDeviceFleetReportInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_819) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_819.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_lineage_group_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetLineageGroupPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_820) = &input.lineage_group_name {
        object.key("LineageGroupName").string(var_820.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_model_package_group_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetModelPackageGroupPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_821) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_821.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_search_suggestions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSearchSuggestionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_822) = &input.resource {
        object.key("Resource").string(var_822.as_str());
    }
    if let Some(var_823) = &input.suggestion_query {
        let mut object_824 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_suggestion_query(&mut object_824, var_823)?;
        object_824.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_actions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListActionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_825) = &input.source_uri {
        object.key("SourceUri").string(var_825.as_str());
    }
    if let Some(var_826) = &input.action_type {
        object.key("ActionType").string(var_826.as_str());
    }
    if let Some(var_827) = &input.created_after {
        object.key("CreatedAfter").date_time(var_827, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_828) = &input.created_before {
        object.key("CreatedBefore").date_time(var_828, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_829) = &input.sort_by {
        object.key("SortBy").string(var_829.as_str());
    }
    if let Some(var_830) = &input.sort_order {
        object.key("SortOrder").string(var_830.as_str());
    }
    if let Some(var_831) = &input.next_token {
        object.key("NextToken").string(var_831.as_str());
    }
    if let Some(var_832) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_832).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_algorithms_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAlgorithmsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_833) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_833, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_834) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_834, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_835) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_835).into()));
    }
    if let Some(var_836) = &input.name_contains {
        object.key("NameContains").string(var_836.as_str());
    }
    if let Some(var_837) = &input.next_token {
        object.key("NextToken").string(var_837.as_str());
    }
    if let Some(var_838) = &input.sort_by {
        object.key("SortBy").string(var_838.as_str());
    }
    if let Some(var_839) = &input.sort_order {
        object.key("SortOrder").string(var_839.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_app_image_configs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAppImageConfigsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_840) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_840).into()));
    }
    if let Some(var_841) = &input.next_token {
        object.key("NextToken").string(var_841.as_str());
    }
    if let Some(var_842) = &input.name_contains {
        object.key("NameContains").string(var_842.as_str());
    }
    if let Some(var_843) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_843, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_844) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_844, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_845) = &input.modified_time_before {
        object.key("ModifiedTimeBefore").date_time(var_845, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_846) = &input.modified_time_after {
        object.key("ModifiedTimeAfter").date_time(var_846, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_847) = &input.sort_by {
        object.key("SortBy").string(var_847.as_str());
    }
    if let Some(var_848) = &input.sort_order {
        object.key("SortOrder").string(var_848.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_apps_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAppsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_849) = &input.next_token {
        object.key("NextToken").string(var_849.as_str());
    }
    if let Some(var_850) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_850).into()));
    }
    if let Some(var_851) = &input.sort_order {
        object.key("SortOrder").string(var_851.as_str());
    }
    if let Some(var_852) = &input.sort_by {
        object.key("SortBy").string(var_852.as_str());
    }
    if let Some(var_853) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_853.as_str());
    }
    if let Some(var_854) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_854.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_artifacts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListArtifactsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_855) = &input.source_uri {
        object.key("SourceUri").string(var_855.as_str());
    }
    if let Some(var_856) = &input.artifact_type {
        object.key("ArtifactType").string(var_856.as_str());
    }
    if let Some(var_857) = &input.created_after {
        object.key("CreatedAfter").date_time(var_857, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_858) = &input.created_before {
        object.key("CreatedBefore").date_time(var_858, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_859) = &input.sort_by {
        object.key("SortBy").string(var_859.as_str());
    }
    if let Some(var_860) = &input.sort_order {
        object.key("SortOrder").string(var_860.as_str());
    }
    if let Some(var_861) = &input.next_token {
        object.key("NextToken").string(var_861.as_str());
    }
    if let Some(var_862) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_862).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAssociationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_863) = &input.source_arn {
        object.key("SourceArn").string(var_863.as_str());
    }
    if let Some(var_864) = &input.destination_arn {
        object.key("DestinationArn").string(var_864.as_str());
    }
    if let Some(var_865) = &input.source_type {
        object.key("SourceType").string(var_865.as_str());
    }
    if let Some(var_866) = &input.destination_type {
        object.key("DestinationType").string(var_866.as_str());
    }
    if let Some(var_867) = &input.association_type {
        object.key("AssociationType").string(var_867.as_str());
    }
    if let Some(var_868) = &input.created_after {
        object.key("CreatedAfter").date_time(var_868, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_869) = &input.created_before {
        object.key("CreatedBefore").date_time(var_869, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_870) = &input.sort_by {
        object.key("SortBy").string(var_870.as_str());
    }
    if let Some(var_871) = &input.sort_order {
        object.key("SortOrder").string(var_871.as_str());
    }
    if let Some(var_872) = &input.next_token {
        object.key("NextToken").string(var_872.as_str());
    }
    if let Some(var_873) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_873).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_auto_ml_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAutoMlJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_874) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_874, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_875) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_875, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_876) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_876, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_877) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_877, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_878) = &input.name_contains {
        object.key("NameContains").string(var_878.as_str());
    }
    if let Some(var_879) = &input.status_equals {
        object.key("StatusEquals").string(var_879.as_str());
    }
    if let Some(var_880) = &input.sort_order {
        object.key("SortOrder").string(var_880.as_str());
    }
    if let Some(var_881) = &input.sort_by {
        object.key("SortBy").string(var_881.as_str());
    }
    if let Some(var_882) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_882).into()));
    }
    if let Some(var_883) = &input.next_token {
        object.key("NextToken").string(var_883.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_candidates_for_auto_ml_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCandidatesForAutoMlJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_884) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_884.as_str());
    }
    if let Some(var_885) = &input.status_equals {
        object.key("StatusEquals").string(var_885.as_str());
    }
    if let Some(var_886) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_886.as_str());
    }
    if let Some(var_887) = &input.sort_order {
        object.key("SortOrder").string(var_887.as_str());
    }
    if let Some(var_888) = &input.sort_by {
        object.key("SortBy").string(var_888.as_str());
    }
    if let Some(var_889) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_889).into()));
    }
    if let Some(var_890) = &input.next_token {
        object.key("NextToken").string(var_890.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_code_repositories_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCodeRepositoriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_891) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_891, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_892) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_892, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_893) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_893, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_894) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_894, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_895) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_895).into()));
    }
    if let Some(var_896) = &input.name_contains {
        object.key("NameContains").string(var_896.as_str());
    }
    if let Some(var_897) = &input.next_token {
        object.key("NextToken").string(var_897.as_str());
    }
    if let Some(var_898) = &input.sort_by {
        object.key("SortBy").string(var_898.as_str());
    }
    if let Some(var_899) = &input.sort_order {
        object.key("SortOrder").string(var_899.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compilation_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCompilationJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_900) = &input.next_token {
        object.key("NextToken").string(var_900.as_str());
    }
    if let Some(var_901) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_901).into()));
    }
    if let Some(var_902) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_902, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_903) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_903, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_904) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_904, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_905) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_905, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_906) = &input.name_contains {
        object.key("NameContains").string(var_906.as_str());
    }
    if let Some(var_907) = &input.status_equals {
        object.key("StatusEquals").string(var_907.as_str());
    }
    if let Some(var_908) = &input.sort_by {
        object.key("SortBy").string(var_908.as_str());
    }
    if let Some(var_909) = &input.sort_order {
        object.key("SortOrder").string(var_909.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contexts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListContextsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_910) = &input.source_uri {
        object.key("SourceUri").string(var_910.as_str());
    }
    if let Some(var_911) = &input.context_type {
        object.key("ContextType").string(var_911.as_str());
    }
    if let Some(var_912) = &input.created_after {
        object.key("CreatedAfter").date_time(var_912, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_913) = &input.created_before {
        object.key("CreatedBefore").date_time(var_913, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_914) = &input.sort_by {
        object.key("SortBy").string(var_914.as_str());
    }
    if let Some(var_915) = &input.sort_order {
        object.key("SortOrder").string(var_915.as_str());
    }
    if let Some(var_916) = &input.next_token {
        object.key("NextToken").string(var_916.as_str());
    }
    if let Some(var_917) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_917).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_quality_job_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDataQualityJobDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_918) = &input.endpoint_name {
        object.key("EndpointName").string(var_918.as_str());
    }
    if let Some(var_919) = &input.sort_by {
        object.key("SortBy").string(var_919.as_str());
    }
    if let Some(var_920) = &input.sort_order {
        object.key("SortOrder").string(var_920.as_str());
    }
    if let Some(var_921) = &input.next_token {
        object.key("NextToken").string(var_921.as_str());
    }
    if let Some(var_922) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_922).into()));
    }
    if let Some(var_923) = &input.name_contains {
        object.key("NameContains").string(var_923.as_str());
    }
    if let Some(var_924) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_924, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_925) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_925, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_device_fleets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDeviceFleetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_926) = &input.next_token {
        object.key("NextToken").string(var_926.as_str());
    }
    if let Some(var_927) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_927).into()));
    }
    if let Some(var_928) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_928, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_929) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_930) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_930, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_931) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_931, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_932) = &input.name_contains {
        object.key("NameContains").string(var_932.as_str());
    }
    if let Some(var_933) = &input.sort_by {
        object.key("SortBy").string(var_933.as_str());
    }
    if let Some(var_934) = &input.sort_order {
        object.key("SortOrder").string(var_934.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_935) = &input.next_token {
        object.key("NextToken").string(var_935.as_str());
    }
    if let Some(var_936) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_936).into()));
    }
    if let Some(var_937) = &input.latest_heartbeat_after {
        object.key("LatestHeartbeatAfter").date_time(var_937, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_938) = &input.model_name {
        object.key("ModelName").string(var_938.as_str());
    }
    if let Some(var_939) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_939.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_domains_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDomainsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_940) = &input.next_token {
        object.key("NextToken").string(var_940.as_str());
    }
    if let Some(var_941) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_941).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_deployment_plans_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListEdgeDeploymentPlansInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_942) = &input.next_token {
        object.key("NextToken").string(var_942.as_str());
    }
    if let Some(var_943) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_943).into()));
    }
    if let Some(var_944) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_944, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_945) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_945, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_946) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_946, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_947) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_947, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_948) = &input.name_contains {
        object.key("NameContains").string(var_948.as_str());
    }
    if let Some(var_949) = &input.device_fleet_name_contains {
        object.key("DeviceFleetNameContains").string(var_949.as_str());
    }
    if let Some(var_950) = &input.sort_by {
        object.key("SortBy").string(var_950.as_str());
    }
    if let Some(var_951) = &input.sort_order {
        object.key("SortOrder").string(var_951.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_edge_packaging_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListEdgePackagingJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_952) = &input.next_token {
        object.key("NextToken").string(var_952.as_str());
    }
    if let Some(var_953) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_953).into()));
    }
    if let Some(var_954) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_954, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_955) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_955, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_956) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_956, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_957) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_957, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_958) = &input.name_contains {
        object.key("NameContains").string(var_958.as_str());
    }
    if let Some(var_959) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_959.as_str());
    }
    if let Some(var_960) = &input.status_equals {
        object.key("StatusEquals").string(var_960.as_str());
    }
    if let Some(var_961) = &input.sort_by {
        object.key("SortBy").string(var_961.as_str());
    }
    if let Some(var_962) = &input.sort_order {
        object.key("SortOrder").string(var_962.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoint_configs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListEndpointConfigsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_963) = &input.sort_by {
        object.key("SortBy").string(var_963.as_str());
    }
    if let Some(var_964) = &input.sort_order {
        object.key("SortOrder").string(var_964.as_str());
    }
    if let Some(var_965) = &input.next_token {
        object.key("NextToken").string(var_965.as_str());
    }
    if let Some(var_966) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_966).into()));
    }
    if let Some(var_967) = &input.name_contains {
        object.key("NameContains").string(var_967.as_str());
    }
    if let Some(var_968) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_968, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_969) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_969, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_970) = &input.sort_by {
        object.key("SortBy").string(var_970.as_str());
    }
    if let Some(var_971) = &input.sort_order {
        object.key("SortOrder").string(var_971.as_str());
    }
    if let Some(var_972) = &input.next_token {
        object.key("NextToken").string(var_972.as_str());
    }
    if let Some(var_973) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_973).into()));
    }
    if let Some(var_974) = &input.name_contains {
        object.key("NameContains").string(var_974.as_str());
    }
    if let Some(var_975) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_975, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_976) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_976, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_977) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_977, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_978) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_978, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_979) = &input.status_equals {
        object.key("StatusEquals").string(var_979.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiments_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListExperimentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_980) = &input.created_after {
        object.key("CreatedAfter").date_time(var_980, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_981) = &input.created_before {
        object.key("CreatedBefore").date_time(var_981, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_982) = &input.sort_by {
        object.key("SortBy").string(var_982.as_str());
    }
    if let Some(var_983) = &input.sort_order {
        object.key("SortOrder").string(var_983.as_str());
    }
    if let Some(var_984) = &input.next_token {
        object.key("NextToken").string(var_984.as_str());
    }
    if let Some(var_985) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_985).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_feature_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFeatureGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_986) = &input.name_contains {
        object.key("NameContains").string(var_986.as_str());
    }
    if let Some(var_987) = &input.feature_group_status_equals {
        object.key("FeatureGroupStatusEquals").string(var_987.as_str());
    }
    if let Some(var_988) = &input.offline_store_status_equals {
        object.key("OfflineStoreStatusEquals").string(var_988.as_str());
    }
    if let Some(var_989) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_989, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_990) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_990, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_991) = &input.sort_order {
        object.key("SortOrder").string(var_991.as_str());
    }
    if let Some(var_992) = &input.sort_by {
        object.key("SortBy").string(var_992.as_str());
    }
    if let Some(var_993) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_993).into()));
    }
    if let Some(var_994) = &input.next_token {
        object.key("NextToken").string(var_994.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_flow_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFlowDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_995) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_995, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_996) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_996, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_997) = &input.sort_order {
        object.key("SortOrder").string(var_997.as_str());
    }
    if let Some(var_998) = &input.next_token {
        object.key("NextToken").string(var_998.as_str());
    }
    if let Some(var_999) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_999).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_human_task_uis_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListHumanTaskUisInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1000) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1000, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1001) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1001, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1002) = &input.sort_order {
        object.key("SortOrder").string(var_1002.as_str());
    }
    if let Some(var_1003) = &input.next_token {
        object.key("NextToken").string(var_1003.as_str());
    }
    if let Some(var_1004) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1004).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_hyper_parameter_tuning_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListHyperParameterTuningJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1005) = &input.next_token {
        object.key("NextToken").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1006).into()));
    }
    if let Some(var_1007) = &input.sort_by {
        object.key("SortBy").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.sort_order {
        object.key("SortOrder").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.name_contains {
        object.key("NameContains").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1010, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1011) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1011, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1012) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1012, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1013) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1013, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1014) = &input.status_equals {
        object.key("StatusEquals").string(var_1014.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_images_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListImagesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1015) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1015, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1016) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1016, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1017) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1017, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1018) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1018, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1019) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1019).into()));
    }
    if let Some(var_1020) = &input.name_contains {
        object.key("NameContains").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.next_token {
        object.key("NextToken").string(var_1021.as_str());
    }
    if let Some(var_1022) = &input.sort_by {
        object.key("SortBy").string(var_1022.as_str());
    }
    if let Some(var_1023) = &input.sort_order {
        object.key("SortOrder").string(var_1023.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_image_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListImageVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1024) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1024, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1025) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1025, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1026) = &input.image_name {
        object.key("ImageName").string(var_1026.as_str());
    }
    if let Some(var_1027) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1027, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1028) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1028, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1029) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1029).into()));
    }
    if let Some(var_1030) = &input.next_token {
        object.key("NextToken").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.sort_by {
        object.key("SortBy").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.sort_order {
        object.key("SortOrder").string(var_1032.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inference_recommendations_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListInferenceRecommendationsJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1033) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1033, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1034) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1034, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1035) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1035, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1036) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1036, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1037) = &input.name_contains {
        object.key("NameContains").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.status_equals {
        object.key("StatusEquals").string(var_1038.as_str());
    }
    if let Some(var_1039) = &input.sort_by {
        object.key("SortBy").string(var_1039.as_str());
    }
    if let Some(var_1040) = &input.sort_order {
        object.key("SortOrder").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.next_token {
        object.key("NextToken").string(var_1041.as_str());
    }
    if let Some(var_1042) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1042).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inference_recommendations_job_steps_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListInferenceRecommendationsJobStepsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1043) = &input.job_name {
        object.key("JobName").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.status {
        object.key("Status").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.step_type {
        object.key("StepType").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1046).into()));
    }
    if let Some(var_1047) = &input.next_token {
        object.key("NextToken").string(var_1047.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLabelingJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1048) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1048, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1049) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1049, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1050) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1050, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1051) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1051, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1052) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1052).into()));
    }
    if let Some(var_1053) = &input.next_token {
        object.key("NextToken").string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.name_contains {
        object.key("NameContains").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.sort_by {
        object.key("SortBy").string(var_1055.as_str());
    }
    if let Some(var_1056) = &input.sort_order {
        object.key("SortOrder").string(var_1056.as_str());
    }
    if let Some(var_1057) = &input.status_equals {
        object.key("StatusEquals").string(var_1057.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_labeling_jobs_for_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLabelingJobsForWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1058) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1059).into()));
    }
    if let Some(var_1060) = &input.next_token {
        object.key("NextToken").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1061, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1062) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1062, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1063) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.sort_by {
        object.key("SortBy").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.sort_order {
        object.key("SortOrder").string(var_1065.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_lineage_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListLineageGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1066) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1066, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1067) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1067, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1068) = &input.sort_by {
        object.key("SortBy").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.sort_order {
        object.key("SortOrder").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.next_token {
        object.key("NextToken").string(var_1070.as_str());
    }
    if let Some(var_1071) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1071).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_bias_job_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelBiasJobDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1072) = &input.endpoint_name {
        object.key("EndpointName").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.sort_by {
        object.key("SortBy").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.sort_order {
        object.key("SortOrder").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.next_token {
        object.key("NextToken").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1076).into()));
    }
    if let Some(var_1077) = &input.name_contains {
        object.key("NameContains").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1078, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1079) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1079, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_explainability_job_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelExplainabilityJobDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1080) = &input.endpoint_name {
        object.key("EndpointName").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.sort_by {
        object.key("SortBy").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.sort_order {
        object.key("SortOrder").string(var_1082.as_str());
    }
    if let Some(var_1083) = &input.next_token {
        object.key("NextToken").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1084).into()));
    }
    if let Some(var_1085) = &input.name_contains {
        object.key("NameContains").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1086, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1087) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1087, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1088) = &input.search_expression {
        let mut object_1089 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_model_metadata_search_expression(&mut object_1089, var_1088)?;
        object_1089.finish();
    }
    if let Some(var_1090) = &input.next_token {
        object.key("NextToken").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1091).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_package_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelPackageGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1092) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1092, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1093) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1093, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1094) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1094).into()));
    }
    if let Some(var_1095) = &input.name_contains {
        object.key("NameContains").string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.next_token {
        object.key("NextToken").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.sort_by {
        object.key("SortBy").string(var_1097.as_str());
    }
    if let Some(var_1098) = &input.sort_order {
        object.key("SortOrder").string(var_1098.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_packages_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelPackagesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1099) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1099, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1100) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1100, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1101) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1101).into()));
    }
    if let Some(var_1102) = &input.name_contains {
        object.key("NameContains").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1103.as_str());
    }
    if let Some(var_1104) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.model_package_type {
        object.key("ModelPackageType").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.next_token {
        object.key("NextToken").string(var_1106.as_str());
    }
    if let Some(var_1107) = &input.sort_by {
        object.key("SortBy").string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.sort_order {
        object.key("SortOrder").string(var_1108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_model_quality_job_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelQualityJobDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1109) = &input.endpoint_name {
        object.key("EndpointName").string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.sort_by {
        object.key("SortBy").string(var_1110.as_str());
    }
    if let Some(var_1111) = &input.sort_order {
        object.key("SortOrder").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.next_token {
        object.key("NextToken").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1113).into()));
    }
    if let Some(var_1114) = &input.name_contains {
        object.key("NameContains").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1115, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1116) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1116, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_models_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListModelsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1117) = &input.sort_by {
        object.key("SortBy").string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.sort_order {
        object.key("SortOrder").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.next_token {
        object.key("NextToken").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1120).into()));
    }
    if let Some(var_1121) = &input.name_contains {
        object.key("NameContains").string(var_1121.as_str());
    }
    if let Some(var_1122) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1122, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1123) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1123, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMonitoringExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1124) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1124.as_str());
    }
    if let Some(var_1125) = &input.endpoint_name {
        object.key("EndpointName").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.sort_by {
        object.key("SortBy").string(var_1126.as_str());
    }
    if let Some(var_1127) = &input.sort_order {
        object.key("SortOrder").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.next_token {
        object.key("NextToken").string(var_1128.as_str());
    }
    if let Some(var_1129) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1129).into()));
    }
    if let Some(var_1130) = &input.scheduled_time_before {
        object.key("ScheduledTimeBefore").date_time(var_1130, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1131) = &input.scheduled_time_after {
        object.key("ScheduledTimeAfter").date_time(var_1131, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1132) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1132, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1133) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1133, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1134) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1134, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1135) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1135, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1136) = &input.status_equals {
        object.key("StatusEquals").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_monitoring_schedules_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMonitoringSchedulesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1139) = &input.endpoint_name {
        object.key("EndpointName").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.sort_by {
        object.key("SortBy").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.sort_order {
        object.key("SortOrder").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.next_token {
        object.key("NextToken").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1143).into()));
    }
    if let Some(var_1144) = &input.name_contains {
        object.key("NameContains").string(var_1144.as_str());
    }
    if let Some(var_1145) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1145, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1146) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1146, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1147) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1147, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1148) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1148, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1149) = &input.status_equals {
        object.key("StatusEquals").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1150.as_str());
    }
    if let Some(var_1151) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instance_lifecycle_configs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListNotebookInstanceLifecycleConfigsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1152) = &input.next_token {
        object.key("NextToken").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1153).into()));
    }
    if let Some(var_1154) = &input.sort_by {
        object.key("SortBy").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.sort_order {
        object.key("SortOrder").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.name_contains {
        object.key("NameContains").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1157, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1158) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1158, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1159) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1159, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1160) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_instances_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListNotebookInstancesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1161) = &input.next_token {
        object.key("NextToken").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1162).into()));
    }
    if let Some(var_1163) = &input.sort_by {
        object.key("SortBy").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.sort_order {
        object.key("SortOrder").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.name_contains {
        object.key("NameContains").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1166, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1167) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1167, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1168) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1168, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1169) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1169, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1170) = &input.status_equals {
        object.key("StatusEquals").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.notebook_instance_lifecycle_config_name_contains {
        object.key("NotebookInstanceLifecycleConfigNameContains").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.additional_code_repository_equals {
        object.key("AdditionalCodeRepositoryEquals").string(var_1173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPipelineExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1174) = &input.pipeline_name {
        object.key("PipelineName").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1175, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1176) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1176, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1177) = &input.sort_by {
        object.key("SortBy").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.sort_order {
        object.key("SortOrder").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.next_token {
        object.key("NextToken").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1180).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_execution_steps_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPipelineExecutionStepsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1181) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.next_token {
        object.key("NextToken").string(var_1182.as_str());
    }
    if let Some(var_1183) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1183).into()));
    }
    if let Some(var_1184) = &input.sort_order {
        object.key("SortOrder").string(var_1184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipeline_parameters_for_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPipelineParametersForExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1185) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1185.as_str());
    }
    if let Some(var_1186) = &input.next_token {
        object.key("NextToken").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1187).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pipelines_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPipelinesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1188) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1188.as_str());
    }
    if let Some(var_1189) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1189, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1190) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1190, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1191) = &input.sort_by {
        object.key("SortBy").string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.sort_order {
        object.key("SortOrder").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.next_token {
        object.key("NextToken").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1194).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_processing_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProcessingJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1195) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1195, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1196) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1196, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1197) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1197, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1198) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1198, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1199) = &input.name_contains {
        object.key("NameContains").string(var_1199.as_str());
    }
    if let Some(var_1200) = &input.status_equals {
        object.key("StatusEquals").string(var_1200.as_str());
    }
    if let Some(var_1201) = &input.sort_by {
        object.key("SortBy").string(var_1201.as_str());
    }
    if let Some(var_1202) = &input.sort_order {
        object.key("SortOrder").string(var_1202.as_str());
    }
    if let Some(var_1203) = &input.next_token {
        object.key("NextToken").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1204).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_projects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListProjectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1205) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1205, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1206) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1206, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1207) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1207).into()));
    }
    if let Some(var_1208) = &input.name_contains {
        object.key("NameContains").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.next_token {
        object.key("NextToken").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.sort_by {
        object.key("SortBy").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.sort_order {
        object.key("SortOrder").string(var_1211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stage_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListStageDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1212) = &input.next_token {
        object.key("NextToken").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1213).into()));
    }
    if let Some(var_1214) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_1214.as_str());
    }
    if input.exclude_devices_deployed_in_other_stage {
        object.key("ExcludeDevicesDeployedInOtherStage").boolean(input.exclude_devices_deployed_in_other_stage);
    }
    if let Some(var_1215) = &input.stage_name {
        object.key("StageName").string(var_1215.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_lifecycle_configs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListStudioLifecycleConfigsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1216) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1216).into()));
    }
    if let Some(var_1217) = &input.next_token {
        object.key("NextToken").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.name_contains {
        object.key("NameContains").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.app_type_equals {
        object.key("AppTypeEquals").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1220, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1221) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1221, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1222) = &input.modified_time_before {
        object.key("ModifiedTimeBefore").date_time(var_1222, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1223) = &input.modified_time_after {
        object.key("ModifiedTimeAfter").date_time(var_1223, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1224) = &input.sort_by {
        object.key("SortBy").string(var_1224.as_str());
    }
    if let Some(var_1225) = &input.sort_order {
        object.key("SortOrder").string(var_1225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_subscribed_workteams_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSubscribedWorkteamsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1226) = &input.name_contains {
        object.key("NameContains").string(var_1226.as_str());
    }
    if let Some(var_1227) = &input.next_token {
        object.key("NextToken").string(var_1227.as_str());
    }
    if let Some(var_1228) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1228).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1229) = &input.resource_arn {
        object.key("ResourceArn").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.next_token {
        object.key("NextToken").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1231).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTrainingJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1232) = &input.next_token {
        object.key("NextToken").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1233).into()));
    }
    if let Some(var_1234) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1234, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1235) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1235, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1236) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1236, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1237) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1237, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1238) = &input.name_contains {
        object.key("NameContains").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.status_equals {
        object.key("StatusEquals").string(var_1239.as_str());
    }
    if let Some(var_1240) = &input.sort_by {
        object.key("SortBy").string(var_1240.as_str());
    }
    if let Some(var_1241) = &input.sort_order {
        object.key("SortOrder").string(var_1241.as_str());
    }
    if let Some(var_1242) = &input.warm_pool_status_equals {
        object.key("WarmPoolStatusEquals").string(var_1242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_training_jobs_for_hyper_parameter_tuning_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1243) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.next_token {
        object.key("NextToken").string(var_1244.as_str());
    }
    if let Some(var_1245) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1245).into()));
    }
    if let Some(var_1246) = &input.status_equals {
        object.key("StatusEquals").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.sort_by {
        object.key("SortBy").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.sort_order {
        object.key("SortOrder").string(var_1248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_transform_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTransformJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1249) = &input.creation_time_after {
        object.key("CreationTimeAfter").date_time(var_1249, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1250) = &input.creation_time_before {
        object.key("CreationTimeBefore").date_time(var_1250, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1251) = &input.last_modified_time_after {
        object.key("LastModifiedTimeAfter").date_time(var_1251, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1252) = &input.last_modified_time_before {
        object.key("LastModifiedTimeBefore").date_time(var_1252, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1253) = &input.name_contains {
        object.key("NameContains").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.status_equals {
        object.key("StatusEquals").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.sort_by {
        object.key("SortBy").string(var_1255.as_str());
    }
    if let Some(var_1256) = &input.sort_order {
        object.key("SortOrder").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.next_token {
        object.key("NextToken").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1258).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trial_components_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTrialComponentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1259) = &input.experiment_name {
        object.key("ExperimentName").string(var_1259.as_str());
    }
    if let Some(var_1260) = &input.trial_name {
        object.key("TrialName").string(var_1260.as_str());
    }
    if let Some(var_1261) = &input.source_arn {
        object.key("SourceArn").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1262, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1263) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1263, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1264) = &input.sort_by {
        object.key("SortBy").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.sort_order {
        object.key("SortOrder").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1266).into()));
    }
    if let Some(var_1267) = &input.next_token {
        object.key("NextToken").string(var_1267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_trials_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTrialsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1268) = &input.experiment_name {
        object.key("ExperimentName").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1270, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1271) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1271, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1272) = &input.sort_by {
        object.key("SortBy").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.sort_order {
        object.key("SortOrder").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1274).into()));
    }
    if let Some(var_1275) = &input.next_token {
        object.key("NextToken").string(var_1275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUserProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1276) = &input.next_token {
        object.key("NextToken").string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1277).into()));
    }
    if let Some(var_1278) = &input.sort_order {
        object.key("SortOrder").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.sort_by {
        object.key("SortBy").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workforces_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListWorkforcesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1282) = &input.sort_by {
        object.key("SortBy").string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.sort_order {
        object.key("SortOrder").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.name_contains {
        object.key("NameContains").string(var_1284.as_str());
    }
    if let Some(var_1285) = &input.next_token {
        object.key("NextToken").string(var_1285.as_str());
    }
    if let Some(var_1286) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1286).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workteams_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListWorkteamsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1287) = &input.sort_by {
        object.key("SortBy").string(var_1287.as_str());
    }
    if let Some(var_1288) = &input.sort_order {
        object.key("SortOrder").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.name_contains {
        object.key("NameContains").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.next_token {
        object.key("NextToken").string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1291).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_model_package_group_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutModelPackageGroupPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1292) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1293.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_lineage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::QueryLineageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1294) = &input.start_arns {
        let mut array_1295 = object.key("StartArns").start_array();
        for item_1296 in var_1294 {
             {
                array_1295.value().string(item_1296.as_str());
            }
        }
        array_1295.finish();
    }
    if let Some(var_1297) = &input.direction {
        object.key("Direction").string(var_1297.as_str());
    }
    if input.include_edges {
        object.key("IncludeEdges").boolean(input.include_edges);
    }
    if let Some(var_1298) = &input.filters {
        let mut object_1299 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_query_filters(&mut object_1299, var_1298)?;
        object_1299.finish();
    }
    if let Some(var_1300) = &input.max_depth {
        object.key("MaxDepth").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1300).into()));
    }
    if let Some(var_1301) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1301).into()));
    }
    if let Some(var_1302) = &input.next_token {
        object.key("NextToken").string(var_1302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1303) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.devices {
        let mut array_1305 = object.key("Devices").start_array();
        for item_1306 in var_1304 {
             {
                let mut object_1307 = array_1305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(&mut object_1307, item_1306)?;
                object_1307.finish();
            }
        }
        array_1305.finish();
    }
    if let Some(var_1308) = &input.tags {
        let mut array_1309 = object.key("Tags").start_array();
        for item_1310 in var_1308 {
             {
                let mut object_1311 = array_1309.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1311, item_1310)?;
                object_1311.finish();
            }
        }
        array_1309.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_render_ui_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RenderUiTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1312) = &input.ui_template {
        let mut object_1313 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_template(&mut object_1313, var_1312)?;
        object_1313.finish();
    }
    if let Some(var_1314) = &input.task {
        let mut object_1315 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_crate_model_renderable_task(&mut object_1315, var_1314)?;
        object_1315.finish();
    }
    if let Some(var_1316) = &input.role_arn {
        object.key("RoleArn").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_pipeline_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RetryPipelineExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1318) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1318.as_str());
    }
    if let Some(var_1319) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1319.as_str());
    }
    if let Some(var_1320) = &input.parallelism_configuration {
        let mut object_1321 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(&mut object_1321, var_1320)?;
        object_1321.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1322) = &input.resource {
        object.key("Resource").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.search_expression {
        let mut object_1324 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_crate_model_search_expression(&mut object_1324, var_1323)?;
        object_1324.finish();
    }
    if let Some(var_1325) = &input.sort_by {
        object.key("SortBy").string(var_1325.as_str());
    }
    if let Some(var_1326) = &input.sort_order {
        object.key("SortOrder").string(var_1326.as_str());
    }
    if let Some(var_1327) = &input.next_token {
        object.key("NextToken").string(var_1327.as_str());
    }
    if let Some(var_1328) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1328).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_failure_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SendPipelineExecutionStepFailureInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1329) = &input.callback_token {
        object.key("CallbackToken").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.failure_reason {
        object.key("FailureReason").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_pipeline_execution_step_success_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SendPipelineExecutionStepSuccessInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1332) = &input.callback_token {
        object.key("CallbackToken").string(var_1332.as_str());
    }
    if let Some(var_1333) = &input.output_parameters {
        let mut array_1334 = object.key("OutputParameters").start_array();
        for item_1335 in var_1333 {
             {
                let mut object_1336 = array_1334.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_parameter(&mut object_1336, item_1335)?;
                object_1336.finish();
            }
        }
        array_1334.finish();
    }
    if let Some(var_1337) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_edge_deployment_stage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartEdgeDeploymentStageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1338) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.stage_name {
        object.key("StageName").string(var_1339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1340) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1341) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_pipeline_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartPipelineExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1342) = &input.pipeline_name {
        object.key("PipelineName").string(var_1342.as_str());
    }
    if let Some(var_1343) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1343.as_str());
    }
    if let Some(var_1344) = &input.pipeline_parameters {
        let mut array_1345 = object.key("PipelineParameters").start_array();
        for item_1346 in var_1344 {
             {
                let mut object_1347 = array_1345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter(&mut object_1347, item_1346)?;
                object_1347.finish();
            }
        }
        array_1345.finish();
    }
    if let Some(var_1348) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1348.as_str());
    }
    if let Some(var_1349) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.parallelism_configuration {
        let mut object_1351 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(&mut object_1351, var_1350)?;
        object_1351.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_auto_ml_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopAutoMlJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1352) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_compilation_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopCompilationJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1353) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_deployment_stage_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopEdgeDeploymentStageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1354) = &input.edge_deployment_plan_name {
        object.key("EdgeDeploymentPlanName").string(var_1354.as_str());
    }
    if let Some(var_1355) = &input.stage_name {
        object.key("StageName").string(var_1355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_edge_packaging_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopEdgePackagingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1356) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_hyper_parameter_tuning_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopHyperParameterTuningJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1357) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_inference_recommendations_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopInferenceRecommendationsJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1358) = &input.job_name {
        object.key("JobName").string(var_1358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_labeling_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopLabelingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1359) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1360) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1361) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1361.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_pipeline_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopPipelineExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1362) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1362.as_str());
    }
    if let Some(var_1363) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_processing_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopProcessingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1364) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_training_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopTrainingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1365) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_transform_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopTransformJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1366) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateActionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1367) = &input.action_name {
        object.key("ActionName").string(var_1367.as_str());
    }
    if let Some(var_1368) = &input.description {
        object.key("Description").string(var_1368.as_str());
    }
    if let Some(var_1369) = &input.status {
        object.key("Status").string(var_1369.as_str());
    }
    if let Some(var_1370) = &input.properties {
        let mut object_1371 = object.key("Properties").start_object();
        for (key_1372, value_1373) in var_1370 {
             {
                object_1371.key(key_1372.as_str()).string(value_1373.as_str());
            }
        }
        object_1371.finish();
    }
    if let Some(var_1374) = &input.properties_to_remove {
        let mut array_1375 = object.key("PropertiesToRemove").start_array();
        for item_1376 in var_1374 {
             {
                array_1375.value().string(item_1376.as_str());
            }
        }
        array_1375.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_image_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAppImageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1377) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1377.as_str());
    }
    if let Some(var_1378) = &input.kernel_gateway_image_config {
        let mut object_1379 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_image_config(&mut object_1379, var_1378)?;
        object_1379.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_artifact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateArtifactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1380) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1380.as_str());
    }
    if let Some(var_1381) = &input.artifact_name {
        object.key("ArtifactName").string(var_1381.as_str());
    }
    if let Some(var_1382) = &input.properties {
        let mut object_1383 = object.key("Properties").start_object();
        for (key_1384, value_1385) in var_1382 {
             {
                object_1383.key(key_1384.as_str()).string(value_1385.as_str());
            }
        }
        object_1383.finish();
    }
    if let Some(var_1386) = &input.properties_to_remove {
        let mut array_1387 = object.key("PropertiesToRemove").start_array();
        for item_1388 in var_1386 {
             {
                array_1387.value().string(item_1388.as_str());
            }
        }
        array_1387.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_code_repository_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCodeRepositoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1389) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1389.as_str());
    }
    if let Some(var_1390) = &input.git_config {
        let mut object_1391 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_git_config_for_update(&mut object_1391, var_1390)?;
        object_1391.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_context_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1392) = &input.context_name {
        object.key("ContextName").string(var_1392.as_str());
    }
    if let Some(var_1393) = &input.description {
        object.key("Description").string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.properties {
        let mut object_1395 = object.key("Properties").start_object();
        for (key_1396, value_1397) in var_1394 {
             {
                object_1395.key(key_1396.as_str()).string(value_1397.as_str());
            }
        }
        object_1395.finish();
    }
    if let Some(var_1398) = &input.properties_to_remove {
        let mut array_1399 = object.key("PropertiesToRemove").start_array();
        for item_1400 in var_1398 {
             {
                array_1399.value().string(item_1400.as_str());
            }
        }
        array_1399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_fleet_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDeviceFleetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1401) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1401.as_str());
    }
    if let Some(var_1402) = &input.role_arn {
        object.key("RoleArn").string(var_1402.as_str());
    }
    if let Some(var_1403) = &input.description {
        object.key("Description").string(var_1403.as_str());
    }
    if let Some(var_1404) = &input.output_config {
        let mut object_1405 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_output_config(&mut object_1405, var_1404)?;
        object_1405.finish();
    }
    if let Some(var_1406) = &input.enable_iot_role_alias {
        object.key("EnableIotRoleAlias").boolean(*var_1406);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1407) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1407.as_str());
    }
    if let Some(var_1408) = &input.devices {
        let mut array_1409 = object.key("Devices").start_array();
        for item_1410 in var_1408 {
             {
                let mut object_1411 = array_1409.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(&mut object_1411, item_1410)?;
                object_1411.finish();
            }
        }
        array_1409.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1412) = &input.domain_id {
        object.key("DomainId").string(var_1412.as_str());
    }
    if let Some(var_1413) = &input.default_user_settings {
        let mut object_1414 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1414, var_1413)?;
        object_1414.finish();
    }
    if let Some(var_1415) = &input.domain_settings_for_update {
        let mut object_1416 = object.key("DomainSettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_settings_for_update(&mut object_1416, var_1415)?;
        object_1416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1417) = &input.endpoint_name {
        object.key("EndpointName").string(var_1417.as_str());
    }
    if let Some(var_1418) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1418.as_str());
    }
    if input.retain_all_variant_properties {
        object.key("RetainAllVariantProperties").boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1419) = &input.exclude_retained_variant_properties {
        let mut array_1420 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1421 in var_1419 {
             {
                let mut object_1422 = array_1420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_variant_property(&mut object_1422, item_1421)?;
                object_1422.finish();
            }
        }
        array_1420.finish();
    }
    if let Some(var_1423) = &input.deployment_config {
        let mut object_1424 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(&mut object_1424, var_1423)?;
        object_1424.finish();
    }
    if input.retain_deployment_config {
        object.key("RetainDeploymentConfig").boolean(input.retain_deployment_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_endpoint_weights_and_capacities_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1425) = &input.endpoint_name {
        object.key("EndpointName").string(var_1425.as_str());
    }
    if let Some(var_1426) = &input.desired_weights_and_capacities {
        let mut array_1427 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1428 in var_1426 {
             {
                let mut object_1429 = array_1427.value().start_object();
                crate::json_ser::serialize_structure_crate_model_desired_weight_and_capacity(&mut object_1429, item_1428)?;
                object_1429.finish();
            }
        }
        array_1427.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experiment_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateExperimentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1430) = &input.experiment_name {
        object.key("ExperimentName").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.display_name {
        object.key("DisplayName").string(var_1431.as_str());
    }
    if let Some(var_1432) = &input.description {
        object.key("Description").string(var_1432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFeatureGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1433) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1433.as_str());
    }
    if let Some(var_1434) = &input.feature_additions {
        let mut array_1435 = object.key("FeatureAdditions").start_array();
        for item_1436 in var_1434 {
             {
                let mut object_1437 = array_1435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_definition(&mut object_1437, item_1436)?;
                object_1437.finish();
            }
        }
        array_1435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_feature_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFeatureMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1438) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_1438.as_str());
    }
    if let Some(var_1439) = &input.feature_name {
        object.key("FeatureName").string(var_1439.as_str());
    }
    if let Some(var_1440) = &input.description {
        object.key("Description").string(var_1440.as_str());
    }
    if let Some(var_1441) = &input.parameter_additions {
        let mut array_1442 = object.key("ParameterAdditions").start_array();
        for item_1443 in var_1441 {
             {
                let mut object_1444 = array_1442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_feature_parameter(&mut object_1444, item_1443)?;
                object_1444.finish();
            }
        }
        array_1442.finish();
    }
    if let Some(var_1445) = &input.parameter_removals {
        let mut array_1446 = object.key("ParameterRemovals").start_array();
        for item_1447 in var_1445 {
             {
                array_1446.value().string(item_1447.as_str());
            }
        }
        array_1446.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateImageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1448) = &input.delete_properties {
        let mut array_1449 = object.key("DeleteProperties").start_array();
        for item_1450 in var_1448 {
             {
                array_1449.value().string(item_1450.as_str());
            }
        }
        array_1449.finish();
    }
    if let Some(var_1451) = &input.description {
        object.key("Description").string(var_1451.as_str());
    }
    if let Some(var_1452) = &input.display_name {
        object.key("DisplayName").string(var_1452.as_str());
    }
    if let Some(var_1453) = &input.image_name {
        object.key("ImageName").string(var_1453.as_str());
    }
    if let Some(var_1454) = &input.role_arn {
        object.key("RoleArn").string(var_1454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_model_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateModelPackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1455) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1455.as_str());
    }
    if let Some(var_1456) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1456.as_str());
    }
    if let Some(var_1457) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1457.as_str());
    }
    if let Some(var_1458) = &input.customer_metadata_properties {
        let mut object_1459 = object.key("CustomerMetadataProperties").start_object();
        for (key_1460, value_1461) in var_1458 {
             {
                object_1459.key(key_1460.as_str()).string(value_1461.as_str());
            }
        }
        object_1459.finish();
    }
    if let Some(var_1462) = &input.customer_metadata_properties_to_remove {
        let mut array_1463 = object.key("CustomerMetadataPropertiesToRemove").start_array();
        for item_1464 in var_1462 {
             {
                array_1463.value().string(item_1464.as_str());
            }
        }
        array_1463.finish();
    }
    if let Some(var_1465) = &input.additional_inference_specifications_to_add {
        let mut array_1466 = object.key("AdditionalInferenceSpecificationsToAdd").start_array();
        for item_1467 in var_1465 {
             {
                let mut object_1468 = array_1466.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_inference_specification_definition(&mut object_1468, item_1467)?;
                object_1468.finish();
            }
        }
        array_1466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_monitoring_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMonitoringScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1469) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1469.as_str());
    }
    if let Some(var_1470) = &input.monitoring_schedule_config {
        let mut object_1471 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_schedule_config(&mut object_1471, var_1470)?;
        object_1471.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateNotebookInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1472) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1472.as_str());
    }
    if let Some(var_1473) = &input.instance_type {
        object.key("InstanceType").string(var_1473.as_str());
    }
    if let Some(var_1474) = &input.role_arn {
        object.key("RoleArn").string(var_1474.as_str());
    }
    if let Some(var_1475) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1475.as_str());
    }
    if input.disassociate_lifecycle_config {
        object.key("DisassociateLifecycleConfig").boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1476) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1476).into()));
    }
    if let Some(var_1477) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1477.as_str());
    }
    if let Some(var_1478) = &input.additional_code_repositories {
        let mut array_1479 = object.key("AdditionalCodeRepositories").start_array();
        for item_1480 in var_1478 {
             {
                array_1479.value().string(item_1480.as_str());
            }
        }
        array_1479.finish();
    }
    if let Some(var_1481) = &input.accelerator_types {
        let mut array_1482 = object.key("AcceleratorTypes").start_array();
        for item_1483 in var_1481 {
             {
                array_1482.value().string(item_1483.as_str());
            }
        }
        array_1482.finish();
    }
    if input.disassociate_accelerator_types {
        object.key("DisassociateAcceleratorTypes").boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object.key("DisassociateDefaultCodeRepository").boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object.key("DisassociateAdditionalCodeRepositories").boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1484) = &input.root_access {
        object.key("RootAccess").string(var_1484.as_str());
    }
    if let Some(var_1485) = &input.instance_metadata_service_configuration {
        let mut object_1486 = object.key("InstanceMetadataServiceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_metadata_service_configuration(&mut object_1486, var_1485)?;
        object_1486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_notebook_instance_lifecycle_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1487) = &input.notebook_instance_lifecycle_config_name {
        object.key("NotebookInstanceLifecycleConfigName").string(var_1487.as_str());
    }
    if let Some(var_1488) = &input.on_create {
        let mut array_1489 = object.key("OnCreate").start_array();
        for item_1490 in var_1488 {
             {
                let mut object_1491 = array_1489.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(&mut object_1491, item_1490)?;
                object_1491.finish();
            }
        }
        array_1489.finish();
    }
    if let Some(var_1492) = &input.on_start {
        let mut array_1493 = object.key("OnStart").start_array();
        for item_1494 in var_1492 {
             {
                let mut object_1495 = array_1493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_notebook_instance_lifecycle_hook(&mut object_1495, item_1494)?;
                object_1495.finish();
            }
        }
        array_1493.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePipelineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1496) = &input.pipeline_name {
        object.key("PipelineName").string(var_1496.as_str());
    }
    if let Some(var_1497) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1497.as_str());
    }
    if let Some(var_1498) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1498.as_str());
    }
    if let Some(var_1499) = &input.pipeline_definition_s3_location {
        let mut object_1500 = object.key("PipelineDefinitionS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_definition_s3_location(&mut object_1500, var_1499)?;
        object_1500.finish();
    }
    if let Some(var_1501) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1501.as_str());
    }
    if let Some(var_1502) = &input.role_arn {
        object.key("RoleArn").string(var_1502.as_str());
    }
    if let Some(var_1503) = &input.parallelism_configuration {
        let mut object_1504 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(&mut object_1504, var_1503)?;
        object_1504.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pipeline_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePipelineExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1505) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1505.as_str());
    }
    if let Some(var_1506) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1506.as_str());
    }
    if let Some(var_1507) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1507.as_str());
    }
    if let Some(var_1508) = &input.parallelism_configuration {
        let mut object_1509 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_parallelism_configuration(&mut object_1509, var_1508)?;
        object_1509.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_project_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateProjectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1510) = &input.project_name {
        object.key("ProjectName").string(var_1510.as_str());
    }
    if let Some(var_1511) = &input.project_description {
        object.key("ProjectDescription").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.service_catalog_provisioning_update_details {
        let mut object_1513 = object.key("ServiceCatalogProvisioningUpdateDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_service_catalog_provisioning_update_details(&mut object_1513, var_1512)?;
        object_1513.finish();
    }
    if let Some(var_1514) = &input.tags {
        let mut array_1515 = object.key("Tags").start_array();
        for item_1516 in var_1514 {
             {
                let mut object_1517 = array_1515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_1517, item_1516)?;
                object_1517.finish();
            }
        }
        array_1515.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_training_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTrainingJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1518) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1518.as_str());
    }
    if let Some(var_1519) = &input.profiler_config {
        let mut object_1520 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_profiler_config_for_update(&mut object_1520, var_1519)?;
        object_1520.finish();
    }
    if let Some(var_1521) = &input.profiler_rule_configurations {
        let mut array_1522 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1523 in var_1521 {
             {
                let mut object_1524 = array_1522.value().start_object();
                crate::json_ser::serialize_structure_crate_model_profiler_rule_configuration(&mut object_1524, item_1523)?;
                object_1524.finish();
            }
        }
        array_1522.finish();
    }
    if let Some(var_1525) = &input.resource_config {
        let mut object_1526 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config_for_update(&mut object_1526, var_1525)?;
        object_1526.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTrialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1527) = &input.trial_name {
        object.key("TrialName").string(var_1527.as_str());
    }
    if let Some(var_1528) = &input.display_name {
        object.key("DisplayName").string(var_1528.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trial_component_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTrialComponentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1529) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1529.as_str());
    }
    if let Some(var_1530) = &input.display_name {
        object.key("DisplayName").string(var_1530.as_str());
    }
    if let Some(var_1531) = &input.status {
        let mut object_1532 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_trial_component_status(&mut object_1532, var_1531)?;
        object_1532.finish();
    }
    if let Some(var_1533) = &input.start_time {
        object.key("StartTime").date_time(var_1533, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1534) = &input.end_time {
        object.key("EndTime").date_time(var_1534, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1535) = &input.parameters {
        let mut object_1536 = object.key("Parameters").start_object();
        for (key_1537, value_1538) in var_1535 {
             {
                let mut object_1539 = object_1536.key(key_1537.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_trial_component_parameter_value(&mut object_1539, value_1538)?;
                object_1539.finish();
            }
        }
        object_1536.finish();
    }
    if let Some(var_1540) = &input.parameters_to_remove {
        let mut array_1541 = object.key("ParametersToRemove").start_array();
        for item_1542 in var_1540 {
             {
                array_1541.value().string(item_1542.as_str());
            }
        }
        array_1541.finish();
    }
    if let Some(var_1543) = &input.input_artifacts {
        let mut object_1544 = object.key("InputArtifacts").start_object();
        for (key_1545, value_1546) in var_1543 {
             {
                let mut object_1547 = object_1544.key(key_1545.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(&mut object_1547, value_1546)?;
                object_1547.finish();
            }
        }
        object_1544.finish();
    }
    if let Some(var_1548) = &input.input_artifacts_to_remove {
        let mut array_1549 = object.key("InputArtifactsToRemove").start_array();
        for item_1550 in var_1548 {
             {
                array_1549.value().string(item_1550.as_str());
            }
        }
        array_1549.finish();
    }
    if let Some(var_1551) = &input.output_artifacts {
        let mut object_1552 = object.key("OutputArtifacts").start_object();
        for (key_1553, value_1554) in var_1551 {
             {
                let mut object_1555 = object_1552.key(key_1553.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_trial_component_artifact(&mut object_1555, value_1554)?;
                object_1555.finish();
            }
        }
        object_1552.finish();
    }
    if let Some(var_1556) = &input.output_artifacts_to_remove {
        let mut array_1557 = object.key("OutputArtifactsToRemove").start_array();
        for item_1558 in var_1556 {
             {
                array_1557.value().string(item_1558.as_str());
            }
        }
        array_1557.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1559) = &input.domain_id {
        object.key("DomainId").string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.user_settings {
        let mut object_1562 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_settings(&mut object_1562, var_1561)?;
        object_1562.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workforce_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkforceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1563) = &input.workforce_name {
        object.key("WorkforceName").string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.source_ip_config {
        let mut object_1565 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_source_ip_config(&mut object_1565, var_1564)?;
        object_1565.finish();
    }
    if let Some(var_1566) = &input.oidc_config {
        let mut object_1567 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_config(&mut object_1567, var_1566)?;
        object_1567.finish();
    }
    if let Some(var_1568) = &input.workforce_vpc_config {
        let mut object_1569 = object.key("WorkforceVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_workforce_vpc_config_request(&mut object_1569, var_1568)?;
        object_1569.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workteam_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkteamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1570) = &input.workteam_name {
        object.key("WorkteamName").string(var_1570.as_str());
    }
    if let Some(var_1571) = &input.member_definitions {
        let mut array_1572 = object.key("MemberDefinitions").start_array();
        for item_1573 in var_1571 {
             {
                let mut object_1574 = array_1572.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_definition(&mut object_1574, item_1573)?;
                object_1574.finish();
            }
        }
        array_1572.finish();
    }
    if let Some(var_1575) = &input.description {
        object.key("Description").string(var_1575.as_str());
    }
    if let Some(var_1576) = &input.notification_configuration {
        let mut object_1577 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_configuration(&mut object_1577, var_1576)?;
        object_1577.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1578) = &input.key {
        object.key("Key").string(var_1578.as_str());
    }
    if let Some(var_1579) = &input.value {
        object.key("Value").string(var_1579.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ActionSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1580) = &input.source_uri {
        object.key("SourceUri").string(var_1580.as_str());
    }
    if let Some(var_1581) = &input.source_type {
        object.key("SourceType").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.source_id {
        object.key("SourceId").string(var_1582.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_properties(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetadataProperties) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1583) = &input.commit_id {
        object.key("CommitId").string(var_1583.as_str());
    }
    if let Some(var_1584) = &input.repository {
        object.key("Repository").string(var_1584.as_str());
    }
    if let Some(var_1585) = &input.generated_by {
        object.key("GeneratedBy").string(var_1585.as_str());
    }
    if let Some(var_1586) = &input.project_id {
        object.key("ProjectId").string(var_1586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrainingSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1587) = &input.training_image {
        object.key("TrainingImage").string(var_1587.as_str());
    }
    if let Some(var_1588) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1588.as_str());
    }
    if let Some(var_1589) = &input.supported_hyper_parameters {
        let mut array_1590 = object.key("SupportedHyperParameters").start_array();
        for item_1591 in var_1589 {
             {
                let mut object_1592 = array_1590.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_specification(&mut object_1592, item_1591)?;
                object_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1593) = &input.supported_training_instance_types {
        let mut array_1594 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1595 in var_1593 {
             {
                array_1594.value().string(item_1595.as_str());
            }
        }
        array_1594.finish();
    }
    if input.supports_distributed_training {
        object.key("SupportsDistributedTraining").boolean(input.supports_distributed_training);
    }
    if let Some(var_1596) = &input.metric_definitions {
        let mut array_1597 = object.key("MetricDefinitions").start_array();
        for item_1598 in var_1596 {
             {
                let mut object_1599 = array_1597.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(&mut object_1599, item_1598)?;
                object_1599.finish();
            }
        }
        array_1597.finish();
    }
    if let Some(var_1600) = &input.training_channels {
        let mut array_1601 = object.key("TrainingChannels").start_array();
        for item_1602 in var_1600 {
             {
                let mut object_1603 = array_1601.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_specification(&mut object_1603, item_1602)?;
                object_1603.finish();
            }
        }
        array_1601.finish();
    }
    if let Some(var_1604) = &input.supported_tuning_job_objective_metrics {
        let mut array_1605 = object.key("SupportedTuningJobObjectiveMetrics").start_array();
        for item_1606 in var_1604 {
             {
                let mut object_1607 = array_1605.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1607, item_1606)?;
                object_1607.finish();
            }
        }
        array_1605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InferenceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1608) = &input.containers {
        let mut array_1609 = object.key("Containers").start_array();
        for item_1610 in var_1608 {
             {
                let mut object_1611 = array_1609.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1611, item_1610)?;
                object_1611.finish();
            }
        }
        array_1609.finish();
    }
    if let Some(var_1612) = &input.supported_transform_instance_types {
        let mut array_1613 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1614 in var_1612 {
             {
                array_1613.value().string(item_1614.as_str());
            }
        }
        array_1613.finish();
    }
    if let Some(var_1615) = &input.supported_realtime_inference_instance_types {
        let mut array_1616 = object.key("SupportedRealtimeInferenceInstanceTypes").start_array();
        for item_1617 in var_1615 {
             {
                array_1616.value().string(item_1617.as_str());
            }
        }
        array_1616.finish();
    }
    if let Some(var_1618) = &input.supported_content_types {
        let mut array_1619 = object.key("SupportedContentTypes").start_array();
        for item_1620 in var_1618 {
             {
                array_1619.value().string(item_1620.as_str());
            }
        }
        array_1619.finish();
    }
    if let Some(var_1621) = &input.supported_response_mime_types {
        let mut array_1622 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1623 in var_1621 {
             {
                array_1622.value().string(item_1623.as_str());
            }
        }
        array_1622.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AlgorithmValidationSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1624) = &input.validation_role {
        object.key("ValidationRole").string(var_1624.as_str());
    }
    if let Some(var_1625) = &input.validation_profiles {
        let mut array_1626 = object.key("ValidationProfiles").start_array();
        for item_1627 in var_1625 {
             {
                let mut object_1628 = array_1626.value().start_object();
                crate::json_ser::serialize_structure_crate_model_algorithm_validation_profile(&mut object_1628, item_1627)?;
                object_1628.finish();
            }
        }
        array_1626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_spec(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceSpec) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1629) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1629.as_str());
    }
    if let Some(var_1630) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1630.as_str());
    }
    if let Some(var_1631) = &input.instance_type {
        object.key("InstanceType").string(var_1631.as_str());
    }
    if let Some(var_1632) = &input.lifecycle_config_arn {
        object.key("LifecycleConfigArn").string(var_1632.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_image_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KernelGatewayImageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1633) = &input.kernel_specs {
        let mut array_1634 = object.key("KernelSpecs").start_array();
        for item_1635 in var_1633 {
             {
                let mut object_1636 = array_1634.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kernel_spec(&mut object_1636, item_1635)?;
                object_1636.finish();
            }
        }
        array_1634.finish();
    }
    if let Some(var_1637) = &input.file_system_config {
        let mut object_1638 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_config(&mut object_1638, var_1637)?;
        object_1638.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ArtifactSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1639) = &input.source_uri {
        object.key("SourceUri").string(var_1639.as_str());
    }
    if let Some(var_1640) = &input.source_types {
        let mut array_1641 = object.key("SourceTypes").start_array();
        for item_1642 in var_1640 {
             {
                let mut object_1643 = array_1641.value().start_object();
                crate::json_ser::serialize_structure_crate_model_artifact_source_type(&mut object_1643, item_1642)?;
                object_1643.finish();
            }
        }
        array_1641.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_channel(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlChannel) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1644) = &input.data_source {
        let mut object_1645 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_source(&mut object_1645, var_1644)?;
        object_1645.finish();
    }
    if let Some(var_1646) = &input.compression_type {
        object.key("CompressionType").string(var_1646.as_str());
    }
    if let Some(var_1647) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.content_type {
        object.key("ContentType").string(var_1648.as_str());
    }
    if let Some(var_1649) = &input.channel_type {
        object.key("ChannelType").string(var_1649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_output_data_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlOutputDataConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1650) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1650.as_str());
    }
    if let Some(var_1651) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1651.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_objective(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlJobObjective) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1652) = &input.metric_name {
        object.key("MetricName").string(var_1652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlJobConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1653) = &input.completion_criteria {
        let mut object_1654 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_job_completion_criteria(&mut object_1654, var_1653)?;
        object_1654.finish();
    }
    if let Some(var_1655) = &input.security_config {
        let mut object_1656 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_security_config(&mut object_1656, var_1655)?;
        object_1656.finish();
    }
    if let Some(var_1657) = &input.data_split_config {
        let mut object_1658 = object.key("DataSplitConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_data_split_config(&mut object_1658, var_1657)?;
        object_1658.finish();
    }
    if let Some(var_1659) = &input.candidate_generation_config {
        let mut object_1660 = object.key("CandidateGenerationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_ml_candidate_generation_config(&mut object_1660, var_1659)?;
        object_1660.finish();
    }
    if let Some(var_1661) = &input.mode {
        object.key("Mode").string(var_1661.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_deploy_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelDeployConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.auto_generate_endpoint_name {
        object.key("AutoGenerateEndpointName").boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1662) = &input.endpoint_name {
        object.key("EndpointName").string(var_1662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GitConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1663) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1663.as_str());
    }
    if let Some(var_1664) = &input.branch {
        object.key("Branch").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.secret_arn {
        object.key("SecretArn").string(var_1665.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1666) = &input.s3_uri {
        object.key("S3Uri").string(var_1666.as_str());
    }
    if let Some(var_1667) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1667.as_str());
    }
    if let Some(var_1668) = &input.framework {
        object.key("Framework").string(var_1668.as_str());
    }
    if let Some(var_1669) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1669.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1670) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1670.as_str());
    }
    if let Some(var_1671) = &input.target_device {
        object.key("TargetDevice").string(var_1671.as_str());
    }
    if let Some(var_1672) = &input.target_platform {
        let mut object_1673 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(&mut object_1673, var_1672)?;
        object_1673.finish();
    }
    if let Some(var_1674) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1674.as_str());
    }
    if let Some(var_1675) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_neo_vpc_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NeoVpcConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1676) = &input.security_group_ids {
        let mut array_1677 = object.key("SecurityGroupIds").start_array();
        for item_1678 in var_1676 {
             {
                array_1677.value().string(item_1678.as_str());
            }
        }
        array_1677.finish();
    }
    if let Some(var_1679) = &input.subnets {
        let mut array_1680 = object.key("Subnets").start_array();
        for item_1681 in var_1679 {
             {
                array_1680.value().string(item_1681.as_str());
            }
        }
        array_1680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stopping_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StoppingCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()));
    }
    if let Some(var_1682) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1682).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContextSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1683) = &input.source_uri {
        object.key("SourceUri").string(var_1683.as_str());
    }
    if let Some(var_1684) = &input.source_type {
        object.key("SourceType").string(var_1684.as_str());
    }
    if let Some(var_1685) = &input.source_id {
        object.key("SourceId").string(var_1685.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1686) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1686.as_str());
    }
    if let Some(var_1687) = &input.constraints_resource {
        let mut object_1688 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(&mut object_1688, var_1687)?;
        object_1688.finish();
    }
    if let Some(var_1689) = &input.statistics_resource {
        let mut object_1690 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(&mut object_1690, var_1689)?;
        object_1690.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityAppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1691) = &input.image_uri {
        object.key("ImageUri").string(var_1691.as_str());
    }
    if let Some(var_1692) = &input.container_entrypoint {
        let mut array_1693 = object.key("ContainerEntrypoint").start_array();
        for item_1694 in var_1692 {
             {
                array_1693.value().string(item_1694.as_str());
            }
        }
        array_1693.finish();
    }
    if let Some(var_1695) = &input.container_arguments {
        let mut array_1696 = object.key("ContainerArguments").start_array();
        for item_1697 in var_1695 {
             {
                array_1696.value().string(item_1697.as_str());
            }
        }
        array_1696.finish();
    }
    if let Some(var_1698) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1698.as_str());
    }
    if let Some(var_1699) = &input.post_analytics_processor_source_uri {
        object.key("PostAnalyticsProcessorSourceUri").string(var_1699.as_str());
    }
    if let Some(var_1700) = &input.environment {
        let mut object_1701 = object.key("Environment").start_object();
        for (key_1702, value_1703) in var_1700 {
             {
                object_1701.key(key_1702.as_str()).string(value_1703.as_str());
            }
        }
        object_1701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_quality_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataQualityJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1704) = &input.endpoint_input {
        let mut object_1705 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1705, var_1704)?;
        object_1705.finish();
    }
    if let Some(var_1706) = &input.batch_transform_input {
        let mut object_1707 = object.key("BatchTransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_transform_input(&mut object_1707, var_1706)?;
        object_1707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1708) = &input.monitoring_outputs {
        let mut array_1709 = object.key("MonitoringOutputs").start_array();
        for item_1710 in var_1708 {
             {
                let mut object_1711 = array_1709.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_output(&mut object_1711, item_1710)?;
                object_1711.finish();
            }
        }
        array_1709.finish();
    }
    if let Some(var_1712) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1712.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_resources(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringResources) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1713) = &input.cluster_config {
        let mut object_1714 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_cluster_config(&mut object_1714, var_1713)?;
        object_1714.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_network_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringNetworkConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(input.enable_network_isolation);
    }
    if let Some(var_1715) = &input.vpc_config {
        let mut object_1716 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1716, var_1715)?;
        object_1716.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_stopping_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringStoppingCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaxRuntimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EdgeOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1717) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1717.as_str());
    }
    if let Some(var_1718) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1718.as_str());
    }
    if let Some(var_1719) = &input.preset_deployment_type {
        object.key("PresetDeploymentType").string(var_1719.as_str());
    }
    if let Some(var_1720) = &input.preset_deployment_config {
        object.key("PresetDeploymentConfig").string(var_1720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1721) = &input.execution_role {
        object.key("ExecutionRole").string(var_1721.as_str());
    }
    if let Some(var_1722) = &input.security_groups {
        let mut array_1723 = object.key("SecurityGroups").start_array();
        for item_1724 in var_1722 {
             {
                array_1723.value().string(item_1724.as_str());
            }
        }
        array_1723.finish();
    }
    if let Some(var_1725) = &input.sharing_settings {
        let mut object_1726 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sharing_settings(&mut object_1726, var_1725)?;
        object_1726.finish();
    }
    if let Some(var_1727) = &input.jupyter_server_app_settings {
        let mut object_1728 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_jupyter_server_app_settings(&mut object_1728, var_1727)?;
        object_1728.finish();
    }
    if let Some(var_1729) = &input.kernel_gateway_app_settings {
        let mut object_1730 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_kernel_gateway_app_settings(&mut object_1730, var_1729)?;
        object_1730.finish();
    }
    if let Some(var_1731) = &input.tensor_board_app_settings {
        let mut object_1732 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_tensor_board_app_settings(&mut object_1732, var_1731)?;
        object_1732.finish();
    }
    if let Some(var_1733) = &input.r_studio_server_pro_app_settings {
        let mut object_1734 = object.key("RStudioServerProAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_app_settings(&mut object_1734, var_1733)?;
        object_1734.finish();
    }
    if let Some(var_1735) = &input.r_session_app_settings {
        let mut object_1736 = object.key("RSessionAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_session_app_settings(&mut object_1736, var_1735)?;
        object_1736.finish();
    }
    if let Some(var_1737) = &input.canvas_app_settings {
        let mut object_1738 = object.key("CanvasAppSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_canvas_app_settings(&mut object_1738, var_1737)?;
        object_1738.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DomainSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1739) = &input.security_group_ids {
        let mut array_1740 = object.key("SecurityGroupIds").start_array();
        for item_1741 in var_1739 {
             {
                array_1740.value().string(item_1741.as_str());
            }
        }
        array_1740.finish();
    }
    if let Some(var_1742) = &input.r_studio_server_pro_domain_settings {
        let mut object_1743 = object.key("RStudioServerProDomainSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings(&mut object_1743, var_1742)?;
        object_1743.finish();
    }
    if let Some(var_1744) = &input.execution_role_identity_config {
        object.key("ExecutionRoleIdentityConfig").string(var_1744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_model_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EdgeDeploymentModelConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1745) = &input.model_handle {
        object.key("ModelHandle").string(var_1745.as_str());
    }
    if let Some(var_1746) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1746.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_stage(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeploymentStage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1747) = &input.stage_name {
        object.key("StageName").string(var_1747.as_str());
    }
    if let Some(var_1748) = &input.device_selection_config {
        let mut object_1749 = object.key("DeviceSelectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_device_selection_config(&mut object_1749, var_1748)?;
        object_1749.finish();
    }
    if let Some(var_1750) = &input.deployment_config {
        let mut object_1751 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_edge_deployment_config(&mut object_1751, var_1750)?;
        object_1751.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_deployment_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeploymentConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1752) = &input.blue_green_update_policy {
        let mut object_1753 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_blue_green_update_policy(&mut object_1753, var_1752)?;
        object_1753.finish();
    }
    if let Some(var_1754) = &input.auto_rollback_configuration {
        let mut object_1755 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_rollback_config(&mut object_1755, var_1754)?;
        object_1755.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProductionVariant) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1756) = &input.variant_name {
        object.key("VariantName").string(var_1756.as_str());
    }
    if let Some(var_1757) = &input.model_name {
        object.key("ModelName").string(var_1757.as_str());
    }
    if let Some(var_1758) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1758).into()));
    }
    if let Some(var_1759) = &input.instance_type {
        object.key("InstanceType").string(var_1759.as_str());
    }
    if let Some(var_1760) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1760).into()));
    }
    if let Some(var_1761) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1761.as_str());
    }
    if let Some(var_1762) = &input.core_dump_config {
        let mut object_1763 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_core_dump_config(&mut object_1763, var_1762)?;
        object_1763.finish();
    }
    if let Some(var_1764) = &input.serverless_config {
        let mut object_1765 = object.key("ServerlessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_production_variant_serverless_config(&mut object_1765, var_1764)?;
        object_1765.finish();
    }
    if let Some(var_1766) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1766).into()));
    }
    if let Some(var_1767) = &input.model_data_download_timeout_in_seconds {
        object.key("ModelDataDownloadTimeoutInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1767).into()));
    }
    if let Some(var_1768) = &input.container_startup_health_check_timeout_in_seconds {
        object.key("ContainerStartupHealthCheckTimeoutInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1768).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_capture_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataCaptureConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1769) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1769).into()));
    }
    if let Some(var_1770) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1770.as_str());
    }
    if let Some(var_1771) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1771.as_str());
    }
    if let Some(var_1772) = &input.capture_options {
        let mut array_1773 = object.key("CaptureOptions").start_array();
        for item_1774 in var_1772 {
             {
                let mut object_1775 = array_1773.value().start_object();
                crate::json_ser::serialize_structure_crate_model_capture_option(&mut object_1775, item_1774)?;
                object_1775.finish();
            }
        }
        array_1773.finish();
    }
    if let Some(var_1776) = &input.capture_content_type_header {
        let mut object_1777 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_crate_model_capture_content_type_header(&mut object_1777, var_1776)?;
        object_1777.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AsyncInferenceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1778) = &input.client_config {
        let mut object_1779 = object.key("ClientConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_client_config(&mut object_1779, var_1778)?;
        object_1779.finish();
    }
    if let Some(var_1780) = &input.output_config {
        let mut object_1781 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_output_config(&mut object_1781, var_1780)?;
        object_1781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainer_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExplainerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1782) = &input.clarify_explainer_config {
        let mut object_1783 = object.key("ClarifyExplainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_explainer_config(&mut object_1783, var_1782)?;
        object_1783.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FeatureDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1784) = &input.feature_name {
        object.key("FeatureName").string(var_1784.as_str());
    }
    if let Some(var_1785) = &input.feature_type {
        object.key("FeatureType").string(var_1785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OnlineStoreConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1786) = &input.security_config {
        let mut object_1787 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_online_store_security_config(&mut object_1787, var_1786)?;
        object_1787.finish();
    }
    if input.enable_online_store {
        object.key("EnableOnlineStore").boolean(input.enable_online_store);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_offline_store_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OfflineStoreConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1788) = &input.s3_storage_config {
        let mut object_1789 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_storage_config(&mut object_1789, var_1788)?;
        object_1789.finish();
    }
    if input.disable_glue_table_creation {
        object.key("DisableGlueTableCreation").boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1790) = &input.data_catalog_config {
        let mut object_1791 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_config(&mut object_1791, var_1790)?;
        object_1791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_request_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HumanLoopRequestSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1792) = &input.aws_managed_human_loop_request_source {
        object.key("AwsManagedHumanLoopRequestSource").string(var_1792.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HumanLoopActivationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1793) = &input.human_loop_activation_conditions_config {
        let mut object_1794 = object.key("HumanLoopActivationConditionsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_activation_conditions_config(&mut object_1794, var_1793)?;
        object_1794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HumanLoopConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1795) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1795.as_str());
    }
    if let Some(var_1796) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1796.as_str());
    }
    if let Some(var_1797) = &input.task_title {
        object.key("TaskTitle").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.task_description {
        object.key("TaskDescription").string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.task_count {
        object.key("TaskCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1799).into()));
    }
    if let Some(var_1800) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1800).into()));
    }
    if let Some(var_1801) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1801).into()));
    }
    if let Some(var_1802) = &input.task_keywords {
        let mut array_1803 = object.key("TaskKeywords").start_array();
        for item_1804 in var_1802 {
             {
                array_1803.value().string(item_1804.as_str());
            }
        }
        array_1803.finish();
    }
    if let Some(var_1805) = &input.public_workforce_task_price {
        let mut object_1806 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(&mut object_1806, var_1805)?;
        object_1806.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_flow_definition_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FlowDefinitionOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1807) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1807.as_str());
    }
    if let Some(var_1808) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1808.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_template(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UiTemplate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1809) = &input.content {
        object.key("Content").string(var_1809.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningJobConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1810) = &input.strategy {
        object.key("Strategy").string(var_1810.as_str());
    }
    if let Some(var_1811) = &input.strategy_config {
        let mut object_1812 = object.key("StrategyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_strategy_config(&mut object_1812, var_1811)?;
        object_1812.finish();
    }
    if let Some(var_1813) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1814 = object.key("HyperParameterTuningJobObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1814, var_1813)?;
        object_1814.finish();
    }
    if let Some(var_1815) = &input.resource_limits {
        let mut object_1816 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_limits(&mut object_1816, var_1815)?;
        object_1816.finish();
    }
    if let Some(var_1817) = &input.parameter_ranges {
        let mut object_1818 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(&mut object_1818, var_1817)?;
        object_1818.finish();
    }
    if let Some(var_1819) = &input.training_job_early_stopping_type {
        object.key("TrainingJobEarlyStoppingType").string(var_1819.as_str());
    }
    if let Some(var_1820) = &input.tuning_job_completion_criteria {
        let mut object_1821 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_tuning_job_completion_criteria(&mut object_1821, var_1820)?;
        object_1821.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_training_job_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTrainingJobDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1822) = &input.definition_name {
        object.key("DefinitionName").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.tuning_objective {
        let mut object_1824 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_objective(&mut object_1824, var_1823)?;
        object_1824.finish();
    }
    if let Some(var_1825) = &input.hyper_parameter_ranges {
        let mut object_1826 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(&mut object_1826, var_1825)?;
        object_1826.finish();
    }
    if let Some(var_1827) = &input.static_hyper_parameters {
        let mut object_1828 = object.key("StaticHyperParameters").start_object();
        for (key_1829, value_1830) in var_1827 {
             {
                object_1828.key(key_1829.as_str()).string(value_1830.as_str());
            }
        }
        object_1828.finish();
    }
    if let Some(var_1831) = &input.algorithm_specification {
        let mut object_1832 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_algorithm_specification(&mut object_1832, var_1831)?;
        object_1832.finish();
    }
    if let Some(var_1833) = &input.role_arn {
        object.key("RoleArn").string(var_1833.as_str());
    }
    if let Some(var_1834) = &input.input_data_config {
        let mut array_1835 = object.key("InputDataConfig").start_array();
        for item_1836 in var_1834 {
             {
                let mut object_1837 = array_1835.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(&mut object_1837, item_1836)?;
                object_1837.finish();
            }
        }
        array_1835.finish();
    }
    if let Some(var_1838) = &input.vpc_config {
        let mut object_1839 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_1839, var_1838)?;
        object_1839.finish();
    }
    if let Some(var_1840) = &input.output_data_config {
        let mut object_1841 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(&mut object_1841, var_1840)?;
        object_1841.finish();
    }
    if let Some(var_1842) = &input.resource_config {
        let mut object_1843 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_1843, var_1842)?;
        object_1843.finish();
    }
    if let Some(var_1844) = &input.stopping_condition {
        let mut object_1845 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(&mut object_1845, var_1844)?;
        object_1845.finish();
    }
    if input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object.key("EnableManagedSpotTraining").boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1846) = &input.checkpoint_config {
        let mut object_1847 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_checkpoint_config(&mut object_1847, var_1846)?;
        object_1847.finish();
    }
    if let Some(var_1848) = &input.retry_strategy {
        let mut object_1849 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_1849, var_1848)?;
        object_1849.finish();
    }
    if let Some(var_1850) = &input.hyper_parameter_tuning_resource_config {
        let mut object_1851 = object.key("HyperParameterTuningResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_resource_config(&mut object_1851, var_1850)?;
        object_1851.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_warm_start_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningJobWarmStartConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1852) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1853 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1854 in var_1852 {
             {
                let mut object_1855 = array_1853.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parent_hyper_parameter_tuning_job(&mut object_1855, item_1854)?;
                object_1855.finish();
            }
        }
        array_1853.finish();
    }
    if let Some(var_1856) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1856.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_input_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobInputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1857) = &input.model_package_version_arn {
        object.key("ModelPackageVersionArn").string(var_1857.as_str());
    }
    if let Some(var_1858) = &input.job_duration_in_seconds {
        object.key("JobDurationInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1858).into()));
    }
    if let Some(var_1859) = &input.traffic_pattern {
        let mut object_1860 = object.key("TrafficPattern").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_pattern(&mut object_1860, var_1859)?;
        object_1860.finish();
    }
    if let Some(var_1861) = &input.resource_limit {
        let mut object_1862 = object.key("ResourceLimit").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_resource_limit(&mut object_1862, var_1861)?;
        object_1862.finish();
    }
    if let Some(var_1863) = &input.endpoint_configurations {
        let mut array_1864 = object.key("EndpointConfigurations").start_array();
        for item_1865 in var_1863 {
             {
                let mut object_1866 = array_1864.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_input_configuration(&mut object_1866, item_1865)?;
                object_1866.finish();
            }
        }
        array_1864.finish();
    }
    if let Some(var_1867) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1867.as_str());
    }
    if let Some(var_1868) = &input.container_config {
        let mut object_1869 = object.key("ContainerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_container_config(&mut object_1869, var_1868)?;
        object_1869.finish();
    }
    if let Some(var_1870) = &input.endpoints {
        let mut array_1871 = object.key("Endpoints").start_array();
        for item_1872 in var_1870 {
             {
                let mut object_1873 = array_1871.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_info(&mut object_1873, item_1872)?;
                object_1873.finish();
            }
        }
        array_1871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_stopping_conditions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobStoppingConditions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_invocations != 0 {
        object.key("MaxInvocations").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_invocations).into()));
    }
    if let Some(var_1874) = &input.model_latency_thresholds {
        let mut array_1875 = object.key("ModelLatencyThresholds").start_array();
        for item_1876 in var_1874 {
             {
                let mut object_1877 = array_1875.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_latency_threshold(&mut object_1877, item_1876)?;
                object_1877.finish();
            }
        }
        array_1875.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1878) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1878.as_str());
    }
    if let Some(var_1879) = &input.compiled_output_config {
        let mut object_1880 = object.key("CompiledOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_compiled_output_config(&mut object_1880, var_1879)?;
        object_1880.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_input_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobInputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1881) = &input.data_source {
        let mut object_1882 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_source(&mut object_1882, var_1881)?;
        object_1882.finish();
    }
    if let Some(var_1883) = &input.data_attributes {
        let mut object_1884 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_data_attributes(&mut object_1884, var_1883)?;
        object_1884.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1885) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1885.as_str());
    }
    if let Some(var_1886) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1886.as_str());
    }
    if let Some(var_1887) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1887.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_stopping_conditions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobStoppingConditions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1888) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1888).into()));
    }
    if let Some(var_1889) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1889).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_algorithms_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobAlgorithmsConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1890) = &input.labeling_job_algorithm_specification_arn {
        object.key("LabelingJobAlgorithmSpecificationArn").string(var_1890.as_str());
    }
    if let Some(var_1891) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1891.as_str());
    }
    if let Some(var_1892) = &input.labeling_job_resource_config {
        let mut object_1893 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_resource_config(&mut object_1893, var_1892)?;
        object_1893.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_task_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HumanTaskConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1894) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1894.as_str());
    }
    if let Some(var_1895) = &input.ui_config {
        let mut object_1896 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_ui_config(&mut object_1896, var_1895)?;
        object_1896.finish();
    }
    if let Some(var_1897) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1897.as_str());
    }
    if let Some(var_1898) = &input.task_keywords {
        let mut array_1899 = object.key("TaskKeywords").start_array();
        for item_1900 in var_1898 {
             {
                array_1899.value().string(item_1900.as_str());
            }
        }
        array_1899.finish();
    }
    if let Some(var_1901) = &input.task_title {
        object.key("TaskTitle").string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.task_description {
        object.key("TaskDescription").string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1903).into()));
    }
    if let Some(var_1904) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1904).into()));
    }
    if let Some(var_1905) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1905).into()));
    }
    if let Some(var_1906) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1906).into()));
    }
    if let Some(var_1907) = &input.annotation_consolidation_config {
        let mut object_1908 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_annotation_consolidation_config(&mut object_1908, var_1907)?;
        object_1908.finish();
    }
    if let Some(var_1909) = &input.public_workforce_task_price {
        let mut object_1910 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_crate_model_public_workforce_task_price(&mut object_1910, var_1909)?;
        object_1910.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContainerDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1911) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1911.as_str());
    }
    if let Some(var_1912) = &input.image {
        object.key("Image").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.image_config {
        let mut object_1914 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_image_config(&mut object_1914, var_1913)?;
        object_1914.finish();
    }
    if let Some(var_1915) = &input.mode {
        object.key("Mode").string(var_1915.as_str());
    }
    if let Some(var_1916) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1916.as_str());
    }
    if let Some(var_1917) = &input.environment {
        let mut object_1918 = object.key("Environment").start_object();
        for (key_1919, value_1920) in var_1917 {
             {
                object_1918.key(key_1919.as_str()).string(value_1920.as_str());
            }
        }
        object_1918.finish();
    }
    if let Some(var_1921) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1921.as_str());
    }
    if let Some(var_1922) = &input.inference_specification_name {
        object.key("InferenceSpecificationName").string(var_1922.as_str());
    }
    if let Some(var_1923) = &input.multi_model_config {
        let mut object_1924 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_model_config(&mut object_1924, var_1923)?;
        object_1924.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inference_execution_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InferenceExecutionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1925) = &input.mode {
        object.key("Mode").string(var_1925.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VpcConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1926) = &input.security_group_ids {
        let mut array_1927 = object.key("SecurityGroupIds").start_array();
        for item_1928 in var_1926 {
             {
                array_1927.value().string(item_1928.as_str());
            }
        }
        array_1927.finish();
    }
    if let Some(var_1929) = &input.subnets {
        let mut array_1930 = object.key("Subnets").start_array();
        for item_1931 in var_1929 {
             {
                array_1930.value().string(item_1931.as_str());
            }
        }
        array_1930.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelBiasBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1932) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.constraints_resource {
        let mut object_1934 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(&mut object_1934, var_1933)?;
        object_1934.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelBiasAppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1935) = &input.image_uri {
        object.key("ImageUri").string(var_1935.as_str());
    }
    if let Some(var_1936) = &input.config_uri {
        object.key("ConfigUri").string(var_1936.as_str());
    }
    if let Some(var_1937) = &input.environment {
        let mut object_1938 = object.key("Environment").start_object();
        for (key_1939, value_1940) in var_1937 {
             {
                object_1938.key(key_1939.as_str()).string(value_1940.as_str());
            }
        }
        object_1938.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_bias_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelBiasJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1941) = &input.endpoint_input {
        let mut object_1942 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1942, var_1941)?;
        object_1942.finish();
    }
    if let Some(var_1943) = &input.batch_transform_input {
        let mut object_1944 = object.key("BatchTransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_transform_input(&mut object_1944, var_1943)?;
        object_1944.finish();
    }
    if let Some(var_1945) = &input.ground_truth_s3_input {
        let mut object_1946 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(&mut object_1946, var_1945)?;
        object_1946.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelExplainabilityBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1947) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1947.as_str());
    }
    if let Some(var_1948) = &input.constraints_resource {
        let mut object_1949 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(&mut object_1949, var_1948)?;
        object_1949.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelExplainabilityAppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1950) = &input.image_uri {
        object.key("ImageUri").string(var_1950.as_str());
    }
    if let Some(var_1951) = &input.config_uri {
        object.key("ConfigUri").string(var_1951.as_str());
    }
    if let Some(var_1952) = &input.environment {
        let mut object_1953 = object.key("Environment").start_object();
        for (key_1954, value_1955) in var_1952 {
             {
                object_1953.key(key_1954.as_str()).string(value_1955.as_str());
            }
        }
        object_1953.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_explainability_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelExplainabilityJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1956) = &input.endpoint_input {
        let mut object_1957 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_1957, var_1956)?;
        object_1957.finish();
    }
    if let Some(var_1958) = &input.batch_transform_input {
        let mut object_1959 = object.key("BatchTransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_transform_input(&mut object_1959, var_1958)?;
        object_1959.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelPackageValidationSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1960) = &input.validation_role {
        object.key("ValidationRole").string(var_1960.as_str());
    }
    if let Some(var_1961) = &input.validation_profiles {
        let mut array_1962 = object.key("ValidationProfiles").start_array();
        for item_1963 in var_1961 {
             {
                let mut object_1964 = array_1962.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_validation_profile(&mut object_1964, item_1963)?;
                object_1964.finish();
            }
        }
        array_1962.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceAlgorithmSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1965) = &input.source_algorithms {
        let mut array_1966 = object.key("SourceAlgorithms").start_array();
        for item_1967 in var_1965 {
             {
                let mut object_1968 = array_1966.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_algorithm(&mut object_1968, item_1967)?;
                object_1968.finish();
            }
        }
        array_1966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metrics(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelMetrics) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1969) = &input.model_quality {
        let mut object_1970 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_quality(&mut object_1970, var_1969)?;
        object_1970.finish();
    }
    if let Some(var_1971) = &input.model_data_quality {
        let mut object_1972 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_model_data_quality(&mut object_1972, var_1971)?;
        object_1972.finish();
    }
    if let Some(var_1973) = &input.bias {
        let mut object_1974 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_bias(&mut object_1974, var_1973)?;
        object_1974.finish();
    }
    if let Some(var_1975) = &input.explainability {
        let mut object_1976 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability(&mut object_1976, var_1975)?;
        object_1976.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_baselines(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DriftCheckBaselines) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1977) = &input.bias {
        let mut object_1978 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_bias(&mut object_1978, var_1977)?;
        object_1978.finish();
    }
    if let Some(var_1979) = &input.explainability {
        let mut object_1980 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_explainability(&mut object_1980, var_1979)?;
        object_1980.finish();
    }
    if let Some(var_1981) = &input.model_quality {
        let mut object_1982 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_quality(&mut object_1982, var_1981)?;
        object_1982.finish();
    }
    if let Some(var_1983) = &input.model_data_quality {
        let mut object_1984 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_crate_model_drift_check_model_data_quality(&mut object_1984, var_1983)?;
        object_1984.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_inference_specification_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AdditionalInferenceSpecificationDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1985) = &input.name {
        object.key("Name").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.description {
        object.key("Description").string(var_1986.as_str());
    }
    if let Some(var_1987) = &input.containers {
        let mut array_1988 = object.key("Containers").start_array();
        for item_1989 in var_1987 {
             {
                let mut object_1990 = array_1988.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_package_container_definition(&mut object_1990, item_1989)?;
                object_1990.finish();
            }
        }
        array_1988.finish();
    }
    if let Some(var_1991) = &input.supported_transform_instance_types {
        let mut array_1992 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1993 in var_1991 {
             {
                array_1992.value().string(item_1993.as_str());
            }
        }
        array_1992.finish();
    }
    if let Some(var_1994) = &input.supported_realtime_inference_instance_types {
        let mut array_1995 = object.key("SupportedRealtimeInferenceInstanceTypes").start_array();
        for item_1996 in var_1994 {
             {
                array_1995.value().string(item_1996.as_str());
            }
        }
        array_1995.finish();
    }
    if let Some(var_1997) = &input.supported_content_types {
        let mut array_1998 = object.key("SupportedContentTypes").start_array();
        for item_1999 in var_1997 {
             {
                array_1998.value().string(item_1999.as_str());
            }
        }
        array_1998.finish();
    }
    if let Some(var_2000) = &input.supported_response_mime_types {
        let mut array_2001 = object.key("SupportedResponseMIMETypes").start_array();
        for item_2002 in var_2000 {
             {
                array_2001.value().string(item_2002.as_str());
            }
        }
        array_2001.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelQualityBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2003) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2003.as_str());
    }
    if let Some(var_2004) = &input.constraints_resource {
        let mut object_2005 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(&mut object_2005, var_2004)?;
        object_2005.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelQualityAppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2006) = &input.image_uri {
        object.key("ImageUri").string(var_2006.as_str());
    }
    if let Some(var_2007) = &input.container_entrypoint {
        let mut array_2008 = object.key("ContainerEntrypoint").start_array();
        for item_2009 in var_2007 {
             {
                array_2008.value().string(item_2009.as_str());
            }
        }
        array_2008.finish();
    }
    if let Some(var_2010) = &input.container_arguments {
        let mut array_2011 = object.key("ContainerArguments").start_array();
        for item_2012 in var_2010 {
             {
                array_2011.value().string(item_2012.as_str());
            }
        }
        array_2011.finish();
    }
    if let Some(var_2013) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2013.as_str());
    }
    if let Some(var_2014) = &input.post_analytics_processor_source_uri {
        object.key("PostAnalyticsProcessorSourceUri").string(var_2014.as_str());
    }
    if let Some(var_2015) = &input.problem_type {
        object.key("ProblemType").string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.environment {
        let mut object_2017 = object.key("Environment").start_object();
        for (key_2018, value_2019) in var_2016 {
             {
                object_2017.key(key_2018.as_str()).string(value_2019.as_str());
            }
        }
        object_2017.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelQualityJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2020) = &input.endpoint_input {
        let mut object_2021 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_2021, var_2020)?;
        object_2021.finish();
    }
    if let Some(var_2022) = &input.batch_transform_input {
        let mut object_2023 = object.key("BatchTransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_transform_input(&mut object_2023, var_2022)?;
        object_2023.finish();
    }
    if let Some(var_2024) = &input.ground_truth_s3_input {
        let mut object_2025 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_ground_truth_s3_input(&mut object_2025, var_2024)?;
        object_2025.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_schedule_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringScheduleConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2026) = &input.schedule_config {
        let mut object_2027 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule_config(&mut object_2027, var_2026)?;
        object_2027.finish();
    }
    if let Some(var_2028) = &input.monitoring_job_definition {
        let mut object_2029 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_job_definition(&mut object_2029, var_2028)?;
        object_2029.finish();
    }
    if let Some(var_2030) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_2030.as_str());
    }
    if let Some(var_2031) = &input.monitoring_type {
        object.key("MonitoringType").string(var_2031.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_metadata_service_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceMetadataServiceConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2032) = &input.minimum_instance_metadata_service_version {
        object.key("MinimumInstanceMetadataServiceVersion").string(var_2032.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notebook_instance_lifecycle_hook(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotebookInstanceLifecycleHook) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2033) = &input.content {
        object.key("Content").string(var_2033.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_definition_s3_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PipelineDefinitionS3Location) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2034) = &input.bucket {
        object.key("Bucket").string(var_2034.as_str());
    }
    if let Some(var_2035) = &input.object_key {
        object.key("ObjectKey").string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.version_id {
        object.key("VersionId").string(var_2036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parallelism_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParallelismConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaxParallelExecutionSteps").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_parallel_execution_steps).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2037) = &input.input_name {
        object.key("InputName").string(var_2037.as_str());
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_2038) = &input.s3_input {
        let mut object_2039 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_input(&mut object_2039, var_2038)?;
        object_2039.finish();
    }
    if let Some(var_2040) = &input.dataset_definition {
        let mut object_2041 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_definition(&mut object_2041, var_2040)?;
        object_2041.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2042) = &input.outputs {
        let mut array_2043 = object.key("Outputs").start_array();
        for item_2044 in var_2042 {
             {
                let mut object_2045 = array_2043.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processing_output(&mut object_2045, item_2044)?;
                object_2045.finish();
            }
        }
        array_2043.finish();
    }
    if let Some(var_2046) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2046.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_resources(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingResources) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2047) = &input.cluster_config {
        let mut object_2048 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_cluster_config(&mut object_2048, var_2047)?;
        object_2048.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_stopping_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingStoppingCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaxRuntimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2049) = &input.image_uri {
        object.key("ImageUri").string(var_2049.as_str());
    }
    if let Some(var_2050) = &input.container_entrypoint {
        let mut array_2051 = object.key("ContainerEntrypoint").start_array();
        for item_2052 in var_2050 {
             {
                array_2051.value().string(item_2052.as_str());
            }
        }
        array_2051.finish();
    }
    if let Some(var_2053) = &input.container_arguments {
        let mut array_2054 = object.key("ContainerArguments").start_array();
        for item_2055 in var_2053 {
             {
                array_2054.value().string(item_2055.as_str());
            }
        }
        array_2054.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NetworkConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object.key("EnableNetworkIsolation").boolean(input.enable_network_isolation);
    }
    if let Some(var_2056) = &input.vpc_config {
        let mut object_2057 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2057, var_2056)?;
        object_2057.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experiment_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExperimentConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2058) = &input.experiment_name {
        object.key("ExperimentName").string(var_2058.as_str());
    }
    if let Some(var_2059) = &input.trial_name {
        object.key("TrialName").string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_2060.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ServiceCatalogProvisioningDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2061) = &input.product_id {
        object.key("ProductId").string(var_2061.as_str());
    }
    if let Some(var_2062) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_2062.as_str());
    }
    if let Some(var_2063) = &input.path_id {
        object.key("PathId").string(var_2063.as_str());
    }
    if let Some(var_2064) = &input.provisioning_parameters {
        let mut array_2065 = object.key("ProvisioningParameters").start_array();
        for item_2066 in var_2064 {
             {
                let mut object_2067 = array_2065.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(&mut object_2067, item_2066)?;
                object_2067.finish();
            }
        }
        array_2065.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AlgorithmSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2068) = &input.training_image {
        object.key("TrainingImage").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2069.as_str());
    }
    if let Some(var_2070) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2070.as_str());
    }
    if let Some(var_2071) = &input.metric_definitions {
        let mut array_2072 = object.key("MetricDefinitions").start_array();
        for item_2073 in var_2071 {
             {
                let mut object_2074 = array_2072.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(&mut object_2074, item_2073)?;
                object_2074.finish();
            }
        }
        array_2072.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object.key("EnableSageMakerMetricsTimeSeries").boolean(input.enable_sage_maker_metrics_time_series);
    }
    if let Some(var_2075) = &input.container_entrypoint {
        let mut array_2076 = object.key("ContainerEntrypoint").start_array();
        for item_2077 in var_2075 {
             {
                array_2076.value().string(item_2077.as_str());
            }
        }
        array_2076.finish();
    }
    if let Some(var_2078) = &input.container_arguments {
        let mut array_2079 = object.key("ContainerArguments").start_array();
        for item_2080 in var_2078 {
             {
                array_2079.value().string(item_2080.as_str());
            }
        }
        array_2079.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Channel) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2081) = &input.channel_name {
        object.key("ChannelName").string(var_2081.as_str());
    }
    if let Some(var_2082) = &input.data_source {
        let mut object_2083 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_2083, var_2082)?;
        object_2083.finish();
    }
    if let Some(var_2084) = &input.content_type {
        object.key("ContentType").string(var_2084.as_str());
    }
    if let Some(var_2085) = &input.compression_type {
        object.key("CompressionType").string(var_2085.as_str());
    }
    if let Some(var_2086) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_2086.as_str());
    }
    if let Some(var_2087) = &input.input_mode {
        object.key("InputMode").string(var_2087.as_str());
    }
    if let Some(var_2088) = &input.shuffle_config {
        let mut object_2089 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_shuffle_config(&mut object_2089, var_2088)?;
        object_2089.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_data_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutputDataConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2090) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2090.as_str());
    }
    if let Some(var_2091) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2091.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2092) = &input.instance_type {
        object.key("InstanceType").string(var_2092.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.instance_count).into()));
    }
     {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()));
    }
    if let Some(var_2093) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2093.as_str());
    }
    if let Some(var_2094) = &input.instance_groups {
        let mut array_2095 = object.key("InstanceGroups").start_array();
        for item_2096 in var_2094 {
             {
                let mut object_2097 = array_2095.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group(&mut object_2097, item_2096)?;
                object_2097.finish();
            }
        }
        array_2095.finish();
    }
    if let Some(var_2098) = &input.keep_alive_period_in_seconds {
        object.key("KeepAlivePeriodInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2098).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_checkpoint_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CheckpointConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2099) = &input.s3_uri {
        object.key("S3Uri").string(var_2099.as_str());
    }
    if let Some(var_2100) = &input.local_path {
        object.key("LocalPath").string(var_2100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_hook_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DebugHookConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2101) = &input.local_path {
        object.key("LocalPath").string(var_2101.as_str());
    }
    if let Some(var_2102) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2102.as_str());
    }
    if let Some(var_2103) = &input.hook_parameters {
        let mut object_2104 = object.key("HookParameters").start_object();
        for (key_2105, value_2106) in var_2103 {
             {
                object_2104.key(key_2105.as_str()).string(value_2106.as_str());
            }
        }
        object_2104.finish();
    }
    if let Some(var_2107) = &input.collection_configurations {
        let mut array_2108 = object.key("CollectionConfigurations").start_array();
        for item_2109 in var_2107 {
             {
                let mut object_2110 = array_2108.value().start_object();
                crate::json_ser::serialize_structure_crate_model_collection_configuration(&mut object_2110, item_2109)?;
                object_2110.finish();
            }
        }
        array_2108.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_debug_rule_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DebugRuleConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2111) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_2111.as_str());
    }
    if let Some(var_2112) = &input.local_path {
        object.key("LocalPath").string(var_2112.as_str());
    }
    if let Some(var_2113) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2113.as_str());
    }
    if let Some(var_2114) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2114.as_str());
    }
    if let Some(var_2115) = &input.instance_type {
        object.key("InstanceType").string(var_2115.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()));
    }
    if let Some(var_2116) = &input.rule_parameters {
        let mut object_2117 = object.key("RuleParameters").start_object();
        for (key_2118, value_2119) in var_2116 {
             {
                object_2117.key(key_2118.as_str()).string(value_2119.as_str());
            }
        }
        object_2117.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TensorBoardOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2120) = &input.local_path {
        object.key("LocalPath").string(var_2120.as_str());
    }
    if let Some(var_2121) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProfilerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2122) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2122.as_str());
    }
    if let Some(var_2123) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2123).into()));
    }
    if let Some(var_2124) = &input.profiling_parameters {
        let mut object_2125 = object.key("ProfilingParameters").start_object();
        for (key_2126, value_2127) in var_2124 {
             {
                object_2125.key(key_2126.as_str()).string(value_2127.as_str());
            }
        }
        object_2125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_rule_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProfilerRuleConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2128) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_2128.as_str());
    }
    if let Some(var_2129) = &input.local_path {
        object.key("LocalPath").string(var_2129.as_str());
    }
    if let Some(var_2130) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2130.as_str());
    }
    if let Some(var_2131) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_2131.as_str());
    }
    if let Some(var_2132) = &input.instance_type {
        object.key("InstanceType").string(var_2132.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()));
    }
    if let Some(var_2133) = &input.rule_parameters {
        let mut object_2134 = object.key("RuleParameters").start_object();
        for (key_2135, value_2136) in var_2133 {
             {
                object_2134.key(key_2135.as_str()).string(value_2136.as_str());
            }
        }
        object_2134.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_strategy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RetryStrategy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaximumRetryAttempts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_retry_attempts).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_client_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelClientConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2137) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2137).into()));
    }
    if let Some(var_2138) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2138).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2139) = &input.data_source {
        let mut object_2140 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_data_source(&mut object_2140, var_2139)?;
        object_2140.finish();
    }
    if let Some(var_2141) = &input.content_type {
        object.key("ContentType").string(var_2141.as_str());
    }
    if let Some(var_2142) = &input.compression_type {
        object.key("CompressionType").string(var_2142.as_str());
    }
    if let Some(var_2143) = &input.split_type {
        object.key("SplitType").string(var_2143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformOutput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2144) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2144.as_str());
    }
    if let Some(var_2145) = &input.accept {
        object.key("Accept").string(var_2145.as_str());
    }
    if let Some(var_2146) = &input.assemble_with {
        object.key("AssembleWith").string(var_2146.as_str());
    }
    if let Some(var_2147) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_data_capture_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BatchDataCaptureConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2148) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2148.as_str());
    }
    if let Some(var_2149) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2149.as_str());
    }
    if input.generate_inference_id {
        object.key("GenerateInferenceId").boolean(input.generate_inference_id);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_resources(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformResources) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2150) = &input.instance_type {
        object.key("InstanceType").string(var_2150.as_str());
    }
    if let Some(var_2151) = &input.instance_count {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2151).into()));
    }
    if let Some(var_2152) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_processing(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataProcessing) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2153) = &input.input_filter {
        object.key("InputFilter").string(var_2153.as_str());
    }
    if let Some(var_2154) = &input.output_filter {
        object.key("OutputFilter").string(var_2154.as_str());
    }
    if let Some(var_2155) = &input.join_source {
        object.key("JoinSource").string(var_2155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_status(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrialComponentStatus) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2156) = &input.primary_status {
        object.key("PrimaryStatus").string(var_2156.as_str());
    }
    if let Some(var_2157) = &input.message {
        object.key("Message").string(var_2157.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_trial_component_parameter_value(object_644: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrialComponentParameterValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
             {
                object_644.key("StringValue").string(inner.as_str());
            }
        },
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
             {
                object_644.key("NumberValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*inner).into()));
            }
        },
        crate::model::TrialComponentParameterValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("TrialComponentParameterValue"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trial_component_artifact(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrialComponentArtifact) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2158) = &input.media_type {
        object.key("MediaType").string(var_2158.as_str());
    }
    if let Some(var_2159) = &input.value {
        object.key("Value").string(var_2159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CognitoConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2160) = &input.user_pool {
        object.key("UserPool").string(var_2160.as_str());
    }
    if let Some(var_2161) = &input.client_id {
        object.key("ClientId").string(var_2161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OidcConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2162) = &input.client_id {
        object.key("ClientId").string(var_2162.as_str());
    }
    if let Some(var_2163) = &input.client_secret {
        object.key("ClientSecret").string(var_2163.as_str());
    }
    if let Some(var_2164) = &input.issuer {
        object.key("Issuer").string(var_2164.as_str());
    }
    if let Some(var_2165) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_2165.as_str());
    }
    if let Some(var_2166) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_2166.as_str());
    }
    if let Some(var_2167) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_2167.as_str());
    }
    if let Some(var_2168) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_2168.as_str());
    }
    if let Some(var_2169) = &input.jwks_uri {
        object.key("JwksUri").string(var_2169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_ip_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceIpConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2170) = &input.cidrs {
        let mut array_2171 = object.key("Cidrs").start_array();
        for item_2172 in var_2170 {
             {
                array_2171.value().string(item_2172.as_str());
            }
        }
        array_2171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workforce_vpc_config_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::WorkforceVpcConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2173) = &input.vpc_id {
        object.key("VpcId").string(var_2173.as_str());
    }
    if let Some(var_2174) = &input.security_group_ids {
        let mut array_2175 = object.key("SecurityGroupIds").start_array();
        for item_2176 in var_2174 {
             {
                array_2175.value().string(item_2176.as_str());
            }
        }
        array_2175.finish();
    }
    if let Some(var_2177) = &input.subnets {
        let mut array_2178 = object.key("Subnets").start_array();
        for item_2179 in var_2177 {
             {
                array_2178.value().string(item_2179.as_str());
            }
        }
        array_2178.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MemberDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2180) = &input.cognito_member_definition {
        let mut object_2181 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_member_definition(&mut object_2181, var_2180)?;
        object_2181.finish();
    }
    if let Some(var_2182) = &input.oidc_member_definition {
        let mut object_2183 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_oidc_member_definition(&mut object_2183, var_2182)?;
        object_2183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2184) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_2184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retention_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RetentionPolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2185) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_2185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_suggestion_query(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SuggestionQuery) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2186) = &input.property_name_query {
        let mut object_2187 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_property_name_query(&mut object_2187, var_2186)?;
        object_2187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_search_expression(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelMetadataSearchExpression) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2188) = &input.filters {
        let mut array_2189 = object.key("Filters").start_array();
        for item_2190 in var_2188 {
             {
                let mut object_2191 = array_2189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_model_metadata_filter(&mut object_2191, item_2190)?;
                object_2191.finish();
            }
        }
        array_2189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueryFilters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2192) = &input.types {
        let mut array_2193 = object.key("Types").start_array();
        for item_2194 in var_2192 {
             {
                array_2193.value().string(item_2194.as_str());
            }
        }
        array_2193.finish();
    }
    if let Some(var_2195) = &input.lineage_types {
        let mut array_2196 = object.key("LineageTypes").start_array();
        for item_2197 in var_2195 {
             {
                array_2196.value().string(item_2197.as_str());
            }
        }
        array_2196.finish();
    }
    if let Some(var_2198) = &input.created_before {
        object.key("CreatedBefore").date_time(var_2198, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2199) = &input.created_after {
        object.key("CreatedAfter").date_time(var_2199, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2200) = &input.modified_before {
        object.key("ModifiedBefore").date_time(var_2200, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2201) = &input.modified_after {
        object.key("ModifiedAfter").date_time(var_2201, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2202) = &input.properties {
        let mut object_2203 = object.key("Properties").start_object();
        for (key_2204, value_2205) in var_2202 {
             {
                object_2203.key(key_2204.as_str()).string(value_2205.as_str());
            }
        }
        object_2203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Device) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2206) = &input.device_name {
        object.key("DeviceName").string(var_2206.as_str());
    }
    if let Some(var_2207) = &input.description {
        object.key("Description").string(var_2207.as_str());
    }
    if let Some(var_2208) = &input.iot_thing_name {
        object.key("IotThingName").string(var_2208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_renderable_task(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RenderableTask) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2209) = &input.input {
        object.key("Input").string(var_2209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_expression(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SearchExpression) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2210) = &input.filters {
        let mut array_2211 = object.key("Filters").start_array();
        for item_2212 in var_2210 {
             {
                let mut object_2213 = array_2211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_2213, item_2212)?;
                object_2213.finish();
            }
        }
        array_2211.finish();
    }
    if let Some(var_2214) = &input.nested_filters {
        let mut array_2215 = object.key("NestedFilters").start_array();
        for item_2216 in var_2214 {
             {
                let mut object_2217 = array_2215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_nested_filters(&mut object_2217, item_2216)?;
                object_2217.finish();
            }
        }
        array_2215.finish();
    }
    if let Some(var_2218) = &input.sub_expressions {
        let mut array_2219 = object.key("SubExpressions").start_array();
        for item_2220 in var_2218 {
             {
                let mut object_2221 = array_2219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_expression(&mut object_2221, item_2220)?;
                object_2221.finish();
            }
        }
        array_2219.finish();
    }
    if let Some(var_2222) = &input.operator {
        object.key("Operator").string(var_2222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutputParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2223) = &input.name {
        object.key("Name").string(var_2223.as_str());
    }
    if let Some(var_2224) = &input.value {
        object.key("Value").string(var_2224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Parameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2225) = &input.name {
        object.key("Name").string(var_2225.as_str());
    }
    if let Some(var_2226) = &input.value {
        object.key("Value").string(var_2226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_config_for_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GitConfigForUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2227) = &input.secret_arn {
        object.key("SecretArn").string(var_2227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_settings_for_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DomainSettingsForUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2228) = &input.r_studio_server_pro_domain_settings_for_update {
        let mut object_2229 = object.key("RStudioServerProDomainSettingsForUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(&mut object_2229, var_2228)?;
        object_2229.finish();
    }
    if let Some(var_2230) = &input.execution_role_identity_config {
        object.key("ExecutionRoleIdentityConfig").string(var_2230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_variant_property(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VariantProperty) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2231) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_2231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_desired_weight_and_capacity(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DesiredWeightAndCapacity) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2232) = &input.variant_name {
        object.key("VariantName").string(var_2232.as_str());
    }
    if let Some(var_2233) = &input.desired_weight {
        object.key("DesiredWeight").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2233).into()));
    }
    if let Some(var_2234) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2234).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_feature_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FeatureParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2235) = &input.key {
        object.key("Key").string(var_2235.as_str());
    }
    if let Some(var_2236) = &input.value {
        object.key("Value").string(var_2236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_catalog_provisioning_update_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ServiceCatalogProvisioningUpdateDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2237) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_2237.as_str());
    }
    if let Some(var_2238) = &input.provisioning_parameters {
        let mut array_2239 = object.key("ProvisioningParameters").start_array();
        for item_2240 in var_2238 {
             {
                let mut object_2241 = array_2239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_provisioning_parameter(&mut object_2241, item_2240)?;
                object_2241.finish();
            }
        }
        array_2239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_profiler_config_for_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProfilerConfigForUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2242) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2242.as_str());
    }
    if let Some(var_2243) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2243).into()));
    }
    if let Some(var_2244) = &input.profiling_parameters {
        let mut object_2245 = object.key("ProfilingParameters").start_object();
        for (key_2246, value_2247) in var_2244 {
             {
                object_2245.key(key_2246.as_str()).string(value_2247.as_str());
            }
        }
        object_2245.finish();
    }
    if input.disable_profiler {
        object.key("DisableProfiler").boolean(input.disable_profiler);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_config_for_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceConfigForUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2248) = &input.keep_alive_period_in_seconds {
        object.key("KeepAlivePeriodInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2248).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2249) = &input.name {
        object.key("Name").string(var_2249.as_str());
    }
    if let Some(var_2250) = &input.description {
        object.key("Description").string(var_2250.as_str());
    }
    if let Some(var_2251) = &input.r#type {
        object.key("Type").string(var_2251.as_str());
    }
    if let Some(var_2252) = &input.range {
        let mut object_2253 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_range(&mut object_2253, var_2252)?;
        object_2253.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2254) = &input.default_value {
        object.key("DefaultValue").string(var_2254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetricDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2255) = &input.name {
        object.key("Name").string(var_2255.as_str());
    }
    if let Some(var_2256) = &input.regex {
        object.key("Regex").string(var_2256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChannelSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2257) = &input.name {
        object.key("Name").string(var_2257.as_str());
    }
    if let Some(var_2258) = &input.description {
        object.key("Description").string(var_2258.as_str());
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_2259) = &input.supported_content_types {
        let mut array_2260 = object.key("SupportedContentTypes").start_array();
        for item_2261 in var_2259 {
             {
                array_2260.value().string(item_2261.as_str());
            }
        }
        array_2260.finish();
    }
    if let Some(var_2262) = &input.supported_compression_types {
        let mut array_2263 = object.key("SupportedCompressionTypes").start_array();
        for item_2264 in var_2262 {
             {
                array_2263.value().string(item_2264.as_str());
            }
        }
        array_2263.finish();
    }
    if let Some(var_2265) = &input.supported_input_modes {
        let mut array_2266 = object.key("SupportedInputModes").start_array();
        for item_2267 in var_2265 {
             {
                array_2266.value().string(item_2267.as_str());
            }
        }
        array_2266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_objective(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningJobObjective) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2268) = &input.r#type {
        object.key("Type").string(var_2268.as_str());
    }
    if let Some(var_2269) = &input.metric_name {
        object.key("MetricName").string(var_2269.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_container_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelPackageContainerDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2270) = &input.container_hostname {
        object.key("ContainerHostname").string(var_2270.as_str());
    }
    if let Some(var_2271) = &input.image {
        object.key("Image").string(var_2271.as_str());
    }
    if let Some(var_2272) = &input.image_digest {
        object.key("ImageDigest").string(var_2272.as_str());
    }
    if let Some(var_2273) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2273.as_str());
    }
    if let Some(var_2274) = &input.product_id {
        object.key("ProductId").string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.environment {
        let mut object_2276 = object.key("Environment").start_object();
        for (key_2277, value_2278) in var_2275 {
             {
                object_2276.key(key_2277.as_str()).string(value_2278.as_str());
            }
        }
        object_2276.finish();
    }
    if let Some(var_2279) = &input.model_input {
        let mut object_2280 = object.key("ModelInput").start_object();
        crate::json_ser::serialize_structure_crate_model_model_input(&mut object_2280, var_2279)?;
        object_2280.finish();
    }
    if let Some(var_2281) = &input.framework {
        object.key("Framework").string(var_2281.as_str());
    }
    if let Some(var_2282) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2282.as_str());
    }
    if let Some(var_2283) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2283.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_algorithm_validation_profile(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AlgorithmValidationProfile) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2284) = &input.profile_name {
        object.key("ProfileName").string(var_2284.as_str());
    }
    if let Some(var_2285) = &input.training_job_definition {
        let mut object_2286 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_training_job_definition(&mut object_2286, var_2285)?;
        object_2286.finish();
    }
    if let Some(var_2287) = &input.transform_job_definition {
        let mut object_2288 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(&mut object_2288, var_2287)?;
        object_2288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_spec(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KernelSpec) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2289) = &input.name {
        object.key("Name").string(var_2289.as_str());
    }
    if let Some(var_2290) = &input.display_name {
        object.key("DisplayName").string(var_2290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FileSystemConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2291) = &input.mount_path {
        object.key("MountPath").string(var_2291.as_str());
    }
    if let Some(var_2292) = &input.default_uid {
        object.key("DefaultUid").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2292).into()));
    }
    if let Some(var_2293) = &input.default_gid {
        object.key("DefaultGid").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2293).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_artifact_source_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ArtifactSourceType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2294) = &input.source_id_type {
        object.key("SourceIdType").string(var_2294.as_str());
    }
    if let Some(var_2295) = &input.value {
        object.key("Value").string(var_2295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlDataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2296) = &input.s3_data_source {
        let mut object_2297 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_mls3_data_source(&mut object_2297, var_2296)?;
        object_2297.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_job_completion_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlJobCompletionCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2298) = &input.max_candidates {
        object.key("MaxCandidates").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2298).into()));
    }
    if let Some(var_2299) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2299).into()));
    }
    if let Some(var_2300) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2300).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_security_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlSecurityConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2301) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2301.as_str());
    }
    if input.enable_inter_container_traffic_encryption {
        object.key("EnableInterContainerTrafficEncryption").boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_2302) = &input.vpc_config {
        let mut object_2303 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2303, var_2302)?;
        object_2303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_data_split_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlDataSplitConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2304) = &input.validation_fraction {
        object.key("ValidationFraction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2304).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_ml_candidate_generation_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMlCandidateGenerationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2305) = &input.feature_specification_s3_uri {
        object.key("FeatureSpecificationS3Uri").string(var_2305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_platform(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TargetPlatform) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2306) = &input.os {
        object.key("Os").string(var_2306.as_str());
    }
    if let Some(var_2307) = &input.arch {
        object.key("Arch").string(var_2307.as_str());
    }
    if let Some(var_2308) = &input.accelerator {
        object.key("Accelerator").string(var_2308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_constraints_resource(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringConstraintsResource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2309) = &input.s3_uri {
        object.key("S3Uri").string(var_2309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_statistics_resource(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringStatisticsResource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2310) = &input.s3_uri {
        object.key("S3Uri").string(var_2310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2311) = &input.endpoint_name {
        object.key("EndpointName").string(var_2311.as_str());
    }
    if let Some(var_2312) = &input.local_path {
        object.key("LocalPath").string(var_2312.as_str());
    }
    if let Some(var_2313) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2313.as_str());
    }
    if let Some(var_2314) = &input.s3_data_distribution_type {
        object.key("S3DataDistributionType").string(var_2314.as_str());
    }
    if let Some(var_2315) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2315.as_str());
    }
    if let Some(var_2316) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_2316.as_str());
    }
    if let Some(var_2317) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2317.as_str());
    }
    if let Some(var_2318) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2318).into()));
    }
    if let Some(var_2319) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_2319.as_str());
    }
    if let Some(var_2320) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_2320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BatchTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2321) = &input.data_captured_destination_s3_uri {
        object.key("DataCapturedDestinationS3Uri").string(var_2321.as_str());
    }
    if let Some(var_2322) = &input.dataset_format {
        let mut object_2323 = object.key("DatasetFormat").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_dataset_format(&mut object_2323, var_2322)?;
        object_2323.finish();
    }
    if let Some(var_2324) = &input.local_path {
        object.key("LocalPath").string(var_2324.as_str());
    }
    if let Some(var_2325) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2325.as_str());
    }
    if let Some(var_2326) = &input.s3_data_distribution_type {
        object.key("S3DataDistributionType").string(var_2326.as_str());
    }
    if let Some(var_2327) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2327.as_str());
    }
    if let Some(var_2328) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_2328.as_str());
    }
    if let Some(var_2329) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2329.as_str());
    }
    if let Some(var_2330) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2330).into()));
    }
    if let Some(var_2331) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_2331.as_str());
    }
    if let Some(var_2332) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_2332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringOutput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2333) = &input.s3_output {
        let mut object_2334 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_s3_output(&mut object_2334, var_2333)?;
        object_2334.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_cluster_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringClusterConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2335) = &input.instance_count {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2335).into()));
    }
    if let Some(var_2336) = &input.instance_type {
        object.key("InstanceType").string(var_2336.as_str());
    }
    if let Some(var_2337) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2337).into()));
    }
    if let Some(var_2338) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sharing_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SharingSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2339) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_2339.as_str());
    }
    if let Some(var_2340) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2340.as_str());
    }
    if let Some(var_2341) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_2341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jupyter_server_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JupyterServerAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2342) = &input.default_resource_spec {
        let mut object_2343 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2343, var_2342)?;
        object_2343.finish();
    }
    if let Some(var_2344) = &input.lifecycle_config_arns {
        let mut array_2345 = object.key("LifecycleConfigArns").start_array();
        for item_2346 in var_2344 {
             {
                array_2345.value().string(item_2346.as_str());
            }
        }
        array_2345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kernel_gateway_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KernelGatewayAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2347) = &input.default_resource_spec {
        let mut object_2348 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2348, var_2347)?;
        object_2348.finish();
    }
    if let Some(var_2349) = &input.custom_images {
        let mut array_2350 = object.key("CustomImages").start_array();
        for item_2351 in var_2349 {
             {
                let mut object_2352 = array_2350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(&mut object_2352, item_2351)?;
                object_2352.finish();
            }
        }
        array_2350.finish();
    }
    if let Some(var_2353) = &input.lifecycle_config_arns {
        let mut array_2354 = object.key("LifecycleConfigArns").start_array();
        for item_2355 in var_2353 {
             {
                array_2354.value().string(item_2355.as_str());
            }
        }
        array_2354.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tensor_board_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TensorBoardAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2356) = &input.default_resource_spec {
        let mut object_2357 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2357, var_2356)?;
        object_2357.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RStudioServerProAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2358) = &input.access_status {
        object.key("AccessStatus").string(var_2358.as_str());
    }
    if let Some(var_2359) = &input.user_group {
        object.key("UserGroup").string(var_2359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_session_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RSessionAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2360) = &input.default_resource_spec {
        let mut object_2361 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2361, var_2360)?;
        object_2361.finish();
    }
    if let Some(var_2362) = &input.custom_images {
        let mut array_2363 = object.key("CustomImages").start_array();
        for item_2364 in var_2362 {
             {
                let mut object_2365 = array_2363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_image(&mut object_2365, item_2364)?;
                object_2365.finish();
            }
        }
        array_2363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_canvas_app_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CanvasAppSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2366) = &input.time_series_forecasting_settings {
        let mut object_2367 = object.key("TimeSeriesForecastingSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_time_series_forecasting_settings(&mut object_2367, var_2366)?;
        object_2367.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RStudioServerProDomainSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2368) = &input.domain_execution_role_arn {
        object.key("DomainExecutionRoleArn").string(var_2368.as_str());
    }
    if let Some(var_2369) = &input.r_studio_connect_url {
        object.key("RStudioConnectUrl").string(var_2369.as_str());
    }
    if let Some(var_2370) = &input.r_studio_package_manager_url {
        object.key("RStudioPackageManagerUrl").string(var_2370.as_str());
    }
    if let Some(var_2371) = &input.default_resource_spec {
        let mut object_2372 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2372, var_2371)?;
        object_2372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_selection_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeviceSelectionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2373) = &input.device_subset_type {
        object.key("DeviceSubsetType").string(var_2373.as_str());
    }
    if input.percentage != 0 {
        object.key("Percentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.percentage).into()));
    }
    if let Some(var_2374) = &input.device_names {
        let mut array_2375 = object.key("DeviceNames").start_array();
        for item_2376 in var_2374 {
             {
                array_2375.value().string(item_2376.as_str());
            }
        }
        array_2375.finish();
    }
    if let Some(var_2377) = &input.device_name_contains {
        object.key("DeviceNameContains").string(var_2377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_edge_deployment_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EdgeDeploymentConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2378) = &input.failure_handling_policy {
        object.key("FailureHandlingPolicy").string(var_2378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_blue_green_update_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BlueGreenUpdatePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2379) = &input.traffic_routing_configuration {
        let mut object_2380 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_traffic_routing_config(&mut object_2380, var_2379)?;
        object_2380.finish();
    }
    if let Some(var_2381) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2381).into()));
    }
    if let Some(var_2382) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2382).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_rollback_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoRollbackConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2383) = &input.alarms {
        let mut array_2384 = object.key("Alarms").start_array();
        for item_2385 in var_2383 {
             {
                let mut object_2386 = array_2384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(&mut object_2386, item_2385)?;
                object_2386.finish();
            }
        }
        array_2384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_core_dump_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProductionVariantCoreDumpConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2387) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_2387.as_str());
    }
    if let Some(var_2388) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_production_variant_serverless_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProductionVariantServerlessConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2389) = &input.memory_size_in_mb {
        object.key("MemorySizeInMB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2389).into()));
    }
    if let Some(var_2390) = &input.max_concurrency {
        object.key("MaxConcurrency").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2390).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_option(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CaptureOption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2391) = &input.capture_mode {
        object.key("CaptureMode").string(var_2391.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capture_content_type_header(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CaptureContentTypeHeader) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2392) = &input.csv_content_types {
        let mut array_2393 = object.key("CsvContentTypes").start_array();
        for item_2394 in var_2392 {
             {
                array_2393.value().string(item_2394.as_str());
            }
        }
        array_2393.finish();
    }
    if let Some(var_2395) = &input.json_content_types {
        let mut array_2396 = object.key("JsonContentTypes").start_array();
        for item_2397 in var_2395 {
             {
                array_2396.value().string(item_2397.as_str());
            }
        }
        array_2396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_client_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AsyncInferenceClientConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2398) = &input.max_concurrent_invocations_per_instance {
        object.key("MaxConcurrentInvocationsPerInstance").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2398).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AsyncInferenceOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2399) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2399.as_str());
    }
    if let Some(var_2400) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_2400.as_str());
    }
    if let Some(var_2401) = &input.notification_config {
        let mut object_2402 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_async_inference_notification_config(&mut object_2402, var_2401)?;
        object_2402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_explainer_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClarifyExplainerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2403) = &input.enable_explanations {
        object.key("EnableExplanations").string(var_2403.as_str());
    }
    if let Some(var_2404) = &input.inference_config {
        let mut object_2405 = object.key("InferenceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_inference_config(&mut object_2405, var_2404)?;
        object_2405.finish();
    }
    if let Some(var_2406) = &input.shap_config {
        let mut object_2407 = object.key("ShapConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_shap_config(&mut object_2407, var_2406)?;
        object_2407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_online_store_security_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OnlineStoreSecurityConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2408) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_storage_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3StorageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2409) = &input.s3_uri {
        object.key("S3Uri").string(var_2409.as_str());
    }
    if let Some(var_2410) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2410.as_str());
    }
    if let Some(var_2411) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_2411.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataCatalogConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2412) = &input.table_name {
        object.key("TableName").string(var_2412.as_str());
    }
    if let Some(var_2413) = &input.catalog {
        object.key("Catalog").string(var_2413.as_str());
    }
    if let Some(var_2414) = &input.database {
        object.key("Database").string(var_2414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_human_loop_activation_conditions_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HumanLoopActivationConditionsConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2415) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_2415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_public_workforce_task_price(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PublicWorkforceTaskPrice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2416) = &input.amount_in_usd {
        let mut object_2417 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_crate_model_usd(&mut object_2417, var_2416)?;
        object_2417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_strategy_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningJobStrategyConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2418) = &input.hyperband_strategy_config {
        let mut object_2419 = object.key("HyperbandStrategyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyperband_strategy_config(&mut object_2419, var_2418)?;
        object_2419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_limits(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceLimits) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2420) = &input.max_number_of_training_jobs {
        object.key("MaxNumberOfTrainingJobs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2420).into()));
    }
     {
        object.key("MaxParallelTrainingJobs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_ranges(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParameterRanges) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2421) = &input.integer_parameter_ranges {
        let mut array_2422 = object.key("IntegerParameterRanges").start_array();
        for item_2423 in var_2421 {
             {
                let mut object_2424 = array_2422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(&mut object_2424, item_2423)?;
                object_2424.finish();
            }
        }
        array_2422.finish();
    }
    if let Some(var_2425) = &input.continuous_parameter_ranges {
        let mut array_2426 = object.key("ContinuousParameterRanges").start_array();
        for item_2427 in var_2425 {
             {
                let mut object_2428 = array_2426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(&mut object_2428, item_2427)?;
                object_2428.finish();
            }
        }
        array_2426.finish();
    }
    if let Some(var_2429) = &input.categorical_parameter_ranges {
        let mut array_2430 = object.key("CategoricalParameterRanges").start_array();
        for item_2431 in var_2429 {
             {
                let mut object_2432 = array_2430.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(&mut object_2432, item_2431)?;
                object_2432.finish();
            }
        }
        array_2430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tuning_job_completion_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TuningJobCompletionCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2433) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_2433).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_algorithm_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterAlgorithmSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2434) = &input.training_image {
        object.key("TrainingImage").string(var_2434.as_str());
    }
    if let Some(var_2435) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2435.as_str());
    }
    if let Some(var_2436) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2436.as_str());
    }
    if let Some(var_2437) = &input.metric_definitions {
        let mut array_2438 = object.key("MetricDefinitions").start_array();
        for item_2439 in var_2437 {
             {
                let mut object_2440 = array_2438.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition(&mut object_2440, item_2439)?;
                object_2440.finish();
            }
        }
        array_2438.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_resource_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningResourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2441) = &input.instance_type {
        object.key("InstanceType").string(var_2441.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.instance_count).into()));
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()));
    }
    if let Some(var_2442) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2442.as_str());
    }
    if let Some(var_2443) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_2443.as_str());
    }
    if let Some(var_2444) = &input.instance_configs {
        let mut array_2445 = object.key("InstanceConfigs").start_array();
        for item_2446 in var_2444 {
             {
                let mut object_2447 = array_2445.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_instance_config(&mut object_2447, item_2446)?;
                object_2447.finish();
            }
        }
        array_2445.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_hyper_parameter_tuning_job(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParentHyperParameterTuningJob) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2448) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_2448.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_pattern(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrafficPattern) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2449) = &input.traffic_type {
        object.key("TrafficType").string(var_2449.as_str());
    }
    if let Some(var_2450) = &input.phases {
        let mut array_2451 = object.key("Phases").start_array();
        for item_2452 in var_2450 {
             {
                let mut object_2453 = array_2451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_phase(&mut object_2453, item_2452)?;
                object_2453.finish();
            }
        }
        array_2451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_resource_limit(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobResourceLimit) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2454) = &input.max_number_of_tests {
        object.key("MaxNumberOfTests").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2454).into()));
    }
    if let Some(var_2455) = &input.max_parallel_of_tests {
        object.key("MaxParallelOfTests").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2455).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_input_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EndpointInputConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2456) = &input.instance_type {
        object.key("InstanceType").string(var_2456.as_str());
    }
    if let Some(var_2457) = &input.inference_specification_name {
        object.key("InferenceSpecificationName").string(var_2457.as_str());
    }
    if let Some(var_2458) = &input.environment_parameter_ranges {
        let mut object_2459 = object.key("EnvironmentParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_environment_parameter_ranges(&mut object_2459, var_2458)?;
        object_2459.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_container_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobContainerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2460) = &input.domain {
        object.key("Domain").string(var_2460.as_str());
    }
    if let Some(var_2461) = &input.task {
        object.key("Task").string(var_2461.as_str());
    }
    if let Some(var_2462) = &input.framework {
        object.key("Framework").string(var_2462.as_str());
    }
    if let Some(var_2463) = &input.framework_version {
        object.key("FrameworkVersion").string(var_2463.as_str());
    }
    if let Some(var_2464) = &input.payload_config {
        let mut object_2465 = object.key("PayloadConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation_job_payload_config(&mut object_2465, var_2464)?;
        object_2465.finish();
    }
    if let Some(var_2466) = &input.nearest_model_name {
        object.key("NearestModelName").string(var_2466.as_str());
    }
    if let Some(var_2467) = &input.supported_instance_types {
        let mut array_2468 = object.key("SupportedInstanceTypes").start_array();
        for item_2469 in var_2467 {
             {
                array_2468.value().string(item_2469.as_str());
            }
        }
        array_2468.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EndpointInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2470) = &input.endpoint_name {
        object.key("EndpointName").string(var_2470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_latency_threshold(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelLatencyThreshold) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2471) = &input.percentile {
        object.key("Percentile").string(var_2471.as_str());
    }
    if input.value_in_milliseconds != 0 {
        object.key("ValueInMilliseconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.value_in_milliseconds).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_compiled_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobCompiledOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2472) = &input.s3_output_uri {
        object.key("S3OutputUri").string(var_2472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobDataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2473) = &input.s3_data_source {
        let mut object_2474 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_s3_data_source(&mut object_2474, var_2473)?;
        object_2474.finish();
    }
    if let Some(var_2475) = &input.sns_data_source {
        let mut object_2476 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_labeling_job_sns_data_source(&mut object_2476, var_2475)?;
        object_2476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_data_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobDataAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2477) = &input.content_classifiers {
        let mut array_2478 = object.key("ContentClassifiers").start_array();
        for item_2479 in var_2477 {
             {
                array_2478.value().string(item_2479.as_str());
            }
        }
        array_2478.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_resource_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobResourceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2480) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2480.as_str());
    }
    if let Some(var_2481) = &input.vpc_config {
        let mut object_2482 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_2482, var_2481)?;
        object_2482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ui_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UiConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2483) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_2483.as_str());
    }
    if let Some(var_2484) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_2484.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_annotation_consolidation_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AnnotationConsolidationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2485) = &input.annotation_consolidation_lambda_arn {
        object.key("AnnotationConsolidationLambdaArn").string(var_2485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ImageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2486) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_2486.as_str());
    }
    if let Some(var_2487) = &input.repository_auth_config {
        let mut object_2488 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_auth_config(&mut object_2488, var_2487)?;
        object_2488.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multi_model_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MultiModelConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2489) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_2489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_ground_truth_s3_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringGroundTruthS3Input) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2490) = &input.s3_uri {
        object.key("S3Uri").string(var_2490.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_package_validation_profile(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelPackageValidationProfile) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2491) = &input.profile_name {
        object.key("ProfileName").string(var_2491.as_str());
    }
    if let Some(var_2492) = &input.transform_job_definition {
        let mut object_2493 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_job_definition(&mut object_2493, var_2492)?;
        object_2493.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_algorithm(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceAlgorithm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2494) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2494.as_str());
    }
    if let Some(var_2495) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2495.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_quality(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelQuality) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2496) = &input.statistics {
        let mut object_2497 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2497, var_2496)?;
        object_2497.finish();
    }
    if let Some(var_2498) = &input.constraints {
        let mut object_2499 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2499, var_2498)?;
        object_2499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_data_quality(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelDataQuality) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2500) = &input.statistics {
        let mut object_2501 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2501, var_2500)?;
        object_2501.finish();
    }
    if let Some(var_2502) = &input.constraints {
        let mut object_2503 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2503, var_2502)?;
        object_2503.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bias(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Bias) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2504) = &input.report {
        let mut object_2505 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2505, var_2504)?;
        object_2505.finish();
    }
    if let Some(var_2506) = &input.pre_training_report {
        let mut object_2507 = object.key("PreTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2507, var_2506)?;
        object_2507.finish();
    }
    if let Some(var_2508) = &input.post_training_report {
        let mut object_2509 = object.key("PostTrainingReport").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2509, var_2508)?;
        object_2509.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainability(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Explainability) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2510) = &input.report {
        let mut object_2511 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2511, var_2510)?;
        object_2511.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_bias(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DriftCheckBias) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2512) = &input.config_file {
        let mut object_2513 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2513, var_2512)?;
        object_2513.finish();
    }
    if let Some(var_2514) = &input.pre_training_constraints {
        let mut object_2515 = object.key("PreTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2515, var_2514)?;
        object_2515.finish();
    }
    if let Some(var_2516) = &input.post_training_constraints {
        let mut object_2517 = object.key("PostTrainingConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2517, var_2516)?;
        object_2517.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_explainability(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DriftCheckExplainability) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2518) = &input.constraints {
        let mut object_2519 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2519, var_2518)?;
        object_2519.finish();
    }
    if let Some(var_2520) = &input.config_file {
        let mut object_2521 = object.key("ConfigFile").start_object();
        crate::json_ser::serialize_structure_crate_model_file_source(&mut object_2521, var_2520)?;
        object_2521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_quality(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DriftCheckModelQuality) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2522) = &input.statistics {
        let mut object_2523 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2523, var_2522)?;
        object_2523.finish();
    }
    if let Some(var_2524) = &input.constraints {
        let mut object_2525 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2525, var_2524)?;
        object_2525.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drift_check_model_data_quality(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DriftCheckModelDataQuality) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2526) = &input.statistics {
        let mut object_2527 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2527, var_2526)?;
        object_2527.finish();
    }
    if let Some(var_2528) = &input.constraints {
        let mut object_2529 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_metrics_source(&mut object_2529, var_2528)?;
        object_2529.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schedule_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ScheduleConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2530) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2530.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_job_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringJobDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2531) = &input.baseline_config {
        let mut object_2532 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_baseline_config(&mut object_2532, var_2531)?;
        object_2532.finish();
    }
    if let Some(var_2533) = &input.monitoring_inputs {
        let mut array_2534 = object.key("MonitoringInputs").start_array();
        for item_2535 in var_2533 {
             {
                let mut object_2536 = array_2534.value().start_object();
                crate::json_ser::serialize_structure_crate_model_monitoring_input(&mut object_2536, item_2535)?;
                object_2536.finish();
            }
        }
        array_2534.finish();
    }
    if let Some(var_2537) = &input.monitoring_output_config {
        let mut object_2538 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_output_config(&mut object_2538, var_2537)?;
        object_2538.finish();
    }
    if let Some(var_2539) = &input.monitoring_resources {
        let mut object_2540 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_resources(&mut object_2540, var_2539)?;
        object_2540.finish();
    }
    if let Some(var_2541) = &input.monitoring_app_specification {
        let mut object_2542 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_app_specification(&mut object_2542, var_2541)?;
        object_2542.finish();
    }
    if let Some(var_2543) = &input.stopping_condition {
        let mut object_2544 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_stopping_condition(&mut object_2544, var_2543)?;
        object_2544.finish();
    }
    if let Some(var_2545) = &input.environment {
        let mut object_2546 = object.key("Environment").start_object();
        for (key_2547, value_2548) in var_2545 {
             {
                object_2546.key(key_2547.as_str()).string(value_2548.as_str());
            }
        }
        object_2546.finish();
    }
    if let Some(var_2549) = &input.network_config {
        let mut object_2550 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_network_config(&mut object_2550, var_2549)?;
        object_2550.finish();
    }
    if let Some(var_2551) = &input.role_arn {
        object.key("RoleArn").string(var_2551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingS3Input) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2552) = &input.s3_uri {
        object.key("S3Uri").string(var_2552.as_str());
    }
    if let Some(var_2553) = &input.local_path {
        object.key("LocalPath").string(var_2553.as_str());
    }
    if let Some(var_2554) = &input.s3_data_type {
        object.key("S3DataType").string(var_2554.as_str());
    }
    if let Some(var_2555) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2555.as_str());
    }
    if let Some(var_2556) = &input.s3_data_distribution_type {
        object.key("S3DataDistributionType").string(var_2556.as_str());
    }
    if let Some(var_2557) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2557.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatasetDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2558) = &input.athena_dataset_definition {
        let mut object_2559 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_dataset_definition(&mut object_2559, var_2558)?;
        object_2559.finish();
    }
    if let Some(var_2560) = &input.redshift_dataset_definition {
        let mut object_2561 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_dataset_definition(&mut object_2561, var_2560)?;
        object_2561.finish();
    }
    if let Some(var_2562) = &input.local_path {
        object.key("LocalPath").string(var_2562.as_str());
    }
    if let Some(var_2563) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2563.as_str());
    }
    if let Some(var_2564) = &input.input_mode {
        object.key("InputMode").string(var_2564.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingOutput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2565) = &input.output_name {
        object.key("OutputName").string(var_2565.as_str());
    }
    if let Some(var_2566) = &input.s3_output {
        let mut object_2567 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_s3_output(&mut object_2567, var_2566)?;
        object_2567.finish();
    }
    if let Some(var_2568) = &input.feature_store_output {
        let mut object_2569 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_processing_feature_store_output(&mut object_2569, var_2568)?;
        object_2569.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_cluster_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingClusterConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2570) = &input.instance_count {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2570).into()));
    }
    if let Some(var_2571) = &input.instance_type {
        object.key("InstanceType").string(var_2571.as_str());
    }
    if let Some(var_2572) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2572).into()));
    }
    if let Some(var_2573) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2573.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProvisioningParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2574) = &input.key {
        object.key("Key").string(var_2574.as_str());
    }
    if let Some(var_2575) = &input.value {
        object.key("Value").string(var_2575.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2576) = &input.s3_data_source {
        let mut object_2577 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source(&mut object_2577, var_2576)?;
        object_2577.finish();
    }
    if let Some(var_2578) = &input.file_system_data_source {
        let mut object_2579 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_file_system_data_source(&mut object_2579, var_2578)?;
        object_2579.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shuffle_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ShuffleConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("Seed").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.seed).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2580) = &input.instance_type {
        object.key("InstanceType").string(var_2580.as_str());
    }
     {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.instance_count).into()));
    }
    if let Some(var_2581) = &input.instance_group_name {
        object.key("InstanceGroupName").string(var_2581.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_collection_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CollectionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2582) = &input.collection_name {
        object.key("CollectionName").string(var_2582.as_str());
    }
    if let Some(var_2583) = &input.collection_parameters {
        let mut object_2584 = object.key("CollectionParameters").start_object();
        for (key_2585, value_2586) in var_2583 {
             {
                object_2584.key(key_2585.as_str()).string(value_2586.as_str());
            }
        }
        object_2584.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformDataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2587) = &input.s3_data_source {
        let mut object_2588 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_s3_data_source(&mut object_2588, var_2587)?;
        object_2588.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_member_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CognitoMemberDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2589) = &input.user_pool {
        object.key("UserPool").string(var_2589.as_str());
    }
    if let Some(var_2590) = &input.user_group {
        object.key("UserGroup").string(var_2590.as_str());
    }
    if let Some(var_2591) = &input.client_id {
        object.key("ClientId").string(var_2591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oidc_member_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OidcMemberDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2592) = &input.groups {
        let mut array_2593 = object.key("Groups").start_array();
        for item_2594 in var_2592 {
             {
                array_2593.value().string(item_2594.as_str());
            }
        }
        array_2593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_name_query(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PropertyNameQuery) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2595) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2595.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_metadata_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelMetadataFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2596) = &input.name {
        object.key("Name").string(var_2596.as_str());
    }
    if let Some(var_2597) = &input.value {
        object.key("Value").string(var_2597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2598) = &input.name {
        object.key("Name").string(var_2598.as_str());
    }
    if let Some(var_2599) = &input.operator {
        object.key("Operator").string(var_2599.as_str());
    }
    if let Some(var_2600) = &input.value {
        object.key("Value").string(var_2600.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_nested_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NestedFilters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2601) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2601.as_str());
    }
    if let Some(var_2602) = &input.filters {
        let mut array_2603 = object.key("Filters").start_array();
        for item_2604 in var_2602 {
             {
                let mut object_2605 = array_2603.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_2605, item_2604)?;
                object_2605.finish();
            }
        }
        array_2603.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_r_studio_server_pro_domain_settings_for_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RStudioServerProDomainSettingsForUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2606) = &input.domain_execution_role_arn {
        object.key("DomainExecutionRoleArn").string(var_2606.as_str());
    }
    if let Some(var_2607) = &input.default_resource_spec {
        let mut object_2608 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_spec(&mut object_2608, var_2607)?;
        object_2608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParameterRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2609) = &input.integer_parameter_range_specification {
        let mut object_2610 = object.key("IntegerParameterRangeSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_integer_parameter_range_specification(&mut object_2610, var_2609)?;
        object_2610.finish();
    }
    if let Some(var_2611) = &input.continuous_parameter_range_specification {
        let mut object_2612 = object.key("ContinuousParameterRangeSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_continuous_parameter_range_specification(&mut object_2612, var_2611)?;
        object_2612.finish();
    }
    if let Some(var_2613) = &input.categorical_parameter_range_specification {
        let mut object_2614 = object.key("CategoricalParameterRangeSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_categorical_parameter_range_specification(&mut object_2614, var_2613)?;
        object_2614.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ModelInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2615) = &input.data_input_config {
        object.key("DataInputConfig").string(var_2615.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_training_job_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrainingJobDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2616) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2616.as_str());
    }
    if let Some(var_2617) = &input.hyper_parameters {
        let mut object_2618 = object.key("HyperParameters").start_object();
        for (key_2619, value_2620) in var_2617 {
             {
                object_2618.key(key_2619.as_str()).string(value_2620.as_str());
            }
        }
        object_2618.finish();
    }
    if let Some(var_2621) = &input.input_data_config {
        let mut array_2622 = object.key("InputDataConfig").start_array();
        for item_2623 in var_2621 {
             {
                let mut object_2624 = array_2622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel(&mut object_2624, item_2623)?;
                object_2624.finish();
            }
        }
        array_2622.finish();
    }
    if let Some(var_2625) = &input.output_data_config {
        let mut object_2626 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_data_config(&mut object_2626, var_2625)?;
        object_2626.finish();
    }
    if let Some(var_2627) = &input.resource_config {
        let mut object_2628 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_config(&mut object_2628, var_2627)?;
        object_2628.finish();
    }
    if let Some(var_2629) = &input.stopping_condition {
        let mut object_2630 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_stopping_condition(&mut object_2630, var_2629)?;
        object_2630.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_job_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformJobDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2631) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2631).into()));
    }
    if let Some(var_2632) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2632).into()));
    }
    if let Some(var_2633) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2633.as_str());
    }
    if let Some(var_2634) = &input.environment {
        let mut object_2635 = object.key("Environment").start_object();
        for (key_2636, value_2637) in var_2634 {
             {
                object_2635.key(key_2636.as_str()).string(value_2637.as_str());
            }
        }
        object_2635.finish();
    }
    if let Some(var_2638) = &input.transform_input {
        let mut object_2639 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_input(&mut object_2639, var_2638)?;
        object_2639.finish();
    }
    if let Some(var_2640) = &input.transform_output {
        let mut object_2641 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_output(&mut object_2641, var_2640)?;
        object_2641.finish();
    }
    if let Some(var_2642) = &input.transform_resources {
        let mut object_2643 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_resources(&mut object_2643, var_2642)?;
        object_2643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_mls3_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoMls3DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2644) = &input.s3_data_type {
        object.key("S3DataType").string(var_2644.as_str());
    }
    if let Some(var_2645) = &input.s3_uri {
        object.key("S3Uri").string(var_2645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_dataset_format(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringDatasetFormat) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2646) = &input.csv {
        let mut object_2647 = object.key("Csv").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_csv_dataset_format(&mut object_2647, var_2646)?;
        object_2647.finish();
    }
    if let Some(var_2648) = &input.json {
        let mut object_2649 = object.key("Json").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_json_dataset_format(&mut object_2649, var_2648)?;
        object_2649.finish();
    }
    if let Some(var_2650) = &input.parquet {
        let mut object_2651 = object.key("Parquet").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_parquet_dataset_format(&mut object_2651, var_2650)?;
        object_2651.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_s3_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringS3Output) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2652) = &input.s3_uri {
        object.key("S3Uri").string(var_2652.as_str());
    }
    if let Some(var_2653) = &input.local_path {
        object.key("LocalPath").string(var_2653.as_str());
    }
    if let Some(var_2654) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2654.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_image(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomImage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2655) = &input.image_name {
        object.key("ImageName").string(var_2655.as_str());
    }
    if let Some(var_2656) = &input.image_version_number {
        object.key("ImageVersionNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2656).into()));
    }
    if let Some(var_2657) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2657.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_series_forecasting_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TimeSeriesForecastingSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2658) = &input.status {
        object.key("Status").string(var_2658.as_str());
    }
    if let Some(var_2659) = &input.amazon_forecast_role_arn {
        object.key("AmazonForecastRoleArn").string(var_2659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_traffic_routing_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TrafficRoutingConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2660) = &input.r#type {
        object.key("Type").string(var_2660.as_str());
    }
    if let Some(var_2661) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2661).into()));
    }
    if let Some(var_2662) = &input.canary_size {
        let mut object_2663 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2663, var_2662)?;
        object_2663.finish();
    }
    if let Some(var_2664) = &input.linear_step_size {
        let mut object_2665 = object.key("LinearStepSize").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_size(&mut object_2665, var_2664)?;
        object_2665.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Alarm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2666) = &input.alarm_name {
        object.key("AlarmName").string(var_2666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_async_inference_notification_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AsyncInferenceNotificationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2667) = &input.success_topic {
        object.key("SuccessTopic").string(var_2667.as_str());
    }
    if let Some(var_2668) = &input.error_topic {
        object.key("ErrorTopic").string(var_2668.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_inference_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClarifyInferenceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2669) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_2669.as_str());
    }
    if let Some(var_2670) = &input.content_template {
        object.key("ContentTemplate").string(var_2670.as_str());
    }
    if let Some(var_2671) = &input.max_record_count {
        object.key("MaxRecordCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2671).into()));
    }
    if let Some(var_2672) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2672).into()));
    }
    if let Some(var_2673) = &input.probability_index {
        object.key("ProbabilityIndex").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2673).into()));
    }
    if let Some(var_2674) = &input.label_index {
        object.key("LabelIndex").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2674).into()));
    }
    if let Some(var_2675) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_2675.as_str());
    }
    if let Some(var_2676) = &input.label_attribute {
        object.key("LabelAttribute").string(var_2676.as_str());
    }
    if let Some(var_2677) = &input.label_headers {
        let mut array_2678 = object.key("LabelHeaders").start_array();
        for item_2679 in var_2677 {
             {
                array_2678.value().string(item_2679.as_str());
            }
        }
        array_2678.finish();
    }
    if let Some(var_2680) = &input.feature_headers {
        let mut array_2681 = object.key("FeatureHeaders").start_array();
        for item_2682 in var_2680 {
             {
                array_2681.value().string(item_2682.as_str());
            }
        }
        array_2681.finish();
    }
    if let Some(var_2683) = &input.feature_types {
        let mut array_2684 = object.key("FeatureTypes").start_array();
        for item_2685 in var_2683 {
             {
                array_2684.value().string(item_2685.as_str());
            }
        }
        array_2684.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_shap_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClarifyShapConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2686) = &input.shap_baseline_config {
        let mut object_2687 = object.key("ShapBaselineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_shap_baseline_config(&mut object_2687, var_2686)?;
        object_2687.finish();
    }
    if let Some(var_2688) = &input.number_of_samples {
        object.key("NumberOfSamples").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2688).into()));
    }
    if let Some(var_2689) = &input.use_logit {
        object.key("UseLogit").boolean(*var_2689);
    }
    if let Some(var_2690) = &input.seed {
        object.key("Seed").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2690).into()));
    }
    if let Some(var_2691) = &input.text_config {
        let mut object_2692 = object.key("TextConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_clarify_text_config(&mut object_2692, var_2691)?;
        object_2692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usd(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Usd) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.dollars != 0 {
        object.key("Dollars").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.dollars).into()));
    }
    if input.cents != 0 {
        object.key("Cents").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.cents).into()));
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyperband_strategy_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperbandStrategyConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2693) = &input.min_resource {
        object.key("MinResource").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2693).into()));
    }
    if let Some(var_2694) = &input.max_resource {
        object.key("MaxResource").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2694).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IntegerParameterRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2695) = &input.name {
        object.key("Name").string(var_2695.as_str());
    }
    if let Some(var_2696) = &input.min_value {
        object.key("MinValue").string(var_2696.as_str());
    }
    if let Some(var_2697) = &input.max_value {
        object.key("MaxValue").string(var_2697.as_str());
    }
    if let Some(var_2698) = &input.scaling_type {
        object.key("ScalingType").string(var_2698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContinuousParameterRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2699) = &input.name {
        object.key("Name").string(var_2699.as_str());
    }
    if let Some(var_2700) = &input.min_value {
        object.key("MinValue").string(var_2700.as_str());
    }
    if let Some(var_2701) = &input.max_value {
        object.key("MaxValue").string(var_2701.as_str());
    }
    if let Some(var_2702) = &input.scaling_type {
        object.key("ScalingType").string(var_2702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CategoricalParameterRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2703) = &input.name {
        object.key("Name").string(var_2703.as_str());
    }
    if let Some(var_2704) = &input.values {
        let mut array_2705 = object.key("Values").start_array();
        for item_2706 in var_2704 {
             {
                array_2705.value().string(item_2706.as_str());
            }
        }
        array_2705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_instance_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HyperParameterTuningInstanceConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2707) = &input.instance_type {
        object.key("InstanceType").string(var_2707.as_str());
    }
     {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.instance_count).into()));
    }
     {
        object.key("VolumeSizeInGB").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.volume_size_in_gb).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phase(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Phase) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2708) = &input.initial_number_of_users {
        object.key("InitialNumberOfUsers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2708).into()));
    }
    if let Some(var_2709) = &input.spawn_rate {
        object.key("SpawnRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2709).into()));
    }
    if let Some(var_2710) = &input.duration_in_seconds {
        object.key("DurationInSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2710).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_parameter_ranges(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EnvironmentParameterRanges) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2711) = &input.categorical_parameter_ranges {
        let mut array_2712 = object.key("CategoricalParameterRanges").start_array();
        for item_2713 in var_2711 {
             {
                let mut object_2714 = array_2712.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter(&mut object_2714, item_2713)?;
                object_2714.finish();
            }
        }
        array_2712.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation_job_payload_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecommendationJobPayloadConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2715) = &input.sample_payload_url {
        object.key("SamplePayloadUrl").string(var_2715.as_str());
    }
    if let Some(var_2716) = &input.supported_content_types {
        let mut array_2717 = object.key("SupportedContentTypes").start_array();
        for item_2718 in var_2716 {
             {
                array_2717.value().string(item_2718.as_str());
            }
        }
        array_2717.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_s3_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobS3DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2719) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_labeling_job_sns_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LabelingJobSnsDataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2720) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_auth_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RepositoryAuthConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2721) = &input.repository_credentials_provider_arn {
        object.key("RepositoryCredentialsProviderArn").string(var_2721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metrics_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetricsSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2722) = &input.content_type {
        object.key("ContentType").string(var_2722.as_str());
    }
    if let Some(var_2723) = &input.content_digest {
        object.key("ContentDigest").string(var_2723.as_str());
    }
    if let Some(var_2724) = &input.s3_uri {
        object.key("S3Uri").string(var_2724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FileSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2725) = &input.content_type {
        object.key("ContentType").string(var_2725.as_str());
    }
    if let Some(var_2726) = &input.content_digest {
        object.key("ContentDigest").string(var_2726.as_str());
    }
    if let Some(var_2727) = &input.s3_uri {
        object.key("S3Uri").string(var_2727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2728) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2728.as_str());
    }
    if let Some(var_2729) = &input.constraints_resource {
        let mut object_2730 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_constraints_resource(&mut object_2730, var_2729)?;
        object_2730.finish();
    }
    if let Some(var_2731) = &input.statistics_resource {
        let mut object_2732 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_crate_model_monitoring_statistics_resource(&mut object_2732, var_2731)?;
        object_2732.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2733) = &input.endpoint_input {
        let mut object_2734 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_input(&mut object_2734, var_2733)?;
        object_2734.finish();
    }
    if let Some(var_2735) = &input.batch_transform_input {
        let mut object_2736 = object.key("BatchTransformInput").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_transform_input(&mut object_2736, var_2735)?;
        object_2736.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_app_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringAppSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2737) = &input.image_uri {
        object.key("ImageUri").string(var_2737.as_str());
    }
    if let Some(var_2738) = &input.container_entrypoint {
        let mut array_2739 = object.key("ContainerEntrypoint").start_array();
        for item_2740 in var_2738 {
             {
                array_2739.value().string(item_2740.as_str());
            }
        }
        array_2739.finish();
    }
    if let Some(var_2741) = &input.container_arguments {
        let mut array_2742 = object.key("ContainerArguments").start_array();
        for item_2743 in var_2741 {
             {
                array_2742.value().string(item_2743.as_str());
            }
        }
        array_2742.finish();
    }
    if let Some(var_2744) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2744.as_str());
    }
    if let Some(var_2745) = &input.post_analytics_processor_source_uri {
        object.key("PostAnalyticsProcessorSourceUri").string(var_2745.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_dataset_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AthenaDatasetDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2746) = &input.catalog {
        object.key("Catalog").string(var_2746.as_str());
    }
    if let Some(var_2747) = &input.database {
        object.key("Database").string(var_2747.as_str());
    }
    if let Some(var_2748) = &input.query_string {
        object.key("QueryString").string(var_2748.as_str());
    }
    if let Some(var_2749) = &input.work_group {
        object.key("WorkGroup").string(var_2749.as_str());
    }
    if let Some(var_2750) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2750.as_str());
    }
    if let Some(var_2751) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2751.as_str());
    }
    if let Some(var_2752) = &input.output_format {
        object.key("OutputFormat").string(var_2752.as_str());
    }
    if let Some(var_2753) = &input.output_compression {
        object.key("OutputCompression").string(var_2753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_dataset_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RedshiftDatasetDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2754) = &input.cluster_id {
        object.key("ClusterId").string(var_2754.as_str());
    }
    if let Some(var_2755) = &input.database {
        object.key("Database").string(var_2755.as_str());
    }
    if let Some(var_2756) = &input.db_user {
        object.key("DbUser").string(var_2756.as_str());
    }
    if let Some(var_2757) = &input.query_string {
        object.key("QueryString").string(var_2757.as_str());
    }
    if let Some(var_2758) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2758.as_str());
    }
    if let Some(var_2759) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2759.as_str());
    }
    if let Some(var_2760) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2760.as_str());
    }
    if let Some(var_2761) = &input.output_format {
        object.key("OutputFormat").string(var_2761.as_str());
    }
    if let Some(var_2762) = &input.output_compression {
        object.key("OutputCompression").string(var_2762.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_s3_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingS3Output) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2763) = &input.s3_uri {
        object.key("S3Uri").string(var_2763.as_str());
    }
    if let Some(var_2764) = &input.local_path {
        object.key("LocalPath").string(var_2764.as_str());
    }
    if let Some(var_2765) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processing_feature_store_output(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProcessingFeatureStoreOutput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2766) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2766.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2767) = &input.s3_data_type {
        object.key("S3DataType").string(var_2767.as_str());
    }
    if let Some(var_2768) = &input.s3_uri {
        object.key("S3Uri").string(var_2768.as_str());
    }
    if let Some(var_2769) = &input.s3_data_distribution_type {
        object.key("S3DataDistributionType").string(var_2769.as_str());
    }
    if let Some(var_2770) = &input.attribute_names {
        let mut array_2771 = object.key("AttributeNames").start_array();
        for item_2772 in var_2770 {
             {
                array_2771.value().string(item_2772.as_str());
            }
        }
        array_2771.finish();
    }
    if let Some(var_2773) = &input.instance_group_names {
        let mut array_2774 = object.key("InstanceGroupNames").start_array();
        for item_2775 in var_2773 {
             {
                array_2774.value().string(item_2775.as_str());
            }
        }
        array_2774.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_system_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FileSystemDataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2776) = &input.file_system_id {
        object.key("FileSystemId").string(var_2776.as_str());
    }
    if let Some(var_2777) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2777.as_str());
    }
    if let Some(var_2778) = &input.file_system_type {
        object.key("FileSystemType").string(var_2778.as_str());
    }
    if let Some(var_2779) = &input.directory_path {
        object.key("DirectoryPath").string(var_2779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_s3_data_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformS3DataSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2780) = &input.s3_data_type {
        object.key("S3DataType").string(var_2780.as_str());
    }
    if let Some(var_2781) = &input.s3_uri {
        object.key("S3Uri").string(var_2781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IntegerParameterRangeSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2782) = &input.min_value {
        object.key("MinValue").string(var_2782.as_str());
    }
    if let Some(var_2783) = &input.max_value {
        object.key("MaxValue").string(var_2783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContinuousParameterRangeSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2784) = &input.min_value {
        object.key("MinValue").string(var_2784.as_str());
    }
    if let Some(var_2785) = &input.max_value {
        object.key("MaxValue").string(var_2785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range_specification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CategoricalParameterRangeSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2786) = &input.values {
        let mut array_2787 = object.key("Values").start_array();
        for item_2788 in var_2786 {
             {
                array_2787.value().string(item_2788.as_str());
            }
        }
        array_2787.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_csv_dataset_format(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringCsvDatasetFormat) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.header {
        object.key("Header").boolean(input.header);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_json_dataset_format(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringJsonDatasetFormat) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.line {
        object.key("Line").boolean(input.line);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_monitoring_parquet_dataset_format(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MonitoringParquetDatasetFormat) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_size(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CapacitySize) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2789) = &input.r#type {
        object.key("Type").string(var_2789.as_str());
    }
    if let Some(var_2790) = &input.value {
        object.key("Value").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2790).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_shap_baseline_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClarifyShapBaselineConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2791) = &input.mime_type {
        object.key("MimeType").string(var_2791.as_str());
    }
    if let Some(var_2792) = &input.shap_baseline {
        object.key("ShapBaseline").string(var_2792.as_str());
    }
    if let Some(var_2793) = &input.shap_baseline_uri {
        object.key("ShapBaselineUri").string(var_2793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_clarify_text_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClarifyTextConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2794) = &input.language {
        object.key("Language").string(var_2794.as_str());
    }
    if let Some(var_2795) = &input.granularity {
        object.key("Granularity").string(var_2795.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CategoricalParameter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2796) = &input.name {
        object.key("Name").string(var_2796.as_str());
    }
    if let Some(var_2797) = &input.value {
        let mut array_2798 = object.key("Value").start_array();
        for item_2799 in var_2797 {
             {
                array_2798.value().string(item_2799.as_str());
            }
        }
        array_2798.finish();
    }
    Ok(())
}

