// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>A bad request exception object.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>An internal server error exception object.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptAdministratorInvitationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcceptAdministratorInvitationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AcceptAdministratorInvitationError> for Error {
    fn from(err: crate::error::AcceptAdministratorInvitationError) -> Self {
        match err.kind {
            crate::error::AcceptAdministratorInvitationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AcceptAdministratorInvitationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::AcceptAdministratorInvitationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AcceptInvitationError> for Error {
    fn from(err: crate::error::AcceptInvitationError) -> Self {
        match err.kind {
            crate::error::AcceptInvitationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::AcceptInvitationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::AcceptInvitationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ArchiveFindingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ArchiveFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ArchiveFindingsError> for Error {
    fn from(err: crate::error::ArchiveFindingsError) -> Self {
        match err.kind {
            crate::error::ArchiveFindingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ArchiveFindingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ArchiveFindingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDetectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDetectorError> for Error {
    fn from(err: crate::error::CreateDetectorError) -> Self {
        match err.kind {
            crate::error::CreateDetectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateDetectorErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateDetectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFilterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFilterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateFilterError> for Error {
    fn from(err: crate::error::CreateFilterError) -> Self {
        match err.kind {
            crate::error::CreateFilterErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateFilterErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateFilterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateIPSetError> for Error {
    fn from(err: crate::error::CreateIPSetError) -> Self {
        match err.kind {
            crate::error::CreateIPSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateIPSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateIPSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateMembersError> for Error {
    fn from(err: crate::error::CreateMembersError) -> Self {
        match err.kind {
            crate::error::CreateMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePublishingDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePublishingDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePublishingDestinationError> for Error {
    fn from(err: crate::error::CreatePublishingDestinationError) -> Self {
        match err.kind {
            crate::error::CreatePublishingDestinationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreatePublishingDestinationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreatePublishingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSampleFindingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSampleFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSampleFindingsError> for Error {
    fn from(err: crate::error::CreateSampleFindingsError) -> Self {
        match err.kind {
            crate::error::CreateSampleFindingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateSampleFindingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateSampleFindingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateThreatIntelSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateThreatIntelSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateThreatIntelSetError> for Error {
    fn from(err: crate::error::CreateThreatIntelSetError) -> Self {
        match err.kind {
            crate::error::CreateThreatIntelSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::CreateThreatIntelSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::CreateThreatIntelSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeclineInvitationsError> for Error {
    fn from(err: crate::error::DeclineInvitationsError) -> Self {
        match err.kind {
            crate::error::DeclineInvitationsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeclineInvitationsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeclineInvitationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDetectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDetectorError> for Error {
    fn from(err: crate::error::DeleteDetectorError) -> Self {
        match err.kind {
            crate::error::DeleteDetectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteDetectorErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteDetectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFilterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFilterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteFilterError> for Error {
    fn from(err: crate::error::DeleteFilterError) -> Self {
        match err.kind {
            crate::error::DeleteFilterErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteFilterErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteFilterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteInvitationsError> for Error {
    fn from(err: crate::error::DeleteInvitationsError) -> Self {
        match err.kind {
            crate::error::DeleteInvitationsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteInvitationsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteInvitationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteIPSetError> for Error {
    fn from(err: crate::error::DeleteIPSetError) -> Self {
        match err.kind {
            crate::error::DeleteIPSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteIPSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteIPSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteMembersError> for Error {
    fn from(err: crate::error::DeleteMembersError) -> Self {
        match err.kind {
            crate::error::DeleteMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePublishingDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePublishingDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeletePublishingDestinationError> for Error {
    fn from(err: crate::error::DeletePublishingDestinationError) -> Self {
        match err.kind {
            crate::error::DeletePublishingDestinationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeletePublishingDestinationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeletePublishingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteThreatIntelSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteThreatIntelSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteThreatIntelSetError> for Error {
    fn from(err: crate::error::DeleteThreatIntelSetError) -> Self {
        match err.kind {
            crate::error::DeleteThreatIntelSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DeleteThreatIntelSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DeleteThreatIntelSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMalwareScansError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeMalwareScansError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeMalwareScansError> for Error {
    fn from(err: crate::error::DescribeMalwareScansError) -> Self {
        match err.kind {
            crate::error::DescribeMalwareScansErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeMalwareScansErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribeMalwareScansErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeOrganizationConfigurationError> for Error {
    fn from(err: crate::error::DescribeOrganizationConfigurationError) -> Self {
        match err.kind {
            crate::error::DescribeOrganizationConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeOrganizationConfigurationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribeOrganizationConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePublishingDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePublishingDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribePublishingDestinationError> for Error {
    fn from(err: crate::error::DescribePublishingDestinationError) -> Self {
        match err.kind {
            crate::error::DescribePublishingDestinationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribePublishingDestinationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribePublishingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableOrganizationAdminAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisableOrganizationAdminAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::DisableOrganizationAdminAccountError) -> Self {
        match err.kind {
            crate::error::DisableOrganizationAdminAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisableOrganizationAdminAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisableOrganizationAdminAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFromAdministratorAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateFromAdministratorAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociateFromAdministratorAccountError> for Error {
    fn from(err: crate::error::DisassociateFromAdministratorAccountError) -> Self {
        match err.kind {
            crate::error::DisassociateFromAdministratorAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociateFromAdministratorAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisassociateFromAdministratorAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociateFromMasterAccountError> for Error {
    fn from(err: crate::error::DisassociateFromMasterAccountError) -> Self {
        match err.kind {
            crate::error::DisassociateFromMasterAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociateFromMasterAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisassociateFromMasterAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociateMembersError> for Error {
    fn from(err: crate::error::DisassociateMembersError) -> Self {
        match err.kind {
            crate::error::DisassociateMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DisassociateMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisassociateMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableOrganizationAdminAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EnableOrganizationAdminAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::EnableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::EnableOrganizationAdminAccountError) -> Self {
        match err.kind {
            crate::error::EnableOrganizationAdminAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::EnableOrganizationAdminAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::EnableOrganizationAdminAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetAdministratorAccountError> for Error {
    fn from(err: crate::error::GetAdministratorAccountError) -> Self {
        match err.kind {
            crate::error::GetAdministratorAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetAdministratorAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetAdministratorAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDetectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDetectorError> for Error {
    fn from(err: crate::error::GetDetectorError) -> Self {
        match err.kind {
            crate::error::GetDetectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetDetectorErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetDetectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFilterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFilterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetFilterError> for Error {
    fn from(err: crate::error::GetFilterError) -> Self {
        match err.kind {
            crate::error::GetFilterErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetFilterErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetFilterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetFindingsError> for Error {
    fn from(err: crate::error::GetFindingsError) -> Self {
        match err.kind {
            crate::error::GetFindingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetFindingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetFindingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingsStatisticsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFindingsStatisticsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetFindingsStatisticsError> for Error {
    fn from(err: crate::error::GetFindingsStatisticsError) -> Self {
        match err.kind {
            crate::error::GetFindingsStatisticsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetFindingsStatisticsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetFindingsStatisticsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetInvitationsCountError> for Error {
    fn from(err: crate::error::GetInvitationsCountError) -> Self {
        match err.kind {
            crate::error::GetInvitationsCountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetInvitationsCountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetInvitationsCountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetIPSetError> for Error {
    fn from(err: crate::error::GetIPSetError) -> Self {
        match err.kind {
            crate::error::GetIPSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetIPSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetIPSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMalwareScanSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMalwareScanSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetMalwareScanSettingsError> for Error {
    fn from(err: crate::error::GetMalwareScanSettingsError) -> Self {
        match err.kind {
            crate::error::GetMalwareScanSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetMalwareScanSettingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetMalwareScanSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetMasterAccountError> for Error {
    fn from(err: crate::error::GetMasterAccountError) -> Self {
        match err.kind {
            crate::error::GetMasterAccountErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetMasterAccountErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetMasterAccountErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMemberDetectorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMemberDetectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetMemberDetectorsError> for Error {
    fn from(err: crate::error::GetMemberDetectorsError) -> Self {
        match err.kind {
            crate::error::GetMemberDetectorsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetMemberDetectorsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetMemberDetectorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetMembersError> for Error {
    fn from(err: crate::error::GetMembersError) -> Self {
        match err.kind {
            crate::error::GetMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRemainingFreeTrialDaysError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRemainingFreeTrialDaysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetRemainingFreeTrialDaysError> for Error {
    fn from(err: crate::error::GetRemainingFreeTrialDaysError) -> Self {
        match err.kind {
            crate::error::GetRemainingFreeTrialDaysErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetRemainingFreeTrialDaysErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetRemainingFreeTrialDaysErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetThreatIntelSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetThreatIntelSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetThreatIntelSetError> for Error {
    fn from(err: crate::error::GetThreatIntelSetError) -> Self {
        match err.kind {
            crate::error::GetThreatIntelSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetThreatIntelSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetThreatIntelSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsageStatisticsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsageStatisticsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetUsageStatisticsError> for Error {
    fn from(err: crate::error::GetUsageStatisticsError) -> Self {
        match err.kind {
            crate::error::GetUsageStatisticsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::GetUsageStatisticsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::GetUsageStatisticsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InviteMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InviteMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::InviteMembersError> for Error {
    fn from(err: crate::error::InviteMembersError) -> Self {
        match err.kind {
            crate::error::InviteMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::InviteMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::InviteMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDetectorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDetectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDetectorsError> for Error {
    fn from(err: crate::error::ListDetectorsError) -> Self {
        match err.kind {
            crate::error::ListDetectorsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListDetectorsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListDetectorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFiltersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFiltersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListFiltersError> for Error {
    fn from(err: crate::error::ListFiltersError) -> Self {
        match err.kind {
            crate::error::ListFiltersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListFiltersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListFiltersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListFindingsError> for Error {
    fn from(err: crate::error::ListFindingsError) -> Self {
        match err.kind {
            crate::error::ListFindingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListFindingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListFindingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInvitationsError> for Error {
    fn from(err: crate::error::ListInvitationsError) -> Self {
        match err.kind {
            crate::error::ListInvitationsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListInvitationsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListInvitationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIPSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListIPSetsError> for Error {
    fn from(err: crate::error::ListIPSetsError) -> Self {
        match err.kind {
            crate::error::ListIPSetsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListIPSetsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListIPSetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListMembersError> for Error {
    fn from(err: crate::error::ListMembersError) -> Self {
        match err.kind {
            crate::error::ListMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListOrganizationAdminAccountsError> for Error {
    fn from(err: crate::error::ListOrganizationAdminAccountsError) -> Self {
        match err.kind {
            crate::error::ListOrganizationAdminAccountsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListOrganizationAdminAccountsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListOrganizationAdminAccountsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPublishingDestinationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPublishingDestinationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPublishingDestinationsError> for Error {
    fn from(err: crate::error::ListPublishingDestinationsError) -> Self {
        match err.kind {
            crate::error::ListPublishingDestinationsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListPublishingDestinationsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListPublishingDestinationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListThreatIntelSetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListThreatIntelSetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListThreatIntelSetsError> for Error {
    fn from(err: crate::error::ListThreatIntelSetsError) -> Self {
        match err.kind {
            crate::error::ListThreatIntelSetsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListThreatIntelSetsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::ListThreatIntelSetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMonitoringMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartMonitoringMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartMonitoringMembersError> for Error {
    fn from(err: crate::error::StartMonitoringMembersError) -> Self {
        match err.kind {
            crate::error::StartMonitoringMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::StartMonitoringMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::StartMonitoringMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopMonitoringMembersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopMonitoringMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopMonitoringMembersError> for Error {
    fn from(err: crate::error::StopMonitoringMembersError) -> Self {
        match err.kind {
            crate::error::StopMonitoringMembersErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::StopMonitoringMembersErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::StopMonitoringMembersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::TagResourceErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnarchiveFindingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UnarchiveFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UnarchiveFindingsError> for Error {
    fn from(err: crate::error::UnarchiveFindingsError) -> Self {
        match err.kind {
            crate::error::UnarchiveFindingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UnarchiveFindingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UnarchiveFindingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UntagResourceErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDetectorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDetectorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDetectorError> for Error {
    fn from(err: crate::error::UpdateDetectorError) -> Self {
        match err.kind {
            crate::error::UpdateDetectorErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateDetectorErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateDetectorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFilterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFilterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateFilterError> for Error {
    fn from(err: crate::error::UpdateFilterError) -> Self {
        match err.kind {
            crate::error::UpdateFilterErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateFilterErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateFilterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFindingsFeedbackError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFindingsFeedbackError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateFindingsFeedbackError> for Error {
    fn from(err: crate::error::UpdateFindingsFeedbackError) -> Self {
        match err.kind {
            crate::error::UpdateFindingsFeedbackErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateFindingsFeedbackErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateFindingsFeedbackErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIPSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateIPSetError> for Error {
    fn from(err: crate::error::UpdateIPSetError) -> Self {
        match err.kind {
            crate::error::UpdateIPSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateIPSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateIPSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMalwareScanSettingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMalwareScanSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateMalwareScanSettingsError> for Error {
    fn from(err: crate::error::UpdateMalwareScanSettingsError) -> Self {
        match err.kind {
            crate::error::UpdateMalwareScanSettingsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateMalwareScanSettingsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateMalwareScanSettingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMemberDetectorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMemberDetectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateMemberDetectorsError> for Error {
    fn from(err: crate::error::UpdateMemberDetectorsError) -> Self {
        match err.kind {
            crate::error::UpdateMemberDetectorsErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateMemberDetectorsErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateMemberDetectorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateOrganizationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateOrganizationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateOrganizationConfigurationError> for Error {
    fn from(err: crate::error::UpdateOrganizationConfigurationError) -> Self {
        match err.kind {
            crate::error::UpdateOrganizationConfigurationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateOrganizationConfigurationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateOrganizationConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePublishingDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePublishingDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdatePublishingDestinationError> for Error {
    fn from(err: crate::error::UpdatePublishingDestinationError) -> Self {
        match err.kind {
            crate::error::UpdatePublishingDestinationErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdatePublishingDestinationErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdatePublishingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateThreatIntelSetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateThreatIntelSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateThreatIntelSetError> for Error {
    fn from(err: crate::error::UpdateThreatIntelSetError) -> Self {
        match err.kind {
            crate::error::UpdateThreatIntelSetErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::UpdateThreatIntelSetErrorKind::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateThreatIntelSetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

