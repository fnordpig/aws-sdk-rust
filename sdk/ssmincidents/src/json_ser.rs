// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_replication_set_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateReplicationSetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.regions {
        let mut object_3 = object.key("regions").start_object();
        for (key_4, value_5) in var_2 {
             {
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_region_map_input_value(&mut object_6, value_5)?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.tags {
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
             {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_response_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateResponsePlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.actions {
        let mut array_12 = object.key("actions").start_array();
        for item_13 in var_11 {
             {
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_union_crate_model_action(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.chat_channel {
        let mut object_16 = object.key("chatChannel").start_object();
        crate::json_ser::serialize_union_crate_model_chat_channel(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.client_token {
        object.key("clientToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.display_name {
        object.key("displayName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.engagements {
        let mut array_20 = object.key("engagements").start_array();
        for item_21 in var_19 {
             {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.incident_template {
        let mut object_23 = object.key("incidentTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_incident_template(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.name {
        object.key("name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
             {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_timeline_event_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTimelineEventInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.client_token {
        object.key("clientToken").string(var_29.as_str());
    }
    if let Some(var_30) = &input.event_data {
        object.key("eventData").string(var_30.as_str());
    }
    if let Some(var_31) = &input.event_time {
        object.key("eventTime").date_time(var_31, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_32) = &input.event_type {
        object.key("eventType").string(var_32.as_str());
    }
    if let Some(var_33) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_incident_record_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteIncidentRecordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_34) = &input.arn {
        object.key("arn").string(var_34.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_35) = &input.policy_id {
        object.key("policyId").string(var_35.as_str());
    }
    if let Some(var_36) = &input.resource_arn {
        object.key("resourceArn").string(var_36.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_response_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResponsePlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_37) = &input.arn {
        object.key("arn").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_timeline_event_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTimelineEventInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_38) = &input.event_id {
        object.key("eventId").string(var_38.as_str());
    }
    if let Some(var_39) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetResourcePoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_40) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_40).into()));
    }
    if let Some(var_41) = &input.next_token {
        object.key("nextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_incident_records_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListIncidentRecordsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.filters {
        let mut array_43 = object.key("filters").start_array();
        for item_44 in var_42 {
             {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    if let Some(var_46) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_46).into()));
    }
    if let Some(var_47) = &input.next_token {
        object.key("nextToken").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_related_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRelatedItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_48.as_str());
    }
    if let Some(var_49) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_49).into()));
    }
    if let Some(var_50) = &input.next_token {
        object.key("nextToken").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_replication_sets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListReplicationSetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_51).into()));
    }
    if let Some(var_52) = &input.next_token {
        object.key("nextToken").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_response_plans_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResponsePlansInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_53) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_53).into()));
    }
    if let Some(var_54) = &input.next_token {
        object.key("nextToken").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_timeline_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTimelineEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.filters {
        let mut array_56 = object.key("filters").start_array();
        for item_57 in var_55 {
             {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_59.as_str());
    }
    if let Some(var_60) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_60).into()));
    }
    if let Some(var_61) = &input.next_token {
        object.key("nextToken").string(var_61.as_str());
    }
    if let Some(var_62) = &input.sort_by {
        object.key("sortBy").string(var_62.as_str());
    }
    if let Some(var_63) = &input.sort_order {
        object.key("sortOrder").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_64) = &input.policy {
        object.key("policy").string(var_64.as_str());
    }
    if let Some(var_65) = &input.resource_arn {
        object.key("resourceArn").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_incident_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartIncidentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.client_token {
        object.key("clientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.impact {
        object.key("impact").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_67).into()));
    }
    if let Some(var_68) = &input.related_items {
        let mut array_69 = object.key("relatedItems").start_array();
        for item_70 in var_68 {
             {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_item(&mut object_71, item_70)?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.response_plan_arn {
        object.key("responsePlanArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.title {
        object.key("title").string(var_73.as_str());
    }
    if let Some(var_74) = &input.trigger_details {
        let mut object_75 = object.key("triggerDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_details(&mut object_75, var_74)?;
        object_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.tags {
        let mut object_77 = object.key("tags").start_object();
        for (key_78, value_79) in var_76 {
             {
                object_77.key(key_78.as_str()).string(value_79.as_str());
            }
        }
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_deletion_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDeletionProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_80) = &input.arn {
        object.key("arn").string(var_80.as_str());
    }
    if let Some(var_81) = &input.client_token {
        object.key("clientToken").string(var_81.as_str());
    }
    if let Some(var_82) = &input.deletion_protected {
        object.key("deletionProtected").boolean(*var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_incident_record_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateIncidentRecordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.arn {
        object.key("arn").string(var_83.as_str());
    }
    if let Some(var_84) = &input.chat_channel {
        let mut object_85 = object.key("chatChannel").start_object();
        crate::json_ser::serialize_union_crate_model_chat_channel(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.client_token {
        object.key("clientToken").string(var_86.as_str());
    }
    if let Some(var_87) = &input.impact {
        object.key("impact").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_87).into()));
    }
    if let Some(var_88) = &input.notification_targets {
        let mut array_89 = object.key("notificationTargets").start_array();
        for item_90 in var_88 {
             {
                let mut object_91 = array_89.value().start_object();
                crate::json_ser::serialize_union_crate_model_notification_target_item(&mut object_91, item_90)?;
                object_91.finish();
            }
        }
        array_89.finish();
    }
    if let Some(var_92) = &input.status {
        object.key("status").string(var_92.as_str());
    }
    if let Some(var_93) = &input.summary {
        object.key("summary").string(var_93.as_str());
    }
    if let Some(var_94) = &input.title {
        object.key("title").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_related_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRelatedItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_95) = &input.client_token {
        object.key("clientToken").string(var_95.as_str());
    }
    if let Some(var_96) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_96.as_str());
    }
    if let Some(var_97) = &input.related_items_update {
        let mut object_98 = object.key("relatedItemsUpdate").start_object();
        crate::json_ser::serialize_union_crate_model_related_items_update(&mut object_98, var_97)?;
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_replication_set_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateReplicationSetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_99) = &input.actions {
        let mut array_100 = object.key("actions").start_array();
        for item_101 in var_99 {
             {
                let mut object_102 = array_100.value().start_object();
                crate::json_ser::serialize_union_crate_model_update_replication_set_action(&mut object_102, item_101)?;
                object_102.finish();
            }
        }
        array_100.finish();
    }
    if let Some(var_103) = &input.arn {
        object.key("arn").string(var_103.as_str());
    }
    if let Some(var_104) = &input.client_token {
        object.key("clientToken").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_response_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateResponsePlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_105) = &input.actions {
        let mut array_106 = object.key("actions").start_array();
        for item_107 in var_105 {
             {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_union_crate_model_action(&mut object_108, item_107)?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.arn {
        object.key("arn").string(var_109.as_str());
    }
    if let Some(var_110) = &input.chat_channel {
        let mut object_111 = object.key("chatChannel").start_object();
        crate::json_ser::serialize_union_crate_model_chat_channel(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.client_token {
        object.key("clientToken").string(var_112.as_str());
    }
    if let Some(var_113) = &input.display_name {
        object.key("displayName").string(var_113.as_str());
    }
    if let Some(var_114) = &input.engagements {
        let mut array_115 = object.key("engagements").start_array();
        for item_116 in var_114 {
             {
                array_115.value().string(item_116.as_str());
            }
        }
        array_115.finish();
    }
    if let Some(var_117) = &input.incident_template_dedupe_string {
        object.key("incidentTemplateDedupeString").string(var_117.as_str());
    }
    if let Some(var_118) = &input.incident_template_impact {
        object.key("incidentTemplateImpact").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_118).into()));
    }
    if let Some(var_119) = &input.incident_template_notification_targets {
        let mut array_120 = object.key("incidentTemplateNotificationTargets").start_array();
        for item_121 in var_119 {
             {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_union_crate_model_notification_target_item(&mut object_122, item_121)?;
                object_122.finish();
            }
        }
        array_120.finish();
    }
    if let Some(var_123) = &input.incident_template_summary {
        object.key("incidentTemplateSummary").string(var_123.as_str());
    }
    if let Some(var_124) = &input.incident_template_tags {
        let mut object_125 = object.key("incidentTemplateTags").start_object();
        for (key_126, value_127) in var_124 {
             {
                object_125.key(key_126.as_str()).string(value_127.as_str());
            }
        }
        object_125.finish();
    }
    if let Some(var_128) = &input.incident_template_title {
        object.key("incidentTemplateTitle").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_timeline_event_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTimelineEventInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_129) = &input.client_token {
        object.key("clientToken").string(var_129.as_str());
    }
    if let Some(var_130) = &input.event_data {
        object.key("eventData").string(var_130.as_str());
    }
    if let Some(var_131) = &input.event_id {
        object.key("eventId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.event_time {
        object.key("eventTime").date_time(var_132, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_133) = &input.event_type {
        object.key("eventType").string(var_133.as_str());
    }
    if let Some(var_134) = &input.incident_record_arn {
        object.key("incidentRecordArn").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_region_map_input_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RegionMapInputValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_135) = &input.sse_kms_key_id {
        object.key("sseKmsKeyId").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_action(object_14: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Action) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Action::SsmAutomation(inner) => {
             {
                let mut object_136 = object_14.key("ssmAutomation").start_object();
                crate::json_ser::serialize_structure_crate_model_ssm_automation(&mut object_136, inner)?;
                object_136.finish();
            }
        },
        crate::model::Action::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Action"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_chat_channel(object_16: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatChannel) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ChatChannel::Empty(inner) => {
             {
                let mut object_137 = object_16.key("empty").start_object();
                crate::json_ser::serialize_structure_crate_model_empty_chat_channel(&mut object_137, inner)?;
                object_137.finish();
            }
        },
        crate::model::ChatChannel::ChatbotSns(inner) => {
             {
                let mut array_138 = object_16.key("chatbotSns").start_array();
                for item_139 in inner {
                     {
                        array_138.value().string(item_139.as_str());
                    }
                }
                array_138.finish();
            }
        },
        crate::model::ChatChannel::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ChatChannel"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_incident_template(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IncidentTemplate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_140) = &input.title {
        object.key("title").string(var_140.as_str());
    }
    if let Some(var_141) = &input.impact {
        object.key("impact").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_141).into()));
    }
    if let Some(var_142) = &input.summary {
        object.key("summary").string(var_142.as_str());
    }
    if let Some(var_143) = &input.dedupe_string {
        object.key("dedupeString").string(var_143.as_str());
    }
    if let Some(var_144) = &input.notification_targets {
        let mut array_145 = object.key("notificationTargets").start_array();
        for item_146 in var_144 {
             {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_union_crate_model_notification_target_item(&mut object_147, item_146)?;
                object_147.finish();
            }
        }
        array_145.finish();
    }
    if let Some(var_148) = &input.incident_tags {
        let mut object_149 = object.key("incidentTags").start_object();
        for (key_150, value_151) in var_148 {
             {
                object_149.key(key_150.as_str()).string(value_151.as_str());
            }
        }
        object_149.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_152) = &input.key {
        object.key("key").string(var_152.as_str());
    }
    if let Some(var_153) = &input.condition {
        let mut object_154 = object.key("condition").start_object();
        crate::json_ser::serialize_union_crate_model_condition(&mut object_154, var_153)?;
        object_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelatedItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_155) = &input.identifier {
        let mut object_156 = object.key("identifier").start_object();
        crate::json_ser::serialize_structure_crate_model_item_identifier(&mut object_156, var_155)?;
        object_156.finish();
    }
    if let Some(var_157) = &input.title {
        object.key("title").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TriggerDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_158) = &input.source {
        object.key("source").string(var_158.as_str());
    }
    if let Some(var_159) = &input.trigger_arn {
        object.key("triggerArn").string(var_159.as_str());
    }
    if let Some(var_160) = &input.timestamp {
        object.key("timestamp").date_time(var_160, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_161) = &input.raw_data {
        object.key("rawData").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_notification_target_item(object_91: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationTargetItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::NotificationTargetItem::SnsTopicArn(inner) => {
             {
                object_91.key("snsTopicArn").string(inner.as_str());
            }
        },
        crate::model::NotificationTargetItem::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("NotificationTargetItem"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_related_items_update(object_98: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelatedItemsUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::RelatedItemsUpdate::ItemToAdd(inner) => {
             {
                let mut object_162 = object_98.key("itemToAdd").start_object();
                crate::json_ser::serialize_structure_crate_model_related_item(&mut object_162, inner)?;
                object_162.finish();
            }
        },
        crate::model::RelatedItemsUpdate::ItemToRemove(inner) => {
             {
                let mut object_163 = object_98.key("itemToRemove").start_object();
                crate::json_ser::serialize_structure_crate_model_item_identifier(&mut object_163, inner)?;
                object_163.finish();
            }
        },
        crate::model::RelatedItemsUpdate::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("RelatedItemsUpdate"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_update_replication_set_action(object_102: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateReplicationSetAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::UpdateReplicationSetAction::AddRegionAction(inner) => {
             {
                let mut object_164 = object_102.key("addRegionAction").start_object();
                crate::json_ser::serialize_structure_crate_model_add_region_action(&mut object_164, inner)?;
                object_164.finish();
            }
        },
        crate::model::UpdateReplicationSetAction::DeleteRegionAction(inner) => {
             {
                let mut object_165 = object_102.key("deleteRegionAction").start_object();
                crate::json_ser::serialize_structure_crate_model_delete_region_action(&mut object_165, inner)?;
                object_165.finish();
            }
        },
        crate::model::UpdateReplicationSetAction::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("UpdateReplicationSetAction"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssm_automation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SsmAutomation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_166) = &input.role_arn {
        object.key("roleArn").string(var_166.as_str());
    }
    if let Some(var_167) = &input.document_name {
        object.key("documentName").string(var_167.as_str());
    }
    if let Some(var_168) = &input.document_version {
        object.key("documentVersion").string(var_168.as_str());
    }
    if let Some(var_169) = &input.target_account {
        object.key("targetAccount").string(var_169.as_str());
    }
    if let Some(var_170) = &input.parameters {
        let mut object_171 = object.key("parameters").start_object();
        for (key_172, value_173) in var_170 {
             {
                let mut array_174 = object_171.key(key_172.as_str()).start_array();
                for item_175 in value_173 {
                     {
                        array_174.value().string(item_175.as_str());
                    }
                }
                array_174.finish();
            }
        }
        object_171.finish();
    }
    if let Some(var_176) = &input.dynamic_parameters {
        let mut object_177 = object.key("dynamicParameters").start_object();
        for (key_178, value_179) in var_176 {
             {
                let mut object_180 = object_177.key(key_178.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_dynamic_ssm_parameter_value(&mut object_180, value_179)?;
                object_180.finish();
            }
        }
        object_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_empty_chat_channel(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EmptyChatChannel) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_union_crate_model_condition(object_154: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Condition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Condition::Before(inner) => {
             {
                object_154.key("before").date_time(inner, aws_smithy_types::date_time::Format::EpochSeconds)?;
            }
        },
        crate::model::Condition::After(inner) => {
             {
                object_154.key("after").date_time(inner, aws_smithy_types::date_time::Format::EpochSeconds)?;
            }
        },
        crate::model::Condition::Equals(inner) => {
             {
                let mut object_181 = object_154.key("equals").start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value_list(&mut object_181, inner)?;
                object_181.finish();
            }
        },
        crate::model::Condition::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Condition"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_item_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ItemIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_182) = &input.value {
        let mut object_183 = object.key("value").start_object();
        crate::json_ser::serialize_union_crate_model_item_value(&mut object_183, var_182)?;
        object_183.finish();
    }
    if let Some(var_184) = &input.r#type {
        object.key("type").string(var_184.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_add_region_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AddRegionAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.region_name {
        object.key("regionName").string(var_185.as_str());
    }
    if let Some(var_186) = &input.sse_kms_key_id {
        object.key("sseKmsKeyId").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_region_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeleteRegionAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_187) = &input.region_name {
        object.key("regionName").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_dynamic_ssm_parameter_value(object_180: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamicSsmParameterValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::DynamicSsmParameterValue::Variable(inner) => {
             {
                object_180.key("variable").string(inner.as_str());
            }
        },
        crate::model::DynamicSsmParameterValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("DynamicSsmParameterValue"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_attribute_value_list(object_181: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AttributeValueList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::AttributeValueList::StringValues(inner) => {
             {
                let mut array_188 = object_181.key("stringValues").start_array();
                for item_189 in inner {
                     {
                        array_188.value().string(item_189.as_str());
                    }
                }
                array_188.finish();
            }
        },
        crate::model::AttributeValueList::IntegerValues(inner) => {
             {
                let mut array_190 = object_181.key("integerValues").start_array();
                for item_191 in inner {
                     {
                        array_190.value().number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*item_191).into()));
                    }
                }
                array_190.finish();
            }
        },
        crate::model::AttributeValueList::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("AttributeValueList"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_item_value(object_183: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ItemValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ItemValue::Arn(inner) => {
             {
                object_183.key("arn").string(inner.as_str());
            }
        },
        crate::model::ItemValue::Url(inner) => {
             {
                object_183.key("url").string(inner.as_str());
            }
        },
        crate::model::ItemValue::MetricDefinition(inner) => {
             {
                object_183.key("metricDefinition").string(inner.as_str());
            }
        },
        crate::model::ItemValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("ItemValue"))
    }
    Ok(())
}

