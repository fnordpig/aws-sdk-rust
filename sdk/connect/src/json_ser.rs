// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_approved_origin_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateApprovedOriginInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2) = &input.lex_bot {
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_default_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateDefaultVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.vocabulary_id {
        object.key("VocabularyId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_instance_storage_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateInstanceStorageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.resource_type {
        object.key("ResourceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.storage_config {
        let mut object_9 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lambda_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateLambdaFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_10) = &input.function_arn {
        object.key("FunctionArn").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lex_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateLexBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.lex_bot {
        let mut object_12 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_phone_number_contact_flow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociatePhoneNumberContactFlowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_13) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_id {
        object.key("InstanceId").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_queue_quick_connects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateQueueQuickConnectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.quick_connect_ids {
        let mut array_16 = object.key("QuickConnectIds").start_array();
        for item_17 in var_15 {
             {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_18) = &input.queue_configs {
        let mut array_19 = object.key("QueueConfigs").start_array();
        for item_20 in var_18 {
             {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_security_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateSecurityKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_22) = &input.key {
        object.key("Key").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_claim_phone_number_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ClaimPhoneNumberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.phone_number {
        object.key("PhoneNumber").string(var_24.as_str());
    }
    if let Some(var_25) = &input.phone_number_description {
        object.key("PhoneNumberDescription").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
             {
                object_27.key(key_28.as_str()).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.target_arn {
        object.key("TargetArn").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAgentStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("Description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.display_order {
        object.key("DisplayOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_32).into()));
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.state {
        object.key("State").string(var_34.as_str());
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
             {
                object_36.key(key_37.as_str()).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateContactFlowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.content {
        object.key("Content").string(var_39.as_str());
    }
    if let Some(var_40) = &input.description {
        object.key("Description").string(var_40.as_str());
    }
    if let Some(var_41) = &input.name {
        object.key("Name").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        let mut object_43 = object.key("Tags").start_object();
        for (key_44, value_45) in var_42 {
             {
                object_43.key(key_44.as_str()).string(value_45.as_str());
            }
        }
        object_43.finish();
    }
    if let Some(var_46) = &input.r#type {
        object.key("Type").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_module_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateContactFlowModuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_47) = &input.client_token {
        object.key("ClientToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.content {
        object.key("Content").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut object_52 = object.key("Tags").start_object();
        for (key_53, value_54) in var_51 {
             {
                object_52.key(key_53.as_str()).string(value_54.as_str());
            }
        }
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.config {
        let mut array_56 = object.key("Config").start_array();
        for item_57 in var_55 {
             {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.description {
        object.key("Description").string(var_59.as_str());
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.tags {
        let mut object_62 = object.key("Tags").start_object();
        for (key_63, value_64) in var_61 {
             {
                object_62.key(key_63.as_str()).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.time_zone {
        object.key("TimeZone").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.client_token {
        object.key("ClientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.directory_id {
        object.key("DirectoryId").string(var_67.as_str());
    }
    if let Some(var_68) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_69);
    }
    if let Some(var_70) = &input.instance_alias {
        object.key("InstanceAlias").string(var_70.as_str());
    }
    if let Some(var_71) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateIntegrationAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.integration_arn {
        object.key("IntegrationArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.integration_type {
        object.key("IntegrationType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_75.as_str());
    }
    if let Some(var_76) = &input.source_type {
        object.key("SourceType").string(var_76.as_str());
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
             {
                object_78.key(key_79.as_str()).string(value_80.as_str());
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_queue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateQueueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_81) = &input.description {
        object.key("Description").string(var_81.as_str());
    }
    if let Some(var_82) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_contacts {
        object.key("MaxContacts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_83).into()));
    }
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84.as_str());
    }
    if let Some(var_85) = &input.outbound_caller_config {
        let mut object_86 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(&mut object_86, var_85)?;
        object_86.finish();
    }
    if let Some(var_87) = &input.quick_connect_ids {
        let mut array_88 = object.key("QuickConnectIds").start_array();
        for item_89 in var_87 {
             {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
             {
                object_91.key(key_92.as_str()).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_quick_connect_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateQuickConnectInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_94) = &input.description {
        object.key("Description").string(var_94.as_str());
    }
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95.as_str());
    }
    if let Some(var_96) = &input.quick_connect_config {
        let mut object_97 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(&mut object_97, var_96)?;
        object_97.finish();
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("Tags").start_object();
        for (key_100, value_101) in var_98 {
             {
                object_99.key(key_100.as_str()).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRoutingProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_102) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_102.as_str());
    }
    if let Some(var_103) = &input.description {
        object.key("Description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.media_concurrencies {
        let mut array_105 = object.key("MediaConcurrencies").start_array();
        for item_106 in var_104 {
             {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(&mut object_107, item_106)?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108.as_str());
    }
    if let Some(var_109) = &input.queue_configs {
        let mut array_110 = object.key("QueueConfigs").start_array();
        for item_111 in var_109 {
             {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.tags {
        let mut object_114 = object.key("Tags").start_object();
        for (key_115, value_116) in var_113 {
             {
                object_114.key(key_115.as_str()).string(value_116.as_str());
            }
        }
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSecurityProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.description {
        object.key("Description").string(var_117.as_str());
    }
    if let Some(var_118) = &input.permissions {
        let mut array_119 = object.key("Permissions").start_array();
        for item_120 in var_118 {
             {
                array_119.value().string(item_120.as_str());
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.security_profile_name {
        object.key("SecurityProfileName").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
             {
                object_123.key(key_124.as_str()).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_task_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTaskTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_126) = &input.client_token {
        object.key("ClientToken").string(var_126.as_str());
    }
    if let Some(var_127) = &input.constraints {
        let mut object_128 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(&mut object_128, var_127)?;
        object_128.finish();
    }
    if let Some(var_129) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_129.as_str());
    }
    if let Some(var_130) = &input.defaults {
        let mut object_131 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(&mut object_131, var_130)?;
        object_131.finish();
    }
    if let Some(var_132) = &input.description {
        object.key("Description").string(var_132.as_str());
    }
    if let Some(var_133) = &input.fields {
        let mut array_134 = object.key("Fields").start_array();
        for item_135 in var_133 {
             {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(&mut object_136, item_135)?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.name {
        object.key("Name").string(var_137.as_str());
    }
    if let Some(var_138) = &input.status {
        object.key("Status").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_traffic_distribution_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTrafficDistributionGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.client_token {
        object.key("ClientToken").string(var_139.as_str());
    }
    if let Some(var_140) = &input.description {
        object.key("Description").string(var_140.as_str());
    }
    if let Some(var_141) = &input.instance_id {
        object.key("InstanceId").string(var_141.as_str());
    }
    if let Some(var_142) = &input.name {
        object.key("Name").string(var_142.as_str());
    }
    if let Some(var_143) = &input.tags {
        let mut object_144 = object.key("Tags").start_object();
        for (key_145, value_146) in var_143 {
             {
                object_144.key(key_145.as_str()).string(value_146.as_str());
            }
        }
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_use_case_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUseCaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.tags {
        let mut object_148 = object.key("Tags").start_object();
        for (key_149, value_150) in var_147 {
             {
                object_148.key(key_149.as_str()).string(value_150.as_str());
            }
        }
        object_148.finish();
    }
    if let Some(var_151) = &input.use_case_type {
        object.key("UseCaseType").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_152) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_152.as_str());
    }
    if let Some(var_153) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.identity_info {
        let mut object_155 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.password {
        object.key("Password").string(var_156.as_str());
    }
    if let Some(var_157) = &input.phone_config {
        let mut object_158 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(&mut object_158, var_157)?;
        object_158.finish();
    }
    if let Some(var_159) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.security_profile_ids {
        let mut array_161 = object.key("SecurityProfileIds").start_array();
        for item_162 in var_160 {
             {
                array_161.value().string(item_162.as_str());
            }
        }
        array_161.finish();
    }
    if let Some(var_163) = &input.tags {
        let mut object_164 = object.key("Tags").start_object();
        for (key_165, value_166) in var_163 {
             {
                object_164.key(key_165.as_str()).string(value_166.as_str());
            }
        }
        object_164.finish();
    }
    if let Some(var_167) = &input.username {
        object.key("Username").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_hierarchy_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserHierarchyGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_168) = &input.name {
        object.key("Name").string(var_168.as_str());
    }
    if let Some(var_169) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_169.as_str());
    }
    if let Some(var_170) = &input.tags {
        let mut object_171 = object.key("Tags").start_object();
        for (key_172, value_173) in var_170 {
             {
                object_171.key(key_172.as_str()).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateVocabularyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_174) = &input.client_token {
        object.key("ClientToken").string(var_174.as_str());
    }
    if let Some(var_175) = &input.content {
        object.key("Content").string(var_175.as_str());
    }
    if let Some(var_176) = &input.language_code {
        object.key("LanguageCode").string(var_176.as_str());
    }
    if let Some(var_177) = &input.tags {
        let mut object_178 = object.key("Tags").start_object();
        for (key_179, value_180) in var_177 {
             {
                object_178.key(key_179.as_str()).string(value_180.as_str());
            }
        }
        object_178.finish();
    }
    if let Some(var_181) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_bot_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateBotInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_182) = &input.lex_bot {
        let mut object_183 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_183, var_182)?;
        object_183.finish();
    }
    if let Some(var_184) = &input.lex_v2_bot {
        let mut object_185 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_185, var_184)?;
        object_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_queue_quick_connects_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateQueueQuickConnectsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_186) = &input.quick_connect_ids {
        let mut array_187 = object.key("QuickConnectIds").start_array();
        for item_188 in var_186 {
             {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.queue_references {
        let mut array_190 = object.key("QueueReferences").start_array();
        for item_191 in var_189 {
             {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(&mut object_192, item_191)?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_dismiss_user_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DismissUserContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.contact_id {
        object.key("ContactId").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_metric_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCurrentMetricDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.current_metrics {
        let mut array_195 = object.key("CurrentMetrics").start_array();
        for item_196 in var_194 {
             {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric(&mut object_197, item_196)?;
                object_197.finish();
            }
        }
        array_195.finish();
    }
    if let Some(var_198) = &input.filters {
        let mut object_199 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.groupings {
        let mut array_201 = object.key("Groupings").start_array();
        for item_202 in var_200 {
             {
                array_201.value().string(item_202.as_str());
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_203).into()));
    }
    if let Some(var_204) = &input.next_token {
        object.key("NextToken").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_user_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCurrentUserDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.filters {
        let mut object_206 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_user_data_filters(&mut object_206, var_205)?;
        object_206.finish();
    }
    if let Some(var_207) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_207).into()));
    }
    if let Some(var_208) = &input.next_token {
        object.key("NextToken").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_metric_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMetricDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.end_time {
        object.key("EndTime").date_time(var_209, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_210) = &input.filters {
        let mut object_211 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_211, var_210)?;
        object_211.finish();
    }
    if let Some(var_212) = &input.groupings {
        let mut array_213 = object.key("Groupings").start_array();
        for item_214 in var_212 {
             {
                array_213.value().string(item_214.as_str());
            }
        }
        array_213.finish();
    }
    if let Some(var_215) = &input.historical_metrics {
        let mut array_216 = object.key("HistoricalMetrics").start_array();
        for item_217 in var_215 {
             {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_historical_metric(&mut object_218, item_217)?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_219).into()));
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    if let Some(var_221) = &input.start_time {
        object.key("StartTime").date_time(var_221, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_default_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDefaultVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_222) = &input.language_code {
        object.key("LanguageCode").string(var_222.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_223) = &input.next_token {
        object.key("NextToken").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_phone_numbers_v2_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListPhoneNumbersV2Input) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_224) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_224).into()));
    }
    if let Some(var_225) = &input.next_token {
        object.key("NextToken").string(var_225.as_str());
    }
    if let Some(var_226) = &input.phone_number_country_codes {
        let mut array_227 = object.key("PhoneNumberCountryCodes").start_array();
        for item_228 in var_226 {
             {
                array_227.value().string(item_228.as_str());
            }
        }
        array_227.finish();
    }
    if let Some(var_229) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_229.as_str());
    }
    if let Some(var_230) = &input.phone_number_types {
        let mut array_231 = object.key("PhoneNumberTypes").start_array();
        for item_232 in var_230 {
             {
                array_231.value().string(item_232.as_str());
            }
        }
        array_231.finish();
    }
    if let Some(var_233) = &input.target_arn {
        object.key("TargetArn").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_user_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutUserStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_234) = &input.agent_status_id {
        object.key("AgentStatusId").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_replicate_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ReplicateInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_235) = &input.client_token {
        object.key("ClientToken").string(var_235.as_str());
    }
    if let Some(var_236) = &input.replica_alias {
        object.key("ReplicaAlias").string(var_236.as_str());
    }
    if let Some(var_237) = &input.replica_region {
        object.key("ReplicaRegion").string(var_237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResumeContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_238) = &input.contact_id {
        object.key("ContactId").string(var_238.as_str());
    }
    if let Some(var_239) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_239.as_str());
    }
    if let Some(var_240) = &input.instance_id {
        object.key("InstanceId").string(var_240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_available_phone_numbers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchAvailablePhoneNumbersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_241) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_241).into()));
    }
    if let Some(var_242) = &input.next_token {
        object.key("NextToken").string(var_242.as_str());
    }
    if let Some(var_243) = &input.phone_number_country_code {
        object.key("PhoneNumberCountryCode").string(var_243.as_str());
    }
    if let Some(var_244) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_244.as_str());
    }
    if let Some(var_245) = &input.phone_number_type {
        object.key("PhoneNumberType").string(var_245.as_str());
    }
    if let Some(var_246) = &input.target_arn {
        object.key("TargetArn").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_247) = &input.instance_id {
        object.key("InstanceId").string(var_247.as_str());
    }
    if let Some(var_248) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_248).into()));
    }
    if let Some(var_249) = &input.next_token {
        object.key("NextToken").string(var_249.as_str());
    }
    if let Some(var_250) = &input.search_criteria {
        let mut object_251 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_251, var_250)?;
        object_251.finish();
    }
    if let Some(var_252) = &input.search_filter {
        let mut object_253 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_search_filter(&mut object_253, var_252)?;
        object_253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_routing_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchRoutingProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_254) = &input.instance_id {
        object.key("InstanceId").string(var_254.as_str());
    }
    if let Some(var_255) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_255).into()));
    }
    if let Some(var_256) = &input.next_token {
        object.key("NextToken").string(var_256.as_str());
    }
    if let Some(var_257) = &input.search_criteria {
        let mut object_258 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_258, var_257)?;
        object_258.finish();
    }
    if let Some(var_259) = &input.search_filter {
        let mut object_260 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_search_filter(&mut object_260, var_259)?;
        object_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_security_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchSecurityProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_261) = &input.instance_id {
        object.key("InstanceId").string(var_261.as_str());
    }
    if let Some(var_262) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_262).into()));
    }
    if let Some(var_263) = &input.next_token {
        object.key("NextToken").string(var_263.as_str());
    }
    if let Some(var_264) = &input.search_criteria {
        let mut object_265 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_265, var_264)?;
        object_265.finish();
    }
    if let Some(var_266) = &input.search_filter {
        let mut object_267 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profiles_search_filter(&mut object_267, var_266)?;
        object_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_users_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchUsersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_268) = &input.instance_id {
        object.key("InstanceId").string(var_268.as_str());
    }
    if let Some(var_269) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_269).into()));
    }
    if let Some(var_270) = &input.next_token {
        object.key("NextToken").string(var_270.as_str());
    }
    if let Some(var_271) = &input.search_criteria {
        let mut object_272 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_272, var_271)?;
        object_272.finish();
    }
    if let Some(var_273) = &input.search_filter {
        let mut object_274 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_filter(&mut object_274, var_273)?;
        object_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_vocabularies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchVocabulariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.language_code {
        object.key("LanguageCode").string(var_275.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_276) = &input.name_starts_with {
        object.key("NameStartsWith").string(var_276.as_str());
    }
    if let Some(var_277) = &input.next_token {
        object.key("NextToken").string(var_277.as_str());
    }
    if let Some(var_278) = &input.state {
        object.key("State").string(var_278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_chat_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartChatContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_279) = &input.attributes {
        let mut object_280 = object.key("Attributes").start_object();
        for (key_281, value_282) in var_279 {
             {
                object_280.key(key_281.as_str()).string(value_282.as_str());
            }
        }
        object_280.finish();
    }
    if let Some(var_283) = &input.chat_duration_in_minutes {
        object.key("ChatDurationInMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_283).into()));
    }
    if let Some(var_284) = &input.client_token {
        object.key("ClientToken").string(var_284.as_str());
    }
    if let Some(var_285) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.initial_message {
        let mut object_287 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_message(&mut object_287, var_286)?;
        object_287.finish();
    }
    if let Some(var_288) = &input.instance_id {
        object.key("InstanceId").string(var_288.as_str());
    }
    if let Some(var_289) = &input.participant_details {
        let mut object_290 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_participant_details(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.supported_messaging_content_types {
        let mut array_292 = object.key("SupportedMessagingContentTypes").start_array();
        for item_293 in var_291 {
             {
                array_292.value().string(item_293.as_str());
            }
        }
        array_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_294) = &input.contact_id {
        object.key("ContactId").string(var_294.as_str());
    }
    if let Some(var_295) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_295.as_str());
    }
    if let Some(var_296) = &input.instance_id {
        object.key("InstanceId").string(var_296.as_str());
    }
    if let Some(var_297) = &input.voice_recording_configuration {
        let mut object_298 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_recording_configuration(&mut object_298, var_297)?;
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_streaming_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartContactStreamingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_299) = &input.chat_streaming_configuration {
        let mut object_300 = object.key("ChatStreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_streaming_configuration(&mut object_300, var_299)?;
        object_300.finish();
    }
    if let Some(var_301) = &input.client_token {
        object.key("ClientToken").string(var_301.as_str());
    }
    if let Some(var_302) = &input.contact_id {
        object.key("ContactId").string(var_302.as_str());
    }
    if let Some(var_303) = &input.instance_id {
        object.key("InstanceId").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_outbound_voice_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartOutboundVoiceContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_304) = &input.answer_machine_detection_config {
        let mut object_305 = object.key("AnswerMachineDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_answer_machine_detection_config(&mut object_305, var_304)?;
        object_305.finish();
    }
    if let Some(var_306) = &input.attributes {
        let mut object_307 = object.key("Attributes").start_object();
        for (key_308, value_309) in var_306 {
             {
                object_307.key(key_308.as_str()).string(value_309.as_str());
            }
        }
        object_307.finish();
    }
    if let Some(var_310) = &input.campaign_id {
        object.key("CampaignId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.client_token {
        object.key("ClientToken").string(var_311.as_str());
    }
    if let Some(var_312) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_312.as_str());
    }
    if let Some(var_313) = &input.destination_phone_number {
        object.key("DestinationPhoneNumber").string(var_313.as_str());
    }
    if let Some(var_314) = &input.instance_id {
        object.key("InstanceId").string(var_314.as_str());
    }
    if let Some(var_315) = &input.queue_id {
        object.key("QueueId").string(var_315.as_str());
    }
    if let Some(var_316) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_316.as_str());
    }
    if let Some(var_317) = &input.traffic_type {
        object.key("TrafficType").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartTaskContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_318) = &input.attributes {
        let mut object_319 = object.key("Attributes").start_object();
        for (key_320, value_321) in var_318 {
             {
                object_319.key(key_320.as_str()).string(value_321.as_str());
            }
        }
        object_319.finish();
    }
    if let Some(var_322) = &input.client_token {
        object.key("ClientToken").string(var_322.as_str());
    }
    if let Some(var_323) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_323.as_str());
    }
    if let Some(var_324) = &input.description {
        object.key("Description").string(var_324.as_str());
    }
    if let Some(var_325) = &input.instance_id {
        object.key("InstanceId").string(var_325.as_str());
    }
    if let Some(var_326) = &input.name {
        object.key("Name").string(var_326.as_str());
    }
    if let Some(var_327) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.quick_connect_id {
        object.key("QuickConnectId").string(var_328.as_str());
    }
    if let Some(var_329) = &input.references {
        let mut object_330 = object.key("References").start_object();
        for (key_331, value_332) in var_329 {
             {
                let mut object_333 = object_330.key(key_331.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(&mut object_333, value_332)?;
                object_333.finish();
            }
        }
        object_330.finish();
    }
    if let Some(var_334) = &input.scheduled_time {
        object.key("ScheduledTime").date_time(var_334, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_335) = &input.task_template_id {
        object.key("TaskTemplateId").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_336) = &input.contact_id {
        object.key("ContactId").string(var_336.as_str());
    }
    if let Some(var_337) = &input.instance_id {
        object.key("InstanceId").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_338) = &input.contact_id {
        object.key("ContactId").string(var_338.as_str());
    }
    if let Some(var_339) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_339.as_str());
    }
    if let Some(var_340) = &input.instance_id {
        object.key("InstanceId").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_streaming_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopContactStreamingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_341) = &input.contact_id {
        object.key("ContactId").string(var_341.as_str());
    }
    if let Some(var_342) = &input.instance_id {
        object.key("InstanceId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.streaming_id {
        object.key("StreamingId").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_suspend_contact_recording_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SuspendContactRecordingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_344) = &input.contact_id {
        object.key("ContactId").string(var_344.as_str());
    }
    if let Some(var_345) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_345.as_str());
    }
    if let Some(var_346) = &input.instance_id {
        object.key("InstanceId").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_347) = &input.tags {
        let mut object_348 = object.key("tags").start_object();
        for (key_349, value_350) in var_347 {
             {
                object_348.key(key_349.as_str()).string(value_350.as_str());
            }
        }
        object_348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transfer_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TransferContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_351) = &input.client_token {
        object.key("ClientToken").string(var_351.as_str());
    }
    if let Some(var_352) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_352.as_str());
    }
    if let Some(var_353) = &input.contact_id {
        object.key("ContactId").string(var_353.as_str());
    }
    if let Some(var_354) = &input.instance_id {
        object.key("InstanceId").string(var_354.as_str());
    }
    if let Some(var_355) = &input.queue_id {
        object.key("QueueId").string(var_355.as_str());
    }
    if let Some(var_356) = &input.user_id {
        object.key("UserId").string(var_356.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAgentStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_357) = &input.description {
        object.key("Description").string(var_357.as_str());
    }
    if let Some(var_358) = &input.display_order {
        object.key("DisplayOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_358).into()));
    }
    if let Some(var_359) = &input.name {
        object.key("Name").string(var_359.as_str());
    }
    if input.reset_order_number {
        object.key("ResetOrderNumber").boolean(input.reset_order_number);
    }
    if let Some(var_360) = &input.state {
        object.key("State").string(var_360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_361) = &input.description {
        object.key("Description").string(var_361.as_str());
    }
    if let Some(var_362) = &input.name {
        object.key("Name").string(var_362.as_str());
    }
    if let Some(var_363) = &input.references {
        let mut object_364 = object.key("References").start_object();
        for (key_365, value_366) in var_363 {
             {
                let mut object_367 = object_364.key(key_365.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(&mut object_367, value_366)?;
                object_367.finish();
            }
        }
        object_364.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_368) = &input.attributes {
        let mut object_369 = object.key("Attributes").start_object();
        for (key_370, value_371) in var_368 {
             {
                object_369.key(key_370.as_str()).string(value_371.as_str());
            }
        }
        object_369.finish();
    }
    if let Some(var_372) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_372.as_str());
    }
    if let Some(var_373) = &input.instance_id {
        object.key("InstanceId").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_content_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowContentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_374) = &input.content {
        object.key("Content").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_375) = &input.contact_flow_state {
        object.key("ContactFlowState").string(var_375.as_str());
    }
    if let Some(var_376) = &input.description {
        object.key("Description").string(var_376.as_str());
    }
    if let Some(var_377) = &input.name {
        object.key("Name").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_content_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowModuleContentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_378) = &input.content {
        object.key("Content").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowModuleMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_379) = &input.description {
        object.key("Description").string(var_379.as_str());
    }
    if let Some(var_380) = &input.name {
        object.key("Name").string(var_380.as_str());
    }
    if let Some(var_381) = &input.state {
        object.key("State").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactFlowNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_382) = &input.description {
        object.key("Description").string(var_382.as_str());
    }
    if let Some(var_383) = &input.name {
        object.key("Name").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateContactScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_384) = &input.contact_id {
        object.key("ContactId").string(var_384.as_str());
    }
    if let Some(var_385) = &input.instance_id {
        object.key("InstanceId").string(var_385.as_str());
    }
    if let Some(var_386) = &input.scheduled_time {
        object.key("ScheduledTime").date_time(var_386, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_387) = &input.config {
        let mut array_388 = object.key("Config").start_array();
        for item_389 in var_387 {
             {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(&mut object_390, item_389)?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if let Some(var_391) = &input.description {
        object.key("Description").string(var_391.as_str());
    }
    if let Some(var_392) = &input.name {
        object.key("Name").string(var_392.as_str());
    }
    if let Some(var_393) = &input.time_zone {
        object.key("TimeZone").string(var_393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_attribute_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateInstanceAttributeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_394) = &input.value {
        object.key("Value").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_storage_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateInstanceStorageConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_395) = &input.storage_config {
        let mut object_396 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(&mut object_396, var_395)?;
        object_396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_phone_number_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePhoneNumberInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_397) = &input.client_token {
        object.key("ClientToken").string(var_397.as_str());
    }
    if let Some(var_398) = &input.target_arn {
        object.key("TargetArn").string(var_398.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_hours_of_operation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueHoursOfOperationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_399) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_max_contacts_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueMaxContactsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_400) = &input.max_contacts {
        object.key("MaxContacts").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_400).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_401) = &input.description {
        object.key("Description").string(var_401.as_str());
    }
    if let Some(var_402) = &input.name {
        object.key("Name").string(var_402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_outbound_caller_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueOutboundCallerConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_403) = &input.outbound_caller_config {
        let mut object_404 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(&mut object_404, var_403)?;
        object_404.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQueueStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_405) = &input.status {
        object.key("Status").string(var_405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQuickConnectConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_406) = &input.quick_connect_config {
        let mut object_407 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(&mut object_407, var_406)?;
        object_407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateQuickConnectNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_408) = &input.description {
        object.key("Description").string(var_408.as_str());
    }
    if let Some(var_409) = &input.name {
        object.key("Name").string(var_409.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_concurrency_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileConcurrencyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_410) = &input.media_concurrencies {
        let mut array_411 = object.key("MediaConcurrencies").start_array();
        for item_412 in var_410 {
             {
                let mut object_413 = array_411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(&mut object_413, item_412)?;
                object_413.finish();
            }
        }
        array_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_default_outbound_queue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_414) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_415) = &input.description {
        object.key("Description").string(var_415.as_str());
    }
    if let Some(var_416) = &input.name {
        object.key("Name").string(var_416.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_queues_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRoutingProfileQueuesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_417) = &input.queue_configs {
        let mut array_418 = object.key("QueueConfigs").start_array();
        for item_419 in var_417 {
             {
                let mut object_420 = array_418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(&mut object_420, item_419)?;
                object_420.finish();
            }
        }
        array_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSecurityProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_421) = &input.description {
        object.key("Description").string(var_421.as_str());
    }
    if let Some(var_422) = &input.permissions {
        let mut array_423 = object.key("Permissions").start_array();
        for item_424 in var_422 {
             {
                array_423.value().string(item_424.as_str());
            }
        }
        array_423.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_template_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTaskTemplateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_425) = &input.constraints {
        let mut object_426 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(&mut object_426, var_425)?;
        object_426.finish();
    }
    if let Some(var_427) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_427.as_str());
    }
    if let Some(var_428) = &input.defaults {
        let mut object_429 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(&mut object_429, var_428)?;
        object_429.finish();
    }
    if let Some(var_430) = &input.description {
        object.key("Description").string(var_430.as_str());
    }
    if let Some(var_431) = &input.fields {
        let mut array_432 = object.key("Fields").start_array();
        for item_433 in var_431 {
             {
                let mut object_434 = array_432.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(&mut object_434, item_433)?;
                object_434.finish();
            }
        }
        array_432.finish();
    }
    if let Some(var_435) = &input.name {
        object.key("Name").string(var_435.as_str());
    }
    if let Some(var_436) = &input.status {
        object.key("Status").string(var_436.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_traffic_distribution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTrafficDistributionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_437) = &input.telephony_config {
        let mut object_438 = object.key("TelephonyConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_telephony_config(&mut object_438, var_437)?;
        object_438.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_439) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_439.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_group_name_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyGroupNameInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_440) = &input.name {
        object.key("Name").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_structure_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserHierarchyStructureInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_441) = &input.hierarchy_structure {
        let mut object_442 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_structure_update(&mut object_442, var_441)?;
        object_442.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_identity_info_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserIdentityInfoInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_443) = &input.identity_info {
        let mut object_444 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(&mut object_444, var_443)?;
        object_444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_phone_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserPhoneConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_445) = &input.phone_config {
        let mut object_446 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(&mut object_446, var_445)?;
        object_446.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_routing_profile_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserRoutingProfileInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_security_profiles_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserSecurityProfilesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_448) = &input.security_profile_ids {
        let mut array_449 = object.key("SecurityProfileIds").start_array();
        for item_450 in var_448 {
             {
                array_449.value().string(item_450.as_str());
            }
        }
        array_449.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_bot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LexBot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_451) = &input.name {
        object.key("Name").string(var_451.as_str());
    }
    if let Some(var_452) = &input.lex_region {
        object.key("LexRegion").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_v2_bot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LexV2Bot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_453) = &input.alias_arn {
        object.key("AliasArn").string(var_453.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_storage_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceStorageConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_454) = &input.association_id {
        object.key("AssociationId").string(var_454.as_str());
    }
    if let Some(var_455) = &input.storage_type {
        object.key("StorageType").string(var_455.as_str());
    }
    if let Some(var_456) = &input.s3_config {
        let mut object_457 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_457, var_456)?;
        object_457.finish();
    }
    if let Some(var_458) = &input.kinesis_video_stream_config {
        let mut object_459 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_config(&mut object_459, var_458)?;
        object_459.finish();
    }
    if let Some(var_460) = &input.kinesis_stream_config {
        let mut object_461 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_stream_config(&mut object_461, var_460)?;
        object_461.finish();
    }
    if let Some(var_462) = &input.kinesis_firehose_config {
        let mut object_463 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_config(&mut object_463, var_462)?;
        object_463.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileQueueConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_464) = &input.queue_reference {
        let mut object_465 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(&mut object_465, var_464)?;
        object_465.finish();
    }
    if let Some(var_466) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_466).into()));
    }
    if let Some(var_467) = &input.delay {
        object.key("Delay").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_467).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HoursOfOperationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_468) = &input.day {
        object.key("Day").string(var_468.as_str());
    }
    if let Some(var_469) = &input.start_time {
        let mut object_470 = object.key("StartTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(&mut object_470, var_469)?;
        object_470.finish();
    }
    if let Some(var_471) = &input.end_time {
        let mut object_472 = object.key("EndTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(&mut object_472, var_471)?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outbound_caller_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OutboundCallerConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_473) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_473.as_str());
    }
    if let Some(var_474) = &input.outbound_caller_id_number_id {
        object.key("OutboundCallerIdNumberId").string(var_474.as_str());
    }
    if let Some(var_475) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_475.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_476) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_476.as_str());
    }
    if let Some(var_477) = &input.user_config {
        let mut object_478 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_quick_connect_config(&mut object_478, var_477)?;
        object_478.finish();
    }
    if let Some(var_479) = &input.queue_config {
        let mut object_480 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_quick_connect_config(&mut object_480, var_479)?;
        object_480.finish();
    }
    if let Some(var_481) = &input.phone_config {
        let mut object_482 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_phone_number_quick_connect_config(&mut object_482, var_481)?;
        object_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media_concurrency(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MediaConcurrency) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_483) = &input.channel {
        object.key("Channel").string(var_483.as_str());
    }
     {
        object.key("Concurrency").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.concurrency).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_constraints(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateConstraints) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_484) = &input.required_fields {
        let mut array_485 = object.key("RequiredFields").start_array();
        for item_486 in var_484 {
             {
                let mut object_487 = array_485.value().start_object();
                crate::json_ser::serialize_structure_crate_model_required_field_info(&mut object_487, item_486)?;
                object_487.finish();
            }
        }
        array_485.finish();
    }
    if let Some(var_488) = &input.read_only_fields {
        let mut array_489 = object.key("ReadOnlyFields").start_array();
        for item_490 in var_488 {
             {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_structure_crate_model_read_only_field_info(&mut object_491, item_490)?;
                object_491.finish();
            }
        }
        array_489.finish();
    }
    if let Some(var_492) = &input.invisible_fields {
        let mut array_493 = object.key("InvisibleFields").start_array();
        for item_494 in var_492 {
             {
                let mut object_495 = array_493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_invisible_field_info(&mut object_495, item_494)?;
                object_495.finish();
            }
        }
        array_493.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_defaults(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateDefaults) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_496) = &input.default_field_values {
        let mut array_497 = object.key("DefaultFieldValues").start_array();
        for item_498 in var_496 {
             {
                let mut object_499 = array_497.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_default_field_value(&mut object_499, item_498)?;
                object_499.finish();
            }
        }
        array_497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_500) = &input.id {
        let mut object_501 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_501, var_500)?;
        object_501.finish();
    }
    if let Some(var_502) = &input.description {
        object.key("Description").string(var_502.as_str());
    }
    if let Some(var_503) = &input.r#type {
        object.key("Type").string(var_503.as_str());
    }
    if let Some(var_504) = &input.single_select_options {
        let mut array_505 = object.key("SingleSelectOptions").start_array();
        for item_506 in var_504 {
             {
                array_505.value().string(item_506.as_str());
            }
        }
        array_505.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserIdentityInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_507) = &input.first_name {
        object.key("FirstName").string(var_507.as_str());
    }
    if let Some(var_508) = &input.last_name {
        object.key("LastName").string(var_508.as_str());
    }
    if let Some(var_509) = &input.email {
        object.key("Email").string(var_509.as_str());
    }
    if let Some(var_510) = &input.secondary_email {
        object.key("SecondaryEmail").string(var_510.as_str());
    }
    if let Some(var_511) = &input.mobile {
        object.key("Mobile").string(var_511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_phone_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserPhoneConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_512) = &input.phone_type {
        object.key("PhoneType").string(var_512.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()));
    }
    if let Some(var_513) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_513.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileQueueReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_514) = &input.queue_id {
        object.key("QueueId").string(var_514.as_str());
    }
    if let Some(var_515) = &input.channel {
        object.key("Channel").string(var_515.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CurrentMetric) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_516) = &input.name {
        object.key("Name").string(var_516.as_str());
    }
    if let Some(var_517) = &input.unit {
        object.key("Unit").string(var_517.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_518) = &input.queues {
        let mut array_519 = object.key("Queues").start_array();
        for item_520 in var_518 {
             {
                array_519.value().string(item_520.as_str());
            }
        }
        array_519.finish();
    }
    if let Some(var_521) = &input.channels {
        let mut array_522 = object.key("Channels").start_array();
        for item_523 in var_521 {
             {
                array_522.value().string(item_523.as_str());
            }
        }
        array_522.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_data_filters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserDataFilters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_524) = &input.queues {
        let mut array_525 = object.key("Queues").start_array();
        for item_526 in var_524 {
             {
                array_525.value().string(item_526.as_str());
            }
        }
        array_525.finish();
    }
    if let Some(var_527) = &input.contact_filter {
        let mut object_528 = object.key("ContactFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_filter(&mut object_528, var_527)?;
        object_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_historical_metric(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HistoricalMetric) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_529) = &input.name {
        object.key("Name").string(var_529.as_str());
    }
    if let Some(var_530) = &input.threshold {
        let mut object_531 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_crate_model_threshold(&mut object_531, var_530)?;
        object_531.finish();
    }
    if let Some(var_532) = &input.statistic {
        object.key("Statistic").string(var_532.as_str());
    }
    if let Some(var_533) = &input.unit {
        object.key("Unit").string(var_533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_534) = &input.or_conditions {
        let mut array_535 = object.key("OrConditions").start_array();
        for item_536 in var_534 {
             {
                let mut object_537 = array_535.value().start_object();
                crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_537, item_536)?;
                object_537.finish();
            }
        }
        array_535.finish();
    }
    if let Some(var_538) = &input.and_conditions {
        let mut array_539 = object.key("AndConditions").start_array();
        for item_540 in var_538 {
             {
                let mut object_541 = array_539.value().start_object();
                crate::json_ser::serialize_structure_crate_model_queue_search_criteria(&mut object_541, item_540)?;
                object_541.finish();
            }
        }
        array_539.finish();
    }
    if let Some(var_542) = &input.string_condition {
        let mut object_543 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_543, var_542)?;
        object_543.finish();
    }
    if let Some(var_544) = &input.queue_type_condition {
        object.key("QueueTypeCondition").string(var_544.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_545) = &input.tag_filter {
        let mut object_546 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_546, var_545)?;
        object_546.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_547) = &input.or_conditions {
        let mut array_548 = object.key("OrConditions").start_array();
        for item_549 in var_547 {
             {
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_550, item_549)?;
                object_550.finish();
            }
        }
        array_548.finish();
    }
    if let Some(var_551) = &input.and_conditions {
        let mut array_552 = object.key("AndConditions").start_array();
        for item_553 in var_551 {
             {
                let mut object_554 = array_552.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_search_criteria(&mut object_554, item_553)?;
                object_554.finish();
            }
        }
        array_552.finish();
    }
    if let Some(var_555) = &input.string_condition {
        let mut object_556 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_556, var_555)?;
        object_556.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RoutingProfileSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_557) = &input.tag_filter {
        let mut object_558 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_558, var_557)?;
        object_558.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profile_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecurityProfileSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_559) = &input.or_conditions {
        let mut array_560 = object.key("OrConditions").start_array();
        for item_561 in var_559 {
             {
                let mut object_562 = array_560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_562, item_561)?;
                object_562.finish();
            }
        }
        array_560.finish();
    }
    if let Some(var_563) = &input.and_conditions {
        let mut array_564 = object.key("AndConditions").start_array();
        for item_565 in var_563 {
             {
                let mut object_566 = array_564.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(&mut object_566, item_565)?;
                object_566.finish();
            }
        }
        array_564.finish();
    }
    if let Some(var_567) = &input.string_condition {
        let mut object_568 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_568, var_567)?;
        object_568.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profiles_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecurityProfilesSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_569) = &input.tag_filter {
        let mut object_570 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_570, var_569)?;
        object_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserSearchCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_571) = &input.or_conditions {
        let mut array_572 = object.key("OrConditions").start_array();
        for item_573 in var_571 {
             {
                let mut object_574 = array_572.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_574, item_573)?;
                object_574.finish();
            }
        }
        array_572.finish();
    }
    if let Some(var_575) = &input.and_conditions {
        let mut array_576 = object.key("AndConditions").start_array();
        for item_577 in var_575 {
             {
                let mut object_578 = array_576.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(&mut object_578, item_577)?;
                object_578.finish();
            }
        }
        array_576.finish();
    }
    if let Some(var_579) = &input.string_condition {
        let mut object_580 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(&mut object_580, var_579)?;
        object_580.finish();
    }
    if let Some(var_581) = &input.hierarchy_group_condition {
        let mut object_582 = object.key("HierarchyGroupCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_group_condition(&mut object_582, var_581)?;
        object_582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserSearchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_583) = &input.tag_filter {
        let mut object_584 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(&mut object_584, var_583)?;
        object_584.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_message(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatMessage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_585) = &input.content_type {
        object.key("ContentType").string(var_585.as_str());
    }
    if let Some(var_586) = &input.content {
        object.key("Content").string(var_586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParticipantDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_587) = &input.display_name {
        object.key("DisplayName").string(var_587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_recording_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VoiceRecordingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_588) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_streaming_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ChatStreamingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_589) = &input.streaming_endpoint_arn {
        object.key("StreamingEndpointArn").string(var_589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_answer_machine_detection_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AnswerMachineDetectionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enable_answer_machine_detection {
        object.key("EnableAnswerMachineDetection").boolean(input.enable_answer_machine_detection);
    }
    if input.await_answer_machine_prompt {
        object.key("AwaitAnswerMachinePrompt").boolean(input.await_answer_machine_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Reference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_590) = &input.value {
        object.key("Value").string(var_590.as_str());
    }
    if let Some(var_591) = &input.r#type {
        object.key("Type").string(var_591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_telephony_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TelephonyConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_592) = &input.distributions {
        let mut array_593 = object.key("Distributions").start_array();
        for item_594 in var_592 {
             {
                let mut object_595 = array_593.value().start_object();
                crate::json_ser::serialize_structure_crate_model_distribution(&mut object_595, item_594)?;
                object_595.finish();
            }
        }
        array_593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_structure_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyStructureUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_596) = &input.level_one {
        let mut object_597 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_597, var_596)?;
        object_597.finish();
    }
    if let Some(var_598) = &input.level_two {
        let mut object_599 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_599, var_598)?;
        object_599.finish();
    }
    if let Some(var_600) = &input.level_three {
        let mut object_601 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_601, var_600)?;
        object_601.finish();
    }
    if let Some(var_602) = &input.level_four {
        let mut object_603 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_603, var_602)?;
        object_603.finish();
    }
    if let Some(var_604) = &input.level_five {
        let mut object_605 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(&mut object_605, var_604)?;
        object_605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Config) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_606) = &input.bucket_name {
        object.key("BucketName").string(var_606.as_str());
    }
    if let Some(var_607) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_607.as_str());
    }
    if let Some(var_608) = &input.encryption_config {
        let mut object_609 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_609, var_608)?;
        object_609.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisVideoStreamConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_610) = &input.prefix {
        object.key("Prefix").string(var_610.as_str());
    }
     {
        object.key("RetentionPeriodHours").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.retention_period_hours).into()));
    }
    if let Some(var_611) = &input.encryption_config {
        let mut object_612 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_612, var_611)?;
        object_612.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_stream_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisStreamConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_613) = &input.stream_arn {
        object.key("StreamArn").string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisFirehoseConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_614) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_614.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_time_slice(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HoursOfOperationTimeSlice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_615) = &input.hours {
        object.key("Hours").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_615).into()));
    }
    if let Some(var_616) = &input.minutes {
        object.key("Minutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_616).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_617) = &input.user_id {
        object.key("UserId").string(var_617.as_str());
    }
    if let Some(var_618) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_618.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueueQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_619) = &input.queue_id {
        object.key("QueueId").string(var_619.as_str());
    }
    if let Some(var_620) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_620.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_quick_connect_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PhoneNumberQuickConnectConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_621) = &input.phone_number {
        object.key("PhoneNumber").string(var_621.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_required_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RequiredFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_622) = &input.id {
        let mut object_623 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_623, var_622)?;
        object_623.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_read_only_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ReadOnlyFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_624) = &input.id {
        let mut object_625 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_625, var_624)?;
        object_625.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_invisible_field_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InvisibleFieldInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_626) = &input.id {
        let mut object_627 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_627, var_626)?;
        object_627.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_default_field_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateDefaultFieldValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_628) = &input.id {
        let mut object_629 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(&mut object_629, var_628)?;
        object_629.finish();
    }
    if let Some(var_630) = &input.default_value {
        object.key("DefaultValue").string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskTemplateFieldIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_631) = &input.name {
        object.key("Name").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContactFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_632) = &input.contact_states {
        let mut array_633 = object.key("ContactStates").start_array();
        for item_634 in var_632 {
             {
                array_633.value().string(item_634.as_str());
            }
        }
        array_633.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threshold(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Threshold) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_635) = &input.comparison {
        object.key("Comparison").string(var_635.as_str());
    }
    if let Some(var_636) = &input.threshold_value {
        object.key("ThresholdValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_636).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_637) = &input.field_name {
        object.key("FieldName").string(var_637.as_str());
    }
    if let Some(var_638) = &input.value {
        object.key("Value").string(var_638.as_str());
    }
    if let Some(var_639) = &input.comparison_type {
        object.key("ComparisonType").string(var_639.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_control_plane_tag_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ControlPlaneTagFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_640) = &input.or_conditions {
        let mut array_641 = object.key("OrConditions").start_array();
        for item_642 in var_640 {
             {
                let mut array_643 = array_641.value().start_array();
                for item_644 in item_642 {
                     {
                        let mut object_645 = array_643.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_645, item_644)?;
                        object_645.finish();
                    }
                }
                array_643.finish();
            }
        }
        array_641.finish();
    }
    if let Some(var_646) = &input.and_conditions {
        let mut array_647 = object.key("AndConditions").start_array();
        for item_648 in var_646 {
             {
                let mut object_649 = array_647.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_649, item_648)?;
                object_649.finish();
            }
        }
        array_647.finish();
    }
    if let Some(var_650) = &input.tag_condition {
        let mut object_651 = object.key("TagCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_651, var_650)?;
        object_651.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_group_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyGroupCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_652) = &input.value {
        object.key("Value").string(var_652.as_str());
    }
    if let Some(var_653) = &input.hierarchy_group_match_type {
        object.key("HierarchyGroupMatchType").string(var_653.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_distribution(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Distribution) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_654) = &input.region {
        object.key("Region").string(var_654.as_str());
    }
     {
        object.key("Percentage").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.percentage).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_level_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HierarchyLevelUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_655) = &input.name {
        object.key("Name").string(var_655.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_656) = &input.encryption_type {
        object.key("EncryptionType").string(var_656.as_str());
    }
    if let Some(var_657) = &input.key_id {
        object.key("KeyId").string(var_657.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TagCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_658) = &input.tag_key {
        object.key("TagKey").string(var_658.as_str());
    }
    if let Some(var_659) = &input.tag_value {
        object.key("TagValue").string(var_659.as_str());
    }
    Ok(())
}

