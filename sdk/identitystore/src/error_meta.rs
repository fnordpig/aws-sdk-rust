// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>This request cannot be completed for one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p>Performing the requested operation would violate an existing uniqueness claim in the identity store. Resolve the conflict before retrying this request.</p> </li> 
    /// <li> <p>The requested resource was being concurrently modified by another request.</p> </li> 
    /// </ul>
    ConflictException(crate::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception or failure with an internal server.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Indicates that a requested resource is not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request would cause the number of users or groups in the identity store to exceed the maximum allowed.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Indicates that the principal has crossed the throttling limits of the API operations.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The request failed because it contains a syntax error.</p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err.kind {
            crate::error::CreateGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateGroupErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupMembershipError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupMembershipError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateGroupMembershipError> for Error {
    fn from(err: crate::error::CreateGroupMembershipError) -> Self {
        match err.kind {
            crate::error::CreateGroupMembershipErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateGroupMembershipErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateGroupMembershipErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateGroupMembershipErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateGroupMembershipErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateGroupMembershipErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateGroupMembershipErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateGroupMembershipErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err.kind {
            crate::error::CreateUserErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateUserErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateUserErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateUserErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateUserErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateUserErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateUserErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateUserErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err.kind {
            crate::error::DeleteGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupMembershipError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupMembershipError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteGroupMembershipError> for Error {
    fn from(err: crate::error::DeleteGroupMembershipError) -> Self {
        match err.kind {
            crate::error::DeleteGroupMembershipErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteGroupMembershipErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteGroupMembershipErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteGroupMembershipErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteGroupMembershipErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteGroupMembershipErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteGroupMembershipErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err.kind {
            crate::error::DeleteUserErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteUserErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteUserErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteUserErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteUserErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteUserErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteUserErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeGroupError> for Error {
    fn from(err: crate::error::DescribeGroupError) -> Self {
        match err.kind {
            crate::error::DescribeGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGroupMembershipError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeGroupMembershipError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeGroupMembershipError> for Error {
    fn from(err: crate::error::DescribeGroupMembershipError) -> Self {
        match err.kind {
            crate::error::DescribeGroupMembershipErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeGroupMembershipErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeGroupMembershipErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeGroupMembershipErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeGroupMembershipErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeGroupMembershipErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeUserError> for Error {
    fn from(err: crate::error::DescribeUserError) -> Self {
        match err.kind {
            crate::error::DescribeUserErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeUserErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeUserErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeUserErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeUserErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeUserErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupIdError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupIdError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetGroupIdError> for Error {
    fn from(err: crate::error::GetGroupIdError) -> Self {
        match err.kind {
            crate::error::GetGroupIdErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetGroupIdErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetGroupIdErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetGroupIdErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetGroupIdErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetGroupIdErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupMembershipIdError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupMembershipIdError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetGroupMembershipIdError> for Error {
    fn from(err: crate::error::GetGroupMembershipIdError) -> Self {
        match err.kind {
            crate::error::GetGroupMembershipIdErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetGroupMembershipIdErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetGroupMembershipIdErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetGroupMembershipIdErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetGroupMembershipIdErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetGroupMembershipIdErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserIdError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserIdError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetUserIdError> for Error {
    fn from(err: crate::error::GetUserIdError) -> Self {
        match err.kind {
            crate::error::GetUserIdErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetUserIdErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetUserIdErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetUserIdErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetUserIdErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetUserIdErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::IsMemberInGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::IsMemberInGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::IsMemberInGroupsError> for Error {
    fn from(err: crate::error::IsMemberInGroupsError) -> Self {
        match err.kind {
            crate::error::IsMemberInGroupsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::IsMemberInGroupsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::IsMemberInGroupsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::IsMemberInGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::IsMemberInGroupsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::IsMemberInGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListGroupMembershipsError> for Error {
    fn from(err: crate::error::ListGroupMembershipsError) -> Self {
        match err.kind {
            crate::error::ListGroupMembershipsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListGroupMembershipsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListGroupMembershipsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListGroupMembershipsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListGroupMembershipsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListGroupMembershipsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsForMemberError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupMembershipsForMemberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListGroupMembershipsForMemberError> for Error {
    fn from(err: crate::error::ListGroupMembershipsForMemberError) -> Self {
        match err.kind {
            crate::error::ListGroupMembershipsForMemberErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListGroupMembershipsForMemberErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListGroupMembershipsForMemberErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListGroupMembershipsForMemberErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListGroupMembershipsForMemberErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListGroupMembershipsForMemberErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err.kind {
            crate::error::ListGroupsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListGroupsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListGroupsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListGroupsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err.kind {
            crate::error::ListUsersErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListUsersErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListUsersErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListUsersErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListUsersErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListUsersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateGroupError> for Error {
    fn from(err: crate::error::UpdateGroupError) -> Self {
        match err.kind {
            crate::error::UpdateGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateGroupErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err.kind {
            crate::error::UpdateUserErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateUserErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateUserErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateUserErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateUserErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateUserErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateUserErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateUserErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

