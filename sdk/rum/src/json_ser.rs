// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_rum_metric_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchCreateRumMetricDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.destination {
        object.key("Destination").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.metric_definitions {
        let mut array_4 = object.key("MetricDefinitions").start_array();
        for item_5 in var_3 {
             {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_definition_request(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_monitor_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAppMonitorInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.app_monitor_configuration {
        let mut object_8 = object.key("AppMonitorConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.cw_log_enabled {
        object.key("CwLogEnabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.domain {
        object.key("Domain").string(var_10.as_str());
    }
    if let Some(var_11) = &input.name {
        object.key("Name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
             {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_app_monitor_data_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetAppMonitorDataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.filters {
        let mut array_17 = object.key("Filters").start_array();
        for item_18 in var_16 {
             {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_query_filter(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_20) = &input.next_token {
        object.key("NextToken").string(var_20.as_str());
    }
    if let Some(var_21) = &input.time_range {
        let mut object_22 = object.key("TimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_rum_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutRumEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.app_monitor_details {
        let mut object_24 = object.key("AppMonitorDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_details(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.batch_id {
        object.key("BatchId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.rum_events {
        let mut array_27 = object.key("RumEvents").start_array();
        for item_28 in var_26 {
             {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rum_event(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.user_details {
        let mut object_31 = object.key("UserDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_user_details(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_rum_metrics_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutRumMetricsDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_32) = &input.destination {
        object.key("Destination").string(var_32.as_str());
    }
    if let Some(var_33) = &input.destination_arn {
        object.key("DestinationArn").string(var_33.as_str());
    }
    if let Some(var_34) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_34.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
             {
                object_36.key(key_37.as_str()).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_app_monitor_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAppMonitorInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.app_monitor_configuration {
        let mut object_40 = object.key("AppMonitorConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_app_monitor_configuration(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.cw_log_enabled {
        object.key("CwLogEnabled").boolean(*var_41);
    }
    if let Some(var_42) = &input.domain {
        object.key("Domain").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rum_metric_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRumMetricDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.destination {
        object.key("Destination").string(var_43.as_str());
    }
    if let Some(var_44) = &input.destination_arn {
        object.key("DestinationArn").string(var_44.as_str());
    }
    if let Some(var_45) = &input.metric_definition {
        let mut object_46 = object.key("MetricDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_definition_request(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.metric_definition_id {
        object.key("MetricDefinitionId").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_definition_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetricDefinitionRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.value_key {
        object.key("ValueKey").string(var_49.as_str());
    }
    if let Some(var_50) = &input.unit_label {
        object.key("UnitLabel").string(var_50.as_str());
    }
    if let Some(var_51) = &input.dimension_keys {
        let mut object_52 = object.key("DimensionKeys").start_object();
        for (key_53, value_54) in var_51 {
             {
                object_52.key(key_53.as_str()).string(value_54.as_str());
            }
        }
        object_52.finish();
    }
    if let Some(var_55) = &input.event_pattern {
        object.key("EventPattern").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_monitor_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AppMonitorConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.identity_pool_id {
        object.key("IdentityPoolId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.excluded_pages {
        let mut array_58 = object.key("ExcludedPages").start_array();
        for item_59 in var_57 {
             {
                array_58.value().string(item_59.as_str());
            }
        }
        array_58.finish();
    }
    if let Some(var_60) = &input.included_pages {
        let mut array_61 = object.key("IncludedPages").start_array();
        for item_62 in var_60 {
             {
                array_61.value().string(item_62.as_str());
            }
        }
        array_61.finish();
    }
    if let Some(var_63) = &input.favorite_pages {
        let mut array_64 = object.key("FavoritePages").start_array();
        for item_65 in var_63 {
             {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    if input.session_sample_rate != 0.0 {
        object.key("SessionSampleRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.session_sample_rate).into()));
    }
    if let Some(var_66) = &input.guest_role_arn {
        object.key("GuestRoleArn").string(var_66.as_str());
    }
    if let Some(var_67) = &input.allow_cookies {
        object.key("AllowCookies").boolean(*var_67);
    }
    if let Some(var_68) = &input.telemetries {
        let mut array_69 = object.key("Telemetries").start_array();
        for item_70 in var_68 {
             {
                array_69.value().string(item_70.as_str());
            }
        }
        array_69.finish();
    }
    if let Some(var_71) = &input.enable_x_ray {
        object.key("EnableXRay").boolean(*var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_query_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::QueryFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72.as_str());
    }
    if let Some(var_73) = &input.values {
        let mut array_74 = object.key("Values").start_array();
        for item_75 in var_73 {
             {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TimeRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("After").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.after).into()));
    }
    if input.before != 0 {
        object.key("Before").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.before).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_monitor_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AppMonitorDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.name {
        object.key("name").string(var_76.as_str());
    }
    if let Some(var_77) = &input.id {
        object.key("id").string(var_77.as_str());
    }
    if let Some(var_78) = &input.version {
        object.key("version").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rum_event(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RumEvent) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.id {
        object.key("id").string(var_79.as_str());
    }
    if let Some(var_80) = &input.timestamp {
        object.key("timestamp").date_time(var_80, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_81) = &input.r#type {
        object.key("type").string(var_81.as_str());
    }
    if let Some(var_82) = &input.metadata {
        object.key("metadata").string(var_82.as_str());
    }
    if let Some(var_83) = &input.details {
        object.key("details").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.user_id {
        object.key("userId").string(var_84.as_str());
    }
    if let Some(var_85) = &input.session_id {
        object.key("sessionId").string(var_85.as_str());
    }
    Ok(())
}

