// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>You don't have sufficient permissions to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>This operation attempted to create a resource that already exists.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Internal service exception.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Resource not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>This request exceeds a service quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was throttled because of quota limits.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>One of the arguments for the request is not valid.</p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateRumMetricDefinitionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchCreateRumMetricDefinitionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchCreateRumMetricDefinitionsError> for Error {
    fn from(err: crate::error::BatchCreateRumMetricDefinitionsError) -> Self {
        match err.kind {
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchCreateRumMetricDefinitionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteRumMetricDefinitionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteRumMetricDefinitionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchDeleteRumMetricDefinitionsError> for Error {
    fn from(err: crate::error::BatchDeleteRumMetricDefinitionsError) -> Self {
        match err.kind {
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchDeleteRumMetricDefinitionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetRumMetricDefinitionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetRumMetricDefinitionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchGetRumMetricDefinitionsError> for Error {
    fn from(err: crate::error::BatchGetRumMetricDefinitionsError) -> Self {
        match err.kind {
            crate::error::BatchGetRumMetricDefinitionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchGetRumMetricDefinitionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchGetRumMetricDefinitionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchGetRumMetricDefinitionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchGetRumMetricDefinitionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAppMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateAppMonitorError> for Error {
    fn from(err: crate::error::CreateAppMonitorError) -> Self {
        match err.kind {
            crate::error::CreateAppMonitorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateAppMonitorErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateAppMonitorErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateAppMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateAppMonitorErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateAppMonitorErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateAppMonitorErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateAppMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteAppMonitorError> for Error {
    fn from(err: crate::error::DeleteAppMonitorError) -> Self {
        match err.kind {
            crate::error::DeleteAppMonitorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteAppMonitorErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteAppMonitorErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteAppMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteAppMonitorErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteAppMonitorErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteAppMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRumMetricsDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRumMetricsDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteRumMetricsDestinationError> for Error {
    fn from(err: crate::error::DeleteRumMetricsDestinationError) -> Self {
        match err.kind {
            crate::error::DeleteRumMetricsDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteRumMetricsDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetAppMonitorError> for Error {
    fn from(err: crate::error::GetAppMonitorError) -> Self {
        match err.kind {
            crate::error::GetAppMonitorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetAppMonitorErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetAppMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetAppMonitorErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetAppMonitorErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAppMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppMonitorDataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppMonitorDataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetAppMonitorDataError> for Error {
    fn from(err: crate::error::GetAppMonitorDataError) -> Self {
        match err.kind {
            crate::error::GetAppMonitorDataErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetAppMonitorDataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetAppMonitorDataErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetAppMonitorDataErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetAppMonitorDataErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAppMonitorDataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppMonitorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAppMonitorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListAppMonitorsError> for Error {
    fn from(err: crate::error::ListAppMonitorsError) -> Self {
        match err.kind {
            crate::error::ListAppMonitorsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAppMonitorsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListAppMonitorsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListAppMonitorsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAppMonitorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRumMetricsDestinationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRumMetricsDestinationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListRumMetricsDestinationsError> for Error {
    fn from(err: crate::error::ListRumMetricsDestinationsError) -> Self {
        match err.kind {
            crate::error::ListRumMetricsDestinationsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListRumMetricsDestinationsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListRumMetricsDestinationsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListRumMetricsDestinationsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListRumMetricsDestinationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRumEventsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRumEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutRumEventsError> for Error {
    fn from(err: crate::error::PutRumEventsError) -> Self {
        match err.kind {
            crate::error::PutRumEventsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutRumEventsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::PutRumEventsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::PutRumEventsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::PutRumEventsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutRumEventsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRumMetricsDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRumMetricsDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutRumMetricsDestinationError> for Error {
    fn from(err: crate::error::PutRumMetricsDestinationError) -> Self {
        match err.kind {
            crate::error::PutRumMetricsDestinationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutRumMetricsDestinationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAppMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateAppMonitorError> for Error {
    fn from(err: crate::error::UpdateAppMonitorError) -> Self {
        match err.kind {
            crate::error::UpdateAppMonitorErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateAppMonitorErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateAppMonitorErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateAppMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateAppMonitorErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateAppMonitorErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateAppMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRumMetricDefinitionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRumMetricDefinitionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateRumMetricDefinitionError> for Error {
    fn from(err: crate::error::UpdateRumMetricDefinitionError) -> Self {
        match err.kind {
            crate::error::UpdateRumMetricDefinitionErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateRumMetricDefinitionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

