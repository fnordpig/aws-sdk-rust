// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_address_transfer(input: &crate::input::AcceptAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("Address");
    if let Some(var_2) = &input.address {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("TagSpecification");
    if let Some(var_4) = &input.tag_specifications {
        let mut list_6 = scope_3.start_list(true, Some("item"));
        for item_5 in var_4 {
            #[allow(unused_mut)]let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_7, item_5)?;
        }
        list_6.finish();
    }
    #[allow(unused_mut)]let mut scope_8 = writer.prefix("DryRun");
    if let Some(var_9) = &input.dry_run {
        scope_8.boolean(*var_9);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(input: &crate::input::AcceptReservedInstancesExchangeQuoteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]let mut scope_10 = writer.prefix("DryRun");
    if let Some(var_11) = &input.dry_run {
        scope_10.boolean(*var_11);
    }
    #[allow(unused_mut)]let mut scope_12 = writer.prefix("ReservedInstanceId");
    if let Some(var_13) = &input.reserved_instance_ids {
        let mut list_15 = scope_12.start_list(true, Some("ReservedInstanceId"));
        for item_14 in var_13 {
            #[allow(unused_mut)]let mut entry_16 = list_15.entry();
            entry_16.string(item_14);
        }
        list_15.finish();
    }
    #[allow(unused_mut)]let mut scope_17 = writer.prefix("TargetConfiguration");
    if let Some(var_18) = &input.target_configurations {
        let mut list_20 = scope_17.start_list(true, Some("TargetConfigurationRequest"));
        for item_19 in var_18 {
            #[allow(unused_mut)]let mut entry_21 = list_20.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(entry_21, item_19)?;
        }
        list_20.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_22 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_23) = &input.transit_gateway_multicast_domain_id {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]let mut scope_26 = writer.prefix("SubnetIds");
    if let Some(var_27) = &input.subnet_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]let mut scope_31 = writer.prefix("DryRun");
    if let Some(var_32) = &input.dry_run {
        scope_31.boolean(*var_32);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_33 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_34) = &input.transit_gateway_attachment_id {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]let mut scope_35 = writer.prefix("DryRun");
    if let Some(var_36) = &input.dry_run {
        scope_35.boolean(*var_36);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(input: &crate::input::AcceptTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_37 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_38) = &input.transit_gateway_attachment_id {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]let mut scope_39 = writer.prefix("DryRun");
    if let Some(var_40) = &input.dry_run {
        scope_39.boolean(*var_40);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(input: &crate::input::AcceptVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]let mut scope_43 = writer.prefix("ServiceId");
    if let Some(var_44) = &input.service_id {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]let mut scope_45 = writer.prefix("VpcEndpointId");
    if let Some(var_46) = &input.vpc_endpoint_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]let mut entry_49 = list_48.entry();
            entry_49.string(item_47);
        }
        list_48.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(input: &crate::input::AcceptVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_50 = writer.prefix("DryRun");
    if let Some(var_51) = &input.dry_run {
        scope_50.boolean(*var_51);
    }
    #[allow(unused_mut)]let mut scope_52 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_53) = &input.vpc_peering_connection_id {
        scope_52.string(var_53);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(input: &crate::input::AdvertiseByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_54 = writer.prefix("Cidr");
    if let Some(var_55) = &input.cidr {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]let mut scope_56 = writer.prefix("DryRun");
    if let Some(var_57) = &input.dry_run {
        scope_56.boolean(*var_57);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(input: &crate::input::AllocateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_58 = writer.prefix("Domain");
    if let Some(var_59) = &input.domain {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]let mut scope_60 = writer.prefix("Address");
    if let Some(var_61) = &input.address {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]let mut scope_62 = writer.prefix("PublicIpv4Pool");
    if let Some(var_63) = &input.public_ipv4_pool {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]let mut scope_64 = writer.prefix("NetworkBorderGroup");
    if let Some(var_65) = &input.network_border_group {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]let mut scope_66 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_67) = &input.customer_owned_ipv4_pool {
        scope_66.string(var_67);
    }
    #[allow(unused_mut)]let mut scope_68 = writer.prefix("DryRun");
    if let Some(var_69) = &input.dry_run {
        scope_68.boolean(*var_69);
    }
    #[allow(unused_mut)]let mut scope_70 = writer.prefix("TagSpecification");
    if let Some(var_71) = &input.tag_specifications {
        let mut list_73 = scope_70.start_list(true, Some("item"));
        for item_72 in var_71 {
            #[allow(unused_mut)]let mut entry_74 = list_73.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_74, item_72)?;
        }
        list_73.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(input: &crate::input::AllocateHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]let mut scope_75 = writer.prefix("AutoPlacement");
    if let Some(var_76) = &input.auto_placement {
        scope_75.string(var_76.as_str());
    }
    #[allow(unused_mut)]let mut scope_77 = writer.prefix("AvailabilityZone");
    if let Some(var_78) = &input.availability_zone {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]let mut scope_79 = writer.prefix("ClientToken");
    if let Some(var_80) = &input.client_token {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]let mut scope_81 = writer.prefix("InstanceType");
    if let Some(var_82) = &input.instance_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]let mut scope_83 = writer.prefix("InstanceFamily");
    if let Some(var_84) = &input.instance_family {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]let mut scope_85 = writer.prefix("Quantity");
    if let Some(var_86) = &input.quantity {
        scope_85.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_86).into()));
    }
    #[allow(unused_mut)]let mut scope_87 = writer.prefix("TagSpecification");
    if let Some(var_88) = &input.tag_specifications {
        let mut list_90 = scope_87.start_list(true, Some("item"));
        for item_89 in var_88 {
            #[allow(unused_mut)]let mut entry_91 = list_90.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_91, item_89)?;
        }
        list_90.finish();
    }
    #[allow(unused_mut)]let mut scope_92 = writer.prefix("HostRecovery");
    if let Some(var_93) = &input.host_recovery {
        scope_92.string(var_93.as_str());
    }
    #[allow(unused_mut)]let mut scope_94 = writer.prefix("OutpostArn");
    if let Some(var_95) = &input.outpost_arn {
        scope_94.string(var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(input: &crate::input::AllocateIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_96 = writer.prefix("DryRun");
    if let Some(var_97) = &input.dry_run {
        scope_96.boolean(*var_97);
    }
    #[allow(unused_mut)]let mut scope_98 = writer.prefix("IpamPoolId");
    if let Some(var_99) = &input.ipam_pool_id {
        scope_98.string(var_99);
    }
    #[allow(unused_mut)]let mut scope_100 = writer.prefix("Cidr");
    if let Some(var_101) = &input.cidr {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]let mut scope_102 = writer.prefix("NetmaskLength");
    if let Some(var_103) = &input.netmask_length {
        scope_102.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_103).into()));
    }
    #[allow(unused_mut)]let mut scope_104 = writer.prefix("ClientToken");
    if let Some(var_105) = &input.client_token {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]let mut scope_106 = writer.prefix("Description");
    if let Some(var_107) = &input.description {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]let mut scope_108 = writer.prefix("PreviewNextCidr");
    if let Some(var_109) = &input.preview_next_cidr {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]let mut scope_110 = writer.prefix("DisallowedCidr");
    if let Some(var_111) = &input.disallowed_cidrs {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ApplySecurityGroupsToClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]let mut scope_115 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_116) = &input.client_vpn_endpoint_id {
        scope_115.string(var_116);
    }
    #[allow(unused_mut)]let mut scope_117 = writer.prefix("VpcId");
    if let Some(var_118) = &input.vpc_id {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]let mut scope_119 = writer.prefix("SecurityGroupId");
    if let Some(var_120) = &input.security_group_ids {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]let mut scope_124 = writer.prefix("DryRun");
    if let Some(var_125) = &input.dry_run {
        scope_124.boolean(*var_125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(input: &crate::input::AssignIpv6AddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_126 = writer.prefix("Ipv6AddressCount");
    if let Some(var_127) = &input.ipv6_address_count {
        scope_126.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_127).into()));
    }
    #[allow(unused_mut)]let mut scope_128 = writer.prefix("Ipv6Addresses");
    if let Some(var_129) = &input.ipv6_addresses {
        let mut list_131 = scope_128.start_list(true, Some("item"));
        for item_130 in var_129 {
            #[allow(unused_mut)]let mut entry_132 = list_131.entry();
            entry_132.string(item_130);
        }
        list_131.finish();
    }
    #[allow(unused_mut)]let mut scope_133 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_134) = &input.ipv6_prefix_count {
        scope_133.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_134).into()));
    }
    #[allow(unused_mut)]let mut scope_135 = writer.prefix("Ipv6Prefix");
    if let Some(var_136) = &input.ipv6_prefixes {
        let mut list_138 = scope_135.start_list(true, Some("item"));
        for item_137 in var_136 {
            #[allow(unused_mut)]let mut entry_139 = list_138.entry();
            entry_139.string(item_137);
        }
        list_138.finish();
    }
    #[allow(unused_mut)]let mut scope_140 = writer.prefix("NetworkInterfaceId");
    if let Some(var_141) = &input.network_interface_id {
        scope_140.string(var_141);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(input: &crate::input::AssignPrivateIpAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_142 = writer.prefix("AllowReassignment");
    if let Some(var_143) = &input.allow_reassignment {
        scope_142.boolean(*var_143);
    }
    #[allow(unused_mut)]let mut scope_144 = writer.prefix("NetworkInterfaceId");
    if let Some(var_145) = &input.network_interface_id {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]let mut scope_146 = writer.prefix("PrivateIpAddress");
    if let Some(var_147) = &input.private_ip_addresses {
        let mut list_149 = scope_146.start_list(true, Some("PrivateIpAddress"));
        for item_148 in var_147 {
            #[allow(unused_mut)]let mut entry_150 = list_149.entry();
            entry_150.string(item_148);
        }
        list_149.finish();
    }
    #[allow(unused_mut)]let mut scope_151 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_152) = &input.secondary_private_ip_address_count {
        scope_151.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_152).into()));
    }
    #[allow(unused_mut)]let mut scope_153 = writer.prefix("Ipv4Prefix");
    if let Some(var_154) = &input.ipv4_prefixes {
        let mut list_156 = scope_153.start_list(true, Some("item"));
        for item_155 in var_154 {
            #[allow(unused_mut)]let mut entry_157 = list_156.entry();
            entry_157.string(item_155);
        }
        list_156.finish();
    }
    #[allow(unused_mut)]let mut scope_158 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_159) = &input.ipv4_prefix_count {
        scope_158.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_159).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(input: &crate::input::AssociateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_160 = writer.prefix("AllocationId");
    if let Some(var_161) = &input.allocation_id {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]let mut scope_162 = writer.prefix("InstanceId");
    if let Some(var_163) = &input.instance_id {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]let mut scope_164 = writer.prefix("PublicIp");
    if let Some(var_165) = &input.public_ip {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]let mut scope_166 = writer.prefix("AllowReassociation");
    if let Some(var_167) = &input.allow_reassociation {
        scope_166.boolean(*var_167);
    }
    #[allow(unused_mut)]let mut scope_168 = writer.prefix("DryRun");
    if let Some(var_169) = &input.dry_run {
        scope_168.boolean(*var_169);
    }
    #[allow(unused_mut)]let mut scope_170 = writer.prefix("NetworkInterfaceId");
    if let Some(var_171) = &input.network_interface_id {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]let mut scope_172 = writer.prefix("PrivateIpAddress");
    if let Some(var_173) = &input.private_ip_address {
        scope_172.string(var_173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(input: &crate::input::AssociateClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]let mut scope_174 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_175) = &input.client_vpn_endpoint_id {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]let mut scope_176 = writer.prefix("SubnetId");
    if let Some(var_177) = &input.subnet_id {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]let mut scope_178 = writer.prefix("ClientToken");
    if let Some(var_179) = &input.client_token {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]let mut scope_180 = writer.prefix("DryRun");
    if let Some(var_181) = &input.dry_run {
        scope_180.boolean(*var_181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(input: &crate::input::AssociateDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_182 = writer.prefix("DhcpOptionsId");
    if let Some(var_183) = &input.dhcp_options_id {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]let mut scope_184 = writer.prefix("VpcId");
    if let Some(var_185) = &input.vpc_id {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]let mut scope_186 = writer.prefix("DryRun");
    if let Some(var_187) = &input.dry_run {
        scope_186.boolean(*var_187);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(input: &crate::input::AssociateEnclaveCertificateIamRoleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateEnclaveCertificateIamRole", "2016-11-15");
    #[allow(unused_mut)]let mut scope_188 = writer.prefix("CertificateArn");
    if let Some(var_189) = &input.certificate_arn {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]let mut scope_190 = writer.prefix("RoleArn");
    if let Some(var_191) = &input.role_arn {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]let mut scope_192 = writer.prefix("DryRun");
    if let Some(var_193) = &input.dry_run {
        scope_192.boolean(*var_193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(input: &crate::input::AssociateIamInstanceProfileInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]let mut scope_194 = writer.prefix("IamInstanceProfile");
    if let Some(var_195) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_194, var_195)?;
    }
    #[allow(unused_mut)]let mut scope_196 = writer.prefix("InstanceId");
    if let Some(var_197) = &input.instance_id {
        scope_196.string(var_197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(input: &crate::input::AssociateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]let mut scope_198 = writer.prefix("DryRun");
    if let Some(var_199) = &input.dry_run {
        scope_198.boolean(*var_199);
    }
    #[allow(unused_mut)]let mut scope_200 = writer.prefix("InstanceEventWindowId");
    if let Some(var_201) = &input.instance_event_window_id {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]let mut scope_202 = writer.prefix("AssociationTarget");
    if let Some(var_203) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_202, var_203)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(input: &crate::input::AssociateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_204 = writer.prefix("DryRun");
    if let Some(var_205) = &input.dry_run {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]let mut scope_206 = writer.prefix("RouteTableId");
    if let Some(var_207) = &input.route_table_id {
        scope_206.string(var_207);
    }
    #[allow(unused_mut)]let mut scope_208 = writer.prefix("SubnetId");
    if let Some(var_209) = &input.subnet_id {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]let mut scope_210 = writer.prefix("GatewayId");
    if let Some(var_211) = &input.gateway_id {
        scope_210.string(var_211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(input: &crate::input::AssociateSubnetCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]let mut scope_212 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_213) = &input.ipv6_cidr_block {
        scope_212.string(var_213);
    }
    #[allow(unused_mut)]let mut scope_214 = writer.prefix("SubnetId");
    if let Some(var_215) = &input.subnet_id {
        scope_214.string(var_215);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(input: &crate::input::AssociateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]let mut scope_216 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_217) = &input.transit_gateway_multicast_domain_id {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]let mut scope_218 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_219) = &input.transit_gateway_attachment_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]let mut scope_220 = writer.prefix("SubnetIds");
    if let Some(var_221) = &input.subnet_ids {
        let mut list_223 = scope_220.start_list(true, Some("item"));
        for item_222 in var_221 {
            #[allow(unused_mut)]let mut entry_224 = list_223.entry();
            entry_224.string(item_222);
        }
        list_223.finish();
    }
    #[allow(unused_mut)]let mut scope_225 = writer.prefix("DryRun");
    if let Some(var_226) = &input.dry_run {
        scope_225.boolean(*var_226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_policy_table(input: &crate::input::AssociateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_227 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_228) = &input.transit_gateway_policy_table_id {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]let mut scope_229 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_230) = &input.transit_gateway_attachment_id {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]let mut scope_231 = writer.prefix("DryRun");
    if let Some(var_232) = &input.dry_run {
        scope_231.boolean(*var_232);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(input: &crate::input::AssociateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_233 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_234) = &input.transit_gateway_route_table_id {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]let mut scope_235 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_236) = &input.transit_gateway_attachment_id {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]let mut scope_237 = writer.prefix("DryRun");
    if let Some(var_238) = &input.dry_run {
        scope_237.boolean(*var_238);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(input: &crate::input::AssociateTrunkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_239 = writer.prefix("BranchInterfaceId");
    if let Some(var_240) = &input.branch_interface_id {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]let mut scope_241 = writer.prefix("TrunkInterfaceId");
    if let Some(var_242) = &input.trunk_interface_id {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]let mut scope_243 = writer.prefix("VlanId");
    if let Some(var_244) = &input.vlan_id {
        scope_243.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_244).into()));
    }
    #[allow(unused_mut)]let mut scope_245 = writer.prefix("GreKey");
    if let Some(var_246) = &input.gre_key {
        scope_245.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_246).into()));
    }
    #[allow(unused_mut)]let mut scope_247 = writer.prefix("ClientToken");
    if let Some(var_248) = &input.client_token {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]let mut scope_249 = writer.prefix("DryRun");
    if let Some(var_250) = &input.dry_run {
        scope_249.boolean(*var_250);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(input: &crate::input::AssociateVpcCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]let mut scope_251 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_252) = &input.amazon_provided_ipv6_cidr_block {
        scope_251.boolean(*var_252);
    }
    #[allow(unused_mut)]let mut scope_253 = writer.prefix("CidrBlock");
    if let Some(var_254) = &input.cidr_block {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]let mut scope_255 = writer.prefix("VpcId");
    if let Some(var_256) = &input.vpc_id {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]let mut scope_257 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_258) = &input.ipv6_cidr_block_network_border_group {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]let mut scope_259 = writer.prefix("Ipv6Pool");
    if let Some(var_260) = &input.ipv6_pool {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]let mut scope_261 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_262) = &input.ipv6_cidr_block {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]let mut scope_263 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_264) = &input.ipv4_ipam_pool_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]let mut scope_265 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_266) = &input.ipv4_netmask_length {
        scope_265.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_266).into()));
    }
    #[allow(unused_mut)]let mut scope_267 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_268) = &input.ipv6_ipam_pool_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]let mut scope_269 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_270) = &input.ipv6_netmask_length {
        scope_269.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_270).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(input: &crate::input::AttachClassicLinkVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_271 = writer.prefix("DryRun");
    if let Some(var_272) = &input.dry_run {
        scope_271.boolean(*var_272);
    }
    #[allow(unused_mut)]let mut scope_273 = writer.prefix("SecurityGroupId");
    if let Some(var_274) = &input.groups {
        let mut list_276 = scope_273.start_list(true, Some("groupId"));
        for item_275 in var_274 {
            #[allow(unused_mut)]let mut entry_277 = list_276.entry();
            entry_277.string(item_275);
        }
        list_276.finish();
    }
    #[allow(unused_mut)]let mut scope_278 = writer.prefix("InstanceId");
    if let Some(var_279) = &input.instance_id {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]let mut scope_280 = writer.prefix("VpcId");
    if let Some(var_281) = &input.vpc_id {
        scope_280.string(var_281);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(input: &crate::input::AttachInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_282 = writer.prefix("DryRun");
    if let Some(var_283) = &input.dry_run {
        scope_282.boolean(*var_283);
    }
    #[allow(unused_mut)]let mut scope_284 = writer.prefix("InternetGatewayId");
    if let Some(var_285) = &input.internet_gateway_id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]let mut scope_286 = writer.prefix("VpcId");
    if let Some(var_287) = &input.vpc_id {
        scope_286.string(var_287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(input: &crate::input::AttachNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_288 = writer.prefix("DeviceIndex");
    if let Some(var_289) = &input.device_index {
        scope_288.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_289).into()));
    }
    #[allow(unused_mut)]let mut scope_290 = writer.prefix("DryRun");
    if let Some(var_291) = &input.dry_run {
        scope_290.boolean(*var_291);
    }
    #[allow(unused_mut)]let mut scope_292 = writer.prefix("InstanceId");
    if let Some(var_293) = &input.instance_id {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]let mut scope_294 = writer.prefix("NetworkInterfaceId");
    if let Some(var_295) = &input.network_interface_id {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]let mut scope_296 = writer.prefix("NetworkCardIndex");
    if let Some(var_297) = &input.network_card_index {
        scope_296.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_297).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(input: &crate::input::AttachVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_298 = writer.prefix("Device");
    if let Some(var_299) = &input.device {
        scope_298.string(var_299);
    }
    #[allow(unused_mut)]let mut scope_300 = writer.prefix("InstanceId");
    if let Some(var_301) = &input.instance_id {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]let mut scope_302 = writer.prefix("VolumeId");
    if let Some(var_303) = &input.volume_id {
        scope_302.string(var_303);
    }
    #[allow(unused_mut)]let mut scope_304 = writer.prefix("DryRun");
    if let Some(var_305) = &input.dry_run {
        scope_304.boolean(*var_305);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(input: &crate::input::AttachVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_306 = writer.prefix("VpcId");
    if let Some(var_307) = &input.vpc_id {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]let mut scope_308 = writer.prefix("VpnGatewayId");
    if let Some(var_309) = &input.vpn_gateway_id {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]let mut scope_310 = writer.prefix("DryRun");
    if let Some(var_311) = &input.dry_run {
        scope_310.boolean(*var_311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(input: &crate::input::AuthorizeClientVpnIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_312 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_313) = &input.client_vpn_endpoint_id {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]let mut scope_314 = writer.prefix("TargetNetworkCidr");
    if let Some(var_315) = &input.target_network_cidr {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]let mut scope_316 = writer.prefix("AccessGroupId");
    if let Some(var_317) = &input.access_group_id {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]let mut scope_318 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_319) = &input.authorize_all_groups {
        scope_318.boolean(*var_319);
    }
    #[allow(unused_mut)]let mut scope_320 = writer.prefix("Description");
    if let Some(var_321) = &input.description {
        scope_320.string(var_321);
    }
    #[allow(unused_mut)]let mut scope_322 = writer.prefix("ClientToken");
    if let Some(var_323) = &input.client_token {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]let mut scope_324 = writer.prefix("DryRun");
    if let Some(var_325) = &input.dry_run {
        scope_324.boolean(*var_325);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(input: &crate::input::AuthorizeSecurityGroupEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_326 = writer.prefix("DryRun");
    if let Some(var_327) = &input.dry_run {
        scope_326.boolean(*var_327);
    }
    #[allow(unused_mut)]let mut scope_328 = writer.prefix("GroupId");
    if let Some(var_329) = &input.group_id {
        scope_328.string(var_329);
    }
    #[allow(unused_mut)]let mut scope_330 = writer.prefix("IpPermissions");
    if let Some(var_331) = &input.ip_permissions {
        let mut list_333 = scope_330.start_list(true, Some("item"));
        for item_332 in var_331 {
            #[allow(unused_mut)]let mut entry_334 = list_333.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_334, item_332)?;
        }
        list_333.finish();
    }
    #[allow(unused_mut)]let mut scope_335 = writer.prefix("TagSpecification");
    if let Some(var_336) = &input.tag_specifications {
        let mut list_338 = scope_335.start_list(true, Some("item"));
        for item_337 in var_336 {
            #[allow(unused_mut)]let mut entry_339 = list_338.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_339, item_337)?;
        }
        list_338.finish();
    }
    #[allow(unused_mut)]let mut scope_340 = writer.prefix("CidrIp");
    if let Some(var_341) = &input.cidr_ip {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]let mut scope_342 = writer.prefix("FromPort");
    if let Some(var_343) = &input.from_port {
        scope_342.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_343).into()));
    }
    #[allow(unused_mut)]let mut scope_344 = writer.prefix("IpProtocol");
    if let Some(var_345) = &input.ip_protocol {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]let mut scope_346 = writer.prefix("ToPort");
    if let Some(var_347) = &input.to_port {
        scope_346.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_347).into()));
    }
    #[allow(unused_mut)]let mut scope_348 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_349) = &input.source_security_group_name {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]let mut scope_350 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_351) = &input.source_security_group_owner_id {
        scope_350.string(var_351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(input: &crate::input::AuthorizeSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_352 = writer.prefix("CidrIp");
    if let Some(var_353) = &input.cidr_ip {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]let mut scope_354 = writer.prefix("FromPort");
    if let Some(var_355) = &input.from_port {
        scope_354.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_355).into()));
    }
    #[allow(unused_mut)]let mut scope_356 = writer.prefix("GroupId");
    if let Some(var_357) = &input.group_id {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]let mut scope_358 = writer.prefix("GroupName");
    if let Some(var_359) = &input.group_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]let mut scope_360 = writer.prefix("IpPermissions");
    if let Some(var_361) = &input.ip_permissions {
        let mut list_363 = scope_360.start_list(true, Some("item"));
        for item_362 in var_361 {
            #[allow(unused_mut)]let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_364, item_362)?;
        }
        list_363.finish();
    }
    #[allow(unused_mut)]let mut scope_365 = writer.prefix("IpProtocol");
    if let Some(var_366) = &input.ip_protocol {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]let mut scope_367 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_368) = &input.source_security_group_name {
        scope_367.string(var_368);
    }
    #[allow(unused_mut)]let mut scope_369 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_370) = &input.source_security_group_owner_id {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]let mut scope_371 = writer.prefix("ToPort");
    if let Some(var_372) = &input.to_port {
        scope_371.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_372).into()));
    }
    #[allow(unused_mut)]let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    #[allow(unused_mut)]let mut scope_375 = writer.prefix("TagSpecification");
    if let Some(var_376) = &input.tag_specifications {
        let mut list_378 = scope_375.start_list(true, Some("item"));
        for item_377 in var_376 {
            #[allow(unused_mut)]let mut entry_379 = list_378.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_379, item_377)?;
        }
        list_378.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(input: &crate::input::BundleInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]let mut scope_380 = writer.prefix("InstanceId");
    if let Some(var_381) = &input.instance_id {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]let mut scope_382 = writer.prefix("Storage");
    if let Some(var_383) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_382, var_383)?;
    }
    #[allow(unused_mut)]let mut scope_384 = writer.prefix("DryRun");
    if let Some(var_385) = &input.dry_run {
        scope_384.boolean(*var_385);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(input: &crate::input::CancelBundleTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_386 = writer.prefix("BundleId");
    if let Some(var_387) = &input.bundle_id {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(input: &crate::input::CancelCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_390 = writer.prefix("CapacityReservationId");
    if let Some(var_391) = &input.capacity_reservation_id {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]let mut scope_392 = writer.prefix("DryRun");
    if let Some(var_393) = &input.dry_run {
        scope_392.boolean(*var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(input: &crate::input::CancelCapacityReservationFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_394 = writer.prefix("DryRun");
    if let Some(var_395) = &input.dry_run {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]let mut scope_396 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_397) = &input.capacity_reservation_fleet_ids {
        let mut list_399 = scope_396.start_list(true, Some("item"));
        for item_398 in var_397 {
            #[allow(unused_mut)]let mut entry_400 = list_399.entry();
            entry_400.string(item_398);
        }
        list_399.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(input: &crate::input::CancelConversionTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_401 = writer.prefix("ConversionTaskId");
    if let Some(var_402) = &input.conversion_task_id {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]let mut scope_403 = writer.prefix("DryRun");
    if let Some(var_404) = &input.dry_run {
        scope_403.boolean(*var_404);
    }
    #[allow(unused_mut)]let mut scope_405 = writer.prefix("ReasonMessage");
    if let Some(var_406) = &input.reason_message {
        scope_405.string(var_406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(input: &crate::input::CancelExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_407 = writer.prefix("ExportTaskId");
    if let Some(var_408) = &input.export_task_id {
        scope_407.string(var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_image_launch_permission(input: &crate::input::CancelImageLaunchPermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImageLaunchPermission", "2016-11-15");
    #[allow(unused_mut)]let mut scope_409 = writer.prefix("ImageId");
    if let Some(var_410) = &input.image_id {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]let mut scope_411 = writer.prefix("DryRun");
    if let Some(var_412) = &input.dry_run {
        scope_411.boolean(*var_412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(input: &crate::input::CancelImportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_413 = writer.prefix("CancelReason");
    if let Some(var_414) = &input.cancel_reason {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]let mut scope_415 = writer.prefix("DryRun");
    if let Some(var_416) = &input.dry_run {
        scope_415.boolean(*var_416);
    }
    #[allow(unused_mut)]let mut scope_417 = writer.prefix("ImportTaskId");
    if let Some(var_418) = &input.import_task_id {
        scope_417.string(var_418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(input: &crate::input::CancelReservedInstancesListingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]let mut scope_419 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_420) = &input.reserved_instances_listing_id {
        scope_419.string(var_420);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(input: &crate::input::CancelSpotFleetRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]let mut scope_421 = writer.prefix("DryRun");
    if let Some(var_422) = &input.dry_run {
        scope_421.boolean(*var_422);
    }
    #[allow(unused_mut)]let mut scope_423 = writer.prefix("SpotFleetRequestId");
    if let Some(var_424) = &input.spot_fleet_request_ids {
        let mut list_426 = scope_423.start_list(true, Some("item"));
        for item_425 in var_424 {
            #[allow(unused_mut)]let mut entry_427 = list_426.entry();
            entry_427.string(item_425);
        }
        list_426.finish();
    }
    #[allow(unused_mut)]let mut scope_428 = writer.prefix("TerminateInstances");
    if let Some(var_429) = &input.terminate_instances {
        scope_428.boolean(*var_429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(input: &crate::input::CancelSpotInstanceRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]let mut scope_430 = writer.prefix("DryRun");
    if let Some(var_431) = &input.dry_run {
        scope_430.boolean(*var_431);
    }
    #[allow(unused_mut)]let mut scope_432 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_433) = &input.spot_instance_request_ids {
        let mut list_435 = scope_432.start_list(true, Some("SpotInstanceRequestId"));
        for item_434 in var_433 {
            #[allow(unused_mut)]let mut entry_436 = list_435.entry();
            entry_436.string(item_434);
        }
        list_435.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(input: &crate::input::ConfirmProductInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]let mut scope_437 = writer.prefix("InstanceId");
    if let Some(var_438) = &input.instance_id {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]let mut scope_439 = writer.prefix("ProductCode");
    if let Some(var_440) = &input.product_code {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]let mut scope_441 = writer.prefix("DryRun");
    if let Some(var_442) = &input.dry_run {
        scope_441.boolean(*var_442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(input: &crate::input::CopyFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_443 = writer.prefix("DryRun");
    if let Some(var_444) = &input.dry_run {
        scope_443.boolean(*var_444);
    }
    #[allow(unused_mut)]let mut scope_445 = writer.prefix("SourceFpgaImageId");
    if let Some(var_446) = &input.source_fpga_image_id {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]let mut scope_447 = writer.prefix("Description");
    if let Some(var_448) = &input.description {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]let mut scope_449 = writer.prefix("Name");
    if let Some(var_450) = &input.name {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]let mut scope_451 = writer.prefix("SourceRegion");
    if let Some(var_452) = &input.source_region {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]let mut scope_453 = writer.prefix("ClientToken");
    if let Some(var_454) = &input.client_token {
        scope_453.string(var_454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(input: &crate::input::CopyImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_455 = writer.prefix("ClientToken");
    if let Some(var_456) = &input.client_token {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]let mut scope_457 = writer.prefix("Description");
    if let Some(var_458) = &input.description {
        scope_457.string(var_458);
    }
    #[allow(unused_mut)]let mut scope_459 = writer.prefix("Encrypted");
    if let Some(var_460) = &input.encrypted {
        scope_459.boolean(*var_460);
    }
    #[allow(unused_mut)]let mut scope_461 = writer.prefix("KmsKeyId");
    if let Some(var_462) = &input.kms_key_id {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]let mut scope_463 = writer.prefix("Name");
    if let Some(var_464) = &input.name {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]let mut scope_465 = writer.prefix("SourceImageId");
    if let Some(var_466) = &input.source_image_id {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]let mut scope_467 = writer.prefix("SourceRegion");
    if let Some(var_468) = &input.source_region {
        scope_467.string(var_468);
    }
    #[allow(unused_mut)]let mut scope_469 = writer.prefix("DestinationOutpostArn");
    if let Some(var_470) = &input.destination_outpost_arn {
        scope_469.string(var_470);
    }
    #[allow(unused_mut)]let mut scope_471 = writer.prefix("DryRun");
    if let Some(var_472) = &input.dry_run {
        scope_471.boolean(*var_472);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(input: &crate::input::CopySnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]let mut scope_473 = writer.prefix("Description");
    if let Some(var_474) = &input.description {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]let mut scope_475 = writer.prefix("DestinationOutpostArn");
    if let Some(var_476) = &input.destination_outpost_arn {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]let mut scope_477 = writer.prefix("DestinationRegion");
    if let Some(var_478) = &input.destination_region {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]let mut scope_479 = writer.prefix("Encrypted");
    if let Some(var_480) = &input.encrypted {
        scope_479.boolean(*var_480);
    }
    #[allow(unused_mut)]let mut scope_481 = writer.prefix("KmsKeyId");
    if let Some(var_482) = &input.kms_key_id {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]let mut scope_483 = writer.prefix("PresignedUrl");
    if let Some(var_484) = &input.presigned_url {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]let mut scope_485 = writer.prefix("SourceRegion");
    if let Some(var_486) = &input.source_region {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]let mut scope_487 = writer.prefix("SourceSnapshotId");
    if let Some(var_488) = &input.source_snapshot_id {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]let mut scope_489 = writer.prefix("TagSpecification");
    if let Some(var_490) = &input.tag_specifications {
        let mut list_492 = scope_489.start_list(true, Some("item"));
        for item_491 in var_490 {
            #[allow(unused_mut)]let mut entry_493 = list_492.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_493, item_491)?;
        }
        list_492.finish();
    }
    #[allow(unused_mut)]let mut scope_494 = writer.prefix("DryRun");
    if let Some(var_495) = &input.dry_run {
        scope_494.boolean(*var_495);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(input: &crate::input::CreateCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_496 = writer.prefix("ClientToken");
    if let Some(var_497) = &input.client_token {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]let mut scope_498 = writer.prefix("InstanceType");
    if let Some(var_499) = &input.instance_type {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]let mut scope_500 = writer.prefix("InstancePlatform");
    if let Some(var_501) = &input.instance_platform {
        scope_500.string(var_501.as_str());
    }
    #[allow(unused_mut)]let mut scope_502 = writer.prefix("AvailabilityZone");
    if let Some(var_503) = &input.availability_zone {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]let mut scope_504 = writer.prefix("AvailabilityZoneId");
    if let Some(var_505) = &input.availability_zone_id {
        scope_504.string(var_505);
    }
    #[allow(unused_mut)]let mut scope_506 = writer.prefix("Tenancy");
    if let Some(var_507) = &input.tenancy {
        scope_506.string(var_507.as_str());
    }
    #[allow(unused_mut)]let mut scope_508 = writer.prefix("InstanceCount");
    if let Some(var_509) = &input.instance_count {
        scope_508.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_509).into()));
    }
    #[allow(unused_mut)]let mut scope_510 = writer.prefix("EbsOptimized");
    if let Some(var_511) = &input.ebs_optimized {
        scope_510.boolean(*var_511);
    }
    #[allow(unused_mut)]let mut scope_512 = writer.prefix("EphemeralStorage");
    if let Some(var_513) = &input.ephemeral_storage {
        scope_512.boolean(*var_513);
    }
    #[allow(unused_mut)]let mut scope_514 = writer.prefix("EndDate");
    if let Some(var_515) = &input.end_date {
        scope_514.date_time(var_515, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_516 = writer.prefix("EndDateType");
    if let Some(var_517) = &input.end_date_type {
        scope_516.string(var_517.as_str());
    }
    #[allow(unused_mut)]let mut scope_518 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_519) = &input.instance_match_criteria {
        scope_518.string(var_519.as_str());
    }
    #[allow(unused_mut)]let mut scope_520 = writer.prefix("TagSpecifications");
    if let Some(var_521) = &input.tag_specifications {
        let mut list_523 = scope_520.start_list(true, Some("item"));
        for item_522 in var_521 {
            #[allow(unused_mut)]let mut entry_524 = list_523.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_524, item_522)?;
        }
        list_523.finish();
    }
    #[allow(unused_mut)]let mut scope_525 = writer.prefix("DryRun");
    if let Some(var_526) = &input.dry_run {
        scope_525.boolean(*var_526);
    }
    #[allow(unused_mut)]let mut scope_527 = writer.prefix("OutpostArn");
    if let Some(var_528) = &input.outpost_arn {
        scope_527.string(var_528);
    }
    #[allow(unused_mut)]let mut scope_529 = writer.prefix("PlacementGroupArn");
    if let Some(var_530) = &input.placement_group_arn {
        scope_529.string(var_530);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(input: &crate::input::CreateCapacityReservationFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_531 = writer.prefix("AllocationStrategy");
    if let Some(var_532) = &input.allocation_strategy {
        scope_531.string(var_532);
    }
    #[allow(unused_mut)]let mut scope_533 = writer.prefix("ClientToken");
    if let Some(var_534) = &input.client_token {
        scope_533.string(var_534);
    }
    #[allow(unused_mut)]let mut scope_535 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_536) = &input.instance_type_specifications {
        let mut list_538 = scope_535.start_list(true, None);
        for item_537 in var_536 {
            #[allow(unused_mut)]let mut entry_539 = list_538.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_539, item_537)?;
        }
        list_538.finish();
    }
    #[allow(unused_mut)]let mut scope_540 = writer.prefix("Tenancy");
    if let Some(var_541) = &input.tenancy {
        scope_540.string(var_541.as_str());
    }
    #[allow(unused_mut)]let mut scope_542 = writer.prefix("TotalTargetCapacity");
    if let Some(var_543) = &input.total_target_capacity {
        scope_542.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_543).into()));
    }
    #[allow(unused_mut)]let mut scope_544 = writer.prefix("EndDate");
    if let Some(var_545) = &input.end_date {
        scope_544.date_time(var_545, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_546 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_547) = &input.instance_match_criteria {
        scope_546.string(var_547.as_str());
    }
    #[allow(unused_mut)]let mut scope_548 = writer.prefix("TagSpecification");
    if let Some(var_549) = &input.tag_specifications {
        let mut list_551 = scope_548.start_list(true, Some("item"));
        for item_550 in var_549 {
            #[allow(unused_mut)]let mut entry_552 = list_551.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_552, item_550)?;
        }
        list_551.finish();
    }
    #[allow(unused_mut)]let mut scope_553 = writer.prefix("DryRun");
    if let Some(var_554) = &input.dry_run {
        scope_553.boolean(*var_554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(input: &crate::input::CreateCarrierGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_555 = writer.prefix("VpcId");
    if let Some(var_556) = &input.vpc_id {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]let mut scope_557 = writer.prefix("TagSpecification");
    if let Some(var_558) = &input.tag_specifications {
        let mut list_560 = scope_557.start_list(true, Some("item"));
        for item_559 in var_558 {
            #[allow(unused_mut)]let mut entry_561 = list_560.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_561, item_559)?;
        }
        list_560.finish();
    }
    #[allow(unused_mut)]let mut scope_562 = writer.prefix("DryRun");
    if let Some(var_563) = &input.dry_run {
        scope_562.boolean(*var_563);
    }
    #[allow(unused_mut)]let mut scope_564 = writer.prefix("ClientToken");
    if let Some(var_565) = &input.client_token {
        scope_564.string(var_565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(input: &crate::input::CreateClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]let mut scope_566 = writer.prefix("ClientCidrBlock");
    if let Some(var_567) = &input.client_cidr_block {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]let mut scope_568 = writer.prefix("ServerCertificateArn");
    if let Some(var_569) = &input.server_certificate_arn {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]let mut scope_570 = writer.prefix("Authentication");
    if let Some(var_571) = &input.authentication_options {
        let mut list_573 = scope_570.start_list(true, None);
        for item_572 in var_571 {
            #[allow(unused_mut)]let mut entry_574 = list_573.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(entry_574, item_572)?;
        }
        list_573.finish();
    }
    #[allow(unused_mut)]let mut scope_575 = writer.prefix("ConnectionLogOptions");
    if let Some(var_576) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(scope_575, var_576)?;
    }
    #[allow(unused_mut)]let mut scope_577 = writer.prefix("DnsServers");
    if let Some(var_578) = &input.dns_servers {
        let mut list_580 = scope_577.start_list(true, Some("item"));
        for item_579 in var_578 {
            #[allow(unused_mut)]let mut entry_581 = list_580.entry();
            entry_581.string(item_579);
        }
        list_580.finish();
    }
    #[allow(unused_mut)]let mut scope_582 = writer.prefix("TransportProtocol");
    if let Some(var_583) = &input.transport_protocol {
        scope_582.string(var_583.as_str());
    }
    #[allow(unused_mut)]let mut scope_584 = writer.prefix("VpnPort");
    if let Some(var_585) = &input.vpn_port {
        scope_584.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_585).into()));
    }
    #[allow(unused_mut)]let mut scope_586 = writer.prefix("Description");
    if let Some(var_587) = &input.description {
        scope_586.string(var_587);
    }
    #[allow(unused_mut)]let mut scope_588 = writer.prefix("SplitTunnel");
    if let Some(var_589) = &input.split_tunnel {
        scope_588.boolean(*var_589);
    }
    #[allow(unused_mut)]let mut scope_590 = writer.prefix("DryRun");
    if let Some(var_591) = &input.dry_run {
        scope_590.boolean(*var_591);
    }
    #[allow(unused_mut)]let mut scope_592 = writer.prefix("ClientToken");
    if let Some(var_593) = &input.client_token {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]let mut scope_594 = writer.prefix("TagSpecification");
    if let Some(var_595) = &input.tag_specifications {
        let mut list_597 = scope_594.start_list(true, Some("item"));
        for item_596 in var_595 {
            #[allow(unused_mut)]let mut entry_598 = list_597.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_598, item_596)?;
        }
        list_597.finish();
    }
    #[allow(unused_mut)]let mut scope_599 = writer.prefix("SecurityGroupId");
    if let Some(var_600) = &input.security_group_ids {
        let mut list_602 = scope_599.start_list(true, Some("item"));
        for item_601 in var_600 {
            #[allow(unused_mut)]let mut entry_603 = list_602.entry();
            entry_603.string(item_601);
        }
        list_602.finish();
    }
    #[allow(unused_mut)]let mut scope_604 = writer.prefix("VpcId");
    if let Some(var_605) = &input.vpc_id {
        scope_604.string(var_605);
    }
    #[allow(unused_mut)]let mut scope_606 = writer.prefix("SelfServicePortal");
    if let Some(var_607) = &input.self_service_portal {
        scope_606.string(var_607.as_str());
    }
    #[allow(unused_mut)]let mut scope_608 = writer.prefix("ClientConnectOptions");
    if let Some(var_609) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(scope_608, var_609)?;
    }
    #[allow(unused_mut)]let mut scope_610 = writer.prefix("SessionTimeoutHours");
    if let Some(var_611) = &input.session_timeout_hours {
        scope_610.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_611).into()));
    }
    #[allow(unused_mut)]let mut scope_612 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_613) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(scope_612, var_613)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(input: &crate::input::CreateClientVpnRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_614 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_615) = &input.client_vpn_endpoint_id {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]let mut scope_616 = writer.prefix("DestinationCidrBlock");
    if let Some(var_617) = &input.destination_cidr_block {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]let mut scope_618 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_619) = &input.target_vpc_subnet_id {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]let mut scope_620 = writer.prefix("Description");
    if let Some(var_621) = &input.description {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]let mut scope_622 = writer.prefix("ClientToken");
    if let Some(var_623) = &input.client_token {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_cidr(input: &crate::input::CreateCoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_626 = writer.prefix("Cidr");
    if let Some(var_627) = &input.cidr {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]let mut scope_628 = writer.prefix("CoipPoolId");
    if let Some(var_629) = &input.coip_pool_id {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]let mut scope_630 = writer.prefix("DryRun");
    if let Some(var_631) = &input.dry_run {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_coip_pool(input: &crate::input::CreateCoipPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCoipPool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_632 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_633) = &input.local_gateway_route_table_id {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]let mut scope_634 = writer.prefix("TagSpecification");
    if let Some(var_635) = &input.tag_specifications {
        let mut list_637 = scope_634.start_list(true, Some("item"));
        for item_636 in var_635 {
            #[allow(unused_mut)]let mut entry_638 = list_637.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_638, item_636)?;
        }
        list_637.finish();
    }
    #[allow(unused_mut)]let mut scope_639 = writer.prefix("DryRun");
    if let Some(var_640) = &input.dry_run {
        scope_639.boolean(*var_640);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(input: &crate::input::CreateCustomerGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_641 = writer.prefix("BgpAsn");
    if let Some(var_642) = &input.bgp_asn {
        scope_641.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_642).into()));
    }
    #[allow(unused_mut)]let mut scope_643 = writer.prefix("PublicIp");
    if let Some(var_644) = &input.public_ip {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]let mut scope_645 = writer.prefix("CertificateArn");
    if let Some(var_646) = &input.certificate_arn {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]let mut scope_647 = writer.prefix("Type");
    if let Some(var_648) = &input.r#type {
        scope_647.string(var_648.as_str());
    }
    #[allow(unused_mut)]let mut scope_649 = writer.prefix("TagSpecification");
    if let Some(var_650) = &input.tag_specifications {
        let mut list_652 = scope_649.start_list(true, Some("item"));
        for item_651 in var_650 {
            #[allow(unused_mut)]let mut entry_653 = list_652.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_653, item_651)?;
        }
        list_652.finish();
    }
    #[allow(unused_mut)]let mut scope_654 = writer.prefix("DeviceName");
    if let Some(var_655) = &input.device_name {
        scope_654.string(var_655);
    }
    #[allow(unused_mut)]let mut scope_656 = writer.prefix("IpAddress");
    if let Some(var_657) = &input.ip_address {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]let mut scope_658 = writer.prefix("DryRun");
    if let Some(var_659) = &input.dry_run {
        scope_658.boolean(*var_659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(input: &crate::input::CreateDefaultSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_660 = writer.prefix("AvailabilityZone");
    if let Some(var_661) = &input.availability_zone {
        scope_660.string(var_661);
    }
    #[allow(unused_mut)]let mut scope_662 = writer.prefix("DryRun");
    if let Some(var_663) = &input.dry_run {
        scope_662.boolean(*var_663);
    }
    #[allow(unused_mut)]let mut scope_664 = writer.prefix("Ipv6Native");
    if let Some(var_665) = &input.ipv6_native {
        scope_664.boolean(*var_665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(input: &crate::input::CreateDefaultVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_666 = writer.prefix("DryRun");
    if let Some(var_667) = &input.dry_run {
        scope_666.boolean(*var_667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(input: &crate::input::CreateDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_668 = writer.prefix("DhcpConfiguration");
    if let Some(var_669) = &input.dhcp_configurations {
        let mut list_671 = scope_668.start_list(true, Some("item"));
        for item_670 in var_669 {
            #[allow(unused_mut)]let mut entry_672 = list_671.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(entry_672, item_670)?;
        }
        list_671.finish();
    }
    #[allow(unused_mut)]let mut scope_673 = writer.prefix("TagSpecification");
    if let Some(var_674) = &input.tag_specifications {
        let mut list_676 = scope_673.start_list(true, Some("item"));
        for item_675 in var_674 {
            #[allow(unused_mut)]let mut entry_677 = list_676.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_677, item_675)?;
        }
        list_676.finish();
    }
    #[allow(unused_mut)]let mut scope_678 = writer.prefix("DryRun");
    if let Some(var_679) = &input.dry_run {
        scope_678.boolean(*var_679);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(input: &crate::input::CreateEgressOnlyInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_680 = writer.prefix("ClientToken");
    if let Some(var_681) = &input.client_token {
        scope_680.string(var_681);
    }
    #[allow(unused_mut)]let mut scope_682 = writer.prefix("DryRun");
    if let Some(var_683) = &input.dry_run {
        scope_682.boolean(*var_683);
    }
    #[allow(unused_mut)]let mut scope_684 = writer.prefix("VpcId");
    if let Some(var_685) = &input.vpc_id {
        scope_684.string(var_685);
    }
    #[allow(unused_mut)]let mut scope_686 = writer.prefix("TagSpecification");
    if let Some(var_687) = &input.tag_specifications {
        let mut list_689 = scope_686.start_list(true, Some("item"));
        for item_688 in var_687 {
            #[allow(unused_mut)]let mut entry_690 = list_689.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_690, item_688)?;
        }
        list_689.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(input: &crate::input::CreateFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_691 = writer.prefix("DryRun");
    if let Some(var_692) = &input.dry_run {
        scope_691.boolean(*var_692);
    }
    #[allow(unused_mut)]let mut scope_693 = writer.prefix("ClientToken");
    if let Some(var_694) = &input.client_token {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]let mut scope_695 = writer.prefix("SpotOptions");
    if let Some(var_696) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_695, var_696)?;
    }
    #[allow(unused_mut)]let mut scope_697 = writer.prefix("OnDemandOptions");
    if let Some(var_698) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(scope_697, var_698)?;
    }
    #[allow(unused_mut)]let mut scope_699 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_700) = &input.excess_capacity_termination_policy {
        scope_699.string(var_700.as_str());
    }
    #[allow(unused_mut)]let mut scope_701 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_702) = &input.launch_template_configs {
        let mut list_704 = scope_701.start_list(true, Some("item"));
        for item_703 in var_702 {
            #[allow(unused_mut)]let mut entry_705 = list_704.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(entry_705, item_703)?;
        }
        list_704.finish();
    }
    #[allow(unused_mut)]let mut scope_706 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_707) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(scope_706, var_707)?;
    }
    #[allow(unused_mut)]let mut scope_708 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_709) = &input.terminate_instances_with_expiration {
        scope_708.boolean(*var_709);
    }
    #[allow(unused_mut)]let mut scope_710 = writer.prefix("Type");
    if let Some(var_711) = &input.r#type {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]let mut scope_712 = writer.prefix("ValidFrom");
    if let Some(var_713) = &input.valid_from {
        scope_712.date_time(var_713, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_714 = writer.prefix("ValidUntil");
    if let Some(var_715) = &input.valid_until {
        scope_714.date_time(var_715, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_716 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_717) = &input.replace_unhealthy_instances {
        scope_716.boolean(*var_717);
    }
    #[allow(unused_mut)]let mut scope_718 = writer.prefix("TagSpecification");
    if let Some(var_719) = &input.tag_specifications {
        let mut list_721 = scope_718.start_list(true, Some("item"));
        for item_720 in var_719 {
            #[allow(unused_mut)]let mut entry_722 = list_721.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_722, item_720)?;
        }
        list_721.finish();
    }
    #[allow(unused_mut)]let mut scope_723 = writer.prefix("Context");
    if let Some(var_724) = &input.context {
        scope_723.string(var_724);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(input: &crate::input::CreateFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_725 = writer.prefix("DryRun");
    if let Some(var_726) = &input.dry_run {
        scope_725.boolean(*var_726);
    }
    #[allow(unused_mut)]let mut scope_727 = writer.prefix("ClientToken");
    if let Some(var_728) = &input.client_token {
        scope_727.string(var_728);
    }
    #[allow(unused_mut)]let mut scope_729 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_730) = &input.deliver_logs_permission_arn {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]let mut scope_731 = writer.prefix("DeliverCrossAccountRole");
    if let Some(var_732) = &input.deliver_cross_account_role {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]let mut scope_733 = writer.prefix("LogGroupName");
    if let Some(var_734) = &input.log_group_name {
        scope_733.string(var_734);
    }
    #[allow(unused_mut)]let mut scope_735 = writer.prefix("ResourceId");
    if let Some(var_736) = &input.resource_ids {
        let mut list_738 = scope_735.start_list(true, Some("item"));
        for item_737 in var_736 {
            #[allow(unused_mut)]let mut entry_739 = list_738.entry();
            entry_739.string(item_737);
        }
        list_738.finish();
    }
    #[allow(unused_mut)]let mut scope_740 = writer.prefix("ResourceType");
    if let Some(var_741) = &input.resource_type {
        scope_740.string(var_741.as_str());
    }
    #[allow(unused_mut)]let mut scope_742 = writer.prefix("TrafficType");
    if let Some(var_743) = &input.traffic_type {
        scope_742.string(var_743.as_str());
    }
    #[allow(unused_mut)]let mut scope_744 = writer.prefix("LogDestinationType");
    if let Some(var_745) = &input.log_destination_type {
        scope_744.string(var_745.as_str());
    }
    #[allow(unused_mut)]let mut scope_746 = writer.prefix("LogDestination");
    if let Some(var_747) = &input.log_destination {
        scope_746.string(var_747);
    }
    #[allow(unused_mut)]let mut scope_748 = writer.prefix("LogFormat");
    if let Some(var_749) = &input.log_format {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]let mut scope_750 = writer.prefix("TagSpecification");
    if let Some(var_751) = &input.tag_specifications {
        let mut list_753 = scope_750.start_list(true, Some("item"));
        for item_752 in var_751 {
            #[allow(unused_mut)]let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_754, item_752)?;
        }
        list_753.finish();
    }
    #[allow(unused_mut)]let mut scope_755 = writer.prefix("MaxAggregationInterval");
    if let Some(var_756) = &input.max_aggregation_interval {
        scope_755.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_756).into()));
    }
    #[allow(unused_mut)]let mut scope_757 = writer.prefix("DestinationOptions");
    if let Some(var_758) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(scope_757, var_758)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(input: &crate::input::CreateFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_759 = writer.prefix("DryRun");
    if let Some(var_760) = &input.dry_run {
        scope_759.boolean(*var_760);
    }
    #[allow(unused_mut)]let mut scope_761 = writer.prefix("InputStorageLocation");
    if let Some(var_762) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_761, var_762)?;
    }
    #[allow(unused_mut)]let mut scope_763 = writer.prefix("LogsStorageLocation");
    if let Some(var_764) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_763, var_764)?;
    }
    #[allow(unused_mut)]let mut scope_765 = writer.prefix("Description");
    if let Some(var_766) = &input.description {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]let mut scope_767 = writer.prefix("Name");
    if let Some(var_768) = &input.name {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]let mut scope_769 = writer.prefix("ClientToken");
    if let Some(var_770) = &input.client_token {
        scope_769.string(var_770);
    }
    #[allow(unused_mut)]let mut scope_771 = writer.prefix("TagSpecification");
    if let Some(var_772) = &input.tag_specifications {
        let mut list_774 = scope_771.start_list(true, Some("item"));
        for item_773 in var_772 {
            #[allow(unused_mut)]let mut entry_775 = list_774.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_775, item_773)?;
        }
        list_774.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(input: &crate::input::CreateImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_776 = writer.prefix("BlockDeviceMapping");
    if let Some(var_777) = &input.block_device_mappings {
        let mut list_779 = scope_776.start_list(true, Some("BlockDeviceMapping"));
        for item_778 in var_777 {
            #[allow(unused_mut)]let mut entry_780 = list_779.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_780, item_778)?;
        }
        list_779.finish();
    }
    #[allow(unused_mut)]let mut scope_781 = writer.prefix("Description");
    if let Some(var_782) = &input.description {
        scope_781.string(var_782);
    }
    #[allow(unused_mut)]let mut scope_783 = writer.prefix("DryRun");
    if let Some(var_784) = &input.dry_run {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]let mut scope_785 = writer.prefix("InstanceId");
    if let Some(var_786) = &input.instance_id {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]let mut scope_787 = writer.prefix("Name");
    if let Some(var_788) = &input.name {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]let mut scope_789 = writer.prefix("NoReboot");
    if let Some(var_790) = &input.no_reboot {
        scope_789.boolean(*var_790);
    }
    #[allow(unused_mut)]let mut scope_791 = writer.prefix("TagSpecification");
    if let Some(var_792) = &input.tag_specifications {
        let mut list_794 = scope_791.start_list(true, Some("item"));
        for item_793 in var_792 {
            #[allow(unused_mut)]let mut entry_795 = list_794.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_795, item_793)?;
        }
        list_794.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(input: &crate::input::CreateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]let mut scope_796 = writer.prefix("DryRun");
    if let Some(var_797) = &input.dry_run {
        scope_796.boolean(*var_797);
    }
    #[allow(unused_mut)]let mut scope_798 = writer.prefix("Name");
    if let Some(var_799) = &input.name {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]let mut scope_800 = writer.prefix("TimeRange");
    if let Some(var_801) = &input.time_ranges {
        let mut list_803 = scope_800.start_list(true, None);
        for item_802 in var_801 {
            #[allow(unused_mut)]let mut entry_804 = list_803.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_804, item_802)?;
        }
        list_803.finish();
    }
    #[allow(unused_mut)]let mut scope_805 = writer.prefix("CronExpression");
    if let Some(var_806) = &input.cron_expression {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]let mut scope_807 = writer.prefix("TagSpecification");
    if let Some(var_808) = &input.tag_specifications {
        let mut list_810 = scope_807.start_list(true, Some("item"));
        for item_809 in var_808 {
            #[allow(unused_mut)]let mut entry_811 = list_810.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_811, item_809)?;
        }
        list_810.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(input: &crate::input::CreateInstanceExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_812 = writer.prefix("Description");
    if let Some(var_813) = &input.description {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]let mut scope_814 = writer.prefix("ExportToS3");
    if let Some(var_815) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(scope_814, var_815)?;
    }
    #[allow(unused_mut)]let mut scope_816 = writer.prefix("InstanceId");
    if let Some(var_817) = &input.instance_id {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]let mut scope_818 = writer.prefix("TargetEnvironment");
    if let Some(var_819) = &input.target_environment {
        scope_818.string(var_819.as_str());
    }
    #[allow(unused_mut)]let mut scope_820 = writer.prefix("TagSpecification");
    if let Some(var_821) = &input.tag_specifications {
        let mut list_823 = scope_820.start_list(true, Some("item"));
        for item_822 in var_821 {
            #[allow(unused_mut)]let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_824, item_822)?;
        }
        list_823.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(input: &crate::input::CreateInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_825 = writer.prefix("TagSpecification");
    if let Some(var_826) = &input.tag_specifications {
        let mut list_828 = scope_825.start_list(true, Some("item"));
        for item_827 in var_826 {
            #[allow(unused_mut)]let mut entry_829 = list_828.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_829, item_827)?;
        }
        list_828.finish();
    }
    #[allow(unused_mut)]let mut scope_830 = writer.prefix("DryRun");
    if let Some(var_831) = &input.dry_run {
        scope_830.boolean(*var_831);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(input: &crate::input::CreateIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]let mut scope_832 = writer.prefix("DryRun");
    if let Some(var_833) = &input.dry_run {
        scope_832.boolean(*var_833);
    }
    #[allow(unused_mut)]let mut scope_834 = writer.prefix("Description");
    if let Some(var_835) = &input.description {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]let mut scope_836 = writer.prefix("OperatingRegion");
    if let Some(var_837) = &input.operating_regions {
        let mut list_839 = scope_836.start_list(true, None);
        for item_838 in var_837 {
            #[allow(unused_mut)]let mut entry_840 = list_839.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(entry_840, item_838)?;
        }
        list_839.finish();
    }
    #[allow(unused_mut)]let mut scope_841 = writer.prefix("TagSpecification");
    if let Some(var_842) = &input.tag_specifications {
        let mut list_844 = scope_841.start_list(true, Some("item"));
        for item_843 in var_842 {
            #[allow(unused_mut)]let mut entry_845 = list_844.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_845, item_843)?;
        }
        list_844.finish();
    }
    #[allow(unused_mut)]let mut scope_846 = writer.prefix("ClientToken");
    if let Some(var_847) = &input.client_token {
        scope_846.string(var_847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(input: &crate::input::CreateIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_848 = writer.prefix("DryRun");
    if let Some(var_849) = &input.dry_run {
        scope_848.boolean(*var_849);
    }
    #[allow(unused_mut)]let mut scope_850 = writer.prefix("IpamScopeId");
    if let Some(var_851) = &input.ipam_scope_id {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]let mut scope_852 = writer.prefix("Locale");
    if let Some(var_853) = &input.locale {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]let mut scope_854 = writer.prefix("SourceIpamPoolId");
    if let Some(var_855) = &input.source_ipam_pool_id {
        scope_854.string(var_855);
    }
    #[allow(unused_mut)]let mut scope_856 = writer.prefix("Description");
    if let Some(var_857) = &input.description {
        scope_856.string(var_857);
    }
    #[allow(unused_mut)]let mut scope_858 = writer.prefix("AddressFamily");
    if let Some(var_859) = &input.address_family {
        scope_858.string(var_859.as_str());
    }
    #[allow(unused_mut)]let mut scope_860 = writer.prefix("AutoImport");
    if let Some(var_861) = &input.auto_import {
        scope_860.boolean(*var_861);
    }
    #[allow(unused_mut)]let mut scope_862 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_863) = &input.publicly_advertisable {
        scope_862.boolean(*var_863);
    }
    #[allow(unused_mut)]let mut scope_864 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_865) = &input.allocation_min_netmask_length {
        scope_864.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_865).into()));
    }
    #[allow(unused_mut)]let mut scope_866 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_867) = &input.allocation_max_netmask_length {
        scope_866.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_867).into()));
    }
    #[allow(unused_mut)]let mut scope_868 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_869) = &input.allocation_default_netmask_length {
        scope_868.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_869).into()));
    }
    #[allow(unused_mut)]let mut scope_870 = writer.prefix("AllocationResourceTag");
    if let Some(var_871) = &input.allocation_resource_tags {
        let mut list_873 = scope_870.start_list(true, Some("item"));
        for item_872 in var_871 {
            #[allow(unused_mut)]let mut entry_874 = list_873.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_874, item_872)?;
        }
        list_873.finish();
    }
    #[allow(unused_mut)]let mut scope_875 = writer.prefix("TagSpecification");
    if let Some(var_876) = &input.tag_specifications {
        let mut list_878 = scope_875.start_list(true, Some("item"));
        for item_877 in var_876 {
            #[allow(unused_mut)]let mut entry_879 = list_878.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_879, item_877)?;
        }
        list_878.finish();
    }
    #[allow(unused_mut)]let mut scope_880 = writer.prefix("ClientToken");
    if let Some(var_881) = &input.client_token {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]let mut scope_882 = writer.prefix("AwsService");
    if let Some(var_883) = &input.aws_service {
        scope_882.string(var_883.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(input: &crate::input::CreateIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]let mut scope_884 = writer.prefix("DryRun");
    if let Some(var_885) = &input.dry_run {
        scope_884.boolean(*var_885);
    }
    #[allow(unused_mut)]let mut scope_886 = writer.prefix("IpamId");
    if let Some(var_887) = &input.ipam_id {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]let mut scope_888 = writer.prefix("Description");
    if let Some(var_889) = &input.description {
        scope_888.string(var_889);
    }
    #[allow(unused_mut)]let mut scope_890 = writer.prefix("TagSpecification");
    if let Some(var_891) = &input.tag_specifications {
        let mut list_893 = scope_890.start_list(true, Some("item"));
        for item_892 in var_891 {
            #[allow(unused_mut)]let mut entry_894 = list_893.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_894, item_892)?;
        }
        list_893.finish();
    }
    #[allow(unused_mut)]let mut scope_895 = writer.prefix("ClientToken");
    if let Some(var_896) = &input.client_token {
        scope_895.string(var_896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(input: &crate::input::CreateKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]let mut scope_897 = writer.prefix("KeyName");
    if let Some(var_898) = &input.key_name {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]let mut scope_899 = writer.prefix("DryRun");
    if let Some(var_900) = &input.dry_run {
        scope_899.boolean(*var_900);
    }
    #[allow(unused_mut)]let mut scope_901 = writer.prefix("KeyType");
    if let Some(var_902) = &input.key_type {
        scope_901.string(var_902.as_str());
    }
    #[allow(unused_mut)]let mut scope_903 = writer.prefix("TagSpecification");
    if let Some(var_904) = &input.tag_specifications {
        let mut list_906 = scope_903.start_list(true, Some("item"));
        for item_905 in var_904 {
            #[allow(unused_mut)]let mut entry_907 = list_906.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_907, item_905)?;
        }
        list_906.finish();
    }
    #[allow(unused_mut)]let mut scope_908 = writer.prefix("KeyFormat");
    if let Some(var_909) = &input.key_format {
        scope_908.string(var_909.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(input: &crate::input::CreateLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]let mut scope_910 = writer.prefix("DryRun");
    if let Some(var_911) = &input.dry_run {
        scope_910.boolean(*var_911);
    }
    #[allow(unused_mut)]let mut scope_912 = writer.prefix("ClientToken");
    if let Some(var_913) = &input.client_token {
        scope_912.string(var_913);
    }
    #[allow(unused_mut)]let mut scope_914 = writer.prefix("LaunchTemplateName");
    if let Some(var_915) = &input.launch_template_name {
        scope_914.string(var_915);
    }
    #[allow(unused_mut)]let mut scope_916 = writer.prefix("VersionDescription");
    if let Some(var_917) = &input.version_description {
        scope_916.string(var_917);
    }
    #[allow(unused_mut)]let mut scope_918 = writer.prefix("LaunchTemplateData");
    if let Some(var_919) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(scope_918, var_919)?;
    }
    #[allow(unused_mut)]let mut scope_920 = writer.prefix("TagSpecification");
    if let Some(var_921) = &input.tag_specifications {
        let mut list_923 = scope_920.start_list(true, Some("item"));
        for item_922 in var_921 {
            #[allow(unused_mut)]let mut entry_924 = list_923.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_924, item_922)?;
        }
        list_923.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(input: &crate::input::CreateLaunchTemplateVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]let mut scope_925 = writer.prefix("DryRun");
    if let Some(var_926) = &input.dry_run {
        scope_925.boolean(*var_926);
    }
    #[allow(unused_mut)]let mut scope_927 = writer.prefix("ClientToken");
    if let Some(var_928) = &input.client_token {
        scope_927.string(var_928);
    }
    #[allow(unused_mut)]let mut scope_929 = writer.prefix("LaunchTemplateId");
    if let Some(var_930) = &input.launch_template_id {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]let mut scope_931 = writer.prefix("LaunchTemplateName");
    if let Some(var_932) = &input.launch_template_name {
        scope_931.string(var_932);
    }
    #[allow(unused_mut)]let mut scope_933 = writer.prefix("SourceVersion");
    if let Some(var_934) = &input.source_version {
        scope_933.string(var_934);
    }
    #[allow(unused_mut)]let mut scope_935 = writer.prefix("VersionDescription");
    if let Some(var_936) = &input.version_description {
        scope_935.string(var_936);
    }
    #[allow(unused_mut)]let mut scope_937 = writer.prefix("LaunchTemplateData");
    if let Some(var_938) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(scope_937, var_938)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(input: &crate::input::CreateLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_939 = writer.prefix("DestinationCidrBlock");
    if let Some(var_940) = &input.destination_cidr_block {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]let mut scope_941 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_942) = &input.local_gateway_route_table_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]let mut scope_943 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_944) = &input.local_gateway_virtual_interface_group_id {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]let mut scope_945 = writer.prefix("DryRun");
    if let Some(var_946) = &input.dry_run {
        scope_945.boolean(*var_946);
    }
    #[allow(unused_mut)]let mut scope_947 = writer.prefix("NetworkInterfaceId");
    if let Some(var_948) = &input.network_interface_id {
        scope_947.string(var_948);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table(input: &crate::input::CreateLocalGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_949 = writer.prefix("LocalGatewayId");
    if let Some(var_950) = &input.local_gateway_id {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]let mut scope_951 = writer.prefix("Mode");
    if let Some(var_952) = &input.mode {
        scope_951.string(var_952.as_str());
    }
    #[allow(unused_mut)]let mut scope_953 = writer.prefix("TagSpecification");
    if let Some(var_954) = &input.tag_specifications {
        let mut list_956 = scope_953.start_list(true, Some("item"));
        for item_955 in var_954 {
            #[allow(unused_mut)]let mut entry_957 = list_956.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_957, item_955)?;
        }
        list_956.finish();
    }
    #[allow(unused_mut)]let mut scope_958 = writer.prefix("DryRun");
    if let Some(var_959) = &input.dry_run {
        scope_958.boolean(*var_959);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_virtual_interface_group_association(input: &crate::input::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_960 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_961) = &input.local_gateway_route_table_id {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]let mut scope_962 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_963) = &input.local_gateway_virtual_interface_group_id {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]let mut scope_964 = writer.prefix("TagSpecification");
    if let Some(var_965) = &input.tag_specifications {
        let mut list_967 = scope_964.start_list(true, Some("item"));
        for item_966 in var_965 {
            #[allow(unused_mut)]let mut entry_968 = list_967.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_968, item_966)?;
        }
        list_967.finish();
    }
    #[allow(unused_mut)]let mut scope_969 = writer.prefix("DryRun");
    if let Some(var_970) = &input.dry_run {
        scope_969.boolean(*var_970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRouteTableVpcAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_971 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_972) = &input.local_gateway_route_table_id {
        scope_971.string(var_972);
    }
    #[allow(unused_mut)]let mut scope_973 = writer.prefix("VpcId");
    if let Some(var_974) = &input.vpc_id {
        scope_973.string(var_974);
    }
    #[allow(unused_mut)]let mut scope_975 = writer.prefix("TagSpecification");
    if let Some(var_976) = &input.tag_specifications {
        let mut list_978 = scope_975.start_list(true, Some("item"));
        for item_977 in var_976 {
            #[allow(unused_mut)]let mut entry_979 = list_978.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_979, item_977)?;
        }
        list_978.finish();
    }
    #[allow(unused_mut)]let mut scope_980 = writer.prefix("DryRun");
    if let Some(var_981) = &input.dry_run {
        scope_980.boolean(*var_981);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(input: &crate::input::CreateManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]let mut scope_982 = writer.prefix("DryRun");
    if let Some(var_983) = &input.dry_run {
        scope_982.boolean(*var_983);
    }
    #[allow(unused_mut)]let mut scope_984 = writer.prefix("PrefixListName");
    if let Some(var_985) = &input.prefix_list_name {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]let mut scope_986 = writer.prefix("Entry");
    if let Some(var_987) = &input.entries {
        let mut list_989 = scope_986.start_list(true, None);
        for item_988 in var_987 {
            #[allow(unused_mut)]let mut entry_990 = list_989.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(entry_990, item_988)?;
        }
        list_989.finish();
    }
    #[allow(unused_mut)]let mut scope_991 = writer.prefix("MaxEntries");
    if let Some(var_992) = &input.max_entries {
        scope_991.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_992).into()));
    }
    #[allow(unused_mut)]let mut scope_993 = writer.prefix("TagSpecification");
    if let Some(var_994) = &input.tag_specifications {
        let mut list_996 = scope_993.start_list(true, Some("item"));
        for item_995 in var_994 {
            #[allow(unused_mut)]let mut entry_997 = list_996.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_997, item_995)?;
        }
        list_996.finish();
    }
    #[allow(unused_mut)]let mut scope_998 = writer.prefix("AddressFamily");
    if let Some(var_999) = &input.address_family {
        scope_998.string(var_999);
    }
    #[allow(unused_mut)]let mut scope_1000 = writer.prefix("ClientToken");
    if let Some(var_1001) = &input.client_token {
        scope_1000.string(var_1001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(input: &crate::input::CreateNatGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1002 = writer.prefix("AllocationId");
    if let Some(var_1003) = &input.allocation_id {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]let mut scope_1004 = writer.prefix("ClientToken");
    if let Some(var_1005) = &input.client_token {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]let mut scope_1006 = writer.prefix("DryRun");
    if let Some(var_1007) = &input.dry_run {
        scope_1006.boolean(*var_1007);
    }
    #[allow(unused_mut)]let mut scope_1008 = writer.prefix("SubnetId");
    if let Some(var_1009) = &input.subnet_id {
        scope_1008.string(var_1009);
    }
    #[allow(unused_mut)]let mut scope_1010 = writer.prefix("TagSpecification");
    if let Some(var_1011) = &input.tag_specifications {
        let mut list_1013 = scope_1010.start_list(true, Some("item"));
        for item_1012 in var_1011 {
            #[allow(unused_mut)]let mut entry_1014 = list_1013.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1014, item_1012)?;
        }
        list_1013.finish();
    }
    #[allow(unused_mut)]let mut scope_1015 = writer.prefix("ConnectivityType");
    if let Some(var_1016) = &input.connectivity_type {
        scope_1015.string(var_1016.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(input: &crate::input::CreateNetworkAclInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1017 = writer.prefix("DryRun");
    if let Some(var_1018) = &input.dry_run {
        scope_1017.boolean(*var_1018);
    }
    #[allow(unused_mut)]let mut scope_1019 = writer.prefix("VpcId");
    if let Some(var_1020) = &input.vpc_id {
        scope_1019.string(var_1020);
    }
    #[allow(unused_mut)]let mut scope_1021 = writer.prefix("TagSpecification");
    if let Some(var_1022) = &input.tag_specifications {
        let mut list_1024 = scope_1021.start_list(true, Some("item"));
        for item_1023 in var_1022 {
            #[allow(unused_mut)]let mut entry_1025 = list_1024.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1025, item_1023)?;
        }
        list_1024.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(input: &crate::input::CreateNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1026 = writer.prefix("CidrBlock");
    if let Some(var_1027) = &input.cidr_block {
        scope_1026.string(var_1027);
    }
    #[allow(unused_mut)]let mut scope_1028 = writer.prefix("DryRun");
    if let Some(var_1029) = &input.dry_run {
        scope_1028.boolean(*var_1029);
    }
    #[allow(unused_mut)]let mut scope_1030 = writer.prefix("Egress");
    if let Some(var_1031) = &input.egress {
        scope_1030.boolean(*var_1031);
    }
    #[allow(unused_mut)]let mut scope_1032 = writer.prefix("Icmp");
    if let Some(var_1033) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_1032, var_1033)?;
    }
    #[allow(unused_mut)]let mut scope_1034 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1035) = &input.ipv6_cidr_block {
        scope_1034.string(var_1035);
    }
    #[allow(unused_mut)]let mut scope_1036 = writer.prefix("NetworkAclId");
    if let Some(var_1037) = &input.network_acl_id {
        scope_1036.string(var_1037);
    }
    #[allow(unused_mut)]let mut scope_1038 = writer.prefix("PortRange");
    if let Some(var_1039) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_1038, var_1039)?;
    }
    #[allow(unused_mut)]let mut scope_1040 = writer.prefix("Protocol");
    if let Some(var_1041) = &input.protocol {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]let mut scope_1042 = writer.prefix("RuleAction");
    if let Some(var_1043) = &input.rule_action {
        scope_1042.string(var_1043.as_str());
    }
    #[allow(unused_mut)]let mut scope_1044 = writer.prefix("RuleNumber");
    if let Some(var_1045) = &input.rule_number {
        scope_1044.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1045).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(input: &crate::input::CreateNetworkInsightsAccessScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsAccessScope", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1046 = writer.prefix("MatchPath");
    if let Some(var_1047) = &input.match_paths {
        let mut list_1049 = scope_1046.start_list(true, Some("item"));
        for item_1048 in var_1047 {
            #[allow(unused_mut)]let mut entry_1050 = list_1049.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(entry_1050, item_1048)?;
        }
        list_1049.finish();
    }
    #[allow(unused_mut)]let mut scope_1051 = writer.prefix("ExcludePath");
    if let Some(var_1052) = &input.exclude_paths {
        let mut list_1054 = scope_1051.start_list(true, Some("item"));
        for item_1053 in var_1052 {
            #[allow(unused_mut)]let mut entry_1055 = list_1054.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(entry_1055, item_1053)?;
        }
        list_1054.finish();
    }
    #[allow(unused_mut)]let mut scope_1056 = writer.prefix("ClientToken");
    if let Some(var_1057) = &input.client_token {
        scope_1056.string(var_1057);
    }
    #[allow(unused_mut)]let mut scope_1058 = writer.prefix("TagSpecification");
    if let Some(var_1059) = &input.tag_specifications {
        let mut list_1061 = scope_1058.start_list(true, Some("item"));
        for item_1060 in var_1059 {
            #[allow(unused_mut)]let mut entry_1062 = list_1061.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1062, item_1060)?;
        }
        list_1061.finish();
    }
    #[allow(unused_mut)]let mut scope_1063 = writer.prefix("DryRun");
    if let Some(var_1064) = &input.dry_run {
        scope_1063.boolean(*var_1064);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(input: &crate::input::CreateNetworkInsightsPathInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1065 = writer.prefix("SourceIp");
    if let Some(var_1066) = &input.source_ip {
        scope_1065.string(var_1066);
    }
    #[allow(unused_mut)]let mut scope_1067 = writer.prefix("DestinationIp");
    if let Some(var_1068) = &input.destination_ip {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]let mut scope_1069 = writer.prefix("Source");
    if let Some(var_1070) = &input.source {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]let mut scope_1071 = writer.prefix("Destination");
    if let Some(var_1072) = &input.destination {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]let mut scope_1073 = writer.prefix("Protocol");
    if let Some(var_1074) = &input.protocol {
        scope_1073.string(var_1074.as_str());
    }
    #[allow(unused_mut)]let mut scope_1075 = writer.prefix("DestinationPort");
    if let Some(var_1076) = &input.destination_port {
        scope_1075.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1076).into()));
    }
    #[allow(unused_mut)]let mut scope_1077 = writer.prefix("TagSpecification");
    if let Some(var_1078) = &input.tag_specifications {
        let mut list_1080 = scope_1077.start_list(true, Some("item"));
        for item_1079 in var_1078 {
            #[allow(unused_mut)]let mut entry_1081 = list_1080.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1081, item_1079)?;
        }
        list_1080.finish();
    }
    #[allow(unused_mut)]let mut scope_1082 = writer.prefix("DryRun");
    if let Some(var_1083) = &input.dry_run {
        scope_1082.boolean(*var_1083);
    }
    #[allow(unused_mut)]let mut scope_1084 = writer.prefix("ClientToken");
    if let Some(var_1085) = &input.client_token {
        scope_1084.string(var_1085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(input: &crate::input::CreateNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1086 = writer.prefix("Description");
    if let Some(var_1087) = &input.description {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]let mut scope_1088 = writer.prefix("DryRun");
    if let Some(var_1089) = &input.dry_run {
        scope_1088.boolean(*var_1089);
    }
    #[allow(unused_mut)]let mut scope_1090 = writer.prefix("SecurityGroupId");
    if let Some(var_1091) = &input.groups {
        let mut list_1093 = scope_1090.start_list(true, Some("SecurityGroupId"));
        for item_1092 in var_1091 {
            #[allow(unused_mut)]let mut entry_1094 = list_1093.entry();
            entry_1094.string(item_1092);
        }
        list_1093.finish();
    }
    #[allow(unused_mut)]let mut scope_1095 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1096) = &input.ipv6_address_count {
        scope_1095.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1096).into()));
    }
    #[allow(unused_mut)]let mut scope_1097 = writer.prefix("Ipv6Addresses");
    if let Some(var_1098) = &input.ipv6_addresses {
        let mut list_1100 = scope_1097.start_list(true, Some("item"));
        for item_1099 in var_1098 {
            #[allow(unused_mut)]let mut entry_1101 = list_1100.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_1101, item_1099)?;
        }
        list_1100.finish();
    }
    #[allow(unused_mut)]let mut scope_1102 = writer.prefix("PrivateIpAddress");
    if let Some(var_1103) = &input.private_ip_address {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]let mut scope_1104 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1105) = &input.private_ip_addresses {
        let mut list_1107 = scope_1104.start_list(true, Some("item"));
        for item_1106 in var_1105 {
            #[allow(unused_mut)]let mut entry_1108 = list_1107.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_1108, item_1106)?;
        }
        list_1107.finish();
    }
    #[allow(unused_mut)]let mut scope_1109 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1110) = &input.secondary_private_ip_address_count {
        scope_1109.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1110).into()));
    }
    #[allow(unused_mut)]let mut scope_1111 = writer.prefix("Ipv4Prefix");
    if let Some(var_1112) = &input.ipv4_prefixes {
        let mut list_1114 = scope_1111.start_list(true, Some("item"));
        for item_1113 in var_1112 {
            #[allow(unused_mut)]let mut entry_1115 = list_1114.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_1115, item_1113)?;
        }
        list_1114.finish();
    }
    #[allow(unused_mut)]let mut scope_1116 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1117) = &input.ipv4_prefix_count {
        scope_1116.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1117).into()));
    }
    #[allow(unused_mut)]let mut scope_1118 = writer.prefix("Ipv6Prefix");
    if let Some(var_1119) = &input.ipv6_prefixes {
        let mut list_1121 = scope_1118.start_list(true, Some("item"));
        for item_1120 in var_1119 {
            #[allow(unused_mut)]let mut entry_1122 = list_1121.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_1122, item_1120)?;
        }
        list_1121.finish();
    }
    #[allow(unused_mut)]let mut scope_1123 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1124) = &input.ipv6_prefix_count {
        scope_1123.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1124).into()));
    }
    #[allow(unused_mut)]let mut scope_1125 = writer.prefix("InterfaceType");
    if let Some(var_1126) = &input.interface_type {
        scope_1125.string(var_1126.as_str());
    }
    #[allow(unused_mut)]let mut scope_1127 = writer.prefix("SubnetId");
    if let Some(var_1128) = &input.subnet_id {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]let mut scope_1129 = writer.prefix("TagSpecification");
    if let Some(var_1130) = &input.tag_specifications {
        let mut list_1132 = scope_1129.start_list(true, Some("item"));
        for item_1131 in var_1130 {
            #[allow(unused_mut)]let mut entry_1133 = list_1132.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1133, item_1131)?;
        }
        list_1132.finish();
    }
    #[allow(unused_mut)]let mut scope_1134 = writer.prefix("ClientToken");
    if let Some(var_1135) = &input.client_token {
        scope_1134.string(var_1135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(input: &crate::input::CreateNetworkInterfacePermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1136 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1137) = &input.network_interface_id {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]let mut scope_1138 = writer.prefix("AwsAccountId");
    if let Some(var_1139) = &input.aws_account_id {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]let mut scope_1140 = writer.prefix("AwsService");
    if let Some(var_1141) = &input.aws_service {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]let mut scope_1142 = writer.prefix("Permission");
    if let Some(var_1143) = &input.permission {
        scope_1142.string(var_1143.as_str());
    }
    #[allow(unused_mut)]let mut scope_1144 = writer.prefix("DryRun");
    if let Some(var_1145) = &input.dry_run {
        scope_1144.boolean(*var_1145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(input: &crate::input::CreatePlacementGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1146 = writer.prefix("DryRun");
    if let Some(var_1147) = &input.dry_run {
        scope_1146.boolean(*var_1147);
    }
    #[allow(unused_mut)]let mut scope_1148 = writer.prefix("GroupName");
    if let Some(var_1149) = &input.group_name {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]let mut scope_1150 = writer.prefix("Strategy");
    if let Some(var_1151) = &input.strategy {
        scope_1150.string(var_1151.as_str());
    }
    #[allow(unused_mut)]let mut scope_1152 = writer.prefix("PartitionCount");
    if let Some(var_1153) = &input.partition_count {
        scope_1152.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1153).into()));
    }
    #[allow(unused_mut)]let mut scope_1154 = writer.prefix("TagSpecification");
    if let Some(var_1155) = &input.tag_specifications {
        let mut list_1157 = scope_1154.start_list(true, Some("item"));
        for item_1156 in var_1155 {
            #[allow(unused_mut)]let mut entry_1158 = list_1157.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1158, item_1156)?;
        }
        list_1157.finish();
    }
    #[allow(unused_mut)]let mut scope_1159 = writer.prefix("SpreadLevel");
    if let Some(var_1160) = &input.spread_level {
        scope_1159.string(var_1160.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(input: &crate::input::CreatePublicIpv4PoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1161 = writer.prefix("DryRun");
    if let Some(var_1162) = &input.dry_run {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]let mut scope_1163 = writer.prefix("TagSpecification");
    if let Some(var_1164) = &input.tag_specifications {
        let mut list_1166 = scope_1163.start_list(true, Some("item"));
        for item_1165 in var_1164 {
            #[allow(unused_mut)]let mut entry_1167 = list_1166.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1167, item_1165)?;
        }
        list_1166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(input: &crate::input::CreateReplaceRootVolumeTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1168 = writer.prefix("InstanceId");
    if let Some(var_1169) = &input.instance_id {
        scope_1168.string(var_1169);
    }
    #[allow(unused_mut)]let mut scope_1170 = writer.prefix("SnapshotId");
    if let Some(var_1171) = &input.snapshot_id {
        scope_1170.string(var_1171);
    }
    #[allow(unused_mut)]let mut scope_1172 = writer.prefix("ClientToken");
    if let Some(var_1173) = &input.client_token {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]let mut scope_1174 = writer.prefix("DryRun");
    if let Some(var_1175) = &input.dry_run {
        scope_1174.boolean(*var_1175);
    }
    #[allow(unused_mut)]let mut scope_1176 = writer.prefix("TagSpecification");
    if let Some(var_1177) = &input.tag_specifications {
        let mut list_1179 = scope_1176.start_list(true, Some("item"));
        for item_1178 in var_1177 {
            #[allow(unused_mut)]let mut entry_1180 = list_1179.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1180, item_1178)?;
        }
        list_1179.finish();
    }
    #[allow(unused_mut)]let mut scope_1181 = writer.prefix("ImageId");
    if let Some(var_1182) = &input.image_id {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]let mut scope_1183 = writer.prefix("DeleteReplacedRootVolume");
    if let Some(var_1184) = &input.delete_replaced_root_volume {
        scope_1183.boolean(*var_1184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(input: &crate::input::CreateReservedInstancesListingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateReservedInstancesListing", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1185 = writer.prefix("ClientToken");
    if let Some(var_1186) = &input.client_token {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]let mut scope_1187 = writer.prefix("InstanceCount");
    if let Some(var_1188) = &input.instance_count {
        scope_1187.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1188).into()));
    }
    #[allow(unused_mut)]let mut scope_1189 = writer.prefix("PriceSchedules");
    if let Some(var_1190) = &input.price_schedules {
        let mut list_1192 = scope_1189.start_list(true, Some("item"));
        for item_1191 in var_1190 {
            #[allow(unused_mut)]let mut entry_1193 = list_1192.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(entry_1193, item_1191)?;
        }
        list_1192.finish();
    }
    #[allow(unused_mut)]let mut scope_1194 = writer.prefix("ReservedInstancesId");
    if let Some(var_1195) = &input.reserved_instances_id {
        scope_1194.string(var_1195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(input: &crate::input::CreateRestoreImageTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1196 = writer.prefix("Bucket");
    if let Some(var_1197) = &input.bucket {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]let mut scope_1198 = writer.prefix("ObjectKey");
    if let Some(var_1199) = &input.object_key {
        scope_1198.string(var_1199);
    }
    #[allow(unused_mut)]let mut scope_1200 = writer.prefix("Name");
    if let Some(var_1201) = &input.name {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]let mut scope_1202 = writer.prefix("TagSpecification");
    if let Some(var_1203) = &input.tag_specifications {
        let mut list_1205 = scope_1202.start_list(true, Some("item"));
        for item_1204 in var_1203 {
            #[allow(unused_mut)]let mut entry_1206 = list_1205.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1206, item_1204)?;
        }
        list_1205.finish();
    }
    #[allow(unused_mut)]let mut scope_1207 = writer.prefix("DryRun");
    if let Some(var_1208) = &input.dry_run {
        scope_1207.boolean(*var_1208);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(input: &crate::input::CreateRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1209 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1210) = &input.destination_cidr_block {
        scope_1209.string(var_1210);
    }
    #[allow(unused_mut)]let mut scope_1211 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1212) = &input.destination_ipv6_cidr_block {
        scope_1211.string(var_1212);
    }
    #[allow(unused_mut)]let mut scope_1213 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1214) = &input.destination_prefix_list_id {
        scope_1213.string(var_1214);
    }
    #[allow(unused_mut)]let mut scope_1215 = writer.prefix("DryRun");
    if let Some(var_1216) = &input.dry_run {
        scope_1215.boolean(*var_1216);
    }
    #[allow(unused_mut)]let mut scope_1217 = writer.prefix("VpcEndpointId");
    if let Some(var_1218) = &input.vpc_endpoint_id {
        scope_1217.string(var_1218);
    }
    #[allow(unused_mut)]let mut scope_1219 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1220) = &input.egress_only_internet_gateway_id {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]let mut scope_1221 = writer.prefix("GatewayId");
    if let Some(var_1222) = &input.gateway_id {
        scope_1221.string(var_1222);
    }
    #[allow(unused_mut)]let mut scope_1223 = writer.prefix("InstanceId");
    if let Some(var_1224) = &input.instance_id {
        scope_1223.string(var_1224);
    }
    #[allow(unused_mut)]let mut scope_1225 = writer.prefix("NatGatewayId");
    if let Some(var_1226) = &input.nat_gateway_id {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]let mut scope_1227 = writer.prefix("TransitGatewayId");
    if let Some(var_1228) = &input.transit_gateway_id {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]let mut scope_1229 = writer.prefix("LocalGatewayId");
    if let Some(var_1230) = &input.local_gateway_id {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]let mut scope_1231 = writer.prefix("CarrierGatewayId");
    if let Some(var_1232) = &input.carrier_gateway_id {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]let mut scope_1233 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1234) = &input.network_interface_id {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]let mut scope_1235 = writer.prefix("RouteTableId");
    if let Some(var_1236) = &input.route_table_id {
        scope_1235.string(var_1236);
    }
    #[allow(unused_mut)]let mut scope_1237 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1238) = &input.vpc_peering_connection_id {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]let mut scope_1239 = writer.prefix("CoreNetworkArn");
    if let Some(var_1240) = &input.core_network_arn {
        scope_1239.string(var_1240);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(input: &crate::input::CreateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1241 = writer.prefix("DryRun");
    if let Some(var_1242) = &input.dry_run {
        scope_1241.boolean(*var_1242);
    }
    #[allow(unused_mut)]let mut scope_1243 = writer.prefix("VpcId");
    if let Some(var_1244) = &input.vpc_id {
        scope_1243.string(var_1244);
    }
    #[allow(unused_mut)]let mut scope_1245 = writer.prefix("TagSpecification");
    if let Some(var_1246) = &input.tag_specifications {
        let mut list_1248 = scope_1245.start_list(true, Some("item"));
        for item_1247 in var_1246 {
            #[allow(unused_mut)]let mut entry_1249 = list_1248.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1249, item_1247)?;
        }
        list_1248.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(input: &crate::input::CreateSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1250 = writer.prefix("GroupDescription");
    if let Some(var_1251) = &input.description {
        scope_1250.string(var_1251);
    }
    #[allow(unused_mut)]let mut scope_1252 = writer.prefix("GroupName");
    if let Some(var_1253) = &input.group_name {
        scope_1252.string(var_1253);
    }
    #[allow(unused_mut)]let mut scope_1254 = writer.prefix("VpcId");
    if let Some(var_1255) = &input.vpc_id {
        scope_1254.string(var_1255);
    }
    #[allow(unused_mut)]let mut scope_1256 = writer.prefix("TagSpecification");
    if let Some(var_1257) = &input.tag_specifications {
        let mut list_1259 = scope_1256.start_list(true, Some("item"));
        for item_1258 in var_1257 {
            #[allow(unused_mut)]let mut entry_1260 = list_1259.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1260, item_1258)?;
        }
        list_1259.finish();
    }
    #[allow(unused_mut)]let mut scope_1261 = writer.prefix("DryRun");
    if let Some(var_1262) = &input.dry_run {
        scope_1261.boolean(*var_1262);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(input: &crate::input::CreateSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1263 = writer.prefix("Description");
    if let Some(var_1264) = &input.description {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]let mut scope_1265 = writer.prefix("OutpostArn");
    if let Some(var_1266) = &input.outpost_arn {
        scope_1265.string(var_1266);
    }
    #[allow(unused_mut)]let mut scope_1267 = writer.prefix("VolumeId");
    if let Some(var_1268) = &input.volume_id {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]let mut scope_1269 = writer.prefix("TagSpecification");
    if let Some(var_1270) = &input.tag_specifications {
        let mut list_1272 = scope_1269.start_list(true, Some("item"));
        for item_1271 in var_1270 {
            #[allow(unused_mut)]let mut entry_1273 = list_1272.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1273, item_1271)?;
        }
        list_1272.finish();
    }
    #[allow(unused_mut)]let mut scope_1274 = writer.prefix("DryRun");
    if let Some(var_1275) = &input.dry_run {
        scope_1274.boolean(*var_1275);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(input: &crate::input::CreateSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1276 = writer.prefix("Description");
    if let Some(var_1277) = &input.description {
        scope_1276.string(var_1277);
    }
    #[allow(unused_mut)]let mut scope_1278 = writer.prefix("InstanceSpecification");
    if let Some(var_1279) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(scope_1278, var_1279)?;
    }
    #[allow(unused_mut)]let mut scope_1280 = writer.prefix("OutpostArn");
    if let Some(var_1281) = &input.outpost_arn {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]let mut scope_1282 = writer.prefix("TagSpecification");
    if let Some(var_1283) = &input.tag_specifications {
        let mut list_1285 = scope_1282.start_list(true, Some("item"));
        for item_1284 in var_1283 {
            #[allow(unused_mut)]let mut entry_1286 = list_1285.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1286, item_1284)?;
        }
        list_1285.finish();
    }
    #[allow(unused_mut)]let mut scope_1287 = writer.prefix("DryRun");
    if let Some(var_1288) = &input.dry_run {
        scope_1287.boolean(*var_1288);
    }
    #[allow(unused_mut)]let mut scope_1289 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1290) = &input.copy_tags_from_source {
        scope_1289.string(var_1290.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(input: &crate::input::CreateSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1291 = writer.prefix("Bucket");
    if let Some(var_1292) = &input.bucket {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]let mut scope_1293 = writer.prefix("DryRun");
    if let Some(var_1294) = &input.dry_run {
        scope_1293.boolean(*var_1294);
    }
    #[allow(unused_mut)]let mut scope_1295 = writer.prefix("Prefix");
    if let Some(var_1296) = &input.prefix {
        scope_1295.string(var_1296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(input: &crate::input::CreateStoreImageTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1297 = writer.prefix("ImageId");
    if let Some(var_1298) = &input.image_id {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]let mut scope_1299 = writer.prefix("Bucket");
    if let Some(var_1300) = &input.bucket {
        scope_1299.string(var_1300);
    }
    #[allow(unused_mut)]let mut scope_1301 = writer.prefix("S3ObjectTag");
    if let Some(var_1302) = &input.s3_object_tags {
        let mut list_1304 = scope_1301.start_list(true, Some("item"));
        for item_1303 in var_1302 {
            #[allow(unused_mut)]let mut entry_1305 = list_1304.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1305, item_1303)?;
        }
        list_1304.finish();
    }
    #[allow(unused_mut)]let mut scope_1306 = writer.prefix("DryRun");
    if let Some(var_1307) = &input.dry_run {
        scope_1306.boolean(*var_1307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(input: &crate::input::CreateSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1308 = writer.prefix("TagSpecification");
    if let Some(var_1309) = &input.tag_specifications {
        let mut list_1311 = scope_1308.start_list(true, Some("item"));
        for item_1310 in var_1309 {
            #[allow(unused_mut)]let mut entry_1312 = list_1311.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1312, item_1310)?;
        }
        list_1311.finish();
    }
    #[allow(unused_mut)]let mut scope_1313 = writer.prefix("AvailabilityZone");
    if let Some(var_1314) = &input.availability_zone {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]let mut scope_1315 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1316) = &input.availability_zone_id {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]let mut scope_1317 = writer.prefix("CidrBlock");
    if let Some(var_1318) = &input.cidr_block {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]let mut scope_1319 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1320) = &input.ipv6_cidr_block {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]let mut scope_1321 = writer.prefix("OutpostArn");
    if let Some(var_1322) = &input.outpost_arn {
        scope_1321.string(var_1322);
    }
    #[allow(unused_mut)]let mut scope_1323 = writer.prefix("VpcId");
    if let Some(var_1324) = &input.vpc_id {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]let mut scope_1325 = writer.prefix("DryRun");
    if let Some(var_1326) = &input.dry_run {
        scope_1325.boolean(*var_1326);
    }
    #[allow(unused_mut)]let mut scope_1327 = writer.prefix("Ipv6Native");
    if let Some(var_1328) = &input.ipv6_native {
        scope_1327.boolean(*var_1328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(input: &crate::input::CreateSubnetCidrReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1329 = writer.prefix("SubnetId");
    if let Some(var_1330) = &input.subnet_id {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]let mut scope_1331 = writer.prefix("Cidr");
    if let Some(var_1332) = &input.cidr {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]let mut scope_1333 = writer.prefix("ReservationType");
    if let Some(var_1334) = &input.reservation_type {
        scope_1333.string(var_1334.as_str());
    }
    #[allow(unused_mut)]let mut scope_1335 = writer.prefix("Description");
    if let Some(var_1336) = &input.description {
        scope_1335.string(var_1336);
    }
    #[allow(unused_mut)]let mut scope_1337 = writer.prefix("DryRun");
    if let Some(var_1338) = &input.dry_run {
        scope_1337.boolean(*var_1338);
    }
    #[allow(unused_mut)]let mut scope_1339 = writer.prefix("TagSpecification");
    if let Some(var_1340) = &input.tag_specifications {
        let mut list_1342 = scope_1339.start_list(true, Some("item"));
        for item_1341 in var_1340 {
            #[allow(unused_mut)]let mut entry_1343 = list_1342.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1343, item_1341)?;
        }
        list_1342.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(input: &crate::input::CreateTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1344 = writer.prefix("DryRun");
    if let Some(var_1345) = &input.dry_run {
        scope_1344.boolean(*var_1345);
    }
    #[allow(unused_mut)]let mut scope_1346 = writer.prefix("ResourceId");
    if let Some(var_1347) = &input.resources {
        let mut list_1349 = scope_1346.start_list(true, None);
        for item_1348 in var_1347 {
            #[allow(unused_mut)]let mut entry_1350 = list_1349.entry();
            entry_1350.string(item_1348);
        }
        list_1349.finish();
    }
    #[allow(unused_mut)]let mut scope_1351 = writer.prefix("Tag");
    if let Some(var_1352) = &input.tags {
        let mut list_1354 = scope_1351.start_list(true, Some("item"));
        for item_1353 in var_1352 {
            #[allow(unused_mut)]let mut entry_1355 = list_1354.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1355, item_1353)?;
        }
        list_1354.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(input: &crate::input::CreateTrafficMirrorFilterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1356 = writer.prefix("Description");
    if let Some(var_1357) = &input.description {
        scope_1356.string(var_1357);
    }
    #[allow(unused_mut)]let mut scope_1358 = writer.prefix("TagSpecification");
    if let Some(var_1359) = &input.tag_specifications {
        let mut list_1361 = scope_1358.start_list(true, Some("item"));
        for item_1360 in var_1359 {
            #[allow(unused_mut)]let mut entry_1362 = list_1361.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1362, item_1360)?;
        }
        list_1361.finish();
    }
    #[allow(unused_mut)]let mut scope_1363 = writer.prefix("DryRun");
    if let Some(var_1364) = &input.dry_run {
        scope_1363.boolean(*var_1364);
    }
    #[allow(unused_mut)]let mut scope_1365 = writer.prefix("ClientToken");
    if let Some(var_1366) = &input.client_token {
        scope_1365.string(var_1366);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(input: &crate::input::CreateTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1367 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1368) = &input.traffic_mirror_filter_id {
        scope_1367.string(var_1368);
    }
    #[allow(unused_mut)]let mut scope_1369 = writer.prefix("TrafficDirection");
    if let Some(var_1370) = &input.traffic_direction {
        scope_1369.string(var_1370.as_str());
    }
    #[allow(unused_mut)]let mut scope_1371 = writer.prefix("RuleNumber");
    if let Some(var_1372) = &input.rule_number {
        scope_1371.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1372).into()));
    }
    #[allow(unused_mut)]let mut scope_1373 = writer.prefix("RuleAction");
    if let Some(var_1374) = &input.rule_action {
        scope_1373.string(var_1374.as_str());
    }
    #[allow(unused_mut)]let mut scope_1375 = writer.prefix("DestinationPortRange");
    if let Some(var_1376) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_1375, var_1376)?;
    }
    #[allow(unused_mut)]let mut scope_1377 = writer.prefix("SourcePortRange");
    if let Some(var_1378) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_1377, var_1378)?;
    }
    #[allow(unused_mut)]let mut scope_1379 = writer.prefix("Protocol");
    if let Some(var_1380) = &input.protocol {
        scope_1379.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1380).into()));
    }
    #[allow(unused_mut)]let mut scope_1381 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1382) = &input.destination_cidr_block {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]let mut scope_1383 = writer.prefix("SourceCidrBlock");
    if let Some(var_1384) = &input.source_cidr_block {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]let mut scope_1385 = writer.prefix("Description");
    if let Some(var_1386) = &input.description {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]let mut scope_1387 = writer.prefix("DryRun");
    if let Some(var_1388) = &input.dry_run {
        scope_1387.boolean(*var_1388);
    }
    #[allow(unused_mut)]let mut scope_1389 = writer.prefix("ClientToken");
    if let Some(var_1390) = &input.client_token {
        scope_1389.string(var_1390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(input: &crate::input::CreateTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1391 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1392) = &input.network_interface_id {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]let mut scope_1393 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1394) = &input.traffic_mirror_target_id {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]let mut scope_1395 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1396) = &input.traffic_mirror_filter_id {
        scope_1395.string(var_1396);
    }
    #[allow(unused_mut)]let mut scope_1397 = writer.prefix("PacketLength");
    if let Some(var_1398) = &input.packet_length {
        scope_1397.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1398).into()));
    }
    #[allow(unused_mut)]let mut scope_1399 = writer.prefix("SessionNumber");
    if let Some(var_1400) = &input.session_number {
        scope_1399.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1400).into()));
    }
    #[allow(unused_mut)]let mut scope_1401 = writer.prefix("VirtualNetworkId");
    if let Some(var_1402) = &input.virtual_network_id {
        scope_1401.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1402).into()));
    }
    #[allow(unused_mut)]let mut scope_1403 = writer.prefix("Description");
    if let Some(var_1404) = &input.description {
        scope_1403.string(var_1404);
    }
    #[allow(unused_mut)]let mut scope_1405 = writer.prefix("TagSpecification");
    if let Some(var_1406) = &input.tag_specifications {
        let mut list_1408 = scope_1405.start_list(true, Some("item"));
        for item_1407 in var_1406 {
            #[allow(unused_mut)]let mut entry_1409 = list_1408.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1409, item_1407)?;
        }
        list_1408.finish();
    }
    #[allow(unused_mut)]let mut scope_1410 = writer.prefix("DryRun");
    if let Some(var_1411) = &input.dry_run {
        scope_1410.boolean(*var_1411);
    }
    #[allow(unused_mut)]let mut scope_1412 = writer.prefix("ClientToken");
    if let Some(var_1413) = &input.client_token {
        scope_1412.string(var_1413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(input: &crate::input::CreateTrafficMirrorTargetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1414 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1415) = &input.network_interface_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]let mut scope_1416 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1417) = &input.network_load_balancer_arn {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]let mut scope_1418 = writer.prefix("Description");
    if let Some(var_1419) = &input.description {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]let mut scope_1420 = writer.prefix("TagSpecification");
    if let Some(var_1421) = &input.tag_specifications {
        let mut list_1423 = scope_1420.start_list(true, Some("item"));
        for item_1422 in var_1421 {
            #[allow(unused_mut)]let mut entry_1424 = list_1423.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1424, item_1422)?;
        }
        list_1423.finish();
    }
    #[allow(unused_mut)]let mut scope_1425 = writer.prefix("DryRun");
    if let Some(var_1426) = &input.dry_run {
        scope_1425.boolean(*var_1426);
    }
    #[allow(unused_mut)]let mut scope_1427 = writer.prefix("ClientToken");
    if let Some(var_1428) = &input.client_token {
        scope_1427.string(var_1428);
    }
    #[allow(unused_mut)]let mut scope_1429 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1430) = &input.gateway_load_balancer_endpoint_id {
        scope_1429.string(var_1430);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(input: &crate::input::CreateTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1431 = writer.prefix("Description");
    if let Some(var_1432) = &input.description {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]let mut scope_1433 = writer.prefix("Options");
    if let Some(var_1434) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(scope_1433, var_1434)?;
    }
    #[allow(unused_mut)]let mut scope_1435 = writer.prefix("TagSpecification");
    if let Some(var_1436) = &input.tag_specifications {
        let mut list_1438 = scope_1435.start_list(true, Some("item"));
        for item_1437 in var_1436 {
            #[allow(unused_mut)]let mut entry_1439 = list_1438.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1439, item_1437)?;
        }
        list_1438.finish();
    }
    #[allow(unused_mut)]let mut scope_1440 = writer.prefix("DryRun");
    if let Some(var_1441) = &input.dry_run {
        scope_1440.boolean(*var_1441);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(input: &crate::input::CreateTransitGatewayConnectInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1442 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1443) = &input.transport_transit_gateway_attachment_id {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]let mut scope_1444 = writer.prefix("Options");
    if let Some(var_1445) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1444, var_1445)?;
    }
    #[allow(unused_mut)]let mut scope_1446 = writer.prefix("TagSpecification");
    if let Some(var_1447) = &input.tag_specifications {
        let mut list_1449 = scope_1446.start_list(true, Some("item"));
        for item_1448 in var_1447 {
            #[allow(unused_mut)]let mut entry_1450 = list_1449.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1450, item_1448)?;
        }
        list_1449.finish();
    }
    #[allow(unused_mut)]let mut scope_1451 = writer.prefix("DryRun");
    if let Some(var_1452) = &input.dry_run {
        scope_1451.boolean(*var_1452);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(input: &crate::input::CreateTransitGatewayConnectPeerInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1453 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1454) = &input.transit_gateway_attachment_id {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]let mut scope_1455 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1456) = &input.transit_gateway_address {
        scope_1455.string(var_1456);
    }
    #[allow(unused_mut)]let mut scope_1457 = writer.prefix("PeerAddress");
    if let Some(var_1458) = &input.peer_address {
        scope_1457.string(var_1458);
    }
    #[allow(unused_mut)]let mut scope_1459 = writer.prefix("BgpOptions");
    if let Some(var_1460) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1459, var_1460)?;
    }
    #[allow(unused_mut)]let mut scope_1461 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1462) = &input.inside_cidr_blocks {
        let mut list_1464 = scope_1461.start_list(true, Some("item"));
        for item_1463 in var_1462 {
            #[allow(unused_mut)]let mut entry_1465 = list_1464.entry();
            entry_1465.string(item_1463);
        }
        list_1464.finish();
    }
    #[allow(unused_mut)]let mut scope_1466 = writer.prefix("TagSpecification");
    if let Some(var_1467) = &input.tag_specifications {
        let mut list_1469 = scope_1466.start_list(true, Some("item"));
        for item_1468 in var_1467 {
            #[allow(unused_mut)]let mut entry_1470 = list_1469.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1470, item_1468)?;
        }
        list_1469.finish();
    }
    #[allow(unused_mut)]let mut scope_1471 = writer.prefix("DryRun");
    if let Some(var_1472) = &input.dry_run {
        scope_1471.boolean(*var_1472);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(input: &crate::input::CreateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1473 = writer.prefix("TransitGatewayId");
    if let Some(var_1474) = &input.transit_gateway_id {
        scope_1473.string(var_1474);
    }
    #[allow(unused_mut)]let mut scope_1475 = writer.prefix("Options");
    if let Some(var_1476) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1475, var_1476)?;
    }
    #[allow(unused_mut)]let mut scope_1477 = writer.prefix("TagSpecification");
    if let Some(var_1478) = &input.tag_specifications {
        let mut list_1480 = scope_1477.start_list(true, Some("item"));
        for item_1479 in var_1478 {
            #[allow(unused_mut)]let mut entry_1481 = list_1480.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1481, item_1479)?;
        }
        list_1480.finish();
    }
    #[allow(unused_mut)]let mut scope_1482 = writer.prefix("DryRun");
    if let Some(var_1483) = &input.dry_run {
        scope_1482.boolean(*var_1483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(input: &crate::input::CreateTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1484 = writer.prefix("TransitGatewayId");
    if let Some(var_1485) = &input.transit_gateway_id {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]let mut scope_1486 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1487) = &input.peer_transit_gateway_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]let mut scope_1488 = writer.prefix("PeerAccountId");
    if let Some(var_1489) = &input.peer_account_id {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]let mut scope_1490 = writer.prefix("PeerRegion");
    if let Some(var_1491) = &input.peer_region {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]let mut scope_1492 = writer.prefix("Options");
    if let Some(var_1493) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(scope_1492, var_1493)?;
    }
    #[allow(unused_mut)]let mut scope_1494 = writer.prefix("TagSpecification");
    if let Some(var_1495) = &input.tag_specifications {
        let mut list_1497 = scope_1494.start_list(true, Some("item"));
        for item_1496 in var_1495 {
            #[allow(unused_mut)]let mut entry_1498 = list_1497.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1498, item_1496)?;
        }
        list_1497.finish();
    }
    #[allow(unused_mut)]let mut scope_1499 = writer.prefix("DryRun");
    if let Some(var_1500) = &input.dry_run {
        scope_1499.boolean(*var_1500);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_policy_table(input: &crate::input::CreateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1501 = writer.prefix("TransitGatewayId");
    if let Some(var_1502) = &input.transit_gateway_id {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]let mut scope_1503 = writer.prefix("TagSpecifications");
    if let Some(var_1504) = &input.tag_specifications {
        let mut list_1506 = scope_1503.start_list(true, Some("item"));
        for item_1505 in var_1504 {
            #[allow(unused_mut)]let mut entry_1507 = list_1506.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1507, item_1505)?;
        }
        list_1506.finish();
    }
    #[allow(unused_mut)]let mut scope_1508 = writer.prefix("DryRun");
    if let Some(var_1509) = &input.dry_run {
        scope_1508.boolean(*var_1509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(input: &crate::input::CreateTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1510 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1511) = &input.transit_gateway_route_table_id {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]let mut scope_1512 = writer.prefix("PrefixListId");
    if let Some(var_1513) = &input.prefix_list_id {
        scope_1512.string(var_1513);
    }
    #[allow(unused_mut)]let mut scope_1514 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1515) = &input.transit_gateway_attachment_id {
        scope_1514.string(var_1515);
    }
    #[allow(unused_mut)]let mut scope_1516 = writer.prefix("Blackhole");
    if let Some(var_1517) = &input.blackhole {
        scope_1516.boolean(*var_1517);
    }
    #[allow(unused_mut)]let mut scope_1518 = writer.prefix("DryRun");
    if let Some(var_1519) = &input.dry_run {
        scope_1518.boolean(*var_1519);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(input: &crate::input::CreateTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1520 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1521) = &input.destination_cidr_block {
        scope_1520.string(var_1521);
    }
    #[allow(unused_mut)]let mut scope_1522 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1523) = &input.transit_gateway_route_table_id {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]let mut scope_1524 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1525) = &input.transit_gateway_attachment_id {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]let mut scope_1526 = writer.prefix("Blackhole");
    if let Some(var_1527) = &input.blackhole {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]let mut scope_1528 = writer.prefix("DryRun");
    if let Some(var_1529) = &input.dry_run {
        scope_1528.boolean(*var_1529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(input: &crate::input::CreateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1530 = writer.prefix("TransitGatewayId");
    if let Some(var_1531) = &input.transit_gateway_id {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]let mut scope_1532 = writer.prefix("TagSpecifications");
    if let Some(var_1533) = &input.tag_specifications {
        let mut list_1535 = scope_1532.start_list(true, Some("item"));
        for item_1534 in var_1533 {
            #[allow(unused_mut)]let mut entry_1536 = list_1535.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1536, item_1534)?;
        }
        list_1535.finish();
    }
    #[allow(unused_mut)]let mut scope_1537 = writer.prefix("DryRun");
    if let Some(var_1538) = &input.dry_run {
        scope_1537.boolean(*var_1538);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table_announcement(input: &crate::input::CreateTransitGatewayRouteTableAnnouncementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRouteTableAnnouncement", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1539 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1540) = &input.transit_gateway_route_table_id {
        scope_1539.string(var_1540);
    }
    #[allow(unused_mut)]let mut scope_1541 = writer.prefix("PeeringAttachmentId");
    if let Some(var_1542) = &input.peering_attachment_id {
        scope_1541.string(var_1542);
    }
    #[allow(unused_mut)]let mut scope_1543 = writer.prefix("TagSpecification");
    if let Some(var_1544) = &input.tag_specifications {
        let mut list_1546 = scope_1543.start_list(true, Some("item"));
        for item_1545 in var_1544 {
            #[allow(unused_mut)]let mut entry_1547 = list_1546.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1547, item_1545)?;
        }
        list_1546.finish();
    }
    #[allow(unused_mut)]let mut scope_1548 = writer.prefix("DryRun");
    if let Some(var_1549) = &input.dry_run {
        scope_1548.boolean(*var_1549);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(input: &crate::input::CreateTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1550 = writer.prefix("TransitGatewayId");
    if let Some(var_1551) = &input.transit_gateway_id {
        scope_1550.string(var_1551);
    }
    #[allow(unused_mut)]let mut scope_1552 = writer.prefix("VpcId");
    if let Some(var_1553) = &input.vpc_id {
        scope_1552.string(var_1553);
    }
    #[allow(unused_mut)]let mut scope_1554 = writer.prefix("SubnetIds");
    if let Some(var_1555) = &input.subnet_ids {
        let mut list_1557 = scope_1554.start_list(true, Some("item"));
        for item_1556 in var_1555 {
            #[allow(unused_mut)]let mut entry_1558 = list_1557.entry();
            entry_1558.string(item_1556);
        }
        list_1557.finish();
    }
    #[allow(unused_mut)]let mut scope_1559 = writer.prefix("Options");
    if let Some(var_1560) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1559, var_1560)?;
    }
    #[allow(unused_mut)]let mut scope_1561 = writer.prefix("TagSpecifications");
    if let Some(var_1562) = &input.tag_specifications {
        let mut list_1564 = scope_1561.start_list(true, Some("item"));
        for item_1563 in var_1562 {
            #[allow(unused_mut)]let mut entry_1565 = list_1564.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1565, item_1563)?;
        }
        list_1564.finish();
    }
    #[allow(unused_mut)]let mut scope_1566 = writer.prefix("DryRun");
    if let Some(var_1567) = &input.dry_run {
        scope_1566.boolean(*var_1567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(input: &crate::input::CreateVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1568 = writer.prefix("AvailabilityZone");
    if let Some(var_1569) = &input.availability_zone {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]let mut scope_1570 = writer.prefix("Encrypted");
    if let Some(var_1571) = &input.encrypted {
        scope_1570.boolean(*var_1571);
    }
    #[allow(unused_mut)]let mut scope_1572 = writer.prefix("Iops");
    if let Some(var_1573) = &input.iops {
        scope_1572.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1573).into()));
    }
    #[allow(unused_mut)]let mut scope_1574 = writer.prefix("KmsKeyId");
    if let Some(var_1575) = &input.kms_key_id {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]let mut scope_1576 = writer.prefix("OutpostArn");
    if let Some(var_1577) = &input.outpost_arn {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]let mut scope_1578 = writer.prefix("Size");
    if let Some(var_1579) = &input.size {
        scope_1578.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1579).into()));
    }
    #[allow(unused_mut)]let mut scope_1580 = writer.prefix("SnapshotId");
    if let Some(var_1581) = &input.snapshot_id {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]let mut scope_1582 = writer.prefix("VolumeType");
    if let Some(var_1583) = &input.volume_type {
        scope_1582.string(var_1583.as_str());
    }
    #[allow(unused_mut)]let mut scope_1584 = writer.prefix("DryRun");
    if let Some(var_1585) = &input.dry_run {
        scope_1584.boolean(*var_1585);
    }
    #[allow(unused_mut)]let mut scope_1586 = writer.prefix("TagSpecification");
    if let Some(var_1587) = &input.tag_specifications {
        let mut list_1589 = scope_1586.start_list(true, Some("item"));
        for item_1588 in var_1587 {
            #[allow(unused_mut)]let mut entry_1590 = list_1589.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1590, item_1588)?;
        }
        list_1589.finish();
    }
    #[allow(unused_mut)]let mut scope_1591 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1592) = &input.multi_attach_enabled {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]let mut scope_1593 = writer.prefix("Throughput");
    if let Some(var_1594) = &input.throughput {
        scope_1593.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1594).into()));
    }
    #[allow(unused_mut)]let mut scope_1595 = writer.prefix("ClientToken");
    if let Some(var_1596) = &input.client_token {
        scope_1595.string(var_1596);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(input: &crate::input::CreateVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1597 = writer.prefix("CidrBlock");
    if let Some(var_1598) = &input.cidr_block {
        scope_1597.string(var_1598);
    }
    #[allow(unused_mut)]let mut scope_1599 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1600) = &input.amazon_provided_ipv6_cidr_block {
        scope_1599.boolean(*var_1600);
    }
    #[allow(unused_mut)]let mut scope_1601 = writer.prefix("Ipv6Pool");
    if let Some(var_1602) = &input.ipv6_pool {
        scope_1601.string(var_1602);
    }
    #[allow(unused_mut)]let mut scope_1603 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1604) = &input.ipv6_cidr_block {
        scope_1603.string(var_1604);
    }
    #[allow(unused_mut)]let mut scope_1605 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1606) = &input.ipv4_ipam_pool_id {
        scope_1605.string(var_1606);
    }
    #[allow(unused_mut)]let mut scope_1607 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1608) = &input.ipv4_netmask_length {
        scope_1607.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1608).into()));
    }
    #[allow(unused_mut)]let mut scope_1609 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1610) = &input.ipv6_ipam_pool_id {
        scope_1609.string(var_1610);
    }
    #[allow(unused_mut)]let mut scope_1611 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1612) = &input.ipv6_netmask_length {
        scope_1611.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1612).into()));
    }
    #[allow(unused_mut)]let mut scope_1613 = writer.prefix("DryRun");
    if let Some(var_1614) = &input.dry_run {
        scope_1613.boolean(*var_1614);
    }
    #[allow(unused_mut)]let mut scope_1615 = writer.prefix("InstanceTenancy");
    if let Some(var_1616) = &input.instance_tenancy {
        scope_1615.string(var_1616.as_str());
    }
    #[allow(unused_mut)]let mut scope_1617 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1618) = &input.ipv6_cidr_block_network_border_group {
        scope_1617.string(var_1618);
    }
    #[allow(unused_mut)]let mut scope_1619 = writer.prefix("TagSpecification");
    if let Some(var_1620) = &input.tag_specifications {
        let mut list_1622 = scope_1619.start_list(true, Some("item"));
        for item_1621 in var_1620 {
            #[allow(unused_mut)]let mut entry_1623 = list_1622.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1623, item_1621)?;
        }
        list_1622.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(input: &crate::input::CreateVpcEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1624 = writer.prefix("DryRun");
    if let Some(var_1625) = &input.dry_run {
        scope_1624.boolean(*var_1625);
    }
    #[allow(unused_mut)]let mut scope_1626 = writer.prefix("VpcEndpointType");
    if let Some(var_1627) = &input.vpc_endpoint_type {
        scope_1626.string(var_1627.as_str());
    }
    #[allow(unused_mut)]let mut scope_1628 = writer.prefix("VpcId");
    if let Some(var_1629) = &input.vpc_id {
        scope_1628.string(var_1629);
    }
    #[allow(unused_mut)]let mut scope_1630 = writer.prefix("ServiceName");
    if let Some(var_1631) = &input.service_name {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]let mut scope_1632 = writer.prefix("PolicyDocument");
    if let Some(var_1633) = &input.policy_document {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]let mut scope_1634 = writer.prefix("RouteTableId");
    if let Some(var_1635) = &input.route_table_ids {
        let mut list_1637 = scope_1634.start_list(true, Some("item"));
        for item_1636 in var_1635 {
            #[allow(unused_mut)]let mut entry_1638 = list_1637.entry();
            entry_1638.string(item_1636);
        }
        list_1637.finish();
    }
    #[allow(unused_mut)]let mut scope_1639 = writer.prefix("SubnetId");
    if let Some(var_1640) = &input.subnet_ids {
        let mut list_1642 = scope_1639.start_list(true, Some("item"));
        for item_1641 in var_1640 {
            #[allow(unused_mut)]let mut entry_1643 = list_1642.entry();
            entry_1643.string(item_1641);
        }
        list_1642.finish();
    }
    #[allow(unused_mut)]let mut scope_1644 = writer.prefix("SecurityGroupId");
    if let Some(var_1645) = &input.security_group_ids {
        let mut list_1647 = scope_1644.start_list(true, Some("item"));
        for item_1646 in var_1645 {
            #[allow(unused_mut)]let mut entry_1648 = list_1647.entry();
            entry_1648.string(item_1646);
        }
        list_1647.finish();
    }
    #[allow(unused_mut)]let mut scope_1649 = writer.prefix("IpAddressType");
    if let Some(var_1650) = &input.ip_address_type {
        scope_1649.string(var_1650.as_str());
    }
    #[allow(unused_mut)]let mut scope_1651 = writer.prefix("DnsOptions");
    if let Some(var_1652) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(scope_1651, var_1652)?;
    }
    #[allow(unused_mut)]let mut scope_1653 = writer.prefix("ClientToken");
    if let Some(var_1654) = &input.client_token {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]let mut scope_1655 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1656) = &input.private_dns_enabled {
        scope_1655.boolean(*var_1656);
    }
    #[allow(unused_mut)]let mut scope_1657 = writer.prefix("TagSpecification");
    if let Some(var_1658) = &input.tag_specifications {
        let mut list_1660 = scope_1657.start_list(true, Some("item"));
        for item_1659 in var_1658 {
            #[allow(unused_mut)]let mut entry_1661 = list_1660.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1661, item_1659)?;
        }
        list_1660.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(input: &crate::input::CreateVpcEndpointConnectionNotificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpointConnectionNotification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1662 = writer.prefix("DryRun");
    if let Some(var_1663) = &input.dry_run {
        scope_1662.boolean(*var_1663);
    }
    #[allow(unused_mut)]let mut scope_1664 = writer.prefix("ServiceId");
    if let Some(var_1665) = &input.service_id {
        scope_1664.string(var_1665);
    }
    #[allow(unused_mut)]let mut scope_1666 = writer.prefix("VpcEndpointId");
    if let Some(var_1667) = &input.vpc_endpoint_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]let mut scope_1668 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1669) = &input.connection_notification_arn {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]let mut scope_1670 = writer.prefix("ConnectionEvents");
    if let Some(var_1671) = &input.connection_events {
        let mut list_1673 = scope_1670.start_list(true, Some("item"));
        for item_1672 in var_1671 {
            #[allow(unused_mut)]let mut entry_1674 = list_1673.entry();
            entry_1674.string(item_1672);
        }
        list_1673.finish();
    }
    #[allow(unused_mut)]let mut scope_1675 = writer.prefix("ClientToken");
    if let Some(var_1676) = &input.client_token {
        scope_1675.string(var_1676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(input: &crate::input::CreateVpcEndpointServiceConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpointServiceConfiguration", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1677 = writer.prefix("DryRun");
    if let Some(var_1678) = &input.dry_run {
        scope_1677.boolean(*var_1678);
    }
    #[allow(unused_mut)]let mut scope_1679 = writer.prefix("AcceptanceRequired");
    if let Some(var_1680) = &input.acceptance_required {
        scope_1679.boolean(*var_1680);
    }
    #[allow(unused_mut)]let mut scope_1681 = writer.prefix("PrivateDnsName");
    if let Some(var_1682) = &input.private_dns_name {
        scope_1681.string(var_1682);
    }
    #[allow(unused_mut)]let mut scope_1683 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1684) = &input.network_load_balancer_arns {
        let mut list_1686 = scope_1683.start_list(true, Some("item"));
        for item_1685 in var_1684 {
            #[allow(unused_mut)]let mut entry_1687 = list_1686.entry();
            entry_1687.string(item_1685);
        }
        list_1686.finish();
    }
    #[allow(unused_mut)]let mut scope_1688 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1689) = &input.gateway_load_balancer_arns {
        let mut list_1691 = scope_1688.start_list(true, Some("item"));
        for item_1690 in var_1689 {
            #[allow(unused_mut)]let mut entry_1692 = list_1691.entry();
            entry_1692.string(item_1690);
        }
        list_1691.finish();
    }
    #[allow(unused_mut)]let mut scope_1693 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1694) = &input.supported_ip_address_types {
        let mut list_1696 = scope_1693.start_list(true, Some("item"));
        for item_1695 in var_1694 {
            #[allow(unused_mut)]let mut entry_1697 = list_1696.entry();
            entry_1697.string(item_1695);
        }
        list_1696.finish();
    }
    #[allow(unused_mut)]let mut scope_1698 = writer.prefix("ClientToken");
    if let Some(var_1699) = &input.client_token {
        scope_1698.string(var_1699);
    }
    #[allow(unused_mut)]let mut scope_1700 = writer.prefix("TagSpecification");
    if let Some(var_1701) = &input.tag_specifications {
        let mut list_1703 = scope_1700.start_list(true, Some("item"));
        for item_1702 in var_1701 {
            #[allow(unused_mut)]let mut entry_1704 = list_1703.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1704, item_1702)?;
        }
        list_1703.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(input: &crate::input::CreateVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1705 = writer.prefix("DryRun");
    if let Some(var_1706) = &input.dry_run {
        scope_1705.boolean(*var_1706);
    }
    #[allow(unused_mut)]let mut scope_1707 = writer.prefix("PeerOwnerId");
    if let Some(var_1708) = &input.peer_owner_id {
        scope_1707.string(var_1708);
    }
    #[allow(unused_mut)]let mut scope_1709 = writer.prefix("PeerVpcId");
    if let Some(var_1710) = &input.peer_vpc_id {
        scope_1709.string(var_1710);
    }
    #[allow(unused_mut)]let mut scope_1711 = writer.prefix("VpcId");
    if let Some(var_1712) = &input.vpc_id {
        scope_1711.string(var_1712);
    }
    #[allow(unused_mut)]let mut scope_1713 = writer.prefix("PeerRegion");
    if let Some(var_1714) = &input.peer_region {
        scope_1713.string(var_1714);
    }
    #[allow(unused_mut)]let mut scope_1715 = writer.prefix("TagSpecification");
    if let Some(var_1716) = &input.tag_specifications {
        let mut list_1718 = scope_1715.start_list(true, Some("item"));
        for item_1717 in var_1716 {
            #[allow(unused_mut)]let mut entry_1719 = list_1718.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1719, item_1717)?;
        }
        list_1718.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(input: &crate::input::CreateVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1720 = writer.prefix("CustomerGatewayId");
    if let Some(var_1721) = &input.customer_gateway_id {
        scope_1720.string(var_1721);
    }
    #[allow(unused_mut)]let mut scope_1722 = writer.prefix("Type");
    if let Some(var_1723) = &input.r#type {
        scope_1722.string(var_1723);
    }
    #[allow(unused_mut)]let mut scope_1724 = writer.prefix("VpnGatewayId");
    if let Some(var_1725) = &input.vpn_gateway_id {
        scope_1724.string(var_1725);
    }
    #[allow(unused_mut)]let mut scope_1726 = writer.prefix("TransitGatewayId");
    if let Some(var_1727) = &input.transit_gateway_id {
        scope_1726.string(var_1727);
    }
    #[allow(unused_mut)]let mut scope_1728 = writer.prefix("DryRun");
    if let Some(var_1729) = &input.dry_run {
        scope_1728.boolean(*var_1729);
    }
    #[allow(unused_mut)]let mut scope_1730 = writer.prefix("Options");
    if let Some(var_1731) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(scope_1730, var_1731)?;
    }
    #[allow(unused_mut)]let mut scope_1732 = writer.prefix("TagSpecification");
    if let Some(var_1733) = &input.tag_specifications {
        let mut list_1735 = scope_1732.start_list(true, Some("item"));
        for item_1734 in var_1733 {
            #[allow(unused_mut)]let mut entry_1736 = list_1735.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1736, item_1734)?;
        }
        list_1735.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(input: &crate::input::CreateVpnConnectionRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1737 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1738) = &input.destination_cidr_block {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]let mut scope_1739 = writer.prefix("VpnConnectionId");
    if let Some(var_1740) = &input.vpn_connection_id {
        scope_1739.string(var_1740);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(input: &crate::input::CreateVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1741 = writer.prefix("AvailabilityZone");
    if let Some(var_1742) = &input.availability_zone {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]let mut scope_1743 = writer.prefix("Type");
    if let Some(var_1744) = &input.r#type {
        scope_1743.string(var_1744.as_str());
    }
    #[allow(unused_mut)]let mut scope_1745 = writer.prefix("TagSpecification");
    if let Some(var_1746) = &input.tag_specifications {
        let mut list_1748 = scope_1745.start_list(true, Some("item"));
        for item_1747 in var_1746 {
            #[allow(unused_mut)]let mut entry_1749 = list_1748.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_1749, item_1747)?;
        }
        list_1748.finish();
    }
    #[allow(unused_mut)]let mut scope_1750 = writer.prefix("AmazonSideAsn");
    if let Some(var_1751) = &input.amazon_side_asn {
        scope_1750.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1751).into()));
    }
    #[allow(unused_mut)]let mut scope_1752 = writer.prefix("DryRun");
    if let Some(var_1753) = &input.dry_run {
        scope_1752.boolean(*var_1753);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(input: &crate::input::DeleteCarrierGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1754 = writer.prefix("CarrierGatewayId");
    if let Some(var_1755) = &input.carrier_gateway_id {
        scope_1754.string(var_1755);
    }
    #[allow(unused_mut)]let mut scope_1756 = writer.prefix("DryRun");
    if let Some(var_1757) = &input.dry_run {
        scope_1756.boolean(*var_1757);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(input: &crate::input::DeleteClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1758 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1759) = &input.client_vpn_endpoint_id {
        scope_1758.string(var_1759);
    }
    #[allow(unused_mut)]let mut scope_1760 = writer.prefix("DryRun");
    if let Some(var_1761) = &input.dry_run {
        scope_1760.boolean(*var_1761);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(input: &crate::input::DeleteClientVpnRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1762 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1763) = &input.client_vpn_endpoint_id {
        scope_1762.string(var_1763);
    }
    #[allow(unused_mut)]let mut scope_1764 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1765) = &input.target_vpc_subnet_id {
        scope_1764.string(var_1765);
    }
    #[allow(unused_mut)]let mut scope_1766 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1767) = &input.destination_cidr_block {
        scope_1766.string(var_1767);
    }
    #[allow(unused_mut)]let mut scope_1768 = writer.prefix("DryRun");
    if let Some(var_1769) = &input.dry_run {
        scope_1768.boolean(*var_1769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_cidr(input: &crate::input::DeleteCoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1770 = writer.prefix("Cidr");
    if let Some(var_1771) = &input.cidr {
        scope_1770.string(var_1771);
    }
    #[allow(unused_mut)]let mut scope_1772 = writer.prefix("CoipPoolId");
    if let Some(var_1773) = &input.coip_pool_id {
        scope_1772.string(var_1773);
    }
    #[allow(unused_mut)]let mut scope_1774 = writer.prefix("DryRun");
    if let Some(var_1775) = &input.dry_run {
        scope_1774.boolean(*var_1775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_coip_pool(input: &crate::input::DeleteCoipPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCoipPool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1776 = writer.prefix("CoipPoolId");
    if let Some(var_1777) = &input.coip_pool_id {
        scope_1776.string(var_1777);
    }
    #[allow(unused_mut)]let mut scope_1778 = writer.prefix("DryRun");
    if let Some(var_1779) = &input.dry_run {
        scope_1778.boolean(*var_1779);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(input: &crate::input::DeleteCustomerGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1780 = writer.prefix("CustomerGatewayId");
    if let Some(var_1781) = &input.customer_gateway_id {
        scope_1780.string(var_1781);
    }
    #[allow(unused_mut)]let mut scope_1782 = writer.prefix("DryRun");
    if let Some(var_1783) = &input.dry_run {
        scope_1782.boolean(*var_1783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(input: &crate::input::DeleteDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1784 = writer.prefix("DhcpOptionsId");
    if let Some(var_1785) = &input.dhcp_options_id {
        scope_1784.string(var_1785);
    }
    #[allow(unused_mut)]let mut scope_1786 = writer.prefix("DryRun");
    if let Some(var_1787) = &input.dry_run {
        scope_1786.boolean(*var_1787);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(input: &crate::input::DeleteEgressOnlyInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteEgressOnlyInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1788 = writer.prefix("DryRun");
    if let Some(var_1789) = &input.dry_run {
        scope_1788.boolean(*var_1789);
    }
    #[allow(unused_mut)]let mut scope_1790 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1791) = &input.egress_only_internet_gateway_id {
        scope_1790.string(var_1791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(input: &crate::input::DeleteFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1792 = writer.prefix("DryRun");
    if let Some(var_1793) = &input.dry_run {
        scope_1792.boolean(*var_1793);
    }
    #[allow(unused_mut)]let mut scope_1794 = writer.prefix("FleetId");
    if let Some(var_1795) = &input.fleet_ids {
        let mut list_1797 = scope_1794.start_list(true, None);
        for item_1796 in var_1795 {
            #[allow(unused_mut)]let mut entry_1798 = list_1797.entry();
            entry_1798.string(item_1796);
        }
        list_1797.finish();
    }
    #[allow(unused_mut)]let mut scope_1799 = writer.prefix("TerminateInstances");
    if let Some(var_1800) = &input.terminate_instances {
        scope_1799.boolean(*var_1800);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(input: &crate::input::DeleteFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1801 = writer.prefix("DryRun");
    if let Some(var_1802) = &input.dry_run {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]let mut scope_1803 = writer.prefix("FlowLogId");
    if let Some(var_1804) = &input.flow_log_ids {
        let mut list_1806 = scope_1803.start_list(true, Some("item"));
        for item_1805 in var_1804 {
            #[allow(unused_mut)]let mut entry_1807 = list_1806.entry();
            entry_1807.string(item_1805);
        }
        list_1806.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(input: &crate::input::DeleteFpgaImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1808 = writer.prefix("DryRun");
    if let Some(var_1809) = &input.dry_run {
        scope_1808.boolean(*var_1809);
    }
    #[allow(unused_mut)]let mut scope_1810 = writer.prefix("FpgaImageId");
    if let Some(var_1811) = &input.fpga_image_id {
        scope_1810.string(var_1811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(input: &crate::input::DeleteInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1812 = writer.prefix("DryRun");
    if let Some(var_1813) = &input.dry_run {
        scope_1812.boolean(*var_1813);
    }
    #[allow(unused_mut)]let mut scope_1814 = writer.prefix("ForceDelete");
    if let Some(var_1815) = &input.force_delete {
        scope_1814.boolean(*var_1815);
    }
    #[allow(unused_mut)]let mut scope_1816 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1817) = &input.instance_event_window_id {
        scope_1816.string(var_1817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(input: &crate::input::DeleteInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1818 = writer.prefix("DryRun");
    if let Some(var_1819) = &input.dry_run {
        scope_1818.boolean(*var_1819);
    }
    #[allow(unused_mut)]let mut scope_1820 = writer.prefix("InternetGatewayId");
    if let Some(var_1821) = &input.internet_gateway_id {
        scope_1820.string(var_1821);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(input: &crate::input::DeleteIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1822 = writer.prefix("DryRun");
    if let Some(var_1823) = &input.dry_run {
        scope_1822.boolean(*var_1823);
    }
    #[allow(unused_mut)]let mut scope_1824 = writer.prefix("IpamId");
    if let Some(var_1825) = &input.ipam_id {
        scope_1824.string(var_1825);
    }
    #[allow(unused_mut)]let mut scope_1826 = writer.prefix("Cascade");
    if let Some(var_1827) = &input.cascade {
        scope_1826.boolean(*var_1827);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(input: &crate::input::DeleteIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1828 = writer.prefix("DryRun");
    if let Some(var_1829) = &input.dry_run {
        scope_1828.boolean(*var_1829);
    }
    #[allow(unused_mut)]let mut scope_1830 = writer.prefix("IpamPoolId");
    if let Some(var_1831) = &input.ipam_pool_id {
        scope_1830.string(var_1831);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(input: &crate::input::DeleteIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1832 = writer.prefix("DryRun");
    if let Some(var_1833) = &input.dry_run {
        scope_1832.boolean(*var_1833);
    }
    #[allow(unused_mut)]let mut scope_1834 = writer.prefix("IpamScopeId");
    if let Some(var_1835) = &input.ipam_scope_id {
        scope_1834.string(var_1835);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(input: &crate::input::DeleteKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1836 = writer.prefix("KeyName");
    if let Some(var_1837) = &input.key_name {
        scope_1836.string(var_1837);
    }
    #[allow(unused_mut)]let mut scope_1838 = writer.prefix("KeyPairId");
    if let Some(var_1839) = &input.key_pair_id {
        scope_1838.string(var_1839);
    }
    #[allow(unused_mut)]let mut scope_1840 = writer.prefix("DryRun");
    if let Some(var_1841) = &input.dry_run {
        scope_1840.boolean(*var_1841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(input: &crate::input::DeleteLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1842 = writer.prefix("DryRun");
    if let Some(var_1843) = &input.dry_run {
        scope_1842.boolean(*var_1843);
    }
    #[allow(unused_mut)]let mut scope_1844 = writer.prefix("LaunchTemplateId");
    if let Some(var_1845) = &input.launch_template_id {
        scope_1844.string(var_1845);
    }
    #[allow(unused_mut)]let mut scope_1846 = writer.prefix("LaunchTemplateName");
    if let Some(var_1847) = &input.launch_template_name {
        scope_1846.string(var_1847);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(input: &crate::input::DeleteLaunchTemplateVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1848 = writer.prefix("DryRun");
    if let Some(var_1849) = &input.dry_run {
        scope_1848.boolean(*var_1849);
    }
    #[allow(unused_mut)]let mut scope_1850 = writer.prefix("LaunchTemplateId");
    if let Some(var_1851) = &input.launch_template_id {
        scope_1850.string(var_1851);
    }
    #[allow(unused_mut)]let mut scope_1852 = writer.prefix("LaunchTemplateName");
    if let Some(var_1853) = &input.launch_template_name {
        scope_1852.string(var_1853);
    }
    #[allow(unused_mut)]let mut scope_1854 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1855) = &input.versions {
        let mut list_1857 = scope_1854.start_list(true, Some("item"));
        for item_1856 in var_1855 {
            #[allow(unused_mut)]let mut entry_1858 = list_1857.entry();
            entry_1858.string(item_1856);
        }
        list_1857.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(input: &crate::input::DeleteLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1859 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1860) = &input.destination_cidr_block {
        scope_1859.string(var_1860);
    }
    #[allow(unused_mut)]let mut scope_1861 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1862) = &input.local_gateway_route_table_id {
        scope_1861.string(var_1862);
    }
    #[allow(unused_mut)]let mut scope_1863 = writer.prefix("DryRun");
    if let Some(var_1864) = &input.dry_run {
        scope_1863.boolean(*var_1864);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table(input: &crate::input::DeleteLocalGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1865 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1866) = &input.local_gateway_route_table_id {
        scope_1865.string(var_1866);
    }
    #[allow(unused_mut)]let mut scope_1867 = writer.prefix("DryRun");
    if let Some(var_1868) = &input.dry_run {
        scope_1867.boolean(*var_1868);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_virtual_interface_group_association(input: &crate::input::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1869 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_1870) = &input.local_gateway_route_table_virtual_interface_group_association_id {
        scope_1869.string(var_1870);
    }
    #[allow(unused_mut)]let mut scope_1871 = writer.prefix("DryRun");
    if let Some(var_1872) = &input.dry_run {
        scope_1871.boolean(*var_1872);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRouteTableVpcAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1873 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1874) = &input.local_gateway_route_table_vpc_association_id {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]let mut scope_1875 = writer.prefix("DryRun");
    if let Some(var_1876) = &input.dry_run {
        scope_1875.boolean(*var_1876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(input: &crate::input::DeleteManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1877 = writer.prefix("DryRun");
    if let Some(var_1878) = &input.dry_run {
        scope_1877.boolean(*var_1878);
    }
    #[allow(unused_mut)]let mut scope_1879 = writer.prefix("PrefixListId");
    if let Some(var_1880) = &input.prefix_list_id {
        scope_1879.string(var_1880);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(input: &crate::input::DeleteNatGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1881 = writer.prefix("DryRun");
    if let Some(var_1882) = &input.dry_run {
        scope_1881.boolean(*var_1882);
    }
    #[allow(unused_mut)]let mut scope_1883 = writer.prefix("NatGatewayId");
    if let Some(var_1884) = &input.nat_gateway_id {
        scope_1883.string(var_1884);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(input: &crate::input::DeleteNetworkAclInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1885 = writer.prefix("DryRun");
    if let Some(var_1886) = &input.dry_run {
        scope_1885.boolean(*var_1886);
    }
    #[allow(unused_mut)]let mut scope_1887 = writer.prefix("NetworkAclId");
    if let Some(var_1888) = &input.network_acl_id {
        scope_1887.string(var_1888);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(input: &crate::input::DeleteNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1889 = writer.prefix("DryRun");
    if let Some(var_1890) = &input.dry_run {
        scope_1889.boolean(*var_1890);
    }
    #[allow(unused_mut)]let mut scope_1891 = writer.prefix("Egress");
    if let Some(var_1892) = &input.egress {
        scope_1891.boolean(*var_1892);
    }
    #[allow(unused_mut)]let mut scope_1893 = writer.prefix("NetworkAclId");
    if let Some(var_1894) = &input.network_acl_id {
        scope_1893.string(var_1894);
    }
    #[allow(unused_mut)]let mut scope_1895 = writer.prefix("RuleNumber");
    if let Some(var_1896) = &input.rule_number {
        scope_1895.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1896).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(input: &crate::input::DeleteNetworkInsightsAccessScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAccessScope", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1897 = writer.prefix("DryRun");
    if let Some(var_1898) = &input.dry_run {
        scope_1897.boolean(*var_1898);
    }
    #[allow(unused_mut)]let mut scope_1899 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1900) = &input.network_insights_access_scope_id {
        scope_1899.string(var_1900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAccessScopeAnalysis", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1901 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1902) = &input.network_insights_access_scope_analysis_id {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]let mut scope_1903 = writer.prefix("DryRun");
    if let Some(var_1904) = &input.dry_run {
        scope_1903.boolean(*var_1904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(input: &crate::input::DeleteNetworkInsightsAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1905 = writer.prefix("DryRun");
    if let Some(var_1906) = &input.dry_run {
        scope_1905.boolean(*var_1906);
    }
    #[allow(unused_mut)]let mut scope_1907 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1908) = &input.network_insights_analysis_id {
        scope_1907.string(var_1908);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(input: &crate::input::DeleteNetworkInsightsPathInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1909 = writer.prefix("DryRun");
    if let Some(var_1910) = &input.dry_run {
        scope_1909.boolean(*var_1910);
    }
    #[allow(unused_mut)]let mut scope_1911 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1912) = &input.network_insights_path_id {
        scope_1911.string(var_1912);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(input: &crate::input::DeleteNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1913 = writer.prefix("DryRun");
    if let Some(var_1914) = &input.dry_run {
        scope_1913.boolean(*var_1914);
    }
    #[allow(unused_mut)]let mut scope_1915 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1916) = &input.network_interface_id {
        scope_1915.string(var_1916);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(input: &crate::input::DeleteNetworkInterfacePermissionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterfacePermission", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1917 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1918) = &input.network_interface_permission_id {
        scope_1917.string(var_1918);
    }
    #[allow(unused_mut)]let mut scope_1919 = writer.prefix("Force");
    if let Some(var_1920) = &input.force {
        scope_1919.boolean(*var_1920);
    }
    #[allow(unused_mut)]let mut scope_1921 = writer.prefix("DryRun");
    if let Some(var_1922) = &input.dry_run {
        scope_1921.boolean(*var_1922);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(input: &crate::input::DeletePlacementGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1923 = writer.prefix("DryRun");
    if let Some(var_1924) = &input.dry_run {
        scope_1923.boolean(*var_1924);
    }
    #[allow(unused_mut)]let mut scope_1925 = writer.prefix("GroupName");
    if let Some(var_1926) = &input.group_name {
        scope_1925.string(var_1926);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(input: &crate::input::DeletePublicIpv4PoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1927 = writer.prefix("DryRun");
    if let Some(var_1928) = &input.dry_run {
        scope_1927.boolean(*var_1928);
    }
    #[allow(unused_mut)]let mut scope_1929 = writer.prefix("PoolId");
    if let Some(var_1930) = &input.pool_id {
        scope_1929.string(var_1930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(input: &crate::input::DeleteQueuedReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1931 = writer.prefix("DryRun");
    if let Some(var_1932) = &input.dry_run {
        scope_1931.boolean(*var_1932);
    }
    #[allow(unused_mut)]let mut scope_1933 = writer.prefix("ReservedInstancesId");
    if let Some(var_1934) = &input.reserved_instances_ids {
        let mut list_1936 = scope_1933.start_list(true, Some("item"));
        for item_1935 in var_1934 {
            #[allow(unused_mut)]let mut entry_1937 = list_1936.entry();
            entry_1937.string(item_1935);
        }
        list_1936.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(input: &crate::input::DeleteRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1938 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1939) = &input.destination_cidr_block {
        scope_1938.string(var_1939);
    }
    #[allow(unused_mut)]let mut scope_1940 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1941) = &input.destination_ipv6_cidr_block {
        scope_1940.string(var_1941);
    }
    #[allow(unused_mut)]let mut scope_1942 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1943) = &input.destination_prefix_list_id {
        scope_1942.string(var_1943);
    }
    #[allow(unused_mut)]let mut scope_1944 = writer.prefix("DryRun");
    if let Some(var_1945) = &input.dry_run {
        scope_1944.boolean(*var_1945);
    }
    #[allow(unused_mut)]let mut scope_1946 = writer.prefix("RouteTableId");
    if let Some(var_1947) = &input.route_table_id {
        scope_1946.string(var_1947);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(input: &crate::input::DeleteRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1948 = writer.prefix("DryRun");
    if let Some(var_1949) = &input.dry_run {
        scope_1948.boolean(*var_1949);
    }
    #[allow(unused_mut)]let mut scope_1950 = writer.prefix("RouteTableId");
    if let Some(var_1951) = &input.route_table_id {
        scope_1950.string(var_1951);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(input: &crate::input::DeleteSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1952 = writer.prefix("GroupId");
    if let Some(var_1953) = &input.group_id {
        scope_1952.string(var_1953);
    }
    #[allow(unused_mut)]let mut scope_1954 = writer.prefix("GroupName");
    if let Some(var_1955) = &input.group_name {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]let mut scope_1956 = writer.prefix("DryRun");
    if let Some(var_1957) = &input.dry_run {
        scope_1956.boolean(*var_1957);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(input: &crate::input::DeleteSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1958 = writer.prefix("SnapshotId");
    if let Some(var_1959) = &input.snapshot_id {
        scope_1958.string(var_1959);
    }
    #[allow(unused_mut)]let mut scope_1960 = writer.prefix("DryRun");
    if let Some(var_1961) = &input.dry_run {
        scope_1960.boolean(*var_1961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(input: &crate::input::DeleteSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1962 = writer.prefix("DryRun");
    if let Some(var_1963) = &input.dry_run {
        scope_1962.boolean(*var_1963);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(input: &crate::input::DeleteSubnetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1964 = writer.prefix("SubnetId");
    if let Some(var_1965) = &input.subnet_id {
        scope_1964.string(var_1965);
    }
    #[allow(unused_mut)]let mut scope_1966 = writer.prefix("DryRun");
    if let Some(var_1967) = &input.dry_run {
        scope_1966.boolean(*var_1967);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(input: &crate::input::DeleteSubnetCidrReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1968 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1969) = &input.subnet_cidr_reservation_id {
        scope_1968.string(var_1969);
    }
    #[allow(unused_mut)]let mut scope_1970 = writer.prefix("DryRun");
    if let Some(var_1971) = &input.dry_run {
        scope_1970.boolean(*var_1971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(input: &crate::input::DeleteTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1972 = writer.prefix("DryRun");
    if let Some(var_1973) = &input.dry_run {
        scope_1972.boolean(*var_1973);
    }
    #[allow(unused_mut)]let mut scope_1974 = writer.prefix("ResourceId");
    if let Some(var_1975) = &input.resources {
        let mut list_1977 = scope_1974.start_list(true, None);
        for item_1976 in var_1975 {
            #[allow(unused_mut)]let mut entry_1978 = list_1977.entry();
            entry_1978.string(item_1976);
        }
        list_1977.finish();
    }
    #[allow(unused_mut)]let mut scope_1979 = writer.prefix("Tag");
    if let Some(var_1980) = &input.tags {
        let mut list_1982 = scope_1979.start_list(true, Some("item"));
        for item_1981 in var_1980 {
            #[allow(unused_mut)]let mut entry_1983 = list_1982.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1983, item_1981)?;
        }
        list_1982.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(input: &crate::input::DeleteTrafficMirrorFilterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1984 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1985) = &input.traffic_mirror_filter_id {
        scope_1984.string(var_1985);
    }
    #[allow(unused_mut)]let mut scope_1986 = writer.prefix("DryRun");
    if let Some(var_1987) = &input.dry_run {
        scope_1986.boolean(*var_1987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(input: &crate::input::DeleteTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1988 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1989) = &input.traffic_mirror_filter_rule_id {
        scope_1988.string(var_1989);
    }
    #[allow(unused_mut)]let mut scope_1990 = writer.prefix("DryRun");
    if let Some(var_1991) = &input.dry_run {
        scope_1990.boolean(*var_1991);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(input: &crate::input::DeleteTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1992 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1993) = &input.traffic_mirror_session_id {
        scope_1992.string(var_1993);
    }
    #[allow(unused_mut)]let mut scope_1994 = writer.prefix("DryRun");
    if let Some(var_1995) = &input.dry_run {
        scope_1994.boolean(*var_1995);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(input: &crate::input::DeleteTrafficMirrorTargetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]let mut scope_1996 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1997) = &input.traffic_mirror_target_id {
        scope_1996.string(var_1997);
    }
    #[allow(unused_mut)]let mut scope_1998 = writer.prefix("DryRun");
    if let Some(var_1999) = &input.dry_run {
        scope_1998.boolean(*var_1999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(input: &crate::input::DeleteTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2000 = writer.prefix("TransitGatewayId");
    if let Some(var_2001) = &input.transit_gateway_id {
        scope_2000.string(var_2001);
    }
    #[allow(unused_mut)]let mut scope_2002 = writer.prefix("DryRun");
    if let Some(var_2003) = &input.dry_run {
        scope_2002.boolean(*var_2003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(input: &crate::input::DeleteTransitGatewayConnectInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2004 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2005) = &input.transit_gateway_attachment_id {
        scope_2004.string(var_2005);
    }
    #[allow(unused_mut)]let mut scope_2006 = writer.prefix("DryRun");
    if let Some(var_2007) = &input.dry_run {
        scope_2006.boolean(*var_2007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(input: &crate::input::DeleteTransitGatewayConnectPeerInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnectPeer", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2008 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_2009) = &input.transit_gateway_connect_peer_id {
        scope_2008.string(var_2009);
    }
    #[allow(unused_mut)]let mut scope_2010 = writer.prefix("DryRun");
    if let Some(var_2011) = &input.dry_run {
        scope_2010.boolean(*var_2011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(input: &crate::input::DeleteTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2012 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2013) = &input.transit_gateway_multicast_domain_id {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]let mut scope_2014 = writer.prefix("DryRun");
    if let Some(var_2015) = &input.dry_run {
        scope_2014.boolean(*var_2015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2016 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2017) = &input.transit_gateway_attachment_id {
        scope_2016.string(var_2017);
    }
    #[allow(unused_mut)]let mut scope_2018 = writer.prefix("DryRun");
    if let Some(var_2019) = &input.dry_run {
        scope_2018.boolean(*var_2019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_policy_table(input: &crate::input::DeleteTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2020 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_2021) = &input.transit_gateway_policy_table_id {
        scope_2020.string(var_2021);
    }
    #[allow(unused_mut)]let mut scope_2022 = writer.prefix("DryRun");
    if let Some(var_2023) = &input.dry_run {
        scope_2022.boolean(*var_2023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2024 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2025) = &input.transit_gateway_route_table_id {
        scope_2024.string(var_2025);
    }
    #[allow(unused_mut)]let mut scope_2026 = writer.prefix("PrefixListId");
    if let Some(var_2027) = &input.prefix_list_id {
        scope_2026.string(var_2027);
    }
    #[allow(unused_mut)]let mut scope_2028 = writer.prefix("DryRun");
    if let Some(var_2029) = &input.dry_run {
        scope_2028.boolean(*var_2029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(input: &crate::input::DeleteTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2030 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2031) = &input.transit_gateway_route_table_id {
        scope_2030.string(var_2031);
    }
    #[allow(unused_mut)]let mut scope_2032 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2033) = &input.destination_cidr_block {
        scope_2032.string(var_2033);
    }
    #[allow(unused_mut)]let mut scope_2034 = writer.prefix("DryRun");
    if let Some(var_2035) = &input.dry_run {
        scope_2034.boolean(*var_2035);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(input: &crate::input::DeleteTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2036 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_2037) = &input.transit_gateway_route_table_id {
        scope_2036.string(var_2037);
    }
    #[allow(unused_mut)]let mut scope_2038 = writer.prefix("DryRun");
    if let Some(var_2039) = &input.dry_run {
        scope_2038.boolean(*var_2039);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table_announcement(input: &crate::input::DeleteTransitGatewayRouteTableAnnouncementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRouteTableAnnouncement", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2040 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_2041) = &input.transit_gateway_route_table_announcement_id {
        scope_2040.string(var_2041);
    }
    #[allow(unused_mut)]let mut scope_2042 = writer.prefix("DryRun");
    if let Some(var_2043) = &input.dry_run {
        scope_2042.boolean(*var_2043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(input: &crate::input::DeleteTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2044 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_2045) = &input.transit_gateway_attachment_id {
        scope_2044.string(var_2045);
    }
    #[allow(unused_mut)]let mut scope_2046 = writer.prefix("DryRun");
    if let Some(var_2047) = &input.dry_run {
        scope_2046.boolean(*var_2047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(input: &crate::input::DeleteVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2048 = writer.prefix("VolumeId");
    if let Some(var_2049) = &input.volume_id {
        scope_2048.string(var_2049);
    }
    #[allow(unused_mut)]let mut scope_2050 = writer.prefix("DryRun");
    if let Some(var_2051) = &input.dry_run {
        scope_2050.boolean(*var_2051);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(input: &crate::input::DeleteVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2052 = writer.prefix("VpcId");
    if let Some(var_2053) = &input.vpc_id {
        scope_2052.string(var_2053);
    }
    #[allow(unused_mut)]let mut scope_2054 = writer.prefix("DryRun");
    if let Some(var_2055) = &input.dry_run {
        scope_2054.boolean(*var_2055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpointConnectionNotifications", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2056 = writer.prefix("DryRun");
    if let Some(var_2057) = &input.dry_run {
        scope_2056.boolean(*var_2057);
    }
    #[allow(unused_mut)]let mut scope_2058 = writer.prefix("ConnectionNotificationId");
    if let Some(var_2059) = &input.connection_notification_ids {
        let mut list_2061 = scope_2058.start_list(true, Some("item"));
        for item_2060 in var_2059 {
            #[allow(unused_mut)]let mut entry_2062 = list_2061.entry();
            entry_2062.string(item_2060);
        }
        list_2061.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(input: &crate::input::DeleteVpcEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2063 = writer.prefix("DryRun");
    if let Some(var_2064) = &input.dry_run {
        scope_2063.boolean(*var_2064);
    }
    #[allow(unused_mut)]let mut scope_2065 = writer.prefix("VpcEndpointId");
    if let Some(var_2066) = &input.vpc_endpoint_ids {
        let mut list_2068 = scope_2065.start_list(true, Some("item"));
        for item_2067 in var_2066 {
            #[allow(unused_mut)]let mut entry_2069 = list_2068.entry();
            entry_2069.string(item_2067);
        }
        list_2068.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpointServiceConfigurations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2070 = writer.prefix("DryRun");
    if let Some(var_2071) = &input.dry_run {
        scope_2070.boolean(*var_2071);
    }
    #[allow(unused_mut)]let mut scope_2072 = writer.prefix("ServiceId");
    if let Some(var_2073) = &input.service_ids {
        let mut list_2075 = scope_2072.start_list(true, Some("item"));
        for item_2074 in var_2073 {
            #[allow(unused_mut)]let mut entry_2076 = list_2075.entry();
            entry_2076.string(item_2074);
        }
        list_2075.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(input: &crate::input::DeleteVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2077 = writer.prefix("DryRun");
    if let Some(var_2078) = &input.dry_run {
        scope_2077.boolean(*var_2078);
    }
    #[allow(unused_mut)]let mut scope_2079 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_2080) = &input.vpc_peering_connection_id {
        scope_2079.string(var_2080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(input: &crate::input::DeleteVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2081 = writer.prefix("VpnConnectionId");
    if let Some(var_2082) = &input.vpn_connection_id {
        scope_2081.string(var_2082);
    }
    #[allow(unused_mut)]let mut scope_2083 = writer.prefix("DryRun");
    if let Some(var_2084) = &input.dry_run {
        scope_2083.boolean(*var_2084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(input: &crate::input::DeleteVpnConnectionRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2085 = writer.prefix("DestinationCidrBlock");
    if let Some(var_2086) = &input.destination_cidr_block {
        scope_2085.string(var_2086);
    }
    #[allow(unused_mut)]let mut scope_2087 = writer.prefix("VpnConnectionId");
    if let Some(var_2088) = &input.vpn_connection_id {
        scope_2087.string(var_2088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(input: &crate::input::DeleteVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2089 = writer.prefix("VpnGatewayId");
    if let Some(var_2090) = &input.vpn_gateway_id {
        scope_2089.string(var_2090);
    }
    #[allow(unused_mut)]let mut scope_2091 = writer.prefix("DryRun");
    if let Some(var_2092) = &input.dry_run {
        scope_2091.boolean(*var_2092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(input: &crate::input::DeprovisionByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2093 = writer.prefix("Cidr");
    if let Some(var_2094) = &input.cidr {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]let mut scope_2095 = writer.prefix("DryRun");
    if let Some(var_2096) = &input.dry_run {
        scope_2095.boolean(*var_2096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(input: &crate::input::DeprovisionIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2097 = writer.prefix("DryRun");
    if let Some(var_2098) = &input.dry_run {
        scope_2097.boolean(*var_2098);
    }
    #[allow(unused_mut)]let mut scope_2099 = writer.prefix("IpamPoolId");
    if let Some(var_2100) = &input.ipam_pool_id {
        scope_2099.string(var_2100);
    }
    #[allow(unused_mut)]let mut scope_2101 = writer.prefix("Cidr");
    if let Some(var_2102) = &input.cidr {
        scope_2101.string(var_2102);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(input: &crate::input::DeprovisionPublicIpv4PoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2103 = writer.prefix("DryRun");
    if let Some(var_2104) = &input.dry_run {
        scope_2103.boolean(*var_2104);
    }
    #[allow(unused_mut)]let mut scope_2105 = writer.prefix("PoolId");
    if let Some(var_2106) = &input.pool_id {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]let mut scope_2107 = writer.prefix("Cidr");
    if let Some(var_2108) = &input.cidr {
        scope_2107.string(var_2108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(input: &crate::input::DeregisterImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2109 = writer.prefix("ImageId");
    if let Some(var_2110) = &input.image_id {
        scope_2109.string(var_2110);
    }
    #[allow(unused_mut)]let mut scope_2111 = writer.prefix("DryRun");
    if let Some(var_2112) = &input.dry_run {
        scope_2111.boolean(*var_2112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(input: &crate::input::DeregisterInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2113 = writer.prefix("DryRun");
    if let Some(var_2114) = &input.dry_run {
        scope_2113.boolean(*var_2114);
    }
    #[allow(unused_mut)]let mut scope_2115 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2116) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2115, var_2116)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterTransitGatewayMulticastGroupMembers", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2117 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2118) = &input.transit_gateway_multicast_domain_id {
        scope_2117.string(var_2118);
    }
    #[allow(unused_mut)]let mut scope_2119 = writer.prefix("GroupIpAddress");
    if let Some(var_2120) = &input.group_ip_address {
        scope_2119.string(var_2120);
    }
    #[allow(unused_mut)]let mut scope_2121 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2122) = &input.network_interface_ids {
        let mut list_2124 = scope_2121.start_list(true, Some("item"));
        for item_2123 in var_2122 {
            #[allow(unused_mut)]let mut entry_2125 = list_2124.entry();
            entry_2125.string(item_2123);
        }
        list_2124.finish();
    }
    #[allow(unused_mut)]let mut scope_2126 = writer.prefix("DryRun");
    if let Some(var_2127) = &input.dry_run {
        scope_2126.boolean(*var_2127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterTransitGatewayMulticastGroupSources", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2128 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2129) = &input.transit_gateway_multicast_domain_id {
        scope_2128.string(var_2129);
    }
    #[allow(unused_mut)]let mut scope_2130 = writer.prefix("GroupIpAddress");
    if let Some(var_2131) = &input.group_ip_address {
        scope_2130.string(var_2131);
    }
    #[allow(unused_mut)]let mut scope_2132 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2133) = &input.network_interface_ids {
        let mut list_2135 = scope_2132.start_list(true, Some("item"));
        for item_2134 in var_2133 {
            #[allow(unused_mut)]let mut entry_2136 = list_2135.entry();
            entry_2136.string(item_2134);
        }
        list_2135.finish();
    }
    #[allow(unused_mut)]let mut scope_2137 = writer.prefix("DryRun");
    if let Some(var_2138) = &input.dry_run {
        scope_2137.boolean(*var_2138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(input: &crate::input::DescribeAccountAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2139 = writer.prefix("AttributeName");
    if let Some(var_2140) = &input.attribute_names {
        let mut list_2142 = scope_2139.start_list(true, Some("attributeName"));
        for item_2141 in var_2140 {
            #[allow(unused_mut)]let mut entry_2143 = list_2142.entry();
            entry_2143.string(item_2141.as_str());
        }
        list_2142.finish();
    }
    #[allow(unused_mut)]let mut scope_2144 = writer.prefix("DryRun");
    if let Some(var_2145) = &input.dry_run {
        scope_2144.boolean(*var_2145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(input: &crate::input::DescribeAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2146 = writer.prefix("Filter");
    if let Some(var_2147) = &input.filters {
        let mut list_2149 = scope_2146.start_list(true, Some("Filter"));
        for item_2148 in var_2147 {
            #[allow(unused_mut)]let mut entry_2150 = list_2149.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2150, item_2148)?;
        }
        list_2149.finish();
    }
    #[allow(unused_mut)]let mut scope_2151 = writer.prefix("PublicIp");
    if let Some(var_2152) = &input.public_ips {
        let mut list_2154 = scope_2151.start_list(true, Some("PublicIp"));
        for item_2153 in var_2152 {
            #[allow(unused_mut)]let mut entry_2155 = list_2154.entry();
            entry_2155.string(item_2153);
        }
        list_2154.finish();
    }
    #[allow(unused_mut)]let mut scope_2156 = writer.prefix("AllocationId");
    if let Some(var_2157) = &input.allocation_ids {
        let mut list_2159 = scope_2156.start_list(true, Some("AllocationId"));
        for item_2158 in var_2157 {
            #[allow(unused_mut)]let mut entry_2160 = list_2159.entry();
            entry_2160.string(item_2158);
        }
        list_2159.finish();
    }
    #[allow(unused_mut)]let mut scope_2161 = writer.prefix("DryRun");
    if let Some(var_2162) = &input.dry_run {
        scope_2161.boolean(*var_2162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(input: &crate::input::DescribeAddressesAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2163 = writer.prefix("AllocationId");
    if let Some(var_2164) = &input.allocation_ids {
        let mut list_2166 = scope_2163.start_list(true, Some("item"));
        for item_2165 in var_2164 {
            #[allow(unused_mut)]let mut entry_2167 = list_2166.entry();
            entry_2167.string(item_2165);
        }
        list_2166.finish();
    }
    #[allow(unused_mut)]let mut scope_2168 = writer.prefix("Attribute");
    if let Some(var_2169) = &input.attribute {
        scope_2168.string(var_2169.as_str());
    }
    #[allow(unused_mut)]let mut scope_2170 = writer.prefix("NextToken");
    if let Some(var_2171) = &input.next_token {
        scope_2170.string(var_2171);
    }
    #[allow(unused_mut)]let mut scope_2172 = writer.prefix("MaxResults");
    if let Some(var_2173) = &input.max_results {
        scope_2172.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2173).into()));
    }
    #[allow(unused_mut)]let mut scope_2174 = writer.prefix("DryRun");
    if let Some(var_2175) = &input.dry_run {
        scope_2174.boolean(*var_2175);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_address_transfers(input: &crate::input::DescribeAddressTransfersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressTransfers", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2176 = writer.prefix("AllocationId");
    if let Some(var_2177) = &input.allocation_ids {
        let mut list_2179 = scope_2176.start_list(true, Some("AllocationId"));
        for item_2178 in var_2177 {
            #[allow(unused_mut)]let mut entry_2180 = list_2179.entry();
            entry_2180.string(item_2178);
        }
        list_2179.finish();
    }
    #[allow(unused_mut)]let mut scope_2181 = writer.prefix("NextToken");
    if let Some(var_2182) = &input.next_token {
        scope_2181.string(var_2182);
    }
    #[allow(unused_mut)]let mut scope_2183 = writer.prefix("MaxResults");
    if let Some(var_2184) = &input.max_results {
        scope_2183.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2184).into()));
    }
    #[allow(unused_mut)]let mut scope_2185 = writer.prefix("DryRun");
    if let Some(var_2186) = &input.dry_run {
        scope_2185.boolean(*var_2186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(input: &crate::input::DescribeAggregateIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2187 = writer.prefix("DryRun");
    if let Some(var_2188) = &input.dry_run {
        scope_2187.boolean(*var_2188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(input: &crate::input::DescribeAvailabilityZonesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2189 = writer.prefix("Filter");
    if let Some(var_2190) = &input.filters {
        let mut list_2192 = scope_2189.start_list(true, Some("Filter"));
        for item_2191 in var_2190 {
            #[allow(unused_mut)]let mut entry_2193 = list_2192.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2193, item_2191)?;
        }
        list_2192.finish();
    }
    #[allow(unused_mut)]let mut scope_2194 = writer.prefix("ZoneName");
    if let Some(var_2195) = &input.zone_names {
        let mut list_2197 = scope_2194.start_list(true, Some("ZoneName"));
        for item_2196 in var_2195 {
            #[allow(unused_mut)]let mut entry_2198 = list_2197.entry();
            entry_2198.string(item_2196);
        }
        list_2197.finish();
    }
    #[allow(unused_mut)]let mut scope_2199 = writer.prefix("ZoneId");
    if let Some(var_2200) = &input.zone_ids {
        let mut list_2202 = scope_2199.start_list(true, Some("ZoneId"));
        for item_2201 in var_2200 {
            #[allow(unused_mut)]let mut entry_2203 = list_2202.entry();
            entry_2203.string(item_2201);
        }
        list_2202.finish();
    }
    #[allow(unused_mut)]let mut scope_2204 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2205) = &input.all_availability_zones {
        scope_2204.boolean(*var_2205);
    }
    #[allow(unused_mut)]let mut scope_2206 = writer.prefix("DryRun");
    if let Some(var_2207) = &input.dry_run {
        scope_2206.boolean(*var_2207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(input: &crate::input::DescribeBundleTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2208 = writer.prefix("BundleId");
    if let Some(var_2209) = &input.bundle_ids {
        let mut list_2211 = scope_2208.start_list(true, Some("BundleId"));
        for item_2210 in var_2209 {
            #[allow(unused_mut)]let mut entry_2212 = list_2211.entry();
            entry_2212.string(item_2210);
        }
        list_2211.finish();
    }
    #[allow(unused_mut)]let mut scope_2213 = writer.prefix("Filter");
    if let Some(var_2214) = &input.filters {
        let mut list_2216 = scope_2213.start_list(true, Some("Filter"));
        for item_2215 in var_2214 {
            #[allow(unused_mut)]let mut entry_2217 = list_2216.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2217, item_2215)?;
        }
        list_2216.finish();
    }
    #[allow(unused_mut)]let mut scope_2218 = writer.prefix("DryRun");
    if let Some(var_2219) = &input.dry_run {
        scope_2218.boolean(*var_2219);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(input: &crate::input::DescribeByoipCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2220 = writer.prefix("DryRun");
    if let Some(var_2221) = &input.dry_run {
        scope_2220.boolean(*var_2221);
    }
    #[allow(unused_mut)]let mut scope_2222 = writer.prefix("MaxResults");
    if let Some(var_2223) = &input.max_results {
        scope_2222.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2223).into()));
    }
    #[allow(unused_mut)]let mut scope_2224 = writer.prefix("NextToken");
    if let Some(var_2225) = &input.next_token {
        scope_2224.string(var_2225);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(input: &crate::input::DescribeCapacityReservationFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservationFleets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2226 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2227) = &input.capacity_reservation_fleet_ids {
        let mut list_2229 = scope_2226.start_list(true, Some("item"));
        for item_2228 in var_2227 {
            #[allow(unused_mut)]let mut entry_2230 = list_2229.entry();
            entry_2230.string(item_2228);
        }
        list_2229.finish();
    }
    #[allow(unused_mut)]let mut scope_2231 = writer.prefix("NextToken");
    if let Some(var_2232) = &input.next_token {
        scope_2231.string(var_2232);
    }
    #[allow(unused_mut)]let mut scope_2233 = writer.prefix("MaxResults");
    if let Some(var_2234) = &input.max_results {
        scope_2233.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2234).into()));
    }
    #[allow(unused_mut)]let mut scope_2235 = writer.prefix("Filter");
    if let Some(var_2236) = &input.filters {
        let mut list_2238 = scope_2235.start_list(true, Some("Filter"));
        for item_2237 in var_2236 {
            #[allow(unused_mut)]let mut entry_2239 = list_2238.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2239, item_2237)?;
        }
        list_2238.finish();
    }
    #[allow(unused_mut)]let mut scope_2240 = writer.prefix("DryRun");
    if let Some(var_2241) = &input.dry_run {
        scope_2240.boolean(*var_2241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(input: &crate::input::DescribeCapacityReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2242 = writer.prefix("CapacityReservationId");
    if let Some(var_2243) = &input.capacity_reservation_ids {
        let mut list_2245 = scope_2242.start_list(true, Some("item"));
        for item_2244 in var_2243 {
            #[allow(unused_mut)]let mut entry_2246 = list_2245.entry();
            entry_2246.string(item_2244);
        }
        list_2245.finish();
    }
    #[allow(unused_mut)]let mut scope_2247 = writer.prefix("NextToken");
    if let Some(var_2248) = &input.next_token {
        scope_2247.string(var_2248);
    }
    #[allow(unused_mut)]let mut scope_2249 = writer.prefix("MaxResults");
    if let Some(var_2250) = &input.max_results {
        scope_2249.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2250).into()));
    }
    #[allow(unused_mut)]let mut scope_2251 = writer.prefix("Filter");
    if let Some(var_2252) = &input.filters {
        let mut list_2254 = scope_2251.start_list(true, Some("Filter"));
        for item_2253 in var_2252 {
            #[allow(unused_mut)]let mut entry_2255 = list_2254.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2255, item_2253)?;
        }
        list_2254.finish();
    }
    #[allow(unused_mut)]let mut scope_2256 = writer.prefix("DryRun");
    if let Some(var_2257) = &input.dry_run {
        scope_2256.boolean(*var_2257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(input: &crate::input::DescribeCarrierGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2258 = writer.prefix("CarrierGatewayId");
    if let Some(var_2259) = &input.carrier_gateway_ids {
        let mut list_2261 = scope_2258.start_list(true, None);
        for item_2260 in var_2259 {
            #[allow(unused_mut)]let mut entry_2262 = list_2261.entry();
            entry_2262.string(item_2260);
        }
        list_2261.finish();
    }
    #[allow(unused_mut)]let mut scope_2263 = writer.prefix("Filter");
    if let Some(var_2264) = &input.filters {
        let mut list_2266 = scope_2263.start_list(true, Some("Filter"));
        for item_2265 in var_2264 {
            #[allow(unused_mut)]let mut entry_2267 = list_2266.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2267, item_2265)?;
        }
        list_2266.finish();
    }
    #[allow(unused_mut)]let mut scope_2268 = writer.prefix("MaxResults");
    if let Some(var_2269) = &input.max_results {
        scope_2268.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2269).into()));
    }
    #[allow(unused_mut)]let mut scope_2270 = writer.prefix("NextToken");
    if let Some(var_2271) = &input.next_token {
        scope_2270.string(var_2271);
    }
    #[allow(unused_mut)]let mut scope_2272 = writer.prefix("DryRun");
    if let Some(var_2273) = &input.dry_run {
        scope_2272.boolean(*var_2273);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(input: &crate::input::DescribeClassicLinkInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2274 = writer.prefix("Filter");
    if let Some(var_2275) = &input.filters {
        let mut list_2277 = scope_2274.start_list(true, Some("Filter"));
        for item_2276 in var_2275 {
            #[allow(unused_mut)]let mut entry_2278 = list_2277.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2278, item_2276)?;
        }
        list_2277.finish();
    }
    #[allow(unused_mut)]let mut scope_2279 = writer.prefix("DryRun");
    if let Some(var_2280) = &input.dry_run {
        scope_2279.boolean(*var_2280);
    }
    #[allow(unused_mut)]let mut scope_2281 = writer.prefix("InstanceId");
    if let Some(var_2282) = &input.instance_ids {
        let mut list_2284 = scope_2281.start_list(true, Some("InstanceId"));
        for item_2283 in var_2282 {
            #[allow(unused_mut)]let mut entry_2285 = list_2284.entry();
            entry_2285.string(item_2283);
        }
        list_2284.finish();
    }
    #[allow(unused_mut)]let mut scope_2286 = writer.prefix("MaxResults");
    if let Some(var_2287) = &input.max_results {
        scope_2286.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2287).into()));
    }
    #[allow(unused_mut)]let mut scope_2288 = writer.prefix("NextToken");
    if let Some(var_2289) = &input.next_token {
        scope_2288.string(var_2289);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(input: &crate::input::DescribeClientVpnAuthorizationRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnAuthorizationRules", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2290 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2291) = &input.client_vpn_endpoint_id {
        scope_2290.string(var_2291);
    }
    #[allow(unused_mut)]let mut scope_2292 = writer.prefix("DryRun");
    if let Some(var_2293) = &input.dry_run {
        scope_2292.boolean(*var_2293);
    }
    #[allow(unused_mut)]let mut scope_2294 = writer.prefix("NextToken");
    if let Some(var_2295) = &input.next_token {
        scope_2294.string(var_2295);
    }
    #[allow(unused_mut)]let mut scope_2296 = writer.prefix("Filter");
    if let Some(var_2297) = &input.filters {
        let mut list_2299 = scope_2296.start_list(true, Some("Filter"));
        for item_2298 in var_2297 {
            #[allow(unused_mut)]let mut entry_2300 = list_2299.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2300, item_2298)?;
        }
        list_2299.finish();
    }
    #[allow(unused_mut)]let mut scope_2301 = writer.prefix("MaxResults");
    if let Some(var_2302) = &input.max_results {
        scope_2301.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2302).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(input: &crate::input::DescribeClientVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2303 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2304) = &input.client_vpn_endpoint_id {
        scope_2303.string(var_2304);
    }
    #[allow(unused_mut)]let mut scope_2305 = writer.prefix("Filter");
    if let Some(var_2306) = &input.filters {
        let mut list_2308 = scope_2305.start_list(true, Some("Filter"));
        for item_2307 in var_2306 {
            #[allow(unused_mut)]let mut entry_2309 = list_2308.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2309, item_2307)?;
        }
        list_2308.finish();
    }
    #[allow(unused_mut)]let mut scope_2310 = writer.prefix("NextToken");
    if let Some(var_2311) = &input.next_token {
        scope_2310.string(var_2311);
    }
    #[allow(unused_mut)]let mut scope_2312 = writer.prefix("MaxResults");
    if let Some(var_2313) = &input.max_results {
        scope_2312.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2313).into()));
    }
    #[allow(unused_mut)]let mut scope_2314 = writer.prefix("DryRun");
    if let Some(var_2315) = &input.dry_run {
        scope_2314.boolean(*var_2315);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(input: &crate::input::DescribeClientVpnEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2316 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2317) = &input.client_vpn_endpoint_ids {
        let mut list_2319 = scope_2316.start_list(true, Some("item"));
        for item_2318 in var_2317 {
            #[allow(unused_mut)]let mut entry_2320 = list_2319.entry();
            entry_2320.string(item_2318);
        }
        list_2319.finish();
    }
    #[allow(unused_mut)]let mut scope_2321 = writer.prefix("MaxResults");
    if let Some(var_2322) = &input.max_results {
        scope_2321.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2322).into()));
    }
    #[allow(unused_mut)]let mut scope_2323 = writer.prefix("NextToken");
    if let Some(var_2324) = &input.next_token {
        scope_2323.string(var_2324);
    }
    #[allow(unused_mut)]let mut scope_2325 = writer.prefix("Filter");
    if let Some(var_2326) = &input.filters {
        let mut list_2328 = scope_2325.start_list(true, Some("Filter"));
        for item_2327 in var_2326 {
            #[allow(unused_mut)]let mut entry_2329 = list_2328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2329, item_2327)?;
        }
        list_2328.finish();
    }
    #[allow(unused_mut)]let mut scope_2330 = writer.prefix("DryRun");
    if let Some(var_2331) = &input.dry_run {
        scope_2330.boolean(*var_2331);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(input: &crate::input::DescribeClientVpnRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2332 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2333) = &input.client_vpn_endpoint_id {
        scope_2332.string(var_2333);
    }
    #[allow(unused_mut)]let mut scope_2334 = writer.prefix("Filter");
    if let Some(var_2335) = &input.filters {
        let mut list_2337 = scope_2334.start_list(true, Some("Filter"));
        for item_2336 in var_2335 {
            #[allow(unused_mut)]let mut entry_2338 = list_2337.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2338, item_2336)?;
        }
        list_2337.finish();
    }
    #[allow(unused_mut)]let mut scope_2339 = writer.prefix("MaxResults");
    if let Some(var_2340) = &input.max_results {
        scope_2339.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2340).into()));
    }
    #[allow(unused_mut)]let mut scope_2341 = writer.prefix("NextToken");
    if let Some(var_2342) = &input.next_token {
        scope_2341.string(var_2342);
    }
    #[allow(unused_mut)]let mut scope_2343 = writer.prefix("DryRun");
    if let Some(var_2344) = &input.dry_run {
        scope_2343.boolean(*var_2344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(input: &crate::input::DescribeClientVpnTargetNetworksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnTargetNetworks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2345 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2346) = &input.client_vpn_endpoint_id {
        scope_2345.string(var_2346);
    }
    #[allow(unused_mut)]let mut scope_2347 = writer.prefix("AssociationIds");
    if let Some(var_2348) = &input.association_ids {
        let mut list_2350 = scope_2347.start_list(true, Some("item"));
        for item_2349 in var_2348 {
            #[allow(unused_mut)]let mut entry_2351 = list_2350.entry();
            entry_2351.string(item_2349);
        }
        list_2350.finish();
    }
    #[allow(unused_mut)]let mut scope_2352 = writer.prefix("MaxResults");
    if let Some(var_2353) = &input.max_results {
        scope_2352.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2353).into()));
    }
    #[allow(unused_mut)]let mut scope_2354 = writer.prefix("NextToken");
    if let Some(var_2355) = &input.next_token {
        scope_2354.string(var_2355);
    }
    #[allow(unused_mut)]let mut scope_2356 = writer.prefix("Filter");
    if let Some(var_2357) = &input.filters {
        let mut list_2359 = scope_2356.start_list(true, Some("Filter"));
        for item_2358 in var_2357 {
            #[allow(unused_mut)]let mut entry_2360 = list_2359.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2360, item_2358)?;
        }
        list_2359.finish();
    }
    #[allow(unused_mut)]let mut scope_2361 = writer.prefix("DryRun");
    if let Some(var_2362) = &input.dry_run {
        scope_2361.boolean(*var_2362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(input: &crate::input::DescribeCoipPoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2363 = writer.prefix("PoolId");
    if let Some(var_2364) = &input.pool_ids {
        let mut list_2366 = scope_2363.start_list(true, Some("item"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]let mut entry_2367 = list_2366.entry();
            entry_2367.string(item_2365);
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]let mut scope_2368 = writer.prefix("Filter");
    if let Some(var_2369) = &input.filters {
        let mut list_2371 = scope_2368.start_list(true, Some("Filter"));
        for item_2370 in var_2369 {
            #[allow(unused_mut)]let mut entry_2372 = list_2371.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2372, item_2370)?;
        }
        list_2371.finish();
    }
    #[allow(unused_mut)]let mut scope_2373 = writer.prefix("MaxResults");
    if let Some(var_2374) = &input.max_results {
        scope_2373.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2374).into()));
    }
    #[allow(unused_mut)]let mut scope_2375 = writer.prefix("NextToken");
    if let Some(var_2376) = &input.next_token {
        scope_2375.string(var_2376);
    }
    #[allow(unused_mut)]let mut scope_2377 = writer.prefix("DryRun");
    if let Some(var_2378) = &input.dry_run {
        scope_2377.boolean(*var_2378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(input: &crate::input::DescribeConversionTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2379 = writer.prefix("ConversionTaskId");
    if let Some(var_2380) = &input.conversion_task_ids {
        let mut list_2382 = scope_2379.start_list(true, Some("item"));
        for item_2381 in var_2380 {
            #[allow(unused_mut)]let mut entry_2383 = list_2382.entry();
            entry_2383.string(item_2381);
        }
        list_2382.finish();
    }
    #[allow(unused_mut)]let mut scope_2384 = writer.prefix("DryRun");
    if let Some(var_2385) = &input.dry_run {
        scope_2384.boolean(*var_2385);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(input: &crate::input::DescribeCustomerGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2386 = writer.prefix("CustomerGatewayId");
    if let Some(var_2387) = &input.customer_gateway_ids {
        let mut list_2389 = scope_2386.start_list(true, Some("CustomerGatewayId"));
        for item_2388 in var_2387 {
            #[allow(unused_mut)]let mut entry_2390 = list_2389.entry();
            entry_2390.string(item_2388);
        }
        list_2389.finish();
    }
    #[allow(unused_mut)]let mut scope_2391 = writer.prefix("Filter");
    if let Some(var_2392) = &input.filters {
        let mut list_2394 = scope_2391.start_list(true, Some("Filter"));
        for item_2393 in var_2392 {
            #[allow(unused_mut)]let mut entry_2395 = list_2394.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2395, item_2393)?;
        }
        list_2394.finish();
    }
    #[allow(unused_mut)]let mut scope_2396 = writer.prefix("DryRun");
    if let Some(var_2397) = &input.dry_run {
        scope_2396.boolean(*var_2397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(input: &crate::input::DescribeDhcpOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2398 = writer.prefix("DhcpOptionsId");
    if let Some(var_2399) = &input.dhcp_options_ids {
        let mut list_2401 = scope_2398.start_list(true, Some("DhcpOptionsId"));
        for item_2400 in var_2399 {
            #[allow(unused_mut)]let mut entry_2402 = list_2401.entry();
            entry_2402.string(item_2400);
        }
        list_2401.finish();
    }
    #[allow(unused_mut)]let mut scope_2403 = writer.prefix("Filter");
    if let Some(var_2404) = &input.filters {
        let mut list_2406 = scope_2403.start_list(true, Some("Filter"));
        for item_2405 in var_2404 {
            #[allow(unused_mut)]let mut entry_2407 = list_2406.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2407, item_2405)?;
        }
        list_2406.finish();
    }
    #[allow(unused_mut)]let mut scope_2408 = writer.prefix("DryRun");
    if let Some(var_2409) = &input.dry_run {
        scope_2408.boolean(*var_2409);
    }
    #[allow(unused_mut)]let mut scope_2410 = writer.prefix("NextToken");
    if let Some(var_2411) = &input.next_token {
        scope_2410.string(var_2411);
    }
    #[allow(unused_mut)]let mut scope_2412 = writer.prefix("MaxResults");
    if let Some(var_2413) = &input.max_results {
        scope_2412.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2413).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(input: &crate::input::DescribeEgressOnlyInternetGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEgressOnlyInternetGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2414 = writer.prefix("DryRun");
    if let Some(var_2415) = &input.dry_run {
        scope_2414.boolean(*var_2415);
    }
    #[allow(unused_mut)]let mut scope_2416 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2417) = &input.egress_only_internet_gateway_ids {
        let mut list_2419 = scope_2416.start_list(true, Some("item"));
        for item_2418 in var_2417 {
            #[allow(unused_mut)]let mut entry_2420 = list_2419.entry();
            entry_2420.string(item_2418);
        }
        list_2419.finish();
    }
    #[allow(unused_mut)]let mut scope_2421 = writer.prefix("MaxResults");
    if let Some(var_2422) = &input.max_results {
        scope_2421.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2422).into()));
    }
    #[allow(unused_mut)]let mut scope_2423 = writer.prefix("NextToken");
    if let Some(var_2424) = &input.next_token {
        scope_2423.string(var_2424);
    }
    #[allow(unused_mut)]let mut scope_2425 = writer.prefix("Filter");
    if let Some(var_2426) = &input.filters {
        let mut list_2428 = scope_2425.start_list(true, Some("Filter"));
        for item_2427 in var_2426 {
            #[allow(unused_mut)]let mut entry_2429 = list_2428.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2429, item_2427)?;
        }
        list_2428.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(input: &crate::input::DescribeElasticGpusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2430 = writer.prefix("ElasticGpuId");
    if let Some(var_2431) = &input.elastic_gpu_ids {
        let mut list_2433 = scope_2430.start_list(true, Some("item"));
        for item_2432 in var_2431 {
            #[allow(unused_mut)]let mut entry_2434 = list_2433.entry();
            entry_2434.string(item_2432);
        }
        list_2433.finish();
    }
    #[allow(unused_mut)]let mut scope_2435 = writer.prefix("DryRun");
    if let Some(var_2436) = &input.dry_run {
        scope_2435.boolean(*var_2436);
    }
    #[allow(unused_mut)]let mut scope_2437 = writer.prefix("Filter");
    if let Some(var_2438) = &input.filters {
        let mut list_2440 = scope_2437.start_list(true, Some("Filter"));
        for item_2439 in var_2438 {
            #[allow(unused_mut)]let mut entry_2441 = list_2440.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2441, item_2439)?;
        }
        list_2440.finish();
    }
    #[allow(unused_mut)]let mut scope_2442 = writer.prefix("MaxResults");
    if let Some(var_2443) = &input.max_results {
        scope_2442.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2443).into()));
    }
    #[allow(unused_mut)]let mut scope_2444 = writer.prefix("NextToken");
    if let Some(var_2445) = &input.next_token {
        scope_2444.string(var_2445);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(input: &crate::input::DescribeExportImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2446 = writer.prefix("DryRun");
    if let Some(var_2447) = &input.dry_run {
        scope_2446.boolean(*var_2447);
    }
    #[allow(unused_mut)]let mut scope_2448 = writer.prefix("Filter");
    if let Some(var_2449) = &input.filters {
        let mut list_2451 = scope_2448.start_list(true, Some("Filter"));
        for item_2450 in var_2449 {
            #[allow(unused_mut)]let mut entry_2452 = list_2451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2452, item_2450)?;
        }
        list_2451.finish();
    }
    #[allow(unused_mut)]let mut scope_2453 = writer.prefix("ExportImageTaskId");
    if let Some(var_2454) = &input.export_image_task_ids {
        let mut list_2456 = scope_2453.start_list(true, Some("ExportImageTaskId"));
        for item_2455 in var_2454 {
            #[allow(unused_mut)]let mut entry_2457 = list_2456.entry();
            entry_2457.string(item_2455);
        }
        list_2456.finish();
    }
    #[allow(unused_mut)]let mut scope_2458 = writer.prefix("MaxResults");
    if let Some(var_2459) = &input.max_results {
        scope_2458.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2459).into()));
    }
    #[allow(unused_mut)]let mut scope_2460 = writer.prefix("NextToken");
    if let Some(var_2461) = &input.next_token {
        scope_2460.string(var_2461);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(input: &crate::input::DescribeExportTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2462 = writer.prefix("ExportTaskId");
    if let Some(var_2463) = &input.export_task_ids {
        let mut list_2465 = scope_2462.start_list(true, Some("ExportTaskId"));
        for item_2464 in var_2463 {
            #[allow(unused_mut)]let mut entry_2466 = list_2465.entry();
            entry_2466.string(item_2464);
        }
        list_2465.finish();
    }
    #[allow(unused_mut)]let mut scope_2467 = writer.prefix("Filter");
    if let Some(var_2468) = &input.filters {
        let mut list_2470 = scope_2467.start_list(true, Some("Filter"));
        for item_2469 in var_2468 {
            #[allow(unused_mut)]let mut entry_2471 = list_2470.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2471, item_2469)?;
        }
        list_2470.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(input: &crate::input::DescribeFastLaunchImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2472 = writer.prefix("ImageId");
    if let Some(var_2473) = &input.image_ids {
        let mut list_2475 = scope_2472.start_list(true, Some("ImageId"));
        for item_2474 in var_2473 {
            #[allow(unused_mut)]let mut entry_2476 = list_2475.entry();
            entry_2476.string(item_2474);
        }
        list_2475.finish();
    }
    #[allow(unused_mut)]let mut scope_2477 = writer.prefix("Filter");
    if let Some(var_2478) = &input.filters {
        let mut list_2480 = scope_2477.start_list(true, Some("Filter"));
        for item_2479 in var_2478 {
            #[allow(unused_mut)]let mut entry_2481 = list_2480.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2481, item_2479)?;
        }
        list_2480.finish();
    }
    #[allow(unused_mut)]let mut scope_2482 = writer.prefix("MaxResults");
    if let Some(var_2483) = &input.max_results {
        scope_2482.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2483).into()));
    }
    #[allow(unused_mut)]let mut scope_2484 = writer.prefix("NextToken");
    if let Some(var_2485) = &input.next_token {
        scope_2484.string(var_2485);
    }
    #[allow(unused_mut)]let mut scope_2486 = writer.prefix("DryRun");
    if let Some(var_2487) = &input.dry_run {
        scope_2486.boolean(*var_2487);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(input: &crate::input::DescribeFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2488 = writer.prefix("Filter");
    if let Some(var_2489) = &input.filters {
        let mut list_2491 = scope_2488.start_list(true, Some("Filter"));
        for item_2490 in var_2489 {
            #[allow(unused_mut)]let mut entry_2492 = list_2491.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2492, item_2490)?;
        }
        list_2491.finish();
    }
    #[allow(unused_mut)]let mut scope_2493 = writer.prefix("MaxResults");
    if let Some(var_2494) = &input.max_results {
        scope_2493.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2494).into()));
    }
    #[allow(unused_mut)]let mut scope_2495 = writer.prefix("NextToken");
    if let Some(var_2496) = &input.next_token {
        scope_2495.string(var_2496);
    }
    #[allow(unused_mut)]let mut scope_2497 = writer.prefix("DryRun");
    if let Some(var_2498) = &input.dry_run {
        scope_2497.boolean(*var_2498);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(input: &crate::input::DescribeFleetHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2499 = writer.prefix("DryRun");
    if let Some(var_2500) = &input.dry_run {
        scope_2499.boolean(*var_2500);
    }
    #[allow(unused_mut)]let mut scope_2501 = writer.prefix("EventType");
    if let Some(var_2502) = &input.event_type {
        scope_2501.string(var_2502.as_str());
    }
    #[allow(unused_mut)]let mut scope_2503 = writer.prefix("MaxResults");
    if let Some(var_2504) = &input.max_results {
        scope_2503.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2504).into()));
    }
    #[allow(unused_mut)]let mut scope_2505 = writer.prefix("NextToken");
    if let Some(var_2506) = &input.next_token {
        scope_2505.string(var_2506);
    }
    #[allow(unused_mut)]let mut scope_2507 = writer.prefix("FleetId");
    if let Some(var_2508) = &input.fleet_id {
        scope_2507.string(var_2508);
    }
    #[allow(unused_mut)]let mut scope_2509 = writer.prefix("StartTime");
    if let Some(var_2510) = &input.start_time {
        scope_2509.date_time(var_2510, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(input: &crate::input::DescribeFleetInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2511 = writer.prefix("DryRun");
    if let Some(var_2512) = &input.dry_run {
        scope_2511.boolean(*var_2512);
    }
    #[allow(unused_mut)]let mut scope_2513 = writer.prefix("MaxResults");
    if let Some(var_2514) = &input.max_results {
        scope_2513.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2514).into()));
    }
    #[allow(unused_mut)]let mut scope_2515 = writer.prefix("NextToken");
    if let Some(var_2516) = &input.next_token {
        scope_2515.string(var_2516);
    }
    #[allow(unused_mut)]let mut scope_2517 = writer.prefix("FleetId");
    if let Some(var_2518) = &input.fleet_id {
        scope_2517.string(var_2518);
    }
    #[allow(unused_mut)]let mut scope_2519 = writer.prefix("Filter");
    if let Some(var_2520) = &input.filters {
        let mut list_2522 = scope_2519.start_list(true, Some("Filter"));
        for item_2521 in var_2520 {
            #[allow(unused_mut)]let mut entry_2523 = list_2522.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2523, item_2521)?;
        }
        list_2522.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(input: &crate::input::DescribeFleetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2524 = writer.prefix("DryRun");
    if let Some(var_2525) = &input.dry_run {
        scope_2524.boolean(*var_2525);
    }
    #[allow(unused_mut)]let mut scope_2526 = writer.prefix("MaxResults");
    if let Some(var_2527) = &input.max_results {
        scope_2526.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2527).into()));
    }
    #[allow(unused_mut)]let mut scope_2528 = writer.prefix("NextToken");
    if let Some(var_2529) = &input.next_token {
        scope_2528.string(var_2529);
    }
    #[allow(unused_mut)]let mut scope_2530 = writer.prefix("FleetId");
    if let Some(var_2531) = &input.fleet_ids {
        let mut list_2533 = scope_2530.start_list(true, None);
        for item_2532 in var_2531 {
            #[allow(unused_mut)]let mut entry_2534 = list_2533.entry();
            entry_2534.string(item_2532);
        }
        list_2533.finish();
    }
    #[allow(unused_mut)]let mut scope_2535 = writer.prefix("Filter");
    if let Some(var_2536) = &input.filters {
        let mut list_2538 = scope_2535.start_list(true, Some("Filter"));
        for item_2537 in var_2536 {
            #[allow(unused_mut)]let mut entry_2539 = list_2538.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2539, item_2537)?;
        }
        list_2538.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(input: &crate::input::DescribeFlowLogsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2540 = writer.prefix("DryRun");
    if let Some(var_2541) = &input.dry_run {
        scope_2540.boolean(*var_2541);
    }
    #[allow(unused_mut)]let mut scope_2542 = writer.prefix("Filter");
    if let Some(var_2543) = &input.filter {
        let mut list_2545 = scope_2542.start_list(true, Some("Filter"));
        for item_2544 in var_2543 {
            #[allow(unused_mut)]let mut entry_2546 = list_2545.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2546, item_2544)?;
        }
        list_2545.finish();
    }
    #[allow(unused_mut)]let mut scope_2547 = writer.prefix("FlowLogId");
    if let Some(var_2548) = &input.flow_log_ids {
        let mut list_2550 = scope_2547.start_list(true, Some("item"));
        for item_2549 in var_2548 {
            #[allow(unused_mut)]let mut entry_2551 = list_2550.entry();
            entry_2551.string(item_2549);
        }
        list_2550.finish();
    }
    #[allow(unused_mut)]let mut scope_2552 = writer.prefix("MaxResults");
    if let Some(var_2553) = &input.max_results {
        scope_2552.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2553).into()));
    }
    #[allow(unused_mut)]let mut scope_2554 = writer.prefix("NextToken");
    if let Some(var_2555) = &input.next_token {
        scope_2554.string(var_2555);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(input: &crate::input::DescribeFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2556 = writer.prefix("DryRun");
    if let Some(var_2557) = &input.dry_run {
        scope_2556.boolean(*var_2557);
    }
    #[allow(unused_mut)]let mut scope_2558 = writer.prefix("FpgaImageId");
    if let Some(var_2559) = &input.fpga_image_id {
        scope_2558.string(var_2559);
    }
    #[allow(unused_mut)]let mut scope_2560 = writer.prefix("Attribute");
    if let Some(var_2561) = &input.attribute {
        scope_2560.string(var_2561.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(input: &crate::input::DescribeFpgaImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2562 = writer.prefix("DryRun");
    if let Some(var_2563) = &input.dry_run {
        scope_2562.boolean(*var_2563);
    }
    #[allow(unused_mut)]let mut scope_2564 = writer.prefix("FpgaImageId");
    if let Some(var_2565) = &input.fpga_image_ids {
        let mut list_2567 = scope_2564.start_list(true, Some("item"));
        for item_2566 in var_2565 {
            #[allow(unused_mut)]let mut entry_2568 = list_2567.entry();
            entry_2568.string(item_2566);
        }
        list_2567.finish();
    }
    #[allow(unused_mut)]let mut scope_2569 = writer.prefix("Owner");
    if let Some(var_2570) = &input.owners {
        let mut list_2572 = scope_2569.start_list(true, Some("Owner"));
        for item_2571 in var_2570 {
            #[allow(unused_mut)]let mut entry_2573 = list_2572.entry();
            entry_2573.string(item_2571);
        }
        list_2572.finish();
    }
    #[allow(unused_mut)]let mut scope_2574 = writer.prefix("Filter");
    if let Some(var_2575) = &input.filters {
        let mut list_2577 = scope_2574.start_list(true, Some("Filter"));
        for item_2576 in var_2575 {
            #[allow(unused_mut)]let mut entry_2578 = list_2577.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2578, item_2576)?;
        }
        list_2577.finish();
    }
    #[allow(unused_mut)]let mut scope_2579 = writer.prefix("NextToken");
    if let Some(var_2580) = &input.next_token {
        scope_2579.string(var_2580);
    }
    #[allow(unused_mut)]let mut scope_2581 = writer.prefix("MaxResults");
    if let Some(var_2582) = &input.max_results {
        scope_2581.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2582).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(input: &crate::input::DescribeHostReservationOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservationOfferings", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2583 = writer.prefix("Filter");
    if let Some(var_2584) = &input.filter {
        let mut list_2586 = scope_2583.start_list(true, Some("Filter"));
        for item_2585 in var_2584 {
            #[allow(unused_mut)]let mut entry_2587 = list_2586.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2587, item_2585)?;
        }
        list_2586.finish();
    }
    #[allow(unused_mut)]let mut scope_2588 = writer.prefix("MaxDuration");
    if let Some(var_2589) = &input.max_duration {
        scope_2588.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2589).into()));
    }
    #[allow(unused_mut)]let mut scope_2590 = writer.prefix("MaxResults");
    if let Some(var_2591) = &input.max_results {
        scope_2590.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2591).into()));
    }
    #[allow(unused_mut)]let mut scope_2592 = writer.prefix("MinDuration");
    if let Some(var_2593) = &input.min_duration {
        scope_2592.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2593).into()));
    }
    #[allow(unused_mut)]let mut scope_2594 = writer.prefix("NextToken");
    if let Some(var_2595) = &input.next_token {
        scope_2594.string(var_2595);
    }
    #[allow(unused_mut)]let mut scope_2596 = writer.prefix("OfferingId");
    if let Some(var_2597) = &input.offering_id {
        scope_2596.string(var_2597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(input: &crate::input::DescribeHostReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2598 = writer.prefix("Filter");
    if let Some(var_2599) = &input.filter {
        let mut list_2601 = scope_2598.start_list(true, Some("Filter"));
        for item_2600 in var_2599 {
            #[allow(unused_mut)]let mut entry_2602 = list_2601.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2602, item_2600)?;
        }
        list_2601.finish();
    }
    #[allow(unused_mut)]let mut scope_2603 = writer.prefix("HostReservationIdSet");
    if let Some(var_2604) = &input.host_reservation_id_set {
        let mut list_2606 = scope_2603.start_list(true, Some("item"));
        for item_2605 in var_2604 {
            #[allow(unused_mut)]let mut entry_2607 = list_2606.entry();
            entry_2607.string(item_2605);
        }
        list_2606.finish();
    }
    #[allow(unused_mut)]let mut scope_2608 = writer.prefix("MaxResults");
    if let Some(var_2609) = &input.max_results {
        scope_2608.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2609).into()));
    }
    #[allow(unused_mut)]let mut scope_2610 = writer.prefix("NextToken");
    if let Some(var_2611) = &input.next_token {
        scope_2610.string(var_2611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(input: &crate::input::DescribeHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2612 = writer.prefix("Filter");
    if let Some(var_2613) = &input.filter {
        let mut list_2615 = scope_2612.start_list(true, Some("Filter"));
        for item_2614 in var_2613 {
            #[allow(unused_mut)]let mut entry_2616 = list_2615.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2616, item_2614)?;
        }
        list_2615.finish();
    }
    #[allow(unused_mut)]let mut scope_2617 = writer.prefix("HostId");
    if let Some(var_2618) = &input.host_ids {
        let mut list_2620 = scope_2617.start_list(true, Some("item"));
        for item_2619 in var_2618 {
            #[allow(unused_mut)]let mut entry_2621 = list_2620.entry();
            entry_2621.string(item_2619);
        }
        list_2620.finish();
    }
    #[allow(unused_mut)]let mut scope_2622 = writer.prefix("MaxResults");
    if let Some(var_2623) = &input.max_results {
        scope_2622.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2623).into()));
    }
    #[allow(unused_mut)]let mut scope_2624 = writer.prefix("NextToken");
    if let Some(var_2625) = &input.next_token {
        scope_2624.string(var_2625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(input: &crate::input::DescribeIamInstanceProfileAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIamInstanceProfileAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2626 = writer.prefix("AssociationId");
    if let Some(var_2627) = &input.association_ids {
        let mut list_2629 = scope_2626.start_list(true, Some("AssociationId"));
        for item_2628 in var_2627 {
            #[allow(unused_mut)]let mut entry_2630 = list_2629.entry();
            entry_2630.string(item_2628);
        }
        list_2629.finish();
    }
    #[allow(unused_mut)]let mut scope_2631 = writer.prefix("Filter");
    if let Some(var_2632) = &input.filters {
        let mut list_2634 = scope_2631.start_list(true, Some("Filter"));
        for item_2633 in var_2632 {
            #[allow(unused_mut)]let mut entry_2635 = list_2634.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2635, item_2633)?;
        }
        list_2634.finish();
    }
    #[allow(unused_mut)]let mut scope_2636 = writer.prefix("MaxResults");
    if let Some(var_2637) = &input.max_results {
        scope_2636.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2637).into()));
    }
    #[allow(unused_mut)]let mut scope_2638 = writer.prefix("NextToken");
    if let Some(var_2639) = &input.next_token {
        scope_2638.string(var_2639);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(input: &crate::input::DescribeIdentityIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2640 = writer.prefix("PrincipalArn");
    if let Some(var_2641) = &input.principal_arn {
        scope_2640.string(var_2641);
    }
    #[allow(unused_mut)]let mut scope_2642 = writer.prefix("Resource");
    if let Some(var_2643) = &input.resource {
        scope_2642.string(var_2643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(input: &crate::input::DescribeIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2644 = writer.prefix("Resource");
    if let Some(var_2645) = &input.resource {
        scope_2644.string(var_2645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(input: &crate::input::DescribeImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2646 = writer.prefix("Attribute");
    if let Some(var_2647) = &input.attribute {
        scope_2646.string(var_2647.as_str());
    }
    #[allow(unused_mut)]let mut scope_2648 = writer.prefix("ImageId");
    if let Some(var_2649) = &input.image_id {
        scope_2648.string(var_2649);
    }
    #[allow(unused_mut)]let mut scope_2650 = writer.prefix("DryRun");
    if let Some(var_2651) = &input.dry_run {
        scope_2650.boolean(*var_2651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(input: &crate::input::DescribeImagesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2652 = writer.prefix("ExecutableBy");
    if let Some(var_2653) = &input.executable_users {
        let mut list_2655 = scope_2652.start_list(true, Some("ExecutableBy"));
        for item_2654 in var_2653 {
            #[allow(unused_mut)]let mut entry_2656 = list_2655.entry();
            entry_2656.string(item_2654);
        }
        list_2655.finish();
    }
    #[allow(unused_mut)]let mut scope_2657 = writer.prefix("Filter");
    if let Some(var_2658) = &input.filters {
        let mut list_2660 = scope_2657.start_list(true, Some("Filter"));
        for item_2659 in var_2658 {
            #[allow(unused_mut)]let mut entry_2661 = list_2660.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2661, item_2659)?;
        }
        list_2660.finish();
    }
    #[allow(unused_mut)]let mut scope_2662 = writer.prefix("ImageId");
    if let Some(var_2663) = &input.image_ids {
        let mut list_2665 = scope_2662.start_list(true, Some("ImageId"));
        for item_2664 in var_2663 {
            #[allow(unused_mut)]let mut entry_2666 = list_2665.entry();
            entry_2666.string(item_2664);
        }
        list_2665.finish();
    }
    #[allow(unused_mut)]let mut scope_2667 = writer.prefix("Owner");
    if let Some(var_2668) = &input.owners {
        let mut list_2670 = scope_2667.start_list(true, Some("Owner"));
        for item_2669 in var_2668 {
            #[allow(unused_mut)]let mut entry_2671 = list_2670.entry();
            entry_2671.string(item_2669);
        }
        list_2670.finish();
    }
    #[allow(unused_mut)]let mut scope_2672 = writer.prefix("IncludeDeprecated");
    if let Some(var_2673) = &input.include_deprecated {
        scope_2672.boolean(*var_2673);
    }
    #[allow(unused_mut)]let mut scope_2674 = writer.prefix("DryRun");
    if let Some(var_2675) = &input.dry_run {
        scope_2674.boolean(*var_2675);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(input: &crate::input::DescribeImportImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2676 = writer.prefix("DryRun");
    if let Some(var_2677) = &input.dry_run {
        scope_2676.boolean(*var_2677);
    }
    #[allow(unused_mut)]let mut scope_2678 = writer.prefix("Filters");
    if let Some(var_2679) = &input.filters {
        let mut list_2681 = scope_2678.start_list(true, Some("Filter"));
        for item_2680 in var_2679 {
            #[allow(unused_mut)]let mut entry_2682 = list_2681.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2682, item_2680)?;
        }
        list_2681.finish();
    }
    #[allow(unused_mut)]let mut scope_2683 = writer.prefix("ImportTaskId");
    if let Some(var_2684) = &input.import_task_ids {
        let mut list_2686 = scope_2683.start_list(true, Some("ImportTaskId"));
        for item_2685 in var_2684 {
            #[allow(unused_mut)]let mut entry_2687 = list_2686.entry();
            entry_2687.string(item_2685);
        }
        list_2686.finish();
    }
    #[allow(unused_mut)]let mut scope_2688 = writer.prefix("MaxResults");
    if let Some(var_2689) = &input.max_results {
        scope_2688.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2689).into()));
    }
    #[allow(unused_mut)]let mut scope_2690 = writer.prefix("NextToken");
    if let Some(var_2691) = &input.next_token {
        scope_2690.string(var_2691);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(input: &crate::input::DescribeImportSnapshotTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2692 = writer.prefix("DryRun");
    if let Some(var_2693) = &input.dry_run {
        scope_2692.boolean(*var_2693);
    }
    #[allow(unused_mut)]let mut scope_2694 = writer.prefix("Filters");
    if let Some(var_2695) = &input.filters {
        let mut list_2697 = scope_2694.start_list(true, Some("Filter"));
        for item_2696 in var_2695 {
            #[allow(unused_mut)]let mut entry_2698 = list_2697.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2698, item_2696)?;
        }
        list_2697.finish();
    }
    #[allow(unused_mut)]let mut scope_2699 = writer.prefix("ImportTaskId");
    if let Some(var_2700) = &input.import_task_ids {
        let mut list_2702 = scope_2699.start_list(true, Some("ImportTaskId"));
        for item_2701 in var_2700 {
            #[allow(unused_mut)]let mut entry_2703 = list_2702.entry();
            entry_2703.string(item_2701);
        }
        list_2702.finish();
    }
    #[allow(unused_mut)]let mut scope_2704 = writer.prefix("MaxResults");
    if let Some(var_2705) = &input.max_results {
        scope_2704.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2705).into()));
    }
    #[allow(unused_mut)]let mut scope_2706 = writer.prefix("NextToken");
    if let Some(var_2707) = &input.next_token {
        scope_2706.string(var_2707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(input: &crate::input::DescribeInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2708 = writer.prefix("Attribute");
    if let Some(var_2709) = &input.attribute {
        scope_2708.string(var_2709.as_str());
    }
    #[allow(unused_mut)]let mut scope_2710 = writer.prefix("DryRun");
    if let Some(var_2711) = &input.dry_run {
        scope_2710.boolean(*var_2711);
    }
    #[allow(unused_mut)]let mut scope_2712 = writer.prefix("InstanceId");
    if let Some(var_2713) = &input.instance_id {
        scope_2712.string(var_2713);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(input: &crate::input::DescribeInstanceCreditSpecificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceCreditSpecifications", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2714 = writer.prefix("DryRun");
    if let Some(var_2715) = &input.dry_run {
        scope_2714.boolean(*var_2715);
    }
    #[allow(unused_mut)]let mut scope_2716 = writer.prefix("Filter");
    if let Some(var_2717) = &input.filters {
        let mut list_2719 = scope_2716.start_list(true, Some("Filter"));
        for item_2718 in var_2717 {
            #[allow(unused_mut)]let mut entry_2720 = list_2719.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2720, item_2718)?;
        }
        list_2719.finish();
    }
    #[allow(unused_mut)]let mut scope_2721 = writer.prefix("InstanceId");
    if let Some(var_2722) = &input.instance_ids {
        let mut list_2724 = scope_2721.start_list(true, Some("InstanceId"));
        for item_2723 in var_2722 {
            #[allow(unused_mut)]let mut entry_2725 = list_2724.entry();
            entry_2725.string(item_2723);
        }
        list_2724.finish();
    }
    #[allow(unused_mut)]let mut scope_2726 = writer.prefix("MaxResults");
    if let Some(var_2727) = &input.max_results {
        scope_2726.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2727).into()));
    }
    #[allow(unused_mut)]let mut scope_2728 = writer.prefix("NextToken");
    if let Some(var_2729) = &input.next_token {
        scope_2728.string(var_2729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(input: &crate::input::DescribeInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2730 = writer.prefix("DryRun");
    if let Some(var_2731) = &input.dry_run {
        scope_2730.boolean(*var_2731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(input: &crate::input::DescribeInstanceEventWindowsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2732 = writer.prefix("DryRun");
    if let Some(var_2733) = &input.dry_run {
        scope_2732.boolean(*var_2733);
    }
    #[allow(unused_mut)]let mut scope_2734 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2735) = &input.instance_event_window_ids {
        let mut list_2737 = scope_2734.start_list(true, Some("InstanceEventWindowId"));
        for item_2736 in var_2735 {
            #[allow(unused_mut)]let mut entry_2738 = list_2737.entry();
            entry_2738.string(item_2736);
        }
        list_2737.finish();
    }
    #[allow(unused_mut)]let mut scope_2739 = writer.prefix("Filter");
    if let Some(var_2740) = &input.filters {
        let mut list_2742 = scope_2739.start_list(true, Some("Filter"));
        for item_2741 in var_2740 {
            #[allow(unused_mut)]let mut entry_2743 = list_2742.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2743, item_2741)?;
        }
        list_2742.finish();
    }
    #[allow(unused_mut)]let mut scope_2744 = writer.prefix("MaxResults");
    if let Some(var_2745) = &input.max_results {
        scope_2744.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2745).into()));
    }
    #[allow(unused_mut)]let mut scope_2746 = writer.prefix("NextToken");
    if let Some(var_2747) = &input.next_token {
        scope_2746.string(var_2747);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(input: &crate::input::DescribeInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2748 = writer.prefix("Filter");
    if let Some(var_2749) = &input.filters {
        let mut list_2751 = scope_2748.start_list(true, Some("Filter"));
        for item_2750 in var_2749 {
            #[allow(unused_mut)]let mut entry_2752 = list_2751.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2752, item_2750)?;
        }
        list_2751.finish();
    }
    #[allow(unused_mut)]let mut scope_2753 = writer.prefix("InstanceId");
    if let Some(var_2754) = &input.instance_ids {
        let mut list_2756 = scope_2753.start_list(true, Some("InstanceId"));
        for item_2755 in var_2754 {
            #[allow(unused_mut)]let mut entry_2757 = list_2756.entry();
            entry_2757.string(item_2755);
        }
        list_2756.finish();
    }
    #[allow(unused_mut)]let mut scope_2758 = writer.prefix("DryRun");
    if let Some(var_2759) = &input.dry_run {
        scope_2758.boolean(*var_2759);
    }
    #[allow(unused_mut)]let mut scope_2760 = writer.prefix("MaxResults");
    if let Some(var_2761) = &input.max_results {
        scope_2760.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2761).into()));
    }
    #[allow(unused_mut)]let mut scope_2762 = writer.prefix("NextToken");
    if let Some(var_2763) = &input.next_token {
        scope_2762.string(var_2763);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(input: &crate::input::DescribeInstanceStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2764 = writer.prefix("Filter");
    if let Some(var_2765) = &input.filters {
        let mut list_2767 = scope_2764.start_list(true, Some("Filter"));
        for item_2766 in var_2765 {
            #[allow(unused_mut)]let mut entry_2768 = list_2767.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2768, item_2766)?;
        }
        list_2767.finish();
    }
    #[allow(unused_mut)]let mut scope_2769 = writer.prefix("InstanceId");
    if let Some(var_2770) = &input.instance_ids {
        let mut list_2772 = scope_2769.start_list(true, Some("InstanceId"));
        for item_2771 in var_2770 {
            #[allow(unused_mut)]let mut entry_2773 = list_2772.entry();
            entry_2773.string(item_2771);
        }
        list_2772.finish();
    }
    #[allow(unused_mut)]let mut scope_2774 = writer.prefix("MaxResults");
    if let Some(var_2775) = &input.max_results {
        scope_2774.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2775).into()));
    }
    #[allow(unused_mut)]let mut scope_2776 = writer.prefix("NextToken");
    if let Some(var_2777) = &input.next_token {
        scope_2776.string(var_2777);
    }
    #[allow(unused_mut)]let mut scope_2778 = writer.prefix("DryRun");
    if let Some(var_2779) = &input.dry_run {
        scope_2778.boolean(*var_2779);
    }
    #[allow(unused_mut)]let mut scope_2780 = writer.prefix("IncludeAllInstances");
    if let Some(var_2781) = &input.include_all_instances {
        scope_2780.boolean(*var_2781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(input: &crate::input::DescribeInstanceTypeOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2782 = writer.prefix("DryRun");
    if let Some(var_2783) = &input.dry_run {
        scope_2782.boolean(*var_2783);
    }
    #[allow(unused_mut)]let mut scope_2784 = writer.prefix("LocationType");
    if let Some(var_2785) = &input.location_type {
        scope_2784.string(var_2785.as_str());
    }
    #[allow(unused_mut)]let mut scope_2786 = writer.prefix("Filter");
    if let Some(var_2787) = &input.filters {
        let mut list_2789 = scope_2786.start_list(true, Some("Filter"));
        for item_2788 in var_2787 {
            #[allow(unused_mut)]let mut entry_2790 = list_2789.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2790, item_2788)?;
        }
        list_2789.finish();
    }
    #[allow(unused_mut)]let mut scope_2791 = writer.prefix("MaxResults");
    if let Some(var_2792) = &input.max_results {
        scope_2791.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2792).into()));
    }
    #[allow(unused_mut)]let mut scope_2793 = writer.prefix("NextToken");
    if let Some(var_2794) = &input.next_token {
        scope_2793.string(var_2794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(input: &crate::input::DescribeInstanceTypesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2795 = writer.prefix("DryRun");
    if let Some(var_2796) = &input.dry_run {
        scope_2795.boolean(*var_2796);
    }
    #[allow(unused_mut)]let mut scope_2797 = writer.prefix("InstanceType");
    if let Some(var_2798) = &input.instance_types {
        let mut list_2800 = scope_2797.start_list(true, None);
        for item_2799 in var_2798 {
            #[allow(unused_mut)]let mut entry_2801 = list_2800.entry();
            entry_2801.string(item_2799.as_str());
        }
        list_2800.finish();
    }
    #[allow(unused_mut)]let mut scope_2802 = writer.prefix("Filter");
    if let Some(var_2803) = &input.filters {
        let mut list_2805 = scope_2802.start_list(true, Some("Filter"));
        for item_2804 in var_2803 {
            #[allow(unused_mut)]let mut entry_2806 = list_2805.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2806, item_2804)?;
        }
        list_2805.finish();
    }
    #[allow(unused_mut)]let mut scope_2807 = writer.prefix("MaxResults");
    if let Some(var_2808) = &input.max_results {
        scope_2807.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2808).into()));
    }
    #[allow(unused_mut)]let mut scope_2809 = writer.prefix("NextToken");
    if let Some(var_2810) = &input.next_token {
        scope_2809.string(var_2810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(input: &crate::input::DescribeInternetGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2811 = writer.prefix("Filter");
    if let Some(var_2812) = &input.filters {
        let mut list_2814 = scope_2811.start_list(true, Some("Filter"));
        for item_2813 in var_2812 {
            #[allow(unused_mut)]let mut entry_2815 = list_2814.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2815, item_2813)?;
        }
        list_2814.finish();
    }
    #[allow(unused_mut)]let mut scope_2816 = writer.prefix("DryRun");
    if let Some(var_2817) = &input.dry_run {
        scope_2816.boolean(*var_2817);
    }
    #[allow(unused_mut)]let mut scope_2818 = writer.prefix("InternetGatewayId");
    if let Some(var_2819) = &input.internet_gateway_ids {
        let mut list_2821 = scope_2818.start_list(true, Some("item"));
        for item_2820 in var_2819 {
            #[allow(unused_mut)]let mut entry_2822 = list_2821.entry();
            entry_2822.string(item_2820);
        }
        list_2821.finish();
    }
    #[allow(unused_mut)]let mut scope_2823 = writer.prefix("NextToken");
    if let Some(var_2824) = &input.next_token {
        scope_2823.string(var_2824);
    }
    #[allow(unused_mut)]let mut scope_2825 = writer.prefix("MaxResults");
    if let Some(var_2826) = &input.max_results {
        scope_2825.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2826).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(input: &crate::input::DescribeIpamPoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2827 = writer.prefix("DryRun");
    if let Some(var_2828) = &input.dry_run {
        scope_2827.boolean(*var_2828);
    }
    #[allow(unused_mut)]let mut scope_2829 = writer.prefix("Filter");
    if let Some(var_2830) = &input.filters {
        let mut list_2832 = scope_2829.start_list(true, Some("Filter"));
        for item_2831 in var_2830 {
            #[allow(unused_mut)]let mut entry_2833 = list_2832.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2833, item_2831)?;
        }
        list_2832.finish();
    }
    #[allow(unused_mut)]let mut scope_2834 = writer.prefix("MaxResults");
    if let Some(var_2835) = &input.max_results {
        scope_2834.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2835).into()));
    }
    #[allow(unused_mut)]let mut scope_2836 = writer.prefix("NextToken");
    if let Some(var_2837) = &input.next_token {
        scope_2836.string(var_2837);
    }
    #[allow(unused_mut)]let mut scope_2838 = writer.prefix("IpamPoolId");
    if let Some(var_2839) = &input.ipam_pool_ids {
        let mut list_2841 = scope_2838.start_list(true, Some("item"));
        for item_2840 in var_2839 {
            #[allow(unused_mut)]let mut entry_2842 = list_2841.entry();
            entry_2842.string(item_2840);
        }
        list_2841.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(input: &crate::input::DescribeIpamsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2843 = writer.prefix("DryRun");
    if let Some(var_2844) = &input.dry_run {
        scope_2843.boolean(*var_2844);
    }
    #[allow(unused_mut)]let mut scope_2845 = writer.prefix("Filter");
    if let Some(var_2846) = &input.filters {
        let mut list_2848 = scope_2845.start_list(true, Some("Filter"));
        for item_2847 in var_2846 {
            #[allow(unused_mut)]let mut entry_2849 = list_2848.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2849, item_2847)?;
        }
        list_2848.finish();
    }
    #[allow(unused_mut)]let mut scope_2850 = writer.prefix("MaxResults");
    if let Some(var_2851) = &input.max_results {
        scope_2850.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2851).into()));
    }
    #[allow(unused_mut)]let mut scope_2852 = writer.prefix("NextToken");
    if let Some(var_2853) = &input.next_token {
        scope_2852.string(var_2853);
    }
    #[allow(unused_mut)]let mut scope_2854 = writer.prefix("IpamId");
    if let Some(var_2855) = &input.ipam_ids {
        let mut list_2857 = scope_2854.start_list(true, Some("item"));
        for item_2856 in var_2855 {
            #[allow(unused_mut)]let mut entry_2858 = list_2857.entry();
            entry_2858.string(item_2856);
        }
        list_2857.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(input: &crate::input::DescribeIpamScopesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2859 = writer.prefix("DryRun");
    if let Some(var_2860) = &input.dry_run {
        scope_2859.boolean(*var_2860);
    }
    #[allow(unused_mut)]let mut scope_2861 = writer.prefix("Filter");
    if let Some(var_2862) = &input.filters {
        let mut list_2864 = scope_2861.start_list(true, Some("Filter"));
        for item_2863 in var_2862 {
            #[allow(unused_mut)]let mut entry_2865 = list_2864.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2865, item_2863)?;
        }
        list_2864.finish();
    }
    #[allow(unused_mut)]let mut scope_2866 = writer.prefix("MaxResults");
    if let Some(var_2867) = &input.max_results {
        scope_2866.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2867).into()));
    }
    #[allow(unused_mut)]let mut scope_2868 = writer.prefix("NextToken");
    if let Some(var_2869) = &input.next_token {
        scope_2868.string(var_2869);
    }
    #[allow(unused_mut)]let mut scope_2870 = writer.prefix("IpamScopeId");
    if let Some(var_2871) = &input.ipam_scope_ids {
        let mut list_2873 = scope_2870.start_list(true, Some("item"));
        for item_2872 in var_2871 {
            #[allow(unused_mut)]let mut entry_2874 = list_2873.entry();
            entry_2874.string(item_2872);
        }
        list_2873.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(input: &crate::input::DescribeIpv6PoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2875 = writer.prefix("PoolId");
    if let Some(var_2876) = &input.pool_ids {
        let mut list_2878 = scope_2875.start_list(true, Some("item"));
        for item_2877 in var_2876 {
            #[allow(unused_mut)]let mut entry_2879 = list_2878.entry();
            entry_2879.string(item_2877);
        }
        list_2878.finish();
    }
    #[allow(unused_mut)]let mut scope_2880 = writer.prefix("NextToken");
    if let Some(var_2881) = &input.next_token {
        scope_2880.string(var_2881);
    }
    #[allow(unused_mut)]let mut scope_2882 = writer.prefix("MaxResults");
    if let Some(var_2883) = &input.max_results {
        scope_2882.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2883).into()));
    }
    #[allow(unused_mut)]let mut scope_2884 = writer.prefix("DryRun");
    if let Some(var_2885) = &input.dry_run {
        scope_2884.boolean(*var_2885);
    }
    #[allow(unused_mut)]let mut scope_2886 = writer.prefix("Filter");
    if let Some(var_2887) = &input.filters {
        let mut list_2889 = scope_2886.start_list(true, Some("Filter"));
        for item_2888 in var_2887 {
            #[allow(unused_mut)]let mut entry_2890 = list_2889.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2890, item_2888)?;
        }
        list_2889.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(input: &crate::input::DescribeKeyPairsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2891 = writer.prefix("Filter");
    if let Some(var_2892) = &input.filters {
        let mut list_2894 = scope_2891.start_list(true, Some("Filter"));
        for item_2893 in var_2892 {
            #[allow(unused_mut)]let mut entry_2895 = list_2894.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2895, item_2893)?;
        }
        list_2894.finish();
    }
    #[allow(unused_mut)]let mut scope_2896 = writer.prefix("KeyName");
    if let Some(var_2897) = &input.key_names {
        let mut list_2899 = scope_2896.start_list(true, Some("KeyName"));
        for item_2898 in var_2897 {
            #[allow(unused_mut)]let mut entry_2900 = list_2899.entry();
            entry_2900.string(item_2898);
        }
        list_2899.finish();
    }
    #[allow(unused_mut)]let mut scope_2901 = writer.prefix("KeyPairId");
    if let Some(var_2902) = &input.key_pair_ids {
        let mut list_2904 = scope_2901.start_list(true, Some("KeyPairId"));
        for item_2903 in var_2902 {
            #[allow(unused_mut)]let mut entry_2905 = list_2904.entry();
            entry_2905.string(item_2903);
        }
        list_2904.finish();
    }
    #[allow(unused_mut)]let mut scope_2906 = writer.prefix("DryRun");
    if let Some(var_2907) = &input.dry_run {
        scope_2906.boolean(*var_2907);
    }
    #[allow(unused_mut)]let mut scope_2908 = writer.prefix("IncludePublicKey");
    if let Some(var_2909) = &input.include_public_key {
        scope_2908.boolean(*var_2909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(input: &crate::input::DescribeLaunchTemplatesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2910 = writer.prefix("DryRun");
    if let Some(var_2911) = &input.dry_run {
        scope_2910.boolean(*var_2911);
    }
    #[allow(unused_mut)]let mut scope_2912 = writer.prefix("LaunchTemplateId");
    if let Some(var_2913) = &input.launch_template_ids {
        let mut list_2915 = scope_2912.start_list(true, Some("item"));
        for item_2914 in var_2913 {
            #[allow(unused_mut)]let mut entry_2916 = list_2915.entry();
            entry_2916.string(item_2914);
        }
        list_2915.finish();
    }
    #[allow(unused_mut)]let mut scope_2917 = writer.prefix("LaunchTemplateName");
    if let Some(var_2918) = &input.launch_template_names {
        let mut list_2920 = scope_2917.start_list(true, Some("item"));
        for item_2919 in var_2918 {
            #[allow(unused_mut)]let mut entry_2921 = list_2920.entry();
            entry_2921.string(item_2919);
        }
        list_2920.finish();
    }
    #[allow(unused_mut)]let mut scope_2922 = writer.prefix("Filter");
    if let Some(var_2923) = &input.filters {
        let mut list_2925 = scope_2922.start_list(true, Some("Filter"));
        for item_2924 in var_2923 {
            #[allow(unused_mut)]let mut entry_2926 = list_2925.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2926, item_2924)?;
        }
        list_2925.finish();
    }
    #[allow(unused_mut)]let mut scope_2927 = writer.prefix("NextToken");
    if let Some(var_2928) = &input.next_token {
        scope_2927.string(var_2928);
    }
    #[allow(unused_mut)]let mut scope_2929 = writer.prefix("MaxResults");
    if let Some(var_2930) = &input.max_results {
        scope_2929.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2930).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(input: &crate::input::DescribeLaunchTemplateVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2931 = writer.prefix("DryRun");
    if let Some(var_2932) = &input.dry_run {
        scope_2931.boolean(*var_2932);
    }
    #[allow(unused_mut)]let mut scope_2933 = writer.prefix("LaunchTemplateId");
    if let Some(var_2934) = &input.launch_template_id {
        scope_2933.string(var_2934);
    }
    #[allow(unused_mut)]let mut scope_2935 = writer.prefix("LaunchTemplateName");
    if let Some(var_2936) = &input.launch_template_name {
        scope_2935.string(var_2936);
    }
    #[allow(unused_mut)]let mut scope_2937 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2938) = &input.versions {
        let mut list_2940 = scope_2937.start_list(true, Some("item"));
        for item_2939 in var_2938 {
            #[allow(unused_mut)]let mut entry_2941 = list_2940.entry();
            entry_2941.string(item_2939);
        }
        list_2940.finish();
    }
    #[allow(unused_mut)]let mut scope_2942 = writer.prefix("MinVersion");
    if let Some(var_2943) = &input.min_version {
        scope_2942.string(var_2943);
    }
    #[allow(unused_mut)]let mut scope_2944 = writer.prefix("MaxVersion");
    if let Some(var_2945) = &input.max_version {
        scope_2944.string(var_2945);
    }
    #[allow(unused_mut)]let mut scope_2946 = writer.prefix("NextToken");
    if let Some(var_2947) = &input.next_token {
        scope_2946.string(var_2947);
    }
    #[allow(unused_mut)]let mut scope_2948 = writer.prefix("MaxResults");
    if let Some(var_2949) = &input.max_results {
        scope_2948.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2949).into()));
    }
    #[allow(unused_mut)]let mut scope_2950 = writer.prefix("Filter");
    if let Some(var_2951) = &input.filters {
        let mut list_2953 = scope_2950.start_list(true, Some("Filter"));
        for item_2952 in var_2951 {
            #[allow(unused_mut)]let mut entry_2954 = list_2953.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2954, item_2952)?;
        }
        list_2953.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(input: &crate::input::DescribeLocalGatewayRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2955 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2956) = &input.local_gateway_route_table_ids {
        let mut list_2958 = scope_2955.start_list(true, Some("item"));
        for item_2957 in var_2956 {
            #[allow(unused_mut)]let mut entry_2959 = list_2958.entry();
            entry_2959.string(item_2957);
        }
        list_2958.finish();
    }
    #[allow(unused_mut)]let mut scope_2960 = writer.prefix("Filter");
    if let Some(var_2961) = &input.filters {
        let mut list_2963 = scope_2960.start_list(true, Some("Filter"));
        for item_2962 in var_2961 {
            #[allow(unused_mut)]let mut entry_2964 = list_2963.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2964, item_2962)?;
        }
        list_2963.finish();
    }
    #[allow(unused_mut)]let mut scope_2965 = writer.prefix("MaxResults");
    if let Some(var_2966) = &input.max_results {
        scope_2965.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2966).into()));
    }
    #[allow(unused_mut)]let mut scope_2967 = writer.prefix("NextToken");
    if let Some(var_2968) = &input.next_token {
        scope_2967.string(var_2968);
    }
    #[allow(unused_mut)]let mut scope_2969 = writer.prefix("DryRun");
    if let Some(var_2970) = &input.dry_run {
        scope_2969.boolean(*var_2970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2971 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2972) = &input.local_gateway_route_table_virtual_interface_group_association_ids {
        let mut list_2974 = scope_2971.start_list(true, Some("item"));
        for item_2973 in var_2972 {
            #[allow(unused_mut)]let mut entry_2975 = list_2974.entry();
            entry_2975.string(item_2973);
        }
        list_2974.finish();
    }
    #[allow(unused_mut)]let mut scope_2976 = writer.prefix("Filter");
    if let Some(var_2977) = &input.filters {
        let mut list_2979 = scope_2976.start_list(true, Some("Filter"));
        for item_2978 in var_2977 {
            #[allow(unused_mut)]let mut entry_2980 = list_2979.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2980, item_2978)?;
        }
        list_2979.finish();
    }
    #[allow(unused_mut)]let mut scope_2981 = writer.prefix("MaxResults");
    if let Some(var_2982) = &input.max_results {
        scope_2981.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2982).into()));
    }
    #[allow(unused_mut)]let mut scope_2983 = writer.prefix("NextToken");
    if let Some(var_2984) = &input.next_token {
        scope_2983.string(var_2984);
    }
    #[allow(unused_mut)]let mut scope_2985 = writer.prefix("DryRun");
    if let Some(var_2986) = &input.dry_run {
        scope_2985.boolean(*var_2986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayRouteTableVpcAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_2987 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2988) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2990 = scope_2987.start_list(true, Some("item"));
        for item_2989 in var_2988 {
            #[allow(unused_mut)]let mut entry_2991 = list_2990.entry();
            entry_2991.string(item_2989);
        }
        list_2990.finish();
    }
    #[allow(unused_mut)]let mut scope_2992 = writer.prefix("Filter");
    if let Some(var_2993) = &input.filters {
        let mut list_2995 = scope_2992.start_list(true, Some("Filter"));
        for item_2994 in var_2993 {
            #[allow(unused_mut)]let mut entry_2996 = list_2995.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2996, item_2994)?;
        }
        list_2995.finish();
    }
    #[allow(unused_mut)]let mut scope_2997 = writer.prefix("MaxResults");
    if let Some(var_2998) = &input.max_results {
        scope_2997.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2998).into()));
    }
    #[allow(unused_mut)]let mut scope_2999 = writer.prefix("NextToken");
    if let Some(var_3000) = &input.next_token {
        scope_2999.string(var_3000);
    }
    #[allow(unused_mut)]let mut scope_3001 = writer.prefix("DryRun");
    if let Some(var_3002) = &input.dry_run {
        scope_3001.boolean(*var_3002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(input: &crate::input::DescribeLocalGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3003 = writer.prefix("LocalGatewayId");
    if let Some(var_3004) = &input.local_gateway_ids {
        let mut list_3006 = scope_3003.start_list(true, Some("item"));
        for item_3005 in var_3004 {
            #[allow(unused_mut)]let mut entry_3007 = list_3006.entry();
            entry_3007.string(item_3005);
        }
        list_3006.finish();
    }
    #[allow(unused_mut)]let mut scope_3008 = writer.prefix("Filter");
    if let Some(var_3009) = &input.filters {
        let mut list_3011 = scope_3008.start_list(true, Some("Filter"));
        for item_3010 in var_3009 {
            #[allow(unused_mut)]let mut entry_3012 = list_3011.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3012, item_3010)?;
        }
        list_3011.finish();
    }
    #[allow(unused_mut)]let mut scope_3013 = writer.prefix("MaxResults");
    if let Some(var_3014) = &input.max_results {
        scope_3013.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3014).into()));
    }
    #[allow(unused_mut)]let mut scope_3015 = writer.prefix("NextToken");
    if let Some(var_3016) = &input.next_token {
        scope_3015.string(var_3016);
    }
    #[allow(unused_mut)]let mut scope_3017 = writer.prefix("DryRun");
    if let Some(var_3018) = &input.dry_run {
        scope_3017.boolean(*var_3018);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayVirtualInterfaceGroups", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3019 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_3020) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_3022 = scope_3019.start_list(true, Some("item"));
        for item_3021 in var_3020 {
            #[allow(unused_mut)]let mut entry_3023 = list_3022.entry();
            entry_3023.string(item_3021);
        }
        list_3022.finish();
    }
    #[allow(unused_mut)]let mut scope_3024 = writer.prefix("Filter");
    if let Some(var_3025) = &input.filters {
        let mut list_3027 = scope_3024.start_list(true, Some("Filter"));
        for item_3026 in var_3025 {
            #[allow(unused_mut)]let mut entry_3028 = list_3027.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3028, item_3026)?;
        }
        list_3027.finish();
    }
    #[allow(unused_mut)]let mut scope_3029 = writer.prefix("MaxResults");
    if let Some(var_3030) = &input.max_results {
        scope_3029.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3030).into()));
    }
    #[allow(unused_mut)]let mut scope_3031 = writer.prefix("NextToken");
    if let Some(var_3032) = &input.next_token {
        scope_3031.string(var_3032);
    }
    #[allow(unused_mut)]let mut scope_3033 = writer.prefix("DryRun");
    if let Some(var_3034) = &input.dry_run {
        scope_3033.boolean(*var_3034);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGatewayVirtualInterfaces", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3035 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_3036) = &input.local_gateway_virtual_interface_ids {
        let mut list_3038 = scope_3035.start_list(true, Some("item"));
        for item_3037 in var_3036 {
            #[allow(unused_mut)]let mut entry_3039 = list_3038.entry();
            entry_3039.string(item_3037);
        }
        list_3038.finish();
    }
    #[allow(unused_mut)]let mut scope_3040 = writer.prefix("Filter");
    if let Some(var_3041) = &input.filters {
        let mut list_3043 = scope_3040.start_list(true, Some("Filter"));
        for item_3042 in var_3041 {
            #[allow(unused_mut)]let mut entry_3044 = list_3043.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3044, item_3042)?;
        }
        list_3043.finish();
    }
    #[allow(unused_mut)]let mut scope_3045 = writer.prefix("MaxResults");
    if let Some(var_3046) = &input.max_results {
        scope_3045.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3046).into()));
    }
    #[allow(unused_mut)]let mut scope_3047 = writer.prefix("NextToken");
    if let Some(var_3048) = &input.next_token {
        scope_3047.string(var_3048);
    }
    #[allow(unused_mut)]let mut scope_3049 = writer.prefix("DryRun");
    if let Some(var_3050) = &input.dry_run {
        scope_3049.boolean(*var_3050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(input: &crate::input::DescribeManagedPrefixListsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3051 = writer.prefix("DryRun");
    if let Some(var_3052) = &input.dry_run {
        scope_3051.boolean(*var_3052);
    }
    #[allow(unused_mut)]let mut scope_3053 = writer.prefix("Filter");
    if let Some(var_3054) = &input.filters {
        let mut list_3056 = scope_3053.start_list(true, Some("Filter"));
        for item_3055 in var_3054 {
            #[allow(unused_mut)]let mut entry_3057 = list_3056.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3057, item_3055)?;
        }
        list_3056.finish();
    }
    #[allow(unused_mut)]let mut scope_3058 = writer.prefix("MaxResults");
    if let Some(var_3059) = &input.max_results {
        scope_3058.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3059).into()));
    }
    #[allow(unused_mut)]let mut scope_3060 = writer.prefix("NextToken");
    if let Some(var_3061) = &input.next_token {
        scope_3060.string(var_3061);
    }
    #[allow(unused_mut)]let mut scope_3062 = writer.prefix("PrefixListId");
    if let Some(var_3063) = &input.prefix_list_ids {
        let mut list_3065 = scope_3062.start_list(true, Some("item"));
        for item_3064 in var_3063 {
            #[allow(unused_mut)]let mut entry_3066 = list_3065.entry();
            entry_3066.string(item_3064);
        }
        list_3065.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(input: &crate::input::DescribeMovingAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3067 = writer.prefix("Filter");
    if let Some(var_3068) = &input.filters {
        let mut list_3070 = scope_3067.start_list(true, Some("Filter"));
        for item_3069 in var_3068 {
            #[allow(unused_mut)]let mut entry_3071 = list_3070.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3071, item_3069)?;
        }
        list_3070.finish();
    }
    #[allow(unused_mut)]let mut scope_3072 = writer.prefix("DryRun");
    if let Some(var_3073) = &input.dry_run {
        scope_3072.boolean(*var_3073);
    }
    #[allow(unused_mut)]let mut scope_3074 = writer.prefix("MaxResults");
    if let Some(var_3075) = &input.max_results {
        scope_3074.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3075).into()));
    }
    #[allow(unused_mut)]let mut scope_3076 = writer.prefix("NextToken");
    if let Some(var_3077) = &input.next_token {
        scope_3076.string(var_3077);
    }
    #[allow(unused_mut)]let mut scope_3078 = writer.prefix("PublicIp");
    if let Some(var_3079) = &input.public_ips {
        let mut list_3081 = scope_3078.start_list(true, Some("item"));
        for item_3080 in var_3079 {
            #[allow(unused_mut)]let mut entry_3082 = list_3081.entry();
            entry_3082.string(item_3080);
        }
        list_3081.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(input: &crate::input::DescribeNatGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3083 = writer.prefix("DryRun");
    if let Some(var_3084) = &input.dry_run {
        scope_3083.boolean(*var_3084);
    }
    #[allow(unused_mut)]let mut scope_3085 = writer.prefix("Filter");
    if let Some(var_3086) = &input.filter {
        let mut list_3088 = scope_3085.start_list(true, Some("Filter"));
        for item_3087 in var_3086 {
            #[allow(unused_mut)]let mut entry_3089 = list_3088.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3089, item_3087)?;
        }
        list_3088.finish();
    }
    #[allow(unused_mut)]let mut scope_3090 = writer.prefix("MaxResults");
    if let Some(var_3091) = &input.max_results {
        scope_3090.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3091).into()));
    }
    #[allow(unused_mut)]let mut scope_3092 = writer.prefix("NatGatewayId");
    if let Some(var_3093) = &input.nat_gateway_ids {
        let mut list_3095 = scope_3092.start_list(true, Some("item"));
        for item_3094 in var_3093 {
            #[allow(unused_mut)]let mut entry_3096 = list_3095.entry();
            entry_3096.string(item_3094);
        }
        list_3095.finish();
    }
    #[allow(unused_mut)]let mut scope_3097 = writer.prefix("NextToken");
    if let Some(var_3098) = &input.next_token {
        scope_3097.string(var_3098);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(input: &crate::input::DescribeNetworkAclsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3099 = writer.prefix("Filter");
    if let Some(var_3100) = &input.filters {
        let mut list_3102 = scope_3099.start_list(true, Some("Filter"));
        for item_3101 in var_3100 {
            #[allow(unused_mut)]let mut entry_3103 = list_3102.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3103, item_3101)?;
        }
        list_3102.finish();
    }
    #[allow(unused_mut)]let mut scope_3104 = writer.prefix("DryRun");
    if let Some(var_3105) = &input.dry_run {
        scope_3104.boolean(*var_3105);
    }
    #[allow(unused_mut)]let mut scope_3106 = writer.prefix("NetworkAclId");
    if let Some(var_3107) = &input.network_acl_ids {
        let mut list_3109 = scope_3106.start_list(true, Some("item"));
        for item_3108 in var_3107 {
            #[allow(unused_mut)]let mut entry_3110 = list_3109.entry();
            entry_3110.string(item_3108);
        }
        list_3109.finish();
    }
    #[allow(unused_mut)]let mut scope_3111 = writer.prefix("NextToken");
    if let Some(var_3112) = &input.next_token {
        scope_3111.string(var_3112);
    }
    #[allow(unused_mut)]let mut scope_3113 = writer.prefix("MaxResults");
    if let Some(var_3114) = &input.max_results {
        scope_3113.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3114).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAccessScopeAnalyses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3115 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_3116) = &input.network_insights_access_scope_analysis_ids {
        let mut list_3118 = scope_3115.start_list(true, Some("item"));
        for item_3117 in var_3116 {
            #[allow(unused_mut)]let mut entry_3119 = list_3118.entry();
            entry_3119.string(item_3117);
        }
        list_3118.finish();
    }
    #[allow(unused_mut)]let mut scope_3120 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3121) = &input.network_insights_access_scope_id {
        scope_3120.string(var_3121);
    }
    #[allow(unused_mut)]let mut scope_3122 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_3123) = &input.analysis_start_time_begin {
        scope_3122.date_time(var_3123, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_3124 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3125) = &input.analysis_start_time_end {
        scope_3124.date_time(var_3125, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_3126 = writer.prefix("Filter");
    if let Some(var_3127) = &input.filters {
        let mut list_3129 = scope_3126.start_list(true, Some("Filter"));
        for item_3128 in var_3127 {
            #[allow(unused_mut)]let mut entry_3130 = list_3129.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3130, item_3128)?;
        }
        list_3129.finish();
    }
    #[allow(unused_mut)]let mut scope_3131 = writer.prefix("MaxResults");
    if let Some(var_3132) = &input.max_results {
        scope_3131.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3132).into()));
    }
    #[allow(unused_mut)]let mut scope_3133 = writer.prefix("DryRun");
    if let Some(var_3134) = &input.dry_run {
        scope_3133.boolean(*var_3134);
    }
    #[allow(unused_mut)]let mut scope_3135 = writer.prefix("NextToken");
    if let Some(var_3136) = &input.next_token {
        scope_3135.string(var_3136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(input: &crate::input::DescribeNetworkInsightsAccessScopesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAccessScopes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3137 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3138) = &input.network_insights_access_scope_ids {
        let mut list_3140 = scope_3137.start_list(true, Some("item"));
        for item_3139 in var_3138 {
            #[allow(unused_mut)]let mut entry_3141 = list_3140.entry();
            entry_3141.string(item_3139);
        }
        list_3140.finish();
    }
    #[allow(unused_mut)]let mut scope_3142 = writer.prefix("Filter");
    if let Some(var_3143) = &input.filters {
        let mut list_3145 = scope_3142.start_list(true, Some("Filter"));
        for item_3144 in var_3143 {
            #[allow(unused_mut)]let mut entry_3146 = list_3145.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3146, item_3144)?;
        }
        list_3145.finish();
    }
    #[allow(unused_mut)]let mut scope_3147 = writer.prefix("MaxResults");
    if let Some(var_3148) = &input.max_results {
        scope_3147.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3148).into()));
    }
    #[allow(unused_mut)]let mut scope_3149 = writer.prefix("DryRun");
    if let Some(var_3150) = &input.dry_run {
        scope_3149.boolean(*var_3150);
    }
    #[allow(unused_mut)]let mut scope_3151 = writer.prefix("NextToken");
    if let Some(var_3152) = &input.next_token {
        scope_3151.string(var_3152);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(input: &crate::input::DescribeNetworkInsightsAnalysesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsAnalyses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3153 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3154) = &input.network_insights_analysis_ids {
        let mut list_3156 = scope_3153.start_list(true, Some("item"));
        for item_3155 in var_3154 {
            #[allow(unused_mut)]let mut entry_3157 = list_3156.entry();
            entry_3157.string(item_3155);
        }
        list_3156.finish();
    }
    #[allow(unused_mut)]let mut scope_3158 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3159) = &input.network_insights_path_id {
        scope_3158.string(var_3159);
    }
    #[allow(unused_mut)]let mut scope_3160 = writer.prefix("AnalysisStartTime");
    if let Some(var_3161) = &input.analysis_start_time {
        scope_3160.date_time(var_3161, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_3162 = writer.prefix("AnalysisEndTime");
    if let Some(var_3163) = &input.analysis_end_time {
        scope_3162.date_time(var_3163, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_3164 = writer.prefix("Filter");
    if let Some(var_3165) = &input.filters {
        let mut list_3167 = scope_3164.start_list(true, Some("Filter"));
        for item_3166 in var_3165 {
            #[allow(unused_mut)]let mut entry_3168 = list_3167.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3168, item_3166)?;
        }
        list_3167.finish();
    }
    #[allow(unused_mut)]let mut scope_3169 = writer.prefix("MaxResults");
    if let Some(var_3170) = &input.max_results {
        scope_3169.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3170).into()));
    }
    #[allow(unused_mut)]let mut scope_3171 = writer.prefix("DryRun");
    if let Some(var_3172) = &input.dry_run {
        scope_3171.boolean(*var_3172);
    }
    #[allow(unused_mut)]let mut scope_3173 = writer.prefix("NextToken");
    if let Some(var_3174) = &input.next_token {
        scope_3173.string(var_3174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(input: &crate::input::DescribeNetworkInsightsPathsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3175 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3176) = &input.network_insights_path_ids {
        let mut list_3178 = scope_3175.start_list(true, Some("item"));
        for item_3177 in var_3176 {
            #[allow(unused_mut)]let mut entry_3179 = list_3178.entry();
            entry_3179.string(item_3177);
        }
        list_3178.finish();
    }
    #[allow(unused_mut)]let mut scope_3180 = writer.prefix("Filter");
    if let Some(var_3181) = &input.filters {
        let mut list_3183 = scope_3180.start_list(true, Some("Filter"));
        for item_3182 in var_3181 {
            #[allow(unused_mut)]let mut entry_3184 = list_3183.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3184, item_3182)?;
        }
        list_3183.finish();
    }
    #[allow(unused_mut)]let mut scope_3185 = writer.prefix("MaxResults");
    if let Some(var_3186) = &input.max_results {
        scope_3185.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3186).into()));
    }
    #[allow(unused_mut)]let mut scope_3187 = writer.prefix("DryRun");
    if let Some(var_3188) = &input.dry_run {
        scope_3187.boolean(*var_3188);
    }
    #[allow(unused_mut)]let mut scope_3189 = writer.prefix("NextToken");
    if let Some(var_3190) = &input.next_token {
        scope_3189.string(var_3190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(input: &crate::input::DescribeNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3191 = writer.prefix("Attribute");
    if let Some(var_3192) = &input.attribute {
        scope_3191.string(var_3192.as_str());
    }
    #[allow(unused_mut)]let mut scope_3193 = writer.prefix("DryRun");
    if let Some(var_3194) = &input.dry_run {
        scope_3193.boolean(*var_3194);
    }
    #[allow(unused_mut)]let mut scope_3195 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3196) = &input.network_interface_id {
        scope_3195.string(var_3196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(input: &crate::input::DescribeNetworkInterfacePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfacePermissions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3197 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3198) = &input.network_interface_permission_ids {
        let mut list_3200 = scope_3197.start_list(true, None);
        for item_3199 in var_3198 {
            #[allow(unused_mut)]let mut entry_3201 = list_3200.entry();
            entry_3201.string(item_3199);
        }
        list_3200.finish();
    }
    #[allow(unused_mut)]let mut scope_3202 = writer.prefix("Filter");
    if let Some(var_3203) = &input.filters {
        let mut list_3205 = scope_3202.start_list(true, Some("Filter"));
        for item_3204 in var_3203 {
            #[allow(unused_mut)]let mut entry_3206 = list_3205.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3206, item_3204)?;
        }
        list_3205.finish();
    }
    #[allow(unused_mut)]let mut scope_3207 = writer.prefix("NextToken");
    if let Some(var_3208) = &input.next_token {
        scope_3207.string(var_3208);
    }
    #[allow(unused_mut)]let mut scope_3209 = writer.prefix("MaxResults");
    if let Some(var_3210) = &input.max_results {
        scope_3209.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3210).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(input: &crate::input::DescribeNetworkInterfacesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3211 = writer.prefix("Filter");
    if let Some(var_3212) = &input.filters {
        let mut list_3214 = scope_3211.start_list(true, Some("Filter"));
        for item_3213 in var_3212 {
            #[allow(unused_mut)]let mut entry_3215 = list_3214.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3215, item_3213)?;
        }
        list_3214.finish();
    }
    #[allow(unused_mut)]let mut scope_3216 = writer.prefix("DryRun");
    if let Some(var_3217) = &input.dry_run {
        scope_3216.boolean(*var_3217);
    }
    #[allow(unused_mut)]let mut scope_3218 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3219) = &input.network_interface_ids {
        let mut list_3221 = scope_3218.start_list(true, Some("item"));
        for item_3220 in var_3219 {
            #[allow(unused_mut)]let mut entry_3222 = list_3221.entry();
            entry_3222.string(item_3220);
        }
        list_3221.finish();
    }
    #[allow(unused_mut)]let mut scope_3223 = writer.prefix("NextToken");
    if let Some(var_3224) = &input.next_token {
        scope_3223.string(var_3224);
    }
    #[allow(unused_mut)]let mut scope_3225 = writer.prefix("MaxResults");
    if let Some(var_3226) = &input.max_results {
        scope_3225.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3226).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(input: &crate::input::DescribePlacementGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3227 = writer.prefix("Filter");
    if let Some(var_3228) = &input.filters {
        let mut list_3230 = scope_3227.start_list(true, Some("Filter"));
        for item_3229 in var_3228 {
            #[allow(unused_mut)]let mut entry_3231 = list_3230.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3231, item_3229)?;
        }
        list_3230.finish();
    }
    #[allow(unused_mut)]let mut scope_3232 = writer.prefix("DryRun");
    if let Some(var_3233) = &input.dry_run {
        scope_3232.boolean(*var_3233);
    }
    #[allow(unused_mut)]let mut scope_3234 = writer.prefix("GroupName");
    if let Some(var_3235) = &input.group_names {
        let mut list_3237 = scope_3234.start_list(true, None);
        for item_3236 in var_3235 {
            #[allow(unused_mut)]let mut entry_3238 = list_3237.entry();
            entry_3238.string(item_3236);
        }
        list_3237.finish();
    }
    #[allow(unused_mut)]let mut scope_3239 = writer.prefix("GroupId");
    if let Some(var_3240) = &input.group_ids {
        let mut list_3242 = scope_3239.start_list(true, Some("GroupId"));
        for item_3241 in var_3240 {
            #[allow(unused_mut)]let mut entry_3243 = list_3242.entry();
            entry_3243.string(item_3241);
        }
        list_3242.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(input: &crate::input::DescribePrefixListsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3244 = writer.prefix("DryRun");
    if let Some(var_3245) = &input.dry_run {
        scope_3244.boolean(*var_3245);
    }
    #[allow(unused_mut)]let mut scope_3246 = writer.prefix("Filter");
    if let Some(var_3247) = &input.filters {
        let mut list_3249 = scope_3246.start_list(true, Some("Filter"));
        for item_3248 in var_3247 {
            #[allow(unused_mut)]let mut entry_3250 = list_3249.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3250, item_3248)?;
        }
        list_3249.finish();
    }
    #[allow(unused_mut)]let mut scope_3251 = writer.prefix("MaxResults");
    if let Some(var_3252) = &input.max_results {
        scope_3251.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3252).into()));
    }
    #[allow(unused_mut)]let mut scope_3253 = writer.prefix("NextToken");
    if let Some(var_3254) = &input.next_token {
        scope_3253.string(var_3254);
    }
    #[allow(unused_mut)]let mut scope_3255 = writer.prefix("PrefixListId");
    if let Some(var_3256) = &input.prefix_list_ids {
        let mut list_3258 = scope_3255.start_list(true, Some("item"));
        for item_3257 in var_3256 {
            #[allow(unused_mut)]let mut entry_3259 = list_3258.entry();
            entry_3259.string(item_3257);
        }
        list_3258.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(input: &crate::input::DescribePrincipalIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3260 = writer.prefix("DryRun");
    if let Some(var_3261) = &input.dry_run {
        scope_3260.boolean(*var_3261);
    }
    #[allow(unused_mut)]let mut scope_3262 = writer.prefix("Resource");
    if let Some(var_3263) = &input.resources {
        let mut list_3265 = scope_3262.start_list(true, Some("item"));
        for item_3264 in var_3263 {
            #[allow(unused_mut)]let mut entry_3266 = list_3265.entry();
            entry_3266.string(item_3264);
        }
        list_3265.finish();
    }
    #[allow(unused_mut)]let mut scope_3267 = writer.prefix("MaxResults");
    if let Some(var_3268) = &input.max_results {
        scope_3267.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3268).into()));
    }
    #[allow(unused_mut)]let mut scope_3269 = writer.prefix("NextToken");
    if let Some(var_3270) = &input.next_token {
        scope_3269.string(var_3270);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(input: &crate::input::DescribePublicIpv4PoolsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3271 = writer.prefix("PoolId");
    if let Some(var_3272) = &input.pool_ids {
        let mut list_3274 = scope_3271.start_list(true, Some("item"));
        for item_3273 in var_3272 {
            #[allow(unused_mut)]let mut entry_3275 = list_3274.entry();
            entry_3275.string(item_3273);
        }
        list_3274.finish();
    }
    #[allow(unused_mut)]let mut scope_3276 = writer.prefix("NextToken");
    if let Some(var_3277) = &input.next_token {
        scope_3276.string(var_3277);
    }
    #[allow(unused_mut)]let mut scope_3278 = writer.prefix("MaxResults");
    if let Some(var_3279) = &input.max_results {
        scope_3278.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3279).into()));
    }
    #[allow(unused_mut)]let mut scope_3280 = writer.prefix("Filter");
    if let Some(var_3281) = &input.filters {
        let mut list_3283 = scope_3280.start_list(true, Some("Filter"));
        for item_3282 in var_3281 {
            #[allow(unused_mut)]let mut entry_3284 = list_3283.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3284, item_3282)?;
        }
        list_3283.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(input: &crate::input::DescribeRegionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3285 = writer.prefix("Filter");
    if let Some(var_3286) = &input.filters {
        let mut list_3288 = scope_3285.start_list(true, Some("Filter"));
        for item_3287 in var_3286 {
            #[allow(unused_mut)]let mut entry_3289 = list_3288.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3289, item_3287)?;
        }
        list_3288.finish();
    }
    #[allow(unused_mut)]let mut scope_3290 = writer.prefix("RegionName");
    if let Some(var_3291) = &input.region_names {
        let mut list_3293 = scope_3290.start_list(true, Some("RegionName"));
        for item_3292 in var_3291 {
            #[allow(unused_mut)]let mut entry_3294 = list_3293.entry();
            entry_3294.string(item_3292);
        }
        list_3293.finish();
    }
    #[allow(unused_mut)]let mut scope_3295 = writer.prefix("DryRun");
    if let Some(var_3296) = &input.dry_run {
        scope_3295.boolean(*var_3296);
    }
    #[allow(unused_mut)]let mut scope_3297 = writer.prefix("AllRegions");
    if let Some(var_3298) = &input.all_regions {
        scope_3297.boolean(*var_3298);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(input: &crate::input::DescribeReplaceRootVolumeTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplaceRootVolumeTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3299 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3300) = &input.replace_root_volume_task_ids {
        let mut list_3302 = scope_3299.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3301 in var_3300 {
            #[allow(unused_mut)]let mut entry_3303 = list_3302.entry();
            entry_3303.string(item_3301);
        }
        list_3302.finish();
    }
    #[allow(unused_mut)]let mut scope_3304 = writer.prefix("Filter");
    if let Some(var_3305) = &input.filters {
        let mut list_3307 = scope_3304.start_list(true, Some("Filter"));
        for item_3306 in var_3305 {
            #[allow(unused_mut)]let mut entry_3308 = list_3307.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3308, item_3306)?;
        }
        list_3307.finish();
    }
    #[allow(unused_mut)]let mut scope_3309 = writer.prefix("MaxResults");
    if let Some(var_3310) = &input.max_results {
        scope_3309.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3310).into()));
    }
    #[allow(unused_mut)]let mut scope_3311 = writer.prefix("NextToken");
    if let Some(var_3312) = &input.next_token {
        scope_3311.string(var_3312);
    }
    #[allow(unused_mut)]let mut scope_3313 = writer.prefix("DryRun");
    if let Some(var_3314) = &input.dry_run {
        scope_3313.boolean(*var_3314);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(input: &crate::input::DescribeReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3315 = writer.prefix("Filter");
    if let Some(var_3316) = &input.filters {
        let mut list_3318 = scope_3315.start_list(true, Some("Filter"));
        for item_3317 in var_3316 {
            #[allow(unused_mut)]let mut entry_3319 = list_3318.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3319, item_3317)?;
        }
        list_3318.finish();
    }
    #[allow(unused_mut)]let mut scope_3320 = writer.prefix("OfferingClass");
    if let Some(var_3321) = &input.offering_class {
        scope_3320.string(var_3321.as_str());
    }
    #[allow(unused_mut)]let mut scope_3322 = writer.prefix("ReservedInstancesId");
    if let Some(var_3323) = &input.reserved_instances_ids {
        let mut list_3325 = scope_3322.start_list(true, Some("ReservedInstancesId"));
        for item_3324 in var_3323 {
            #[allow(unused_mut)]let mut entry_3326 = list_3325.entry();
            entry_3326.string(item_3324);
        }
        list_3325.finish();
    }
    #[allow(unused_mut)]let mut scope_3327 = writer.prefix("DryRun");
    if let Some(var_3328) = &input.dry_run {
        scope_3327.boolean(*var_3328);
    }
    #[allow(unused_mut)]let mut scope_3329 = writer.prefix("OfferingType");
    if let Some(var_3330) = &input.offering_type {
        scope_3329.string(var_3330.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(input: &crate::input::DescribeReservedInstancesListingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesListings", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3331 = writer.prefix("Filter");
    if let Some(var_3332) = &input.filters {
        let mut list_3334 = scope_3331.start_list(true, Some("Filter"));
        for item_3333 in var_3332 {
            #[allow(unused_mut)]let mut entry_3335 = list_3334.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3335, item_3333)?;
        }
        list_3334.finish();
    }
    #[allow(unused_mut)]let mut scope_3336 = writer.prefix("ReservedInstancesId");
    if let Some(var_3337) = &input.reserved_instances_id {
        scope_3336.string(var_3337);
    }
    #[allow(unused_mut)]let mut scope_3338 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3339) = &input.reserved_instances_listing_id {
        scope_3338.string(var_3339);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(input: &crate::input::DescribeReservedInstancesModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesModifications", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3340 = writer.prefix("Filter");
    if let Some(var_3341) = &input.filters {
        let mut list_3343 = scope_3340.start_list(true, Some("Filter"));
        for item_3342 in var_3341 {
            #[allow(unused_mut)]let mut entry_3344 = list_3343.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3344, item_3342)?;
        }
        list_3343.finish();
    }
    #[allow(unused_mut)]let mut scope_3345 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3346) = &input.reserved_instances_modification_ids {
        let mut list_3348 = scope_3345.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3347 in var_3346 {
            #[allow(unused_mut)]let mut entry_3349 = list_3348.entry();
            entry_3349.string(item_3347);
        }
        list_3348.finish();
    }
    #[allow(unused_mut)]let mut scope_3350 = writer.prefix("NextToken");
    if let Some(var_3351) = &input.next_token {
        scope_3350.string(var_3351);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(input: &crate::input::DescribeReservedInstancesOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstancesOfferings", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3352 = writer.prefix("AvailabilityZone");
    if let Some(var_3353) = &input.availability_zone {
        scope_3352.string(var_3353);
    }
    #[allow(unused_mut)]let mut scope_3354 = writer.prefix("Filter");
    if let Some(var_3355) = &input.filters {
        let mut list_3357 = scope_3354.start_list(true, Some("Filter"));
        for item_3356 in var_3355 {
            #[allow(unused_mut)]let mut entry_3358 = list_3357.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3358, item_3356)?;
        }
        list_3357.finish();
    }
    #[allow(unused_mut)]let mut scope_3359 = writer.prefix("IncludeMarketplace");
    if let Some(var_3360) = &input.include_marketplace {
        scope_3359.boolean(*var_3360);
    }
    #[allow(unused_mut)]let mut scope_3361 = writer.prefix("InstanceType");
    if let Some(var_3362) = &input.instance_type {
        scope_3361.string(var_3362.as_str());
    }
    #[allow(unused_mut)]let mut scope_3363 = writer.prefix("MaxDuration");
    if let Some(var_3364) = &input.max_duration {
        scope_3363.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3364).into()));
    }
    #[allow(unused_mut)]let mut scope_3365 = writer.prefix("MaxInstanceCount");
    if let Some(var_3366) = &input.max_instance_count {
        scope_3365.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3366).into()));
    }
    #[allow(unused_mut)]let mut scope_3367 = writer.prefix("MinDuration");
    if let Some(var_3368) = &input.min_duration {
        scope_3367.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3368).into()));
    }
    #[allow(unused_mut)]let mut scope_3369 = writer.prefix("OfferingClass");
    if let Some(var_3370) = &input.offering_class {
        scope_3369.string(var_3370.as_str());
    }
    #[allow(unused_mut)]let mut scope_3371 = writer.prefix("ProductDescription");
    if let Some(var_3372) = &input.product_description {
        scope_3371.string(var_3372.as_str());
    }
    #[allow(unused_mut)]let mut scope_3373 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3374) = &input.reserved_instances_offering_ids {
        let mut list_3376 = scope_3373.start_list(true, None);
        for item_3375 in var_3374 {
            #[allow(unused_mut)]let mut entry_3377 = list_3376.entry();
            entry_3377.string(item_3375);
        }
        list_3376.finish();
    }
    #[allow(unused_mut)]let mut scope_3378 = writer.prefix("DryRun");
    if let Some(var_3379) = &input.dry_run {
        scope_3378.boolean(*var_3379);
    }
    #[allow(unused_mut)]let mut scope_3380 = writer.prefix("InstanceTenancy");
    if let Some(var_3381) = &input.instance_tenancy {
        scope_3380.string(var_3381.as_str());
    }
    #[allow(unused_mut)]let mut scope_3382 = writer.prefix("MaxResults");
    if let Some(var_3383) = &input.max_results {
        scope_3382.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3383).into()));
    }
    #[allow(unused_mut)]let mut scope_3384 = writer.prefix("NextToken");
    if let Some(var_3385) = &input.next_token {
        scope_3384.string(var_3385);
    }
    #[allow(unused_mut)]let mut scope_3386 = writer.prefix("OfferingType");
    if let Some(var_3387) = &input.offering_type {
        scope_3386.string(var_3387.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(input: &crate::input::DescribeRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3388 = writer.prefix("Filter");
    if let Some(var_3389) = &input.filters {
        let mut list_3391 = scope_3388.start_list(true, Some("Filter"));
        for item_3390 in var_3389 {
            #[allow(unused_mut)]let mut entry_3392 = list_3391.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3392, item_3390)?;
        }
        list_3391.finish();
    }
    #[allow(unused_mut)]let mut scope_3393 = writer.prefix("DryRun");
    if let Some(var_3394) = &input.dry_run {
        scope_3393.boolean(*var_3394);
    }
    #[allow(unused_mut)]let mut scope_3395 = writer.prefix("RouteTableId");
    if let Some(var_3396) = &input.route_table_ids {
        let mut list_3398 = scope_3395.start_list(true, Some("item"));
        for item_3397 in var_3396 {
            #[allow(unused_mut)]let mut entry_3399 = list_3398.entry();
            entry_3399.string(item_3397);
        }
        list_3398.finish();
    }
    #[allow(unused_mut)]let mut scope_3400 = writer.prefix("NextToken");
    if let Some(var_3401) = &input.next_token {
        scope_3400.string(var_3401);
    }
    #[allow(unused_mut)]let mut scope_3402 = writer.prefix("MaxResults");
    if let Some(var_3403) = &input.max_results {
        scope_3402.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3403).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(input: &crate::input::DescribeScheduledInstanceAvailabilityInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstanceAvailability", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3404 = writer.prefix("DryRun");
    if let Some(var_3405) = &input.dry_run {
        scope_3404.boolean(*var_3405);
    }
    #[allow(unused_mut)]let mut scope_3406 = writer.prefix("Filter");
    if let Some(var_3407) = &input.filters {
        let mut list_3409 = scope_3406.start_list(true, Some("Filter"));
        for item_3408 in var_3407 {
            #[allow(unused_mut)]let mut entry_3410 = list_3409.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3410, item_3408)?;
        }
        list_3409.finish();
    }
    #[allow(unused_mut)]let mut scope_3411 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3412) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(scope_3411, var_3412)?;
    }
    #[allow(unused_mut)]let mut scope_3413 = writer.prefix("MaxResults");
    if let Some(var_3414) = &input.max_results {
        scope_3413.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3414).into()));
    }
    #[allow(unused_mut)]let mut scope_3415 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3416) = &input.max_slot_duration_in_hours {
        scope_3415.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3416).into()));
    }
    #[allow(unused_mut)]let mut scope_3417 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3418) = &input.min_slot_duration_in_hours {
        scope_3417.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3418).into()));
    }
    #[allow(unused_mut)]let mut scope_3419 = writer.prefix("NextToken");
    if let Some(var_3420) = &input.next_token {
        scope_3419.string(var_3420);
    }
    #[allow(unused_mut)]let mut scope_3421 = writer.prefix("Recurrence");
    if let Some(var_3422) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(scope_3421, var_3422)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(input: &crate::input::DescribeScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3423 = writer.prefix("DryRun");
    if let Some(var_3424) = &input.dry_run {
        scope_3423.boolean(*var_3424);
    }
    #[allow(unused_mut)]let mut scope_3425 = writer.prefix("Filter");
    if let Some(var_3426) = &input.filters {
        let mut list_3428 = scope_3425.start_list(true, Some("Filter"));
        for item_3427 in var_3426 {
            #[allow(unused_mut)]let mut entry_3429 = list_3428.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3429, item_3427)?;
        }
        list_3428.finish();
    }
    #[allow(unused_mut)]let mut scope_3430 = writer.prefix("MaxResults");
    if let Some(var_3431) = &input.max_results {
        scope_3430.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3431).into()));
    }
    #[allow(unused_mut)]let mut scope_3432 = writer.prefix("NextToken");
    if let Some(var_3433) = &input.next_token {
        scope_3432.string(var_3433);
    }
    #[allow(unused_mut)]let mut scope_3434 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3435) = &input.scheduled_instance_ids {
        let mut list_3437 = scope_3434.start_list(true, Some("ScheduledInstanceId"));
        for item_3436 in var_3435 {
            #[allow(unused_mut)]let mut entry_3438 = list_3437.entry();
            entry_3438.string(item_3436);
        }
        list_3437.finish();
    }
    #[allow(unused_mut)]let mut scope_3439 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3440) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(scope_3439, var_3440)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(input: &crate::input::DescribeSecurityGroupReferencesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupReferences", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3441 = writer.prefix("DryRun");
    if let Some(var_3442) = &input.dry_run {
        scope_3441.boolean(*var_3442);
    }
    #[allow(unused_mut)]let mut scope_3443 = writer.prefix("GroupId");
    if let Some(var_3444) = &input.group_id {
        let mut list_3446 = scope_3443.start_list(true, Some("item"));
        for item_3445 in var_3444 {
            #[allow(unused_mut)]let mut entry_3447 = list_3446.entry();
            entry_3447.string(item_3445);
        }
        list_3446.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(input: &crate::input::DescribeSecurityGroupRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3448 = writer.prefix("Filter");
    if let Some(var_3449) = &input.filters {
        let mut list_3451 = scope_3448.start_list(true, Some("Filter"));
        for item_3450 in var_3449 {
            #[allow(unused_mut)]let mut entry_3452 = list_3451.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3452, item_3450)?;
        }
        list_3451.finish();
    }
    #[allow(unused_mut)]let mut scope_3453 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3454) = &input.security_group_rule_ids {
        let mut list_3456 = scope_3453.start_list(true, Some("item"));
        for item_3455 in var_3454 {
            #[allow(unused_mut)]let mut entry_3457 = list_3456.entry();
            entry_3457.string(item_3455);
        }
        list_3456.finish();
    }
    #[allow(unused_mut)]let mut scope_3458 = writer.prefix("DryRun");
    if let Some(var_3459) = &input.dry_run {
        scope_3458.boolean(*var_3459);
    }
    #[allow(unused_mut)]let mut scope_3460 = writer.prefix("NextToken");
    if let Some(var_3461) = &input.next_token {
        scope_3460.string(var_3461);
    }
    #[allow(unused_mut)]let mut scope_3462 = writer.prefix("MaxResults");
    if let Some(var_3463) = &input.max_results {
        scope_3462.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3463).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(input: &crate::input::DescribeSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3464 = writer.prefix("Filter");
    if let Some(var_3465) = &input.filters {
        let mut list_3467 = scope_3464.start_list(true, Some("Filter"));
        for item_3466 in var_3465 {
            #[allow(unused_mut)]let mut entry_3468 = list_3467.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3468, item_3466)?;
        }
        list_3467.finish();
    }
    #[allow(unused_mut)]let mut scope_3469 = writer.prefix("GroupId");
    if let Some(var_3470) = &input.group_ids {
        let mut list_3472 = scope_3469.start_list(true, Some("groupId"));
        for item_3471 in var_3470 {
            #[allow(unused_mut)]let mut entry_3473 = list_3472.entry();
            entry_3473.string(item_3471);
        }
        list_3472.finish();
    }
    #[allow(unused_mut)]let mut scope_3474 = writer.prefix("GroupName");
    if let Some(var_3475) = &input.group_names {
        let mut list_3477 = scope_3474.start_list(true, Some("GroupName"));
        for item_3476 in var_3475 {
            #[allow(unused_mut)]let mut entry_3478 = list_3477.entry();
            entry_3478.string(item_3476);
        }
        list_3477.finish();
    }
    #[allow(unused_mut)]let mut scope_3479 = writer.prefix("DryRun");
    if let Some(var_3480) = &input.dry_run {
        scope_3479.boolean(*var_3480);
    }
    #[allow(unused_mut)]let mut scope_3481 = writer.prefix("NextToken");
    if let Some(var_3482) = &input.next_token {
        scope_3481.string(var_3482);
    }
    #[allow(unused_mut)]let mut scope_3483 = writer.prefix("MaxResults");
    if let Some(var_3484) = &input.max_results {
        scope_3483.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3484).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(input: &crate::input::DescribeSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3485 = writer.prefix("Attribute");
    if let Some(var_3486) = &input.attribute {
        scope_3485.string(var_3486.as_str());
    }
    #[allow(unused_mut)]let mut scope_3487 = writer.prefix("SnapshotId");
    if let Some(var_3488) = &input.snapshot_id {
        scope_3487.string(var_3488);
    }
    #[allow(unused_mut)]let mut scope_3489 = writer.prefix("DryRun");
    if let Some(var_3490) = &input.dry_run {
        scope_3489.boolean(*var_3490);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(input: &crate::input::DescribeSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3491 = writer.prefix("Filter");
    if let Some(var_3492) = &input.filters {
        let mut list_3494 = scope_3491.start_list(true, Some("Filter"));
        for item_3493 in var_3492 {
            #[allow(unused_mut)]let mut entry_3495 = list_3494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3495, item_3493)?;
        }
        list_3494.finish();
    }
    #[allow(unused_mut)]let mut scope_3496 = writer.prefix("MaxResults");
    if let Some(var_3497) = &input.max_results {
        scope_3496.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3497).into()));
    }
    #[allow(unused_mut)]let mut scope_3498 = writer.prefix("NextToken");
    if let Some(var_3499) = &input.next_token {
        scope_3498.string(var_3499);
    }
    #[allow(unused_mut)]let mut scope_3500 = writer.prefix("Owner");
    if let Some(var_3501) = &input.owner_ids {
        let mut list_3503 = scope_3500.start_list(true, Some("Owner"));
        for item_3502 in var_3501 {
            #[allow(unused_mut)]let mut entry_3504 = list_3503.entry();
            entry_3504.string(item_3502);
        }
        list_3503.finish();
    }
    #[allow(unused_mut)]let mut scope_3505 = writer.prefix("RestorableBy");
    if let Some(var_3506) = &input.restorable_by_user_ids {
        let mut list_3508 = scope_3505.start_list(true, None);
        for item_3507 in var_3506 {
            #[allow(unused_mut)]let mut entry_3509 = list_3508.entry();
            entry_3509.string(item_3507);
        }
        list_3508.finish();
    }
    #[allow(unused_mut)]let mut scope_3510 = writer.prefix("SnapshotId");
    if let Some(var_3511) = &input.snapshot_ids {
        let mut list_3513 = scope_3510.start_list(true, Some("SnapshotId"));
        for item_3512 in var_3511 {
            #[allow(unused_mut)]let mut entry_3514 = list_3513.entry();
            entry_3514.string(item_3512);
        }
        list_3513.finish();
    }
    #[allow(unused_mut)]let mut scope_3515 = writer.prefix("DryRun");
    if let Some(var_3516) = &input.dry_run {
        scope_3515.boolean(*var_3516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(input: &crate::input::DescribeSnapshotTierStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3517 = writer.prefix("Filter");
    if let Some(var_3518) = &input.filters {
        let mut list_3520 = scope_3517.start_list(true, Some("Filter"));
        for item_3519 in var_3518 {
            #[allow(unused_mut)]let mut entry_3521 = list_3520.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3521, item_3519)?;
        }
        list_3520.finish();
    }
    #[allow(unused_mut)]let mut scope_3522 = writer.prefix("DryRun");
    if let Some(var_3523) = &input.dry_run {
        scope_3522.boolean(*var_3523);
    }
    #[allow(unused_mut)]let mut scope_3524 = writer.prefix("NextToken");
    if let Some(var_3525) = &input.next_token {
        scope_3524.string(var_3525);
    }
    #[allow(unused_mut)]let mut scope_3526 = writer.prefix("MaxResults");
    if let Some(var_3527) = &input.max_results {
        scope_3526.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3527).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(input: &crate::input::DescribeSpotDatafeedSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotDatafeedSubscription", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3528 = writer.prefix("DryRun");
    if let Some(var_3529) = &input.dry_run {
        scope_3528.boolean(*var_3529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(input: &crate::input::DescribeSpotFleetInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3530 = writer.prefix("DryRun");
    if let Some(var_3531) = &input.dry_run {
        scope_3530.boolean(*var_3531);
    }
    #[allow(unused_mut)]let mut scope_3532 = writer.prefix("MaxResults");
    if let Some(var_3533) = &input.max_results {
        scope_3532.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3533).into()));
    }
    #[allow(unused_mut)]let mut scope_3534 = writer.prefix("NextToken");
    if let Some(var_3535) = &input.next_token {
        scope_3534.string(var_3535);
    }
    #[allow(unused_mut)]let mut scope_3536 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3537) = &input.spot_fleet_request_id {
        scope_3536.string(var_3537);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(input: &crate::input::DescribeSpotFleetRequestHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequestHistory", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3538 = writer.prefix("DryRun");
    if let Some(var_3539) = &input.dry_run {
        scope_3538.boolean(*var_3539);
    }
    #[allow(unused_mut)]let mut scope_3540 = writer.prefix("EventType");
    if let Some(var_3541) = &input.event_type {
        scope_3540.string(var_3541.as_str());
    }
    #[allow(unused_mut)]let mut scope_3542 = writer.prefix("MaxResults");
    if let Some(var_3543) = &input.max_results {
        scope_3542.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3543).into()));
    }
    #[allow(unused_mut)]let mut scope_3544 = writer.prefix("NextToken");
    if let Some(var_3545) = &input.next_token {
        scope_3544.string(var_3545);
    }
    #[allow(unused_mut)]let mut scope_3546 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3547) = &input.spot_fleet_request_id {
        scope_3546.string(var_3547);
    }
    #[allow(unused_mut)]let mut scope_3548 = writer.prefix("StartTime");
    if let Some(var_3549) = &input.start_time {
        scope_3548.date_time(var_3549, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(input: &crate::input::DescribeSpotFleetRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3550 = writer.prefix("DryRun");
    if let Some(var_3551) = &input.dry_run {
        scope_3550.boolean(*var_3551);
    }
    #[allow(unused_mut)]let mut scope_3552 = writer.prefix("MaxResults");
    if let Some(var_3553) = &input.max_results {
        scope_3552.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3553).into()));
    }
    #[allow(unused_mut)]let mut scope_3554 = writer.prefix("NextToken");
    if let Some(var_3555) = &input.next_token {
        scope_3554.string(var_3555);
    }
    #[allow(unused_mut)]let mut scope_3556 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3557) = &input.spot_fleet_request_ids {
        let mut list_3559 = scope_3556.start_list(true, Some("item"));
        for item_3558 in var_3557 {
            #[allow(unused_mut)]let mut entry_3560 = list_3559.entry();
            entry_3560.string(item_3558);
        }
        list_3559.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(input: &crate::input::DescribeSpotInstanceRequestsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3561 = writer.prefix("Filter");
    if let Some(var_3562) = &input.filters {
        let mut list_3564 = scope_3561.start_list(true, Some("Filter"));
        for item_3563 in var_3562 {
            #[allow(unused_mut)]let mut entry_3565 = list_3564.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3565, item_3563)?;
        }
        list_3564.finish();
    }
    #[allow(unused_mut)]let mut scope_3566 = writer.prefix("DryRun");
    if let Some(var_3567) = &input.dry_run {
        scope_3566.boolean(*var_3567);
    }
    #[allow(unused_mut)]let mut scope_3568 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3569) = &input.spot_instance_request_ids {
        let mut list_3571 = scope_3568.start_list(true, Some("SpotInstanceRequestId"));
        for item_3570 in var_3569 {
            #[allow(unused_mut)]let mut entry_3572 = list_3571.entry();
            entry_3572.string(item_3570);
        }
        list_3571.finish();
    }
    #[allow(unused_mut)]let mut scope_3573 = writer.prefix("NextToken");
    if let Some(var_3574) = &input.next_token {
        scope_3573.string(var_3574);
    }
    #[allow(unused_mut)]let mut scope_3575 = writer.prefix("MaxResults");
    if let Some(var_3576) = &input.max_results {
        scope_3575.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3576).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(input: &crate::input::DescribeSpotPriceHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3577 = writer.prefix("Filter");
    if let Some(var_3578) = &input.filters {
        let mut list_3580 = scope_3577.start_list(true, Some("Filter"));
        for item_3579 in var_3578 {
            #[allow(unused_mut)]let mut entry_3581 = list_3580.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3581, item_3579)?;
        }
        list_3580.finish();
    }
    #[allow(unused_mut)]let mut scope_3582 = writer.prefix("AvailabilityZone");
    if let Some(var_3583) = &input.availability_zone {
        scope_3582.string(var_3583);
    }
    #[allow(unused_mut)]let mut scope_3584 = writer.prefix("DryRun");
    if let Some(var_3585) = &input.dry_run {
        scope_3584.boolean(*var_3585);
    }
    #[allow(unused_mut)]let mut scope_3586 = writer.prefix("EndTime");
    if let Some(var_3587) = &input.end_time {
        scope_3586.date_time(var_3587, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_3588 = writer.prefix("InstanceType");
    if let Some(var_3589) = &input.instance_types {
        let mut list_3591 = scope_3588.start_list(true, None);
        for item_3590 in var_3589 {
            #[allow(unused_mut)]let mut entry_3592 = list_3591.entry();
            entry_3592.string(item_3590.as_str());
        }
        list_3591.finish();
    }
    #[allow(unused_mut)]let mut scope_3593 = writer.prefix("MaxResults");
    if let Some(var_3594) = &input.max_results {
        scope_3593.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3594).into()));
    }
    #[allow(unused_mut)]let mut scope_3595 = writer.prefix("NextToken");
    if let Some(var_3596) = &input.next_token {
        scope_3595.string(var_3596);
    }
    #[allow(unused_mut)]let mut scope_3597 = writer.prefix("ProductDescription");
    if let Some(var_3598) = &input.product_descriptions {
        let mut list_3600 = scope_3597.start_list(true, None);
        for item_3599 in var_3598 {
            #[allow(unused_mut)]let mut entry_3601 = list_3600.entry();
            entry_3601.string(item_3599);
        }
        list_3600.finish();
    }
    #[allow(unused_mut)]let mut scope_3602 = writer.prefix("StartTime");
    if let Some(var_3603) = &input.start_time {
        scope_3602.date_time(var_3603, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(input: &crate::input::DescribeStaleSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3604 = writer.prefix("DryRun");
    if let Some(var_3605) = &input.dry_run {
        scope_3604.boolean(*var_3605);
    }
    #[allow(unused_mut)]let mut scope_3606 = writer.prefix("MaxResults");
    if let Some(var_3607) = &input.max_results {
        scope_3606.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3607).into()));
    }
    #[allow(unused_mut)]let mut scope_3608 = writer.prefix("NextToken");
    if let Some(var_3609) = &input.next_token {
        scope_3608.string(var_3609);
    }
    #[allow(unused_mut)]let mut scope_3610 = writer.prefix("VpcId");
    if let Some(var_3611) = &input.vpc_id {
        scope_3610.string(var_3611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(input: &crate::input::DescribeStoreImageTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3612 = writer.prefix("ImageId");
    if let Some(var_3613) = &input.image_ids {
        let mut list_3615 = scope_3612.start_list(true, Some("item"));
        for item_3614 in var_3613 {
            #[allow(unused_mut)]let mut entry_3616 = list_3615.entry();
            entry_3616.string(item_3614);
        }
        list_3615.finish();
    }
    #[allow(unused_mut)]let mut scope_3617 = writer.prefix("DryRun");
    if let Some(var_3618) = &input.dry_run {
        scope_3617.boolean(*var_3618);
    }
    #[allow(unused_mut)]let mut scope_3619 = writer.prefix("Filter");
    if let Some(var_3620) = &input.filters {
        let mut list_3622 = scope_3619.start_list(true, Some("Filter"));
        for item_3621 in var_3620 {
            #[allow(unused_mut)]let mut entry_3623 = list_3622.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3623, item_3621)?;
        }
        list_3622.finish();
    }
    #[allow(unused_mut)]let mut scope_3624 = writer.prefix("NextToken");
    if let Some(var_3625) = &input.next_token {
        scope_3624.string(var_3625);
    }
    #[allow(unused_mut)]let mut scope_3626 = writer.prefix("MaxResults");
    if let Some(var_3627) = &input.max_results {
        scope_3626.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3627).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(input: &crate::input::DescribeSubnetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3628 = writer.prefix("Filter");
    if let Some(var_3629) = &input.filters {
        let mut list_3631 = scope_3628.start_list(true, Some("Filter"));
        for item_3630 in var_3629 {
            #[allow(unused_mut)]let mut entry_3632 = list_3631.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3632, item_3630)?;
        }
        list_3631.finish();
    }
    #[allow(unused_mut)]let mut scope_3633 = writer.prefix("SubnetId");
    if let Some(var_3634) = &input.subnet_ids {
        let mut list_3636 = scope_3633.start_list(true, Some("SubnetId"));
        for item_3635 in var_3634 {
            #[allow(unused_mut)]let mut entry_3637 = list_3636.entry();
            entry_3637.string(item_3635);
        }
        list_3636.finish();
    }
    #[allow(unused_mut)]let mut scope_3638 = writer.prefix("DryRun");
    if let Some(var_3639) = &input.dry_run {
        scope_3638.boolean(*var_3639);
    }
    #[allow(unused_mut)]let mut scope_3640 = writer.prefix("NextToken");
    if let Some(var_3641) = &input.next_token {
        scope_3640.string(var_3641);
    }
    #[allow(unused_mut)]let mut scope_3642 = writer.prefix("MaxResults");
    if let Some(var_3643) = &input.max_results {
        scope_3642.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3643).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(input: &crate::input::DescribeTagsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3644 = writer.prefix("DryRun");
    if let Some(var_3645) = &input.dry_run {
        scope_3644.boolean(*var_3645);
    }
    #[allow(unused_mut)]let mut scope_3646 = writer.prefix("Filter");
    if let Some(var_3647) = &input.filters {
        let mut list_3649 = scope_3646.start_list(true, Some("Filter"));
        for item_3648 in var_3647 {
            #[allow(unused_mut)]let mut entry_3650 = list_3649.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3650, item_3648)?;
        }
        list_3649.finish();
    }
    #[allow(unused_mut)]let mut scope_3651 = writer.prefix("MaxResults");
    if let Some(var_3652) = &input.max_results {
        scope_3651.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3652).into()));
    }
    #[allow(unused_mut)]let mut scope_3653 = writer.prefix("NextToken");
    if let Some(var_3654) = &input.next_token {
        scope_3653.string(var_3654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(input: &crate::input::DescribeTrafficMirrorFiltersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3655 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3656) = &input.traffic_mirror_filter_ids {
        let mut list_3658 = scope_3655.start_list(true, Some("item"));
        for item_3657 in var_3656 {
            #[allow(unused_mut)]let mut entry_3659 = list_3658.entry();
            entry_3659.string(item_3657);
        }
        list_3658.finish();
    }
    #[allow(unused_mut)]let mut scope_3660 = writer.prefix("DryRun");
    if let Some(var_3661) = &input.dry_run {
        scope_3660.boolean(*var_3661);
    }
    #[allow(unused_mut)]let mut scope_3662 = writer.prefix("Filter");
    if let Some(var_3663) = &input.filters {
        let mut list_3665 = scope_3662.start_list(true, Some("Filter"));
        for item_3664 in var_3663 {
            #[allow(unused_mut)]let mut entry_3666 = list_3665.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3666, item_3664)?;
        }
        list_3665.finish();
    }
    #[allow(unused_mut)]let mut scope_3667 = writer.prefix("MaxResults");
    if let Some(var_3668) = &input.max_results {
        scope_3667.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3668).into()));
    }
    #[allow(unused_mut)]let mut scope_3669 = writer.prefix("NextToken");
    if let Some(var_3670) = &input.next_token {
        scope_3669.string(var_3670);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(input: &crate::input::DescribeTrafficMirrorSessionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3671 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3672) = &input.traffic_mirror_session_ids {
        let mut list_3674 = scope_3671.start_list(true, Some("item"));
        for item_3673 in var_3672 {
            #[allow(unused_mut)]let mut entry_3675 = list_3674.entry();
            entry_3675.string(item_3673);
        }
        list_3674.finish();
    }
    #[allow(unused_mut)]let mut scope_3676 = writer.prefix("DryRun");
    if let Some(var_3677) = &input.dry_run {
        scope_3676.boolean(*var_3677);
    }
    #[allow(unused_mut)]let mut scope_3678 = writer.prefix("Filter");
    if let Some(var_3679) = &input.filters {
        let mut list_3681 = scope_3678.start_list(true, Some("Filter"));
        for item_3680 in var_3679 {
            #[allow(unused_mut)]let mut entry_3682 = list_3681.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3682, item_3680)?;
        }
        list_3681.finish();
    }
    #[allow(unused_mut)]let mut scope_3683 = writer.prefix("MaxResults");
    if let Some(var_3684) = &input.max_results {
        scope_3683.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3684).into()));
    }
    #[allow(unused_mut)]let mut scope_3685 = writer.prefix("NextToken");
    if let Some(var_3686) = &input.next_token {
        scope_3685.string(var_3686);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(input: &crate::input::DescribeTrafficMirrorTargetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3687 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3688) = &input.traffic_mirror_target_ids {
        let mut list_3690 = scope_3687.start_list(true, Some("item"));
        for item_3689 in var_3688 {
            #[allow(unused_mut)]let mut entry_3691 = list_3690.entry();
            entry_3691.string(item_3689);
        }
        list_3690.finish();
    }
    #[allow(unused_mut)]let mut scope_3692 = writer.prefix("DryRun");
    if let Some(var_3693) = &input.dry_run {
        scope_3692.boolean(*var_3693);
    }
    #[allow(unused_mut)]let mut scope_3694 = writer.prefix("Filter");
    if let Some(var_3695) = &input.filters {
        let mut list_3697 = scope_3694.start_list(true, Some("Filter"));
        for item_3696 in var_3695 {
            #[allow(unused_mut)]let mut entry_3698 = list_3697.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3698, item_3696)?;
        }
        list_3697.finish();
    }
    #[allow(unused_mut)]let mut scope_3699 = writer.prefix("MaxResults");
    if let Some(var_3700) = &input.max_results {
        scope_3699.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3700).into()));
    }
    #[allow(unused_mut)]let mut scope_3701 = writer.prefix("NextToken");
    if let Some(var_3702) = &input.next_token {
        scope_3701.string(var_3702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(input: &crate::input::DescribeTransitGatewayAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayAttachments", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3703 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3704) = &input.transit_gateway_attachment_ids {
        let mut list_3706 = scope_3703.start_list(true, None);
        for item_3705 in var_3704 {
            #[allow(unused_mut)]let mut entry_3707 = list_3706.entry();
            entry_3707.string(item_3705);
        }
        list_3706.finish();
    }
    #[allow(unused_mut)]let mut scope_3708 = writer.prefix("Filter");
    if let Some(var_3709) = &input.filters {
        let mut list_3711 = scope_3708.start_list(true, Some("Filter"));
        for item_3710 in var_3709 {
            #[allow(unused_mut)]let mut entry_3712 = list_3711.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3712, item_3710)?;
        }
        list_3711.finish();
    }
    #[allow(unused_mut)]let mut scope_3713 = writer.prefix("MaxResults");
    if let Some(var_3714) = &input.max_results {
        scope_3713.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3714).into()));
    }
    #[allow(unused_mut)]let mut scope_3715 = writer.prefix("NextToken");
    if let Some(var_3716) = &input.next_token {
        scope_3715.string(var_3716);
    }
    #[allow(unused_mut)]let mut scope_3717 = writer.prefix("DryRun");
    if let Some(var_3718) = &input.dry_run {
        scope_3717.boolean(*var_3718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(input: &crate::input::DescribeTransitGatewayConnectPeersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnectPeers", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3719 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3720) = &input.transit_gateway_connect_peer_ids {
        let mut list_3722 = scope_3719.start_list(true, Some("item"));
        for item_3721 in var_3720 {
            #[allow(unused_mut)]let mut entry_3723 = list_3722.entry();
            entry_3723.string(item_3721);
        }
        list_3722.finish();
    }
    #[allow(unused_mut)]let mut scope_3724 = writer.prefix("Filter");
    if let Some(var_3725) = &input.filters {
        let mut list_3727 = scope_3724.start_list(true, Some("Filter"));
        for item_3726 in var_3725 {
            #[allow(unused_mut)]let mut entry_3728 = list_3727.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3728, item_3726)?;
        }
        list_3727.finish();
    }
    #[allow(unused_mut)]let mut scope_3729 = writer.prefix("MaxResults");
    if let Some(var_3730) = &input.max_results {
        scope_3729.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3730).into()));
    }
    #[allow(unused_mut)]let mut scope_3731 = writer.prefix("NextToken");
    if let Some(var_3732) = &input.next_token {
        scope_3731.string(var_3732);
    }
    #[allow(unused_mut)]let mut scope_3733 = writer.prefix("DryRun");
    if let Some(var_3734) = &input.dry_run {
        scope_3733.boolean(*var_3734);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(input: &crate::input::DescribeTransitGatewayConnectsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayConnects", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3735 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3736) = &input.transit_gateway_attachment_ids {
        let mut list_3738 = scope_3735.start_list(true, None);
        for item_3737 in var_3736 {
            #[allow(unused_mut)]let mut entry_3739 = list_3738.entry();
            entry_3739.string(item_3737);
        }
        list_3738.finish();
    }
    #[allow(unused_mut)]let mut scope_3740 = writer.prefix("Filter");
    if let Some(var_3741) = &input.filters {
        let mut list_3743 = scope_3740.start_list(true, Some("Filter"));
        for item_3742 in var_3741 {
            #[allow(unused_mut)]let mut entry_3744 = list_3743.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3744, item_3742)?;
        }
        list_3743.finish();
    }
    #[allow(unused_mut)]let mut scope_3745 = writer.prefix("MaxResults");
    if let Some(var_3746) = &input.max_results {
        scope_3745.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3746).into()));
    }
    #[allow(unused_mut)]let mut scope_3747 = writer.prefix("NextToken");
    if let Some(var_3748) = &input.next_token {
        scope_3747.string(var_3748);
    }
    #[allow(unused_mut)]let mut scope_3749 = writer.prefix("DryRun");
    if let Some(var_3750) = &input.dry_run {
        scope_3749.boolean(*var_3750);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(input: &crate::input::DescribeTransitGatewayMulticastDomainsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayMulticastDomains", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3751 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3752) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3754 = scope_3751.start_list(true, Some("item"));
        for item_3753 in var_3752 {
            #[allow(unused_mut)]let mut entry_3755 = list_3754.entry();
            entry_3755.string(item_3753);
        }
        list_3754.finish();
    }
    #[allow(unused_mut)]let mut scope_3756 = writer.prefix("Filter");
    if let Some(var_3757) = &input.filters {
        let mut list_3759 = scope_3756.start_list(true, Some("Filter"));
        for item_3758 in var_3757 {
            #[allow(unused_mut)]let mut entry_3760 = list_3759.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3760, item_3758)?;
        }
        list_3759.finish();
    }
    #[allow(unused_mut)]let mut scope_3761 = writer.prefix("MaxResults");
    if let Some(var_3762) = &input.max_results {
        scope_3761.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3762).into()));
    }
    #[allow(unused_mut)]let mut scope_3763 = writer.prefix("NextToken");
    if let Some(var_3764) = &input.next_token {
        scope_3763.string(var_3764);
    }
    #[allow(unused_mut)]let mut scope_3765 = writer.prefix("DryRun");
    if let Some(var_3766) = &input.dry_run {
        scope_3765.boolean(*var_3766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayPeeringAttachments", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3767 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3768) = &input.transit_gateway_attachment_ids {
        let mut list_3770 = scope_3767.start_list(true, None);
        for item_3769 in var_3768 {
            #[allow(unused_mut)]let mut entry_3771 = list_3770.entry();
            entry_3771.string(item_3769);
        }
        list_3770.finish();
    }
    #[allow(unused_mut)]let mut scope_3772 = writer.prefix("Filter");
    if let Some(var_3773) = &input.filters {
        let mut list_3775 = scope_3772.start_list(true, Some("Filter"));
        for item_3774 in var_3773 {
            #[allow(unused_mut)]let mut entry_3776 = list_3775.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3776, item_3774)?;
        }
        list_3775.finish();
    }
    #[allow(unused_mut)]let mut scope_3777 = writer.prefix("MaxResults");
    if let Some(var_3778) = &input.max_results {
        scope_3777.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3778).into()));
    }
    #[allow(unused_mut)]let mut scope_3779 = writer.prefix("NextToken");
    if let Some(var_3780) = &input.next_token {
        scope_3779.string(var_3780);
    }
    #[allow(unused_mut)]let mut scope_3781 = writer.prefix("DryRun");
    if let Some(var_3782) = &input.dry_run {
        scope_3781.boolean(*var_3782);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_policy_tables(input: &crate::input::DescribeTransitGatewayPolicyTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayPolicyTables", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3783 = writer.prefix("TransitGatewayPolicyTableIds");
    if let Some(var_3784) = &input.transit_gateway_policy_table_ids {
        let mut list_3786 = scope_3783.start_list(true, Some("item"));
        for item_3785 in var_3784 {
            #[allow(unused_mut)]let mut entry_3787 = list_3786.entry();
            entry_3787.string(item_3785);
        }
        list_3786.finish();
    }
    #[allow(unused_mut)]let mut scope_3788 = writer.prefix("Filter");
    if let Some(var_3789) = &input.filters {
        let mut list_3791 = scope_3788.start_list(true, Some("Filter"));
        for item_3790 in var_3789 {
            #[allow(unused_mut)]let mut entry_3792 = list_3791.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3792, item_3790)?;
        }
        list_3791.finish();
    }
    #[allow(unused_mut)]let mut scope_3793 = writer.prefix("MaxResults");
    if let Some(var_3794) = &input.max_results {
        scope_3793.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3794).into()));
    }
    #[allow(unused_mut)]let mut scope_3795 = writer.prefix("NextToken");
    if let Some(var_3796) = &input.next_token {
        scope_3795.string(var_3796);
    }
    #[allow(unused_mut)]let mut scope_3797 = writer.prefix("DryRun");
    if let Some(var_3798) = &input.dry_run {
        scope_3797.boolean(*var_3798);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_table_announcements(input: &crate::input::DescribeTransitGatewayRouteTableAnnouncementsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTableAnnouncements", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3799 = writer.prefix("TransitGatewayRouteTableAnnouncementIds");
    if let Some(var_3800) = &input.transit_gateway_route_table_announcement_ids {
        let mut list_3802 = scope_3799.start_list(true, Some("item"));
        for item_3801 in var_3800 {
            #[allow(unused_mut)]let mut entry_3803 = list_3802.entry();
            entry_3803.string(item_3801);
        }
        list_3802.finish();
    }
    #[allow(unused_mut)]let mut scope_3804 = writer.prefix("Filter");
    if let Some(var_3805) = &input.filters {
        let mut list_3807 = scope_3804.start_list(true, Some("Filter"));
        for item_3806 in var_3805 {
            #[allow(unused_mut)]let mut entry_3808 = list_3807.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3808, item_3806)?;
        }
        list_3807.finish();
    }
    #[allow(unused_mut)]let mut scope_3809 = writer.prefix("MaxResults");
    if let Some(var_3810) = &input.max_results {
        scope_3809.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3810).into()));
    }
    #[allow(unused_mut)]let mut scope_3811 = writer.prefix("NextToken");
    if let Some(var_3812) = &input.next_token {
        scope_3811.string(var_3812);
    }
    #[allow(unused_mut)]let mut scope_3813 = writer.prefix("DryRun");
    if let Some(var_3814) = &input.dry_run {
        scope_3813.boolean(*var_3814);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(input: &crate::input::DescribeTransitGatewayRouteTablesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayRouteTables", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3815 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3816) = &input.transit_gateway_route_table_ids {
        let mut list_3818 = scope_3815.start_list(true, Some("item"));
        for item_3817 in var_3816 {
            #[allow(unused_mut)]let mut entry_3819 = list_3818.entry();
            entry_3819.string(item_3817);
        }
        list_3818.finish();
    }
    #[allow(unused_mut)]let mut scope_3820 = writer.prefix("Filter");
    if let Some(var_3821) = &input.filters {
        let mut list_3823 = scope_3820.start_list(true, Some("Filter"));
        for item_3822 in var_3821 {
            #[allow(unused_mut)]let mut entry_3824 = list_3823.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3824, item_3822)?;
        }
        list_3823.finish();
    }
    #[allow(unused_mut)]let mut scope_3825 = writer.prefix("MaxResults");
    if let Some(var_3826) = &input.max_results {
        scope_3825.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3826).into()));
    }
    #[allow(unused_mut)]let mut scope_3827 = writer.prefix("NextToken");
    if let Some(var_3828) = &input.next_token {
        scope_3827.string(var_3828);
    }
    #[allow(unused_mut)]let mut scope_3829 = writer.prefix("DryRun");
    if let Some(var_3830) = &input.dry_run {
        scope_3829.boolean(*var_3830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(input: &crate::input::DescribeTransitGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3831 = writer.prefix("TransitGatewayIds");
    if let Some(var_3832) = &input.transit_gateway_ids {
        let mut list_3834 = scope_3831.start_list(true, Some("item"));
        for item_3833 in var_3832 {
            #[allow(unused_mut)]let mut entry_3835 = list_3834.entry();
            entry_3835.string(item_3833);
        }
        list_3834.finish();
    }
    #[allow(unused_mut)]let mut scope_3836 = writer.prefix("Filter");
    if let Some(var_3837) = &input.filters {
        let mut list_3839 = scope_3836.start_list(true, Some("Filter"));
        for item_3838 in var_3837 {
            #[allow(unused_mut)]let mut entry_3840 = list_3839.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3840, item_3838)?;
        }
        list_3839.finish();
    }
    #[allow(unused_mut)]let mut scope_3841 = writer.prefix("MaxResults");
    if let Some(var_3842) = &input.max_results {
        scope_3841.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3842).into()));
    }
    #[allow(unused_mut)]let mut scope_3843 = writer.prefix("NextToken");
    if let Some(var_3844) = &input.next_token {
        scope_3843.string(var_3844);
    }
    #[allow(unused_mut)]let mut scope_3845 = writer.prefix("DryRun");
    if let Some(var_3846) = &input.dry_run {
        scope_3845.boolean(*var_3846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGatewayVpcAttachments", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3847 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3848) = &input.transit_gateway_attachment_ids {
        let mut list_3850 = scope_3847.start_list(true, None);
        for item_3849 in var_3848 {
            #[allow(unused_mut)]let mut entry_3851 = list_3850.entry();
            entry_3851.string(item_3849);
        }
        list_3850.finish();
    }
    #[allow(unused_mut)]let mut scope_3852 = writer.prefix("Filter");
    if let Some(var_3853) = &input.filters {
        let mut list_3855 = scope_3852.start_list(true, Some("Filter"));
        for item_3854 in var_3853 {
            #[allow(unused_mut)]let mut entry_3856 = list_3855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3856, item_3854)?;
        }
        list_3855.finish();
    }
    #[allow(unused_mut)]let mut scope_3857 = writer.prefix("MaxResults");
    if let Some(var_3858) = &input.max_results {
        scope_3857.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3858).into()));
    }
    #[allow(unused_mut)]let mut scope_3859 = writer.prefix("NextToken");
    if let Some(var_3860) = &input.next_token {
        scope_3859.string(var_3860);
    }
    #[allow(unused_mut)]let mut scope_3861 = writer.prefix("DryRun");
    if let Some(var_3862) = &input.dry_run {
        scope_3861.boolean(*var_3862);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(input: &crate::input::DescribeTrunkInterfaceAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrunkInterfaceAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3863 = writer.prefix("AssociationId");
    if let Some(var_3864) = &input.association_ids {
        let mut list_3866 = scope_3863.start_list(true, Some("item"));
        for item_3865 in var_3864 {
            #[allow(unused_mut)]let mut entry_3867 = list_3866.entry();
            entry_3867.string(item_3865);
        }
        list_3866.finish();
    }
    #[allow(unused_mut)]let mut scope_3868 = writer.prefix("DryRun");
    if let Some(var_3869) = &input.dry_run {
        scope_3868.boolean(*var_3869);
    }
    #[allow(unused_mut)]let mut scope_3870 = writer.prefix("Filter");
    if let Some(var_3871) = &input.filters {
        let mut list_3873 = scope_3870.start_list(true, Some("Filter"));
        for item_3872 in var_3871 {
            #[allow(unused_mut)]let mut entry_3874 = list_3873.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3874, item_3872)?;
        }
        list_3873.finish();
    }
    #[allow(unused_mut)]let mut scope_3875 = writer.prefix("NextToken");
    if let Some(var_3876) = &input.next_token {
        scope_3875.string(var_3876);
    }
    #[allow(unused_mut)]let mut scope_3877 = writer.prefix("MaxResults");
    if let Some(var_3878) = &input.max_results {
        scope_3877.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3878).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(input: &crate::input::DescribeVolumeAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3879 = writer.prefix("Attribute");
    if let Some(var_3880) = &input.attribute {
        scope_3879.string(var_3880.as_str());
    }
    #[allow(unused_mut)]let mut scope_3881 = writer.prefix("VolumeId");
    if let Some(var_3882) = &input.volume_id {
        scope_3881.string(var_3882);
    }
    #[allow(unused_mut)]let mut scope_3883 = writer.prefix("DryRun");
    if let Some(var_3884) = &input.dry_run {
        scope_3883.boolean(*var_3884);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(input: &crate::input::DescribeVolumesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3885 = writer.prefix("Filter");
    if let Some(var_3886) = &input.filters {
        let mut list_3888 = scope_3885.start_list(true, Some("Filter"));
        for item_3887 in var_3886 {
            #[allow(unused_mut)]let mut entry_3889 = list_3888.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3889, item_3887)?;
        }
        list_3888.finish();
    }
    #[allow(unused_mut)]let mut scope_3890 = writer.prefix("VolumeId");
    if let Some(var_3891) = &input.volume_ids {
        let mut list_3893 = scope_3890.start_list(true, Some("VolumeId"));
        for item_3892 in var_3891 {
            #[allow(unused_mut)]let mut entry_3894 = list_3893.entry();
            entry_3894.string(item_3892);
        }
        list_3893.finish();
    }
    #[allow(unused_mut)]let mut scope_3895 = writer.prefix("DryRun");
    if let Some(var_3896) = &input.dry_run {
        scope_3895.boolean(*var_3896);
    }
    #[allow(unused_mut)]let mut scope_3897 = writer.prefix("MaxResults");
    if let Some(var_3898) = &input.max_results {
        scope_3897.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3898).into()));
    }
    #[allow(unused_mut)]let mut scope_3899 = writer.prefix("NextToken");
    if let Some(var_3900) = &input.next_token {
        scope_3899.string(var_3900);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(input: &crate::input::DescribeVolumesModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3901 = writer.prefix("DryRun");
    if let Some(var_3902) = &input.dry_run {
        scope_3901.boolean(*var_3902);
    }
    #[allow(unused_mut)]let mut scope_3903 = writer.prefix("VolumeId");
    if let Some(var_3904) = &input.volume_ids {
        let mut list_3906 = scope_3903.start_list(true, Some("VolumeId"));
        for item_3905 in var_3904 {
            #[allow(unused_mut)]let mut entry_3907 = list_3906.entry();
            entry_3907.string(item_3905);
        }
        list_3906.finish();
    }
    #[allow(unused_mut)]let mut scope_3908 = writer.prefix("Filter");
    if let Some(var_3909) = &input.filters {
        let mut list_3911 = scope_3908.start_list(true, Some("Filter"));
        for item_3910 in var_3909 {
            #[allow(unused_mut)]let mut entry_3912 = list_3911.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3912, item_3910)?;
        }
        list_3911.finish();
    }
    #[allow(unused_mut)]let mut scope_3913 = writer.prefix("NextToken");
    if let Some(var_3914) = &input.next_token {
        scope_3913.string(var_3914);
    }
    #[allow(unused_mut)]let mut scope_3915 = writer.prefix("MaxResults");
    if let Some(var_3916) = &input.max_results {
        scope_3915.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3916).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(input: &crate::input::DescribeVolumeStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3917 = writer.prefix("Filter");
    if let Some(var_3918) = &input.filters {
        let mut list_3920 = scope_3917.start_list(true, Some("Filter"));
        for item_3919 in var_3918 {
            #[allow(unused_mut)]let mut entry_3921 = list_3920.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3921, item_3919)?;
        }
        list_3920.finish();
    }
    #[allow(unused_mut)]let mut scope_3922 = writer.prefix("MaxResults");
    if let Some(var_3923) = &input.max_results {
        scope_3922.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3923).into()));
    }
    #[allow(unused_mut)]let mut scope_3924 = writer.prefix("NextToken");
    if let Some(var_3925) = &input.next_token {
        scope_3924.string(var_3925);
    }
    #[allow(unused_mut)]let mut scope_3926 = writer.prefix("VolumeId");
    if let Some(var_3927) = &input.volume_ids {
        let mut list_3929 = scope_3926.start_list(true, Some("VolumeId"));
        for item_3928 in var_3927 {
            #[allow(unused_mut)]let mut entry_3930 = list_3929.entry();
            entry_3930.string(item_3928);
        }
        list_3929.finish();
    }
    #[allow(unused_mut)]let mut scope_3931 = writer.prefix("DryRun");
    if let Some(var_3932) = &input.dry_run {
        scope_3931.boolean(*var_3932);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(input: &crate::input::DescribeVpcAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3933 = writer.prefix("Attribute");
    if let Some(var_3934) = &input.attribute {
        scope_3933.string(var_3934.as_str());
    }
    #[allow(unused_mut)]let mut scope_3935 = writer.prefix("VpcId");
    if let Some(var_3936) = &input.vpc_id {
        scope_3935.string(var_3936);
    }
    #[allow(unused_mut)]let mut scope_3937 = writer.prefix("DryRun");
    if let Some(var_3938) = &input.dry_run {
        scope_3937.boolean(*var_3938);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(input: &crate::input::DescribeVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3939 = writer.prefix("Filter");
    if let Some(var_3940) = &input.filters {
        let mut list_3942 = scope_3939.start_list(true, Some("Filter"));
        for item_3941 in var_3940 {
            #[allow(unused_mut)]let mut entry_3943 = list_3942.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3943, item_3941)?;
        }
        list_3942.finish();
    }
    #[allow(unused_mut)]let mut scope_3944 = writer.prefix("DryRun");
    if let Some(var_3945) = &input.dry_run {
        scope_3944.boolean(*var_3945);
    }
    #[allow(unused_mut)]let mut scope_3946 = writer.prefix("VpcId");
    if let Some(var_3947) = &input.vpc_ids {
        let mut list_3949 = scope_3946.start_list(true, Some("VpcId"));
        for item_3948 in var_3947 {
            #[allow(unused_mut)]let mut entry_3950 = list_3949.entry();
            entry_3950.string(item_3948);
        }
        list_3949.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(input: &crate::input::DescribeVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3951 = writer.prefix("MaxResults");
    if let Some(var_3952) = &input.max_results {
        scope_3951.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3952).into()));
    }
    #[allow(unused_mut)]let mut scope_3953 = writer.prefix("NextToken");
    if let Some(var_3954) = &input.next_token {
        scope_3953.string(var_3954);
    }
    #[allow(unused_mut)]let mut scope_3955 = writer.prefix("VpcIds");
    if let Some(var_3956) = &input.vpc_ids {
        let mut list_3958 = scope_3955.start_list(true, Some("VpcId"));
        for item_3957 in var_3956 {
            #[allow(unused_mut)]let mut entry_3959 = list_3958.entry();
            entry_3959.string(item_3957);
        }
        list_3958.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnectionNotifications", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3960 = writer.prefix("DryRun");
    if let Some(var_3961) = &input.dry_run {
        scope_3960.boolean(*var_3961);
    }
    #[allow(unused_mut)]let mut scope_3962 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3963) = &input.connection_notification_id {
        scope_3962.string(var_3963);
    }
    #[allow(unused_mut)]let mut scope_3964 = writer.prefix("Filter");
    if let Some(var_3965) = &input.filters {
        let mut list_3967 = scope_3964.start_list(true, Some("Filter"));
        for item_3966 in var_3965 {
            #[allow(unused_mut)]let mut entry_3968 = list_3967.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3968, item_3966)?;
        }
        list_3967.finish();
    }
    #[allow(unused_mut)]let mut scope_3969 = writer.prefix("MaxResults");
    if let Some(var_3970) = &input.max_results {
        scope_3969.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3970).into()));
    }
    #[allow(unused_mut)]let mut scope_3971 = writer.prefix("NextToken");
    if let Some(var_3972) = &input.next_token {
        scope_3971.string(var_3972);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(input: &crate::input::DescribeVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3973 = writer.prefix("DryRun");
    if let Some(var_3974) = &input.dry_run {
        scope_3973.boolean(*var_3974);
    }
    #[allow(unused_mut)]let mut scope_3975 = writer.prefix("Filter");
    if let Some(var_3976) = &input.filters {
        let mut list_3978 = scope_3975.start_list(true, Some("Filter"));
        for item_3977 in var_3976 {
            #[allow(unused_mut)]let mut entry_3979 = list_3978.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3979, item_3977)?;
        }
        list_3978.finish();
    }
    #[allow(unused_mut)]let mut scope_3980 = writer.prefix("MaxResults");
    if let Some(var_3981) = &input.max_results {
        scope_3980.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3981).into()));
    }
    #[allow(unused_mut)]let mut scope_3982 = writer.prefix("NextToken");
    if let Some(var_3983) = &input.next_token {
        scope_3982.string(var_3983);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(input: &crate::input::DescribeVpcEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]let mut scope_3984 = writer.prefix("DryRun");
    if let Some(var_3985) = &input.dry_run {
        scope_3984.boolean(*var_3985);
    }
    #[allow(unused_mut)]let mut scope_3986 = writer.prefix("VpcEndpointId");
    if let Some(var_3987) = &input.vpc_endpoint_ids {
        let mut list_3989 = scope_3986.start_list(true, Some("item"));
        for item_3988 in var_3987 {
            #[allow(unused_mut)]let mut entry_3990 = list_3989.entry();
            entry_3990.string(item_3988);
        }
        list_3989.finish();
    }
    #[allow(unused_mut)]let mut scope_3991 = writer.prefix("Filter");
    if let Some(var_3992) = &input.filters {
        let mut list_3994 = scope_3991.start_list(true, Some("Filter"));
        for item_3993 in var_3992 {
            #[allow(unused_mut)]let mut entry_3995 = list_3994.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3995, item_3993)?;
        }
        list_3994.finish();
    }
    #[allow(unused_mut)]let mut scope_3996 = writer.prefix("MaxResults");
    if let Some(var_3997) = &input.max_results {
        scope_3996.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_3997).into()));
    }
    #[allow(unused_mut)]let mut scope_3998 = writer.prefix("NextToken");
    if let Some(var_3999) = &input.next_token {
        scope_3998.string(var_3999);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServiceConfigurations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4000 = writer.prefix("DryRun");
    if let Some(var_4001) = &input.dry_run {
        scope_4000.boolean(*var_4001);
    }
    #[allow(unused_mut)]let mut scope_4002 = writer.prefix("ServiceId");
    if let Some(var_4003) = &input.service_ids {
        let mut list_4005 = scope_4002.start_list(true, Some("item"));
        for item_4004 in var_4003 {
            #[allow(unused_mut)]let mut entry_4006 = list_4005.entry();
            entry_4006.string(item_4004);
        }
        list_4005.finish();
    }
    #[allow(unused_mut)]let mut scope_4007 = writer.prefix("Filter");
    if let Some(var_4008) = &input.filters {
        let mut list_4010 = scope_4007.start_list(true, Some("Filter"));
        for item_4009 in var_4008 {
            #[allow(unused_mut)]let mut entry_4011 = list_4010.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4011, item_4009)?;
        }
        list_4010.finish();
    }
    #[allow(unused_mut)]let mut scope_4012 = writer.prefix("MaxResults");
    if let Some(var_4013) = &input.max_results {
        scope_4012.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4013).into()));
    }
    #[allow(unused_mut)]let mut scope_4014 = writer.prefix("NextToken");
    if let Some(var_4015) = &input.next_token {
        scope_4014.string(var_4015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(input: &crate::input::DescribeVpcEndpointServicePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServicePermissions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4016 = writer.prefix("DryRun");
    if let Some(var_4017) = &input.dry_run {
        scope_4016.boolean(*var_4017);
    }
    #[allow(unused_mut)]let mut scope_4018 = writer.prefix("ServiceId");
    if let Some(var_4019) = &input.service_id {
        scope_4018.string(var_4019);
    }
    #[allow(unused_mut)]let mut scope_4020 = writer.prefix("Filter");
    if let Some(var_4021) = &input.filters {
        let mut list_4023 = scope_4020.start_list(true, Some("Filter"));
        for item_4022 in var_4021 {
            #[allow(unused_mut)]let mut entry_4024 = list_4023.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4024, item_4022)?;
        }
        list_4023.finish();
    }
    #[allow(unused_mut)]let mut scope_4025 = writer.prefix("MaxResults");
    if let Some(var_4026) = &input.max_results {
        scope_4025.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4026).into()));
    }
    #[allow(unused_mut)]let mut scope_4027 = writer.prefix("NextToken");
    if let Some(var_4028) = &input.next_token {
        scope_4027.string(var_4028);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(input: &crate::input::DescribeVpcEndpointServicesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4029 = writer.prefix("DryRun");
    if let Some(var_4030) = &input.dry_run {
        scope_4029.boolean(*var_4030);
    }
    #[allow(unused_mut)]let mut scope_4031 = writer.prefix("ServiceName");
    if let Some(var_4032) = &input.service_names {
        let mut list_4034 = scope_4031.start_list(true, Some("item"));
        for item_4033 in var_4032 {
            #[allow(unused_mut)]let mut entry_4035 = list_4034.entry();
            entry_4035.string(item_4033);
        }
        list_4034.finish();
    }
    #[allow(unused_mut)]let mut scope_4036 = writer.prefix("Filter");
    if let Some(var_4037) = &input.filters {
        let mut list_4039 = scope_4036.start_list(true, Some("Filter"));
        for item_4038 in var_4037 {
            #[allow(unused_mut)]let mut entry_4040 = list_4039.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4040, item_4038)?;
        }
        list_4039.finish();
    }
    #[allow(unused_mut)]let mut scope_4041 = writer.prefix("MaxResults");
    if let Some(var_4042) = &input.max_results {
        scope_4041.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4042).into()));
    }
    #[allow(unused_mut)]let mut scope_4043 = writer.prefix("NextToken");
    if let Some(var_4044) = &input.next_token {
        scope_4043.string(var_4044);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(input: &crate::input::DescribeVpcPeeringConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4045 = writer.prefix("Filter");
    if let Some(var_4046) = &input.filters {
        let mut list_4048 = scope_4045.start_list(true, Some("Filter"));
        for item_4047 in var_4046 {
            #[allow(unused_mut)]let mut entry_4049 = list_4048.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4049, item_4047)?;
        }
        list_4048.finish();
    }
    #[allow(unused_mut)]let mut scope_4050 = writer.prefix("DryRun");
    if let Some(var_4051) = &input.dry_run {
        scope_4050.boolean(*var_4051);
    }
    #[allow(unused_mut)]let mut scope_4052 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_4053) = &input.vpc_peering_connection_ids {
        let mut list_4055 = scope_4052.start_list(true, Some("item"));
        for item_4054 in var_4053 {
            #[allow(unused_mut)]let mut entry_4056 = list_4055.entry();
            entry_4056.string(item_4054);
        }
        list_4055.finish();
    }
    #[allow(unused_mut)]let mut scope_4057 = writer.prefix("NextToken");
    if let Some(var_4058) = &input.next_token {
        scope_4057.string(var_4058);
    }
    #[allow(unused_mut)]let mut scope_4059 = writer.prefix("MaxResults");
    if let Some(var_4060) = &input.max_results {
        scope_4059.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4060).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(input: &crate::input::DescribeVpcsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4061 = writer.prefix("Filter");
    if let Some(var_4062) = &input.filters {
        let mut list_4064 = scope_4061.start_list(true, Some("Filter"));
        for item_4063 in var_4062 {
            #[allow(unused_mut)]let mut entry_4065 = list_4064.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4065, item_4063)?;
        }
        list_4064.finish();
    }
    #[allow(unused_mut)]let mut scope_4066 = writer.prefix("VpcId");
    if let Some(var_4067) = &input.vpc_ids {
        let mut list_4069 = scope_4066.start_list(true, Some("VpcId"));
        for item_4068 in var_4067 {
            #[allow(unused_mut)]let mut entry_4070 = list_4069.entry();
            entry_4070.string(item_4068);
        }
        list_4069.finish();
    }
    #[allow(unused_mut)]let mut scope_4071 = writer.prefix("DryRun");
    if let Some(var_4072) = &input.dry_run {
        scope_4071.boolean(*var_4072);
    }
    #[allow(unused_mut)]let mut scope_4073 = writer.prefix("NextToken");
    if let Some(var_4074) = &input.next_token {
        scope_4073.string(var_4074);
    }
    #[allow(unused_mut)]let mut scope_4075 = writer.prefix("MaxResults");
    if let Some(var_4076) = &input.max_results {
        scope_4075.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4076).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(input: &crate::input::DescribeVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4077 = writer.prefix("Filter");
    if let Some(var_4078) = &input.filters {
        let mut list_4080 = scope_4077.start_list(true, Some("Filter"));
        for item_4079 in var_4078 {
            #[allow(unused_mut)]let mut entry_4081 = list_4080.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4081, item_4079)?;
        }
        list_4080.finish();
    }
    #[allow(unused_mut)]let mut scope_4082 = writer.prefix("VpnConnectionId");
    if let Some(var_4083) = &input.vpn_connection_ids {
        let mut list_4085 = scope_4082.start_list(true, Some("VpnConnectionId"));
        for item_4084 in var_4083 {
            #[allow(unused_mut)]let mut entry_4086 = list_4085.entry();
            entry_4086.string(item_4084);
        }
        list_4085.finish();
    }
    #[allow(unused_mut)]let mut scope_4087 = writer.prefix("DryRun");
    if let Some(var_4088) = &input.dry_run {
        scope_4087.boolean(*var_4088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(input: &crate::input::DescribeVpnGatewaysInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4089 = writer.prefix("Filter");
    if let Some(var_4090) = &input.filters {
        let mut list_4092 = scope_4089.start_list(true, Some("Filter"));
        for item_4091 in var_4090 {
            #[allow(unused_mut)]let mut entry_4093 = list_4092.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4093, item_4091)?;
        }
        list_4092.finish();
    }
    #[allow(unused_mut)]let mut scope_4094 = writer.prefix("VpnGatewayId");
    if let Some(var_4095) = &input.vpn_gateway_ids {
        let mut list_4097 = scope_4094.start_list(true, Some("VpnGatewayId"));
        for item_4096 in var_4095 {
            #[allow(unused_mut)]let mut entry_4098 = list_4097.entry();
            entry_4098.string(item_4096);
        }
        list_4097.finish();
    }
    #[allow(unused_mut)]let mut scope_4099 = writer.prefix("DryRun");
    if let Some(var_4100) = &input.dry_run {
        scope_4099.boolean(*var_4100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(input: &crate::input::DetachClassicLinkVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4101 = writer.prefix("DryRun");
    if let Some(var_4102) = &input.dry_run {
        scope_4101.boolean(*var_4102);
    }
    #[allow(unused_mut)]let mut scope_4103 = writer.prefix("InstanceId");
    if let Some(var_4104) = &input.instance_id {
        scope_4103.string(var_4104);
    }
    #[allow(unused_mut)]let mut scope_4105 = writer.prefix("VpcId");
    if let Some(var_4106) = &input.vpc_id {
        scope_4105.string(var_4106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(input: &crate::input::DetachInternetGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4107 = writer.prefix("DryRun");
    if let Some(var_4108) = &input.dry_run {
        scope_4107.boolean(*var_4108);
    }
    #[allow(unused_mut)]let mut scope_4109 = writer.prefix("InternetGatewayId");
    if let Some(var_4110) = &input.internet_gateway_id {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]let mut scope_4111 = writer.prefix("VpcId");
    if let Some(var_4112) = &input.vpc_id {
        scope_4111.string(var_4112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(input: &crate::input::DetachNetworkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4113 = writer.prefix("AttachmentId");
    if let Some(var_4114) = &input.attachment_id {
        scope_4113.string(var_4114);
    }
    #[allow(unused_mut)]let mut scope_4115 = writer.prefix("DryRun");
    if let Some(var_4116) = &input.dry_run {
        scope_4115.boolean(*var_4116);
    }
    #[allow(unused_mut)]let mut scope_4117 = writer.prefix("Force");
    if let Some(var_4118) = &input.force {
        scope_4117.boolean(*var_4118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(input: &crate::input::DetachVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4119 = writer.prefix("Device");
    if let Some(var_4120) = &input.device {
        scope_4119.string(var_4120);
    }
    #[allow(unused_mut)]let mut scope_4121 = writer.prefix("Force");
    if let Some(var_4122) = &input.force {
        scope_4121.boolean(*var_4122);
    }
    #[allow(unused_mut)]let mut scope_4123 = writer.prefix("InstanceId");
    if let Some(var_4124) = &input.instance_id {
        scope_4123.string(var_4124);
    }
    #[allow(unused_mut)]let mut scope_4125 = writer.prefix("VolumeId");
    if let Some(var_4126) = &input.volume_id {
        scope_4125.string(var_4126);
    }
    #[allow(unused_mut)]let mut scope_4127 = writer.prefix("DryRun");
    if let Some(var_4128) = &input.dry_run {
        scope_4127.boolean(*var_4128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(input: &crate::input::DetachVpnGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4129 = writer.prefix("VpcId");
    if let Some(var_4130) = &input.vpc_id {
        scope_4129.string(var_4130);
    }
    #[allow(unused_mut)]let mut scope_4131 = writer.prefix("VpnGatewayId");
    if let Some(var_4132) = &input.vpn_gateway_id {
        scope_4131.string(var_4132);
    }
    #[allow(unused_mut)]let mut scope_4133 = writer.prefix("DryRun");
    if let Some(var_4134) = &input.dry_run {
        scope_4133.boolean(*var_4134);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_address_transfer(input: &crate::input::DisableAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4135 = writer.prefix("AllocationId");
    if let Some(var_4136) = &input.allocation_id {
        scope_4135.string(var_4136);
    }
    #[allow(unused_mut)]let mut scope_4137 = writer.prefix("DryRun");
    if let Some(var_4138) = &input.dry_run {
        scope_4137.boolean(*var_4138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(input: &crate::input::DisableEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4139 = writer.prefix("DryRun");
    if let Some(var_4140) = &input.dry_run {
        scope_4139.boolean(*var_4140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(input: &crate::input::DisableFastLaunchInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4141 = writer.prefix("ImageId");
    if let Some(var_4142) = &input.image_id {
        scope_4141.string(var_4142);
    }
    #[allow(unused_mut)]let mut scope_4143 = writer.prefix("Force");
    if let Some(var_4144) = &input.force {
        scope_4143.boolean(*var_4144);
    }
    #[allow(unused_mut)]let mut scope_4145 = writer.prefix("DryRun");
    if let Some(var_4146) = &input.dry_run {
        scope_4145.boolean(*var_4146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(input: &crate::input::DisableFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4147 = writer.prefix("AvailabilityZone");
    if let Some(var_4148) = &input.availability_zones {
        let mut list_4150 = scope_4147.start_list(true, Some("AvailabilityZone"));
        for item_4149 in var_4148 {
            #[allow(unused_mut)]let mut entry_4151 = list_4150.entry();
            entry_4151.string(item_4149);
        }
        list_4150.finish();
    }
    #[allow(unused_mut)]let mut scope_4152 = writer.prefix("SourceSnapshotId");
    if let Some(var_4153) = &input.source_snapshot_ids {
        let mut list_4155 = scope_4152.start_list(true, Some("SnapshotId"));
        for item_4154 in var_4153 {
            #[allow(unused_mut)]let mut entry_4156 = list_4155.entry();
            entry_4156.string(item_4154);
        }
        list_4155.finish();
    }
    #[allow(unused_mut)]let mut scope_4157 = writer.prefix("DryRun");
    if let Some(var_4158) = &input.dry_run {
        scope_4157.boolean(*var_4158);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(input: &crate::input::DisableImageDeprecationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4159 = writer.prefix("ImageId");
    if let Some(var_4160) = &input.image_id {
        scope_4159.string(var_4160);
    }
    #[allow(unused_mut)]let mut scope_4161 = writer.prefix("DryRun");
    if let Some(var_4162) = &input.dry_run {
        scope_4161.boolean(*var_4162);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(input: &crate::input::DisableIpamOrganizationAdminAccountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableIpamOrganizationAdminAccount", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4163 = writer.prefix("DryRun");
    if let Some(var_4164) = &input.dry_run {
        scope_4163.boolean(*var_4164);
    }
    #[allow(unused_mut)]let mut scope_4165 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4166) = &input.delegated_admin_account_id {
        scope_4165.string(var_4166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(input: &crate::input::DisableSerialConsoleAccessInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4167 = writer.prefix("DryRun");
    if let Some(var_4168) = &input.dry_run {
        scope_4167.boolean(*var_4168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(input: &crate::input::DisableTransitGatewayRouteTablePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableTransitGatewayRouteTablePropagation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4169 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4170) = &input.transit_gateway_route_table_id {
        scope_4169.string(var_4170);
    }
    #[allow(unused_mut)]let mut scope_4171 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4172) = &input.transit_gateway_attachment_id {
        scope_4171.string(var_4172);
    }
    #[allow(unused_mut)]let mut scope_4173 = writer.prefix("DryRun");
    if let Some(var_4174) = &input.dry_run {
        scope_4173.boolean(*var_4174);
    }
    #[allow(unused_mut)]let mut scope_4175 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4176) = &input.transit_gateway_route_table_announcement_id {
        scope_4175.string(var_4176);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(input: &crate::input::DisableVgwRoutePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4177 = writer.prefix("GatewayId");
    if let Some(var_4178) = &input.gateway_id {
        scope_4177.string(var_4178);
    }
    #[allow(unused_mut)]let mut scope_4179 = writer.prefix("RouteTableId");
    if let Some(var_4180) = &input.route_table_id {
        scope_4179.string(var_4180);
    }
    #[allow(unused_mut)]let mut scope_4181 = writer.prefix("DryRun");
    if let Some(var_4182) = &input.dry_run {
        scope_4181.boolean(*var_4182);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(input: &crate::input::DisableVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4183 = writer.prefix("DryRun");
    if let Some(var_4184) = &input.dry_run {
        scope_4183.boolean(*var_4184);
    }
    #[allow(unused_mut)]let mut scope_4185 = writer.prefix("VpcId");
    if let Some(var_4186) = &input.vpc_id {
        scope_4185.string(var_4186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(input: &crate::input::DisableVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4187 = writer.prefix("VpcId");
    if let Some(var_4188) = &input.vpc_id {
        scope_4187.string(var_4188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(input: &crate::input::DisassociateAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4189 = writer.prefix("AssociationId");
    if let Some(var_4190) = &input.association_id {
        scope_4189.string(var_4190);
    }
    #[allow(unused_mut)]let mut scope_4191 = writer.prefix("PublicIp");
    if let Some(var_4192) = &input.public_ip {
        scope_4191.string(var_4192);
    }
    #[allow(unused_mut)]let mut scope_4193 = writer.prefix("DryRun");
    if let Some(var_4194) = &input.dry_run {
        scope_4193.boolean(*var_4194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(input: &crate::input::DisassociateClientVpnTargetNetworkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateClientVpnTargetNetwork", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4195 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4196) = &input.client_vpn_endpoint_id {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]let mut scope_4197 = writer.prefix("AssociationId");
    if let Some(var_4198) = &input.association_id {
        scope_4197.string(var_4198);
    }
    #[allow(unused_mut)]let mut scope_4199 = writer.prefix("DryRun");
    if let Some(var_4200) = &input.dry_run {
        scope_4199.boolean(*var_4200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(input: &crate::input::DisassociateEnclaveCertificateIamRoleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateEnclaveCertificateIamRole", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4201 = writer.prefix("CertificateArn");
    if let Some(var_4202) = &input.certificate_arn {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]let mut scope_4203 = writer.prefix("RoleArn");
    if let Some(var_4204) = &input.role_arn {
        scope_4203.string(var_4204);
    }
    #[allow(unused_mut)]let mut scope_4205 = writer.prefix("DryRun");
    if let Some(var_4206) = &input.dry_run {
        scope_4205.boolean(*var_4206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(input: &crate::input::DisassociateIamInstanceProfileInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4207 = writer.prefix("AssociationId");
    if let Some(var_4208) = &input.association_id {
        scope_4207.string(var_4208);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(input: &crate::input::DisassociateInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4209 = writer.prefix("DryRun");
    if let Some(var_4210) = &input.dry_run {
        scope_4209.boolean(*var_4210);
    }
    #[allow(unused_mut)]let mut scope_4211 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4212) = &input.instance_event_window_id {
        scope_4211.string(var_4212);
    }
    #[allow(unused_mut)]let mut scope_4213 = writer.prefix("AssociationTarget");
    if let Some(var_4214) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4213, var_4214)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(input: &crate::input::DisassociateRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4215 = writer.prefix("AssociationId");
    if let Some(var_4216) = &input.association_id {
        scope_4215.string(var_4216);
    }
    #[allow(unused_mut)]let mut scope_4217 = writer.prefix("DryRun");
    if let Some(var_4218) = &input.dry_run {
        scope_4217.boolean(*var_4218);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(input: &crate::input::DisassociateSubnetCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4219 = writer.prefix("AssociationId");
    if let Some(var_4220) = &input.association_id {
        scope_4219.string(var_4220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(input: &crate::input::DisassociateTransitGatewayMulticastDomainInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayMulticastDomain", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4221 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4222) = &input.transit_gateway_multicast_domain_id {
        scope_4221.string(var_4222);
    }
    #[allow(unused_mut)]let mut scope_4223 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4224) = &input.transit_gateway_attachment_id {
        scope_4223.string(var_4224);
    }
    #[allow(unused_mut)]let mut scope_4225 = writer.prefix("SubnetIds");
    if let Some(var_4226) = &input.subnet_ids {
        let mut list_4228 = scope_4225.start_list(true, Some("item"));
        for item_4227 in var_4226 {
            #[allow(unused_mut)]let mut entry_4229 = list_4228.entry();
            entry_4229.string(item_4227);
        }
        list_4228.finish();
    }
    #[allow(unused_mut)]let mut scope_4230 = writer.prefix("DryRun");
    if let Some(var_4231) = &input.dry_run {
        scope_4230.boolean(*var_4231);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_policy_table(input: &crate::input::DisassociateTransitGatewayPolicyTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayPolicyTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4232 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4233) = &input.transit_gateway_policy_table_id {
        scope_4232.string(var_4233);
    }
    #[allow(unused_mut)]let mut scope_4234 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4235) = &input.transit_gateway_attachment_id {
        scope_4234.string(var_4235);
    }
    #[allow(unused_mut)]let mut scope_4236 = writer.prefix("DryRun");
    if let Some(var_4237) = &input.dry_run {
        scope_4236.boolean(*var_4237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(input: &crate::input::DisassociateTransitGatewayRouteTableInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTransitGatewayRouteTable", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4238 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4239) = &input.transit_gateway_route_table_id {
        scope_4238.string(var_4239);
    }
    #[allow(unused_mut)]let mut scope_4240 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4241) = &input.transit_gateway_attachment_id {
        scope_4240.string(var_4241);
    }
    #[allow(unused_mut)]let mut scope_4242 = writer.prefix("DryRun");
    if let Some(var_4243) = &input.dry_run {
        scope_4242.boolean(*var_4243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(input: &crate::input::DisassociateTrunkInterfaceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4244 = writer.prefix("AssociationId");
    if let Some(var_4245) = &input.association_id {
        scope_4244.string(var_4245);
    }
    #[allow(unused_mut)]let mut scope_4246 = writer.prefix("ClientToken");
    if let Some(var_4247) = &input.client_token {
        scope_4246.string(var_4247);
    }
    #[allow(unused_mut)]let mut scope_4248 = writer.prefix("DryRun");
    if let Some(var_4249) = &input.dry_run {
        scope_4248.boolean(*var_4249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(input: &crate::input::DisassociateVpcCidrBlockInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4250 = writer.prefix("AssociationId");
    if let Some(var_4251) = &input.association_id {
        scope_4250.string(var_4251);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_address_transfer(input: &crate::input::EnableAddressTransferInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableAddressTransfer", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4252 = writer.prefix("AllocationId");
    if let Some(var_4253) = &input.allocation_id {
        scope_4252.string(var_4253);
    }
    #[allow(unused_mut)]let mut scope_4254 = writer.prefix("TransferAccountId");
    if let Some(var_4255) = &input.transfer_account_id {
        scope_4254.string(var_4255);
    }
    #[allow(unused_mut)]let mut scope_4256 = writer.prefix("DryRun");
    if let Some(var_4257) = &input.dry_run {
        scope_4256.boolean(*var_4257);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(input: &crate::input::EnableEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4258 = writer.prefix("DryRun");
    if let Some(var_4259) = &input.dry_run {
        scope_4258.boolean(*var_4259);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(input: &crate::input::EnableFastLaunchInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4260 = writer.prefix("ImageId");
    if let Some(var_4261) = &input.image_id {
        scope_4260.string(var_4261);
    }
    #[allow(unused_mut)]let mut scope_4262 = writer.prefix("ResourceType");
    if let Some(var_4263) = &input.resource_type {
        scope_4262.string(var_4263);
    }
    #[allow(unused_mut)]let mut scope_4264 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4265) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4264, var_4265)?;
    }
    #[allow(unused_mut)]let mut scope_4266 = writer.prefix("LaunchTemplate");
    if let Some(var_4267) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4266, var_4267)?;
    }
    #[allow(unused_mut)]let mut scope_4268 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4269) = &input.max_parallel_launches {
        scope_4268.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4269).into()));
    }
    #[allow(unused_mut)]let mut scope_4270 = writer.prefix("DryRun");
    if let Some(var_4271) = &input.dry_run {
        scope_4270.boolean(*var_4271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(input: &crate::input::EnableFastSnapshotRestoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4272 = writer.prefix("AvailabilityZone");
    if let Some(var_4273) = &input.availability_zones {
        let mut list_4275 = scope_4272.start_list(true, Some("AvailabilityZone"));
        for item_4274 in var_4273 {
            #[allow(unused_mut)]let mut entry_4276 = list_4275.entry();
            entry_4276.string(item_4274);
        }
        list_4275.finish();
    }
    #[allow(unused_mut)]let mut scope_4277 = writer.prefix("SourceSnapshotId");
    if let Some(var_4278) = &input.source_snapshot_ids {
        let mut list_4280 = scope_4277.start_list(true, Some("SnapshotId"));
        for item_4279 in var_4278 {
            #[allow(unused_mut)]let mut entry_4281 = list_4280.entry();
            entry_4281.string(item_4279);
        }
        list_4280.finish();
    }
    #[allow(unused_mut)]let mut scope_4282 = writer.prefix("DryRun");
    if let Some(var_4283) = &input.dry_run {
        scope_4282.boolean(*var_4283);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(input: &crate::input::EnableImageDeprecationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4284 = writer.prefix("ImageId");
    if let Some(var_4285) = &input.image_id {
        scope_4284.string(var_4285);
    }
    #[allow(unused_mut)]let mut scope_4286 = writer.prefix("DeprecateAt");
    if let Some(var_4287) = &input.deprecate_at {
        scope_4286.date_time(var_4287, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_4288 = writer.prefix("DryRun");
    if let Some(var_4289) = &input.dry_run {
        scope_4288.boolean(*var_4289);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(input: &crate::input::EnableIpamOrganizationAdminAccountInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableIpamOrganizationAdminAccount", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4290 = writer.prefix("DryRun");
    if let Some(var_4291) = &input.dry_run {
        scope_4290.boolean(*var_4291);
    }
    #[allow(unused_mut)]let mut scope_4292 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4293) = &input.delegated_admin_account_id {
        scope_4292.string(var_4293);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(input: &crate::input::EnableSerialConsoleAccessInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4294 = writer.prefix("DryRun");
    if let Some(var_4295) = &input.dry_run {
        scope_4294.boolean(*var_4295);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(input: &crate::input::EnableTransitGatewayRouteTablePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableTransitGatewayRouteTablePropagation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4296 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4297) = &input.transit_gateway_route_table_id {
        scope_4296.string(var_4297);
    }
    #[allow(unused_mut)]let mut scope_4298 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4299) = &input.transit_gateway_attachment_id {
        scope_4298.string(var_4299);
    }
    #[allow(unused_mut)]let mut scope_4300 = writer.prefix("DryRun");
    if let Some(var_4301) = &input.dry_run {
        scope_4300.boolean(*var_4301);
    }
    #[allow(unused_mut)]let mut scope_4302 = writer.prefix("TransitGatewayRouteTableAnnouncementId");
    if let Some(var_4303) = &input.transit_gateway_route_table_announcement_id {
        scope_4302.string(var_4303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(input: &crate::input::EnableVgwRoutePropagationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4304 = writer.prefix("GatewayId");
    if let Some(var_4305) = &input.gateway_id {
        scope_4304.string(var_4305);
    }
    #[allow(unused_mut)]let mut scope_4306 = writer.prefix("RouteTableId");
    if let Some(var_4307) = &input.route_table_id {
        scope_4306.string(var_4307);
    }
    #[allow(unused_mut)]let mut scope_4308 = writer.prefix("DryRun");
    if let Some(var_4309) = &input.dry_run {
        scope_4308.boolean(*var_4309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(input: &crate::input::EnableVolumeIoInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4310 = writer.prefix("DryRun");
    if let Some(var_4311) = &input.dry_run {
        scope_4310.boolean(*var_4311);
    }
    #[allow(unused_mut)]let mut scope_4312 = writer.prefix("VolumeId");
    if let Some(var_4313) = &input.volume_id {
        scope_4312.string(var_4313);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(input: &crate::input::EnableVpcClassicLinkInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4314 = writer.prefix("DryRun");
    if let Some(var_4315) = &input.dry_run {
        scope_4314.boolean(*var_4315);
    }
    #[allow(unused_mut)]let mut scope_4316 = writer.prefix("VpcId");
    if let Some(var_4317) = &input.vpc_id {
        scope_4316.string(var_4317);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(input: &crate::input::EnableVpcClassicLinkDnsSupportInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLinkDnsSupport", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4318 = writer.prefix("VpcId");
    if let Some(var_4319) = &input.vpc_id {
        scope_4318.string(var_4319);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(input: &crate::input::ExportClientVpnClientCertificateRevocationListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportClientVpnClientCertificateRevocationList", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4320 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4321) = &input.client_vpn_endpoint_id {
        scope_4320.string(var_4321);
    }
    #[allow(unused_mut)]let mut scope_4322 = writer.prefix("DryRun");
    if let Some(var_4323) = &input.dry_run {
        scope_4322.boolean(*var_4323);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(input: &crate::input::ExportClientVpnClientConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportClientVpnClientConfiguration", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4324 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4325) = &input.client_vpn_endpoint_id {
        scope_4324.string(var_4325);
    }
    #[allow(unused_mut)]let mut scope_4326 = writer.prefix("DryRun");
    if let Some(var_4327) = &input.dry_run {
        scope_4326.boolean(*var_4327);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(input: &crate::input::ExportImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4328 = writer.prefix("ClientToken");
    if let Some(var_4329) = &input.client_token {
        scope_4328.string(var_4329);
    }
    #[allow(unused_mut)]let mut scope_4330 = writer.prefix("Description");
    if let Some(var_4331) = &input.description {
        scope_4330.string(var_4331);
    }
    #[allow(unused_mut)]let mut scope_4332 = writer.prefix("DiskImageFormat");
    if let Some(var_4333) = &input.disk_image_format {
        scope_4332.string(var_4333.as_str());
    }
    #[allow(unused_mut)]let mut scope_4334 = writer.prefix("DryRun");
    if let Some(var_4335) = &input.dry_run {
        scope_4334.boolean(*var_4335);
    }
    #[allow(unused_mut)]let mut scope_4336 = writer.prefix("ImageId");
    if let Some(var_4337) = &input.image_id {
        scope_4336.string(var_4337);
    }
    #[allow(unused_mut)]let mut scope_4338 = writer.prefix("S3ExportLocation");
    if let Some(var_4339) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(scope_4338, var_4339)?;
    }
    #[allow(unused_mut)]let mut scope_4340 = writer.prefix("RoleName");
    if let Some(var_4341) = &input.role_name {
        scope_4340.string(var_4341);
    }
    #[allow(unused_mut)]let mut scope_4342 = writer.prefix("TagSpecification");
    if let Some(var_4343) = &input.tag_specifications {
        let mut list_4345 = scope_4342.start_list(true, Some("item"));
        for item_4344 in var_4343 {
            #[allow(unused_mut)]let mut entry_4346 = list_4345.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_4346, item_4344)?;
        }
        list_4345.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(input: &crate::input::ExportTransitGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4347 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4348) = &input.transit_gateway_route_table_id {
        scope_4347.string(var_4348);
    }
    #[allow(unused_mut)]let mut scope_4349 = writer.prefix("Filter");
    if let Some(var_4350) = &input.filters {
        let mut list_4352 = scope_4349.start_list(true, Some("Filter"));
        for item_4351 in var_4350 {
            #[allow(unused_mut)]let mut entry_4353 = list_4352.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4353, item_4351)?;
        }
        list_4352.finish();
    }
    #[allow(unused_mut)]let mut scope_4354 = writer.prefix("S3Bucket");
    if let Some(var_4355) = &input.s3_bucket {
        scope_4354.string(var_4355);
    }
    #[allow(unused_mut)]let mut scope_4356 = writer.prefix("DryRun");
    if let Some(var_4357) = &input.dry_run {
        scope_4356.boolean(*var_4357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedEnclaveCertificateIamRoles", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4358 = writer.prefix("CertificateArn");
    if let Some(var_4359) = &input.certificate_arn {
        scope_4358.string(var_4359);
    }
    #[allow(unused_mut)]let mut scope_4360 = writer.prefix("DryRun");
    if let Some(var_4361) = &input.dry_run {
        scope_4360.boolean(*var_4361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(input: &crate::input::GetAssociatedIpv6PoolCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4362 = writer.prefix("PoolId");
    if let Some(var_4363) = &input.pool_id {
        scope_4362.string(var_4363);
    }
    #[allow(unused_mut)]let mut scope_4364 = writer.prefix("NextToken");
    if let Some(var_4365) = &input.next_token {
        scope_4364.string(var_4365);
    }
    #[allow(unused_mut)]let mut scope_4366 = writer.prefix("MaxResults");
    if let Some(var_4367) = &input.max_results {
        scope_4366.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4367).into()));
    }
    #[allow(unused_mut)]let mut scope_4368 = writer.prefix("DryRun");
    if let Some(var_4369) = &input.dry_run {
        scope_4368.boolean(*var_4369);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(input: &crate::input::GetCapacityReservationUsageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4370 = writer.prefix("CapacityReservationId");
    if let Some(var_4371) = &input.capacity_reservation_id {
        scope_4370.string(var_4371);
    }
    #[allow(unused_mut)]let mut scope_4372 = writer.prefix("NextToken");
    if let Some(var_4373) = &input.next_token {
        scope_4372.string(var_4373);
    }
    #[allow(unused_mut)]let mut scope_4374 = writer.prefix("MaxResults");
    if let Some(var_4375) = &input.max_results {
        scope_4374.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4375).into()));
    }
    #[allow(unused_mut)]let mut scope_4376 = writer.prefix("DryRun");
    if let Some(var_4377) = &input.dry_run {
        scope_4376.boolean(*var_4377);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(input: &crate::input::GetCoipPoolUsageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4378 = writer.prefix("PoolId");
    if let Some(var_4379) = &input.pool_id {
        scope_4378.string(var_4379);
    }
    #[allow(unused_mut)]let mut scope_4380 = writer.prefix("Filter");
    if let Some(var_4381) = &input.filters {
        let mut list_4383 = scope_4380.start_list(true, Some("Filter"));
        for item_4382 in var_4381 {
            #[allow(unused_mut)]let mut entry_4384 = list_4383.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4384, item_4382)?;
        }
        list_4383.finish();
    }
    #[allow(unused_mut)]let mut scope_4385 = writer.prefix("MaxResults");
    if let Some(var_4386) = &input.max_results {
        scope_4385.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4386).into()));
    }
    #[allow(unused_mut)]let mut scope_4387 = writer.prefix("NextToken");
    if let Some(var_4388) = &input.next_token {
        scope_4387.string(var_4388);
    }
    #[allow(unused_mut)]let mut scope_4389 = writer.prefix("DryRun");
    if let Some(var_4390) = &input.dry_run {
        scope_4389.boolean(*var_4390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(input: &crate::input::GetConsoleOutputInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4391 = writer.prefix("InstanceId");
    if let Some(var_4392) = &input.instance_id {
        scope_4391.string(var_4392);
    }
    #[allow(unused_mut)]let mut scope_4393 = writer.prefix("DryRun");
    if let Some(var_4394) = &input.dry_run {
        scope_4393.boolean(*var_4394);
    }
    #[allow(unused_mut)]let mut scope_4395 = writer.prefix("Latest");
    if let Some(var_4396) = &input.latest {
        scope_4395.boolean(*var_4396);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(input: &crate::input::GetConsoleScreenshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4397 = writer.prefix("DryRun");
    if let Some(var_4398) = &input.dry_run {
        scope_4397.boolean(*var_4398);
    }
    #[allow(unused_mut)]let mut scope_4399 = writer.prefix("InstanceId");
    if let Some(var_4400) = &input.instance_id {
        scope_4399.string(var_4400);
    }
    #[allow(unused_mut)]let mut scope_4401 = writer.prefix("WakeUp");
    if let Some(var_4402) = &input.wake_up {
        scope_4401.boolean(*var_4402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(input: &crate::input::GetDefaultCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4403 = writer.prefix("DryRun");
    if let Some(var_4404) = &input.dry_run {
        scope_4403.boolean(*var_4404);
    }
    #[allow(unused_mut)]let mut scope_4405 = writer.prefix("InstanceFamily");
    if let Some(var_4406) = &input.instance_family {
        scope_4405.string(var_4406.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(input: &crate::input::GetEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4407 = writer.prefix("DryRun");
    if let Some(var_4408) = &input.dry_run {
        scope_4407.boolean(*var_4408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(input: &crate::input::GetEbsEncryptionByDefaultInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4409 = writer.prefix("DryRun");
    if let Some(var_4410) = &input.dry_run {
        scope_4409.boolean(*var_4410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(input: &crate::input::GetFlowLogsIntegrationTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetFlowLogsIntegrationTemplate", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4411 = writer.prefix("DryRun");
    if let Some(var_4412) = &input.dry_run {
        scope_4411.boolean(*var_4412);
    }
    #[allow(unused_mut)]let mut scope_4413 = writer.prefix("FlowLogId");
    if let Some(var_4414) = &input.flow_log_id {
        scope_4413.string(var_4414);
    }
    #[allow(unused_mut)]let mut scope_4415 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4416) = &input.config_delivery_s3_destination_arn {
        scope_4415.string(var_4416);
    }
    #[allow(unused_mut)]let mut scope_4417 = writer.prefix("IntegrateService");
    if let Some(var_4418) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4417, var_4418)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(input: &crate::input::GetGroupsForCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetGroupsForCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4419 = writer.prefix("CapacityReservationId");
    if let Some(var_4420) = &input.capacity_reservation_id {
        scope_4419.string(var_4420);
    }
    #[allow(unused_mut)]let mut scope_4421 = writer.prefix("NextToken");
    if let Some(var_4422) = &input.next_token {
        scope_4421.string(var_4422);
    }
    #[allow(unused_mut)]let mut scope_4423 = writer.prefix("MaxResults");
    if let Some(var_4424) = &input.max_results {
        scope_4423.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4424).into()));
    }
    #[allow(unused_mut)]let mut scope_4425 = writer.prefix("DryRun");
    if let Some(var_4426) = &input.dry_run {
        scope_4425.boolean(*var_4426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(input: &crate::input::GetHostReservationPurchasePreviewInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetHostReservationPurchasePreview", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4427 = writer.prefix("HostIdSet");
    if let Some(var_4428) = &input.host_id_set {
        let mut list_4430 = scope_4427.start_list(true, Some("item"));
        for item_4429 in var_4428 {
            #[allow(unused_mut)]let mut entry_4431 = list_4430.entry();
            entry_4431.string(item_4429);
        }
        list_4430.finish();
    }
    #[allow(unused_mut)]let mut scope_4432 = writer.prefix("OfferingId");
    if let Some(var_4433) = &input.offering_id {
        scope_4432.string(var_4433);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceTypesFromInstanceRequirements", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4434 = writer.prefix("DryRun");
    if let Some(var_4435) = &input.dry_run {
        scope_4434.boolean(*var_4435);
    }
    #[allow(unused_mut)]let mut scope_4436 = writer.prefix("ArchitectureType");
    if let Some(var_4437) = &input.architecture_types {
        let mut list_4439 = scope_4436.start_list(true, Some("item"));
        for item_4438 in var_4437 {
            #[allow(unused_mut)]let mut entry_4440 = list_4439.entry();
            entry_4440.string(item_4438.as_str());
        }
        list_4439.finish();
    }
    #[allow(unused_mut)]let mut scope_4441 = writer.prefix("VirtualizationType");
    if let Some(var_4442) = &input.virtualization_types {
        let mut list_4444 = scope_4441.start_list(true, Some("item"));
        for item_4443 in var_4442 {
            #[allow(unused_mut)]let mut entry_4445 = list_4444.entry();
            entry_4445.string(item_4443.as_str());
        }
        list_4444.finish();
    }
    #[allow(unused_mut)]let mut scope_4446 = writer.prefix("InstanceRequirements");
    if let Some(var_4447) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_4446, var_4447)?;
    }
    #[allow(unused_mut)]let mut scope_4448 = writer.prefix("MaxResults");
    if let Some(var_4449) = &input.max_results {
        scope_4448.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4449).into()));
    }
    #[allow(unused_mut)]let mut scope_4450 = writer.prefix("NextToken");
    if let Some(var_4451) = &input.next_token {
        scope_4450.string(var_4451);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(input: &crate::input::GetInstanceUefiDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4452 = writer.prefix("InstanceId");
    if let Some(var_4453) = &input.instance_id {
        scope_4452.string(var_4453);
    }
    #[allow(unused_mut)]let mut scope_4454 = writer.prefix("DryRun");
    if let Some(var_4455) = &input.dry_run {
        scope_4454.boolean(*var_4455);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(input: &crate::input::GetIpamAddressHistoryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4456 = writer.prefix("DryRun");
    if let Some(var_4457) = &input.dry_run {
        scope_4456.boolean(*var_4457);
    }
    #[allow(unused_mut)]let mut scope_4458 = writer.prefix("Cidr");
    if let Some(var_4459) = &input.cidr {
        scope_4458.string(var_4459);
    }
    #[allow(unused_mut)]let mut scope_4460 = writer.prefix("IpamScopeId");
    if let Some(var_4461) = &input.ipam_scope_id {
        scope_4460.string(var_4461);
    }
    #[allow(unused_mut)]let mut scope_4462 = writer.prefix("VpcId");
    if let Some(var_4463) = &input.vpc_id {
        scope_4462.string(var_4463);
    }
    #[allow(unused_mut)]let mut scope_4464 = writer.prefix("StartTime");
    if let Some(var_4465) = &input.start_time {
        scope_4464.date_time(var_4465, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_4466 = writer.prefix("EndTime");
    if let Some(var_4467) = &input.end_time {
        scope_4466.date_time(var_4467, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_4468 = writer.prefix("MaxResults");
    if let Some(var_4469) = &input.max_results {
        scope_4468.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4469).into()));
    }
    #[allow(unused_mut)]let mut scope_4470 = writer.prefix("NextToken");
    if let Some(var_4471) = &input.next_token {
        scope_4470.string(var_4471);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(input: &crate::input::GetIpamPoolAllocationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4472 = writer.prefix("DryRun");
    if let Some(var_4473) = &input.dry_run {
        scope_4472.boolean(*var_4473);
    }
    #[allow(unused_mut)]let mut scope_4474 = writer.prefix("IpamPoolId");
    if let Some(var_4475) = &input.ipam_pool_id {
        scope_4474.string(var_4475);
    }
    #[allow(unused_mut)]let mut scope_4476 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4477) = &input.ipam_pool_allocation_id {
        scope_4476.string(var_4477);
    }
    #[allow(unused_mut)]let mut scope_4478 = writer.prefix("Filter");
    if let Some(var_4479) = &input.filters {
        let mut list_4481 = scope_4478.start_list(true, Some("Filter"));
        for item_4480 in var_4479 {
            #[allow(unused_mut)]let mut entry_4482 = list_4481.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4482, item_4480)?;
        }
        list_4481.finish();
    }
    #[allow(unused_mut)]let mut scope_4483 = writer.prefix("MaxResults");
    if let Some(var_4484) = &input.max_results {
        scope_4483.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4484).into()));
    }
    #[allow(unused_mut)]let mut scope_4485 = writer.prefix("NextToken");
    if let Some(var_4486) = &input.next_token {
        scope_4485.string(var_4486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(input: &crate::input::GetIpamPoolCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4487 = writer.prefix("DryRun");
    if let Some(var_4488) = &input.dry_run {
        scope_4487.boolean(*var_4488);
    }
    #[allow(unused_mut)]let mut scope_4489 = writer.prefix("IpamPoolId");
    if let Some(var_4490) = &input.ipam_pool_id {
        scope_4489.string(var_4490);
    }
    #[allow(unused_mut)]let mut scope_4491 = writer.prefix("Filter");
    if let Some(var_4492) = &input.filters {
        let mut list_4494 = scope_4491.start_list(true, Some("Filter"));
        for item_4493 in var_4492 {
            #[allow(unused_mut)]let mut entry_4495 = list_4494.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4495, item_4493)?;
        }
        list_4494.finish();
    }
    #[allow(unused_mut)]let mut scope_4496 = writer.prefix("MaxResults");
    if let Some(var_4497) = &input.max_results {
        scope_4496.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4497).into()));
    }
    #[allow(unused_mut)]let mut scope_4498 = writer.prefix("NextToken");
    if let Some(var_4499) = &input.next_token {
        scope_4498.string(var_4499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(input: &crate::input::GetIpamResourceCidrsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4500 = writer.prefix("DryRun");
    if let Some(var_4501) = &input.dry_run {
        scope_4500.boolean(*var_4501);
    }
    #[allow(unused_mut)]let mut scope_4502 = writer.prefix("Filter");
    if let Some(var_4503) = &input.filters {
        let mut list_4505 = scope_4502.start_list(true, Some("Filter"));
        for item_4504 in var_4503 {
            #[allow(unused_mut)]let mut entry_4506 = list_4505.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4506, item_4504)?;
        }
        list_4505.finish();
    }
    #[allow(unused_mut)]let mut scope_4507 = writer.prefix("MaxResults");
    if let Some(var_4508) = &input.max_results {
        scope_4507.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4508).into()));
    }
    #[allow(unused_mut)]let mut scope_4509 = writer.prefix("NextToken");
    if let Some(var_4510) = &input.next_token {
        scope_4509.string(var_4510);
    }
    #[allow(unused_mut)]let mut scope_4511 = writer.prefix("IpamScopeId");
    if let Some(var_4512) = &input.ipam_scope_id {
        scope_4511.string(var_4512);
    }
    #[allow(unused_mut)]let mut scope_4513 = writer.prefix("IpamPoolId");
    if let Some(var_4514) = &input.ipam_pool_id {
        scope_4513.string(var_4514);
    }
    #[allow(unused_mut)]let mut scope_4515 = writer.prefix("ResourceId");
    if let Some(var_4516) = &input.resource_id {
        scope_4515.string(var_4516);
    }
    #[allow(unused_mut)]let mut scope_4517 = writer.prefix("ResourceType");
    if let Some(var_4518) = &input.resource_type {
        scope_4517.string(var_4518.as_str());
    }
    #[allow(unused_mut)]let mut scope_4519 = writer.prefix("ResourceTag");
    if let Some(var_4520) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(scope_4519, var_4520)?;
    }
    #[allow(unused_mut)]let mut scope_4521 = writer.prefix("ResourceOwner");
    if let Some(var_4522) = &input.resource_owner {
        scope_4521.string(var_4522);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(input: &crate::input::GetLaunchTemplateDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4523 = writer.prefix("DryRun");
    if let Some(var_4524) = &input.dry_run {
        scope_4523.boolean(*var_4524);
    }
    #[allow(unused_mut)]let mut scope_4525 = writer.prefix("InstanceId");
    if let Some(var_4526) = &input.instance_id {
        scope_4525.string(var_4526);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(input: &crate::input::GetManagedPrefixListAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4527 = writer.prefix("DryRun");
    if let Some(var_4528) = &input.dry_run {
        scope_4527.boolean(*var_4528);
    }
    #[allow(unused_mut)]let mut scope_4529 = writer.prefix("PrefixListId");
    if let Some(var_4530) = &input.prefix_list_id {
        scope_4529.string(var_4530);
    }
    #[allow(unused_mut)]let mut scope_4531 = writer.prefix("MaxResults");
    if let Some(var_4532) = &input.max_results {
        scope_4531.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4532).into()));
    }
    #[allow(unused_mut)]let mut scope_4533 = writer.prefix("NextToken");
    if let Some(var_4534) = &input.next_token {
        scope_4533.string(var_4534);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(input: &crate::input::GetManagedPrefixListEntriesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4535 = writer.prefix("DryRun");
    if let Some(var_4536) = &input.dry_run {
        scope_4535.boolean(*var_4536);
    }
    #[allow(unused_mut)]let mut scope_4537 = writer.prefix("PrefixListId");
    if let Some(var_4538) = &input.prefix_list_id {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]let mut scope_4539 = writer.prefix("TargetVersion");
    if let Some(var_4540) = &input.target_version {
        scope_4539.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4540).into()));
    }
    #[allow(unused_mut)]let mut scope_4541 = writer.prefix("MaxResults");
    if let Some(var_4542) = &input.max_results {
        scope_4541.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4542).into()));
    }
    #[allow(unused_mut)]let mut scope_4543 = writer.prefix("NextToken");
    if let Some(var_4544) = &input.next_token {
        scope_4543.string(var_4544);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetNetworkInsightsAccessScopeAnalysisFindings", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4545 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4546) = &input.network_insights_access_scope_analysis_id {
        scope_4545.string(var_4546);
    }
    #[allow(unused_mut)]let mut scope_4547 = writer.prefix("MaxResults");
    if let Some(var_4548) = &input.max_results {
        scope_4547.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4548).into()));
    }
    #[allow(unused_mut)]let mut scope_4549 = writer.prefix("NextToken");
    if let Some(var_4550) = &input.next_token {
        scope_4549.string(var_4550);
    }
    #[allow(unused_mut)]let mut scope_4551 = writer.prefix("DryRun");
    if let Some(var_4552) = &input.dry_run {
        scope_4551.boolean(*var_4552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(input: &crate::input::GetNetworkInsightsAccessScopeContentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetNetworkInsightsAccessScopeContent", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4553 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4554) = &input.network_insights_access_scope_id {
        scope_4553.string(var_4554);
    }
    #[allow(unused_mut)]let mut scope_4555 = writer.prefix("DryRun");
    if let Some(var_4556) = &input.dry_run {
        scope_4555.boolean(*var_4556);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(input: &crate::input::GetPasswordDataInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4557 = writer.prefix("InstanceId");
    if let Some(var_4558) = &input.instance_id {
        scope_4557.string(var_4558);
    }
    #[allow(unused_mut)]let mut scope_4559 = writer.prefix("DryRun");
    if let Some(var_4560) = &input.dry_run {
        scope_4559.boolean(*var_4560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(input: &crate::input::GetReservedInstancesExchangeQuoteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetReservedInstancesExchangeQuote", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4561 = writer.prefix("DryRun");
    if let Some(var_4562) = &input.dry_run {
        scope_4561.boolean(*var_4562);
    }
    #[allow(unused_mut)]let mut scope_4563 = writer.prefix("ReservedInstanceId");
    if let Some(var_4564) = &input.reserved_instance_ids {
        let mut list_4566 = scope_4563.start_list(true, Some("ReservedInstanceId"));
        for item_4565 in var_4564 {
            #[allow(unused_mut)]let mut entry_4567 = list_4566.entry();
            entry_4567.string(item_4565);
        }
        list_4566.finish();
    }
    #[allow(unused_mut)]let mut scope_4568 = writer.prefix("TargetConfiguration");
    if let Some(var_4569) = &input.target_configurations {
        let mut list_4571 = scope_4568.start_list(true, Some("TargetConfigurationRequest"));
        for item_4570 in var_4569 {
            #[allow(unused_mut)]let mut entry_4572 = list_4571.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(entry_4572, item_4570)?;
        }
        list_4571.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(input: &crate::input::GetSerialConsoleAccessStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4573 = writer.prefix("DryRun");
    if let Some(var_4574) = &input.dry_run {
        scope_4573.boolean(*var_4574);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(input: &crate::input::GetSpotPlacementScoresInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4575 = writer.prefix("InstanceType");
    if let Some(var_4576) = &input.instance_types {
        let mut list_4578 = scope_4575.start_list(true, None);
        for item_4577 in var_4576 {
            #[allow(unused_mut)]let mut entry_4579 = list_4578.entry();
            entry_4579.string(item_4577);
        }
        list_4578.finish();
    }
    #[allow(unused_mut)]let mut scope_4580 = writer.prefix("TargetCapacity");
    if let Some(var_4581) = &input.target_capacity {
        scope_4580.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4581).into()));
    }
    #[allow(unused_mut)]let mut scope_4582 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4583) = &input.target_capacity_unit_type {
        scope_4582.string(var_4583.as_str());
    }
    #[allow(unused_mut)]let mut scope_4584 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4585) = &input.single_availability_zone {
        scope_4584.boolean(*var_4585);
    }
    #[allow(unused_mut)]let mut scope_4586 = writer.prefix("RegionName");
    if let Some(var_4587) = &input.region_names {
        let mut list_4589 = scope_4586.start_list(true, None);
        for item_4588 in var_4587 {
            #[allow(unused_mut)]let mut entry_4590 = list_4589.entry();
            entry_4590.string(item_4588);
        }
        list_4589.finish();
    }
    #[allow(unused_mut)]let mut scope_4591 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4592) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4591, var_4592)?;
    }
    #[allow(unused_mut)]let mut scope_4593 = writer.prefix("DryRun");
    if let Some(var_4594) = &input.dry_run {
        scope_4593.boolean(*var_4594);
    }
    #[allow(unused_mut)]let mut scope_4595 = writer.prefix("MaxResults");
    if let Some(var_4596) = &input.max_results {
        scope_4595.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4596).into()));
    }
    #[allow(unused_mut)]let mut scope_4597 = writer.prefix("NextToken");
    if let Some(var_4598) = &input.next_token {
        scope_4597.string(var_4598);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(input: &crate::input::GetSubnetCidrReservationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4599 = writer.prefix("Filter");
    if let Some(var_4600) = &input.filters {
        let mut list_4602 = scope_4599.start_list(true, Some("Filter"));
        for item_4601 in var_4600 {
            #[allow(unused_mut)]let mut entry_4603 = list_4602.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4603, item_4601)?;
        }
        list_4602.finish();
    }
    #[allow(unused_mut)]let mut scope_4604 = writer.prefix("SubnetId");
    if let Some(var_4605) = &input.subnet_id {
        scope_4604.string(var_4605);
    }
    #[allow(unused_mut)]let mut scope_4606 = writer.prefix("DryRun");
    if let Some(var_4607) = &input.dry_run {
        scope_4606.boolean(*var_4607);
    }
    #[allow(unused_mut)]let mut scope_4608 = writer.prefix("NextToken");
    if let Some(var_4609) = &input.next_token {
        scope_4608.string(var_4609);
    }
    #[allow(unused_mut)]let mut scope_4610 = writer.prefix("MaxResults");
    if let Some(var_4611) = &input.max_results {
        scope_4610.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4611).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(input: &crate::input::GetTransitGatewayAttachmentPropagationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayAttachmentPropagations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4612 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4613) = &input.transit_gateway_attachment_id {
        scope_4612.string(var_4613);
    }
    #[allow(unused_mut)]let mut scope_4614 = writer.prefix("Filter");
    if let Some(var_4615) = &input.filters {
        let mut list_4617 = scope_4614.start_list(true, Some("Filter"));
        for item_4616 in var_4615 {
            #[allow(unused_mut)]let mut entry_4618 = list_4617.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4618, item_4616)?;
        }
        list_4617.finish();
    }
    #[allow(unused_mut)]let mut scope_4619 = writer.prefix("MaxResults");
    if let Some(var_4620) = &input.max_results {
        scope_4619.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4620).into()));
    }
    #[allow(unused_mut)]let mut scope_4621 = writer.prefix("NextToken");
    if let Some(var_4622) = &input.next_token {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]let mut scope_4623 = writer.prefix("DryRun");
    if let Some(var_4624) = &input.dry_run {
        scope_4623.boolean(*var_4624);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4625 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4626) = &input.transit_gateway_multicast_domain_id {
        scope_4625.string(var_4626);
    }
    #[allow(unused_mut)]let mut scope_4627 = writer.prefix("Filter");
    if let Some(var_4628) = &input.filters {
        let mut list_4630 = scope_4627.start_list(true, Some("Filter"));
        for item_4629 in var_4628 {
            #[allow(unused_mut)]let mut entry_4631 = list_4630.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4631, item_4629)?;
        }
        list_4630.finish();
    }
    #[allow(unused_mut)]let mut scope_4632 = writer.prefix("MaxResults");
    if let Some(var_4633) = &input.max_results {
        scope_4632.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4633).into()));
    }
    #[allow(unused_mut)]let mut scope_4634 = writer.prefix("NextToken");
    if let Some(var_4635) = &input.next_token {
        scope_4634.string(var_4635);
    }
    #[allow(unused_mut)]let mut scope_4636 = writer.prefix("DryRun");
    if let Some(var_4637) = &input.dry_run {
        scope_4636.boolean(*var_4637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_associations(input: &crate::input::GetTransitGatewayPolicyTableAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPolicyTableAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4638 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4639) = &input.transit_gateway_policy_table_id {
        scope_4638.string(var_4639);
    }
    #[allow(unused_mut)]let mut scope_4640 = writer.prefix("Filter");
    if let Some(var_4641) = &input.filters {
        let mut list_4643 = scope_4640.start_list(true, Some("Filter"));
        for item_4642 in var_4641 {
            #[allow(unused_mut)]let mut entry_4644 = list_4643.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4644, item_4642)?;
        }
        list_4643.finish();
    }
    #[allow(unused_mut)]let mut scope_4645 = writer.prefix("MaxResults");
    if let Some(var_4646) = &input.max_results {
        scope_4645.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4646).into()));
    }
    #[allow(unused_mut)]let mut scope_4647 = writer.prefix("NextToken");
    if let Some(var_4648) = &input.next_token {
        scope_4647.string(var_4648);
    }
    #[allow(unused_mut)]let mut scope_4649 = writer.prefix("DryRun");
    if let Some(var_4650) = &input.dry_run {
        scope_4649.boolean(*var_4650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_policy_table_entries(input: &crate::input::GetTransitGatewayPolicyTableEntriesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPolicyTableEntries", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4651 = writer.prefix("TransitGatewayPolicyTableId");
    if let Some(var_4652) = &input.transit_gateway_policy_table_id {
        scope_4651.string(var_4652);
    }
    #[allow(unused_mut)]let mut scope_4653 = writer.prefix("Filter");
    if let Some(var_4654) = &input.filters {
        let mut list_4656 = scope_4653.start_list(true, Some("Filter"));
        for item_4655 in var_4654 {
            #[allow(unused_mut)]let mut entry_4657 = list_4656.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4657, item_4655)?;
        }
        list_4656.finish();
    }
    #[allow(unused_mut)]let mut scope_4658 = writer.prefix("MaxResults");
    if let Some(var_4659) = &input.max_results {
        scope_4658.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4659).into()));
    }
    #[allow(unused_mut)]let mut scope_4660 = writer.prefix("NextToken");
    if let Some(var_4661) = &input.next_token {
        scope_4660.string(var_4661);
    }
    #[allow(unused_mut)]let mut scope_4662 = writer.prefix("DryRun");
    if let Some(var_4663) = &input.dry_run {
        scope_4662.boolean(*var_4663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(input: &crate::input::GetTransitGatewayPrefixListReferencesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayPrefixListReferences", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4664 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4665) = &input.transit_gateway_route_table_id {
        scope_4664.string(var_4665);
    }
    #[allow(unused_mut)]let mut scope_4666 = writer.prefix("Filter");
    if let Some(var_4667) = &input.filters {
        let mut list_4669 = scope_4666.start_list(true, Some("Filter"));
        for item_4668 in var_4667 {
            #[allow(unused_mut)]let mut entry_4670 = list_4669.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4670, item_4668)?;
        }
        list_4669.finish();
    }
    #[allow(unused_mut)]let mut scope_4671 = writer.prefix("MaxResults");
    if let Some(var_4672) = &input.max_results {
        scope_4671.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4672).into()));
    }
    #[allow(unused_mut)]let mut scope_4673 = writer.prefix("NextToken");
    if let Some(var_4674) = &input.next_token {
        scope_4673.string(var_4674);
    }
    #[allow(unused_mut)]let mut scope_4675 = writer.prefix("DryRun");
    if let Some(var_4676) = &input.dry_run {
        scope_4675.boolean(*var_4676);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(input: &crate::input::GetTransitGatewayRouteTableAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayRouteTableAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4677 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4678) = &input.transit_gateway_route_table_id {
        scope_4677.string(var_4678);
    }
    #[allow(unused_mut)]let mut scope_4679 = writer.prefix("Filter");
    if let Some(var_4680) = &input.filters {
        let mut list_4682 = scope_4679.start_list(true, Some("Filter"));
        for item_4681 in var_4680 {
            #[allow(unused_mut)]let mut entry_4683 = list_4682.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4683, item_4681)?;
        }
        list_4682.finish();
    }
    #[allow(unused_mut)]let mut scope_4684 = writer.prefix("MaxResults");
    if let Some(var_4685) = &input.max_results {
        scope_4684.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4685).into()));
    }
    #[allow(unused_mut)]let mut scope_4686 = writer.prefix("NextToken");
    if let Some(var_4687) = &input.next_token {
        scope_4686.string(var_4687);
    }
    #[allow(unused_mut)]let mut scope_4688 = writer.prefix("DryRun");
    if let Some(var_4689) = &input.dry_run {
        scope_4688.boolean(*var_4689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(input: &crate::input::GetTransitGatewayRouteTablePropagationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetTransitGatewayRouteTablePropagations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4690 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4691) = &input.transit_gateway_route_table_id {
        scope_4690.string(var_4691);
    }
    #[allow(unused_mut)]let mut scope_4692 = writer.prefix("Filter");
    if let Some(var_4693) = &input.filters {
        let mut list_4695 = scope_4692.start_list(true, Some("Filter"));
        for item_4694 in var_4693 {
            #[allow(unused_mut)]let mut entry_4696 = list_4695.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4696, item_4694)?;
        }
        list_4695.finish();
    }
    #[allow(unused_mut)]let mut scope_4697 = writer.prefix("MaxResults");
    if let Some(var_4698) = &input.max_results {
        scope_4697.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4698).into()));
    }
    #[allow(unused_mut)]let mut scope_4699 = writer.prefix("NextToken");
    if let Some(var_4700) = &input.next_token {
        scope_4699.string(var_4700);
    }
    #[allow(unused_mut)]let mut scope_4701 = writer.prefix("DryRun");
    if let Some(var_4702) = &input.dry_run {
        scope_4701.boolean(*var_4702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceSampleConfiguration", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4703 = writer.prefix("VpnConnectionId");
    if let Some(var_4704) = &input.vpn_connection_id {
        scope_4703.string(var_4704);
    }
    #[allow(unused_mut)]let mut scope_4705 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4706) = &input.vpn_connection_device_type_id {
        scope_4705.string(var_4706);
    }
    #[allow(unused_mut)]let mut scope_4707 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4708) = &input.internet_key_exchange_version {
        scope_4707.string(var_4708);
    }
    #[allow(unused_mut)]let mut scope_4709 = writer.prefix("DryRun");
    if let Some(var_4710) = &input.dry_run {
        scope_4709.boolean(*var_4710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(input: &crate::input::GetVpnConnectionDeviceTypesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4711 = writer.prefix("MaxResults");
    if let Some(var_4712) = &input.max_results {
        scope_4711.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4712).into()));
    }
    #[allow(unused_mut)]let mut scope_4713 = writer.prefix("NextToken");
    if let Some(var_4714) = &input.next_token {
        scope_4713.string(var_4714);
    }
    #[allow(unused_mut)]let mut scope_4715 = writer.prefix("DryRun");
    if let Some(var_4716) = &input.dry_run {
        scope_4715.boolean(*var_4716);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(input: &crate::input::ImportClientVpnClientCertificateRevocationListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportClientVpnClientCertificateRevocationList", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4717 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4718) = &input.client_vpn_endpoint_id {
        scope_4717.string(var_4718);
    }
    #[allow(unused_mut)]let mut scope_4719 = writer.prefix("CertificateRevocationList");
    if let Some(var_4720) = &input.certificate_revocation_list {
        scope_4719.string(var_4720);
    }
    #[allow(unused_mut)]let mut scope_4721 = writer.prefix("DryRun");
    if let Some(var_4722) = &input.dry_run {
        scope_4721.boolean(*var_4722);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(input: &crate::input::ImportImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4723 = writer.prefix("Architecture");
    if let Some(var_4724) = &input.architecture {
        scope_4723.string(var_4724);
    }
    #[allow(unused_mut)]let mut scope_4725 = writer.prefix("ClientData");
    if let Some(var_4726) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4725, var_4726)?;
    }
    #[allow(unused_mut)]let mut scope_4727 = writer.prefix("ClientToken");
    if let Some(var_4728) = &input.client_token {
        scope_4727.string(var_4728);
    }
    #[allow(unused_mut)]let mut scope_4729 = writer.prefix("Description");
    if let Some(var_4730) = &input.description {
        scope_4729.string(var_4730);
    }
    #[allow(unused_mut)]let mut scope_4731 = writer.prefix("DiskContainer");
    if let Some(var_4732) = &input.disk_containers {
        let mut list_4734 = scope_4731.start_list(true, Some("item"));
        for item_4733 in var_4732 {
            #[allow(unused_mut)]let mut entry_4735 = list_4734.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(entry_4735, item_4733)?;
        }
        list_4734.finish();
    }
    #[allow(unused_mut)]let mut scope_4736 = writer.prefix("DryRun");
    if let Some(var_4737) = &input.dry_run {
        scope_4736.boolean(*var_4737);
    }
    #[allow(unused_mut)]let mut scope_4738 = writer.prefix("Encrypted");
    if let Some(var_4739) = &input.encrypted {
        scope_4738.boolean(*var_4739);
    }
    #[allow(unused_mut)]let mut scope_4740 = writer.prefix("Hypervisor");
    if let Some(var_4741) = &input.hypervisor {
        scope_4740.string(var_4741);
    }
    #[allow(unused_mut)]let mut scope_4742 = writer.prefix("KmsKeyId");
    if let Some(var_4743) = &input.kms_key_id {
        scope_4742.string(var_4743);
    }
    #[allow(unused_mut)]let mut scope_4744 = writer.prefix("LicenseType");
    if let Some(var_4745) = &input.license_type {
        scope_4744.string(var_4745);
    }
    #[allow(unused_mut)]let mut scope_4746 = writer.prefix("Platform");
    if let Some(var_4747) = &input.platform {
        scope_4746.string(var_4747);
    }
    #[allow(unused_mut)]let mut scope_4748 = writer.prefix("RoleName");
    if let Some(var_4749) = &input.role_name {
        scope_4748.string(var_4749);
    }
    #[allow(unused_mut)]let mut scope_4750 = writer.prefix("LicenseSpecifications");
    if let Some(var_4751) = &input.license_specifications {
        let mut list_4753 = scope_4750.start_list(true, Some("item"));
        for item_4752 in var_4751 {
            #[allow(unused_mut)]let mut entry_4754 = list_4753.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4754, item_4752)?;
        }
        list_4753.finish();
    }
    #[allow(unused_mut)]let mut scope_4755 = writer.prefix("TagSpecification");
    if let Some(var_4756) = &input.tag_specifications {
        let mut list_4758 = scope_4755.start_list(true, Some("item"));
        for item_4757 in var_4756 {
            #[allow(unused_mut)]let mut entry_4759 = list_4758.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_4759, item_4757)?;
        }
        list_4758.finish();
    }
    #[allow(unused_mut)]let mut scope_4760 = writer.prefix("UsageOperation");
    if let Some(var_4761) = &input.usage_operation {
        scope_4760.string(var_4761);
    }
    #[allow(unused_mut)]let mut scope_4762 = writer.prefix("BootMode");
    if let Some(var_4763) = &input.boot_mode {
        scope_4762.string(var_4763.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(input: &crate::input::ImportInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4764 = writer.prefix("Description");
    if let Some(var_4765) = &input.description {
        scope_4764.string(var_4765);
    }
    #[allow(unused_mut)]let mut scope_4766 = writer.prefix("DiskImage");
    if let Some(var_4767) = &input.disk_images {
        let mut list_4769 = scope_4766.start_list(true, None);
        for item_4768 in var_4767 {
            #[allow(unused_mut)]let mut entry_4770 = list_4769.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4770, item_4768)?;
        }
        list_4769.finish();
    }
    #[allow(unused_mut)]let mut scope_4771 = writer.prefix("DryRun");
    if let Some(var_4772) = &input.dry_run {
        scope_4771.boolean(*var_4772);
    }
    #[allow(unused_mut)]let mut scope_4773 = writer.prefix("LaunchSpecification");
    if let Some(var_4774) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(scope_4773, var_4774)?;
    }
    #[allow(unused_mut)]let mut scope_4775 = writer.prefix("Platform");
    if let Some(var_4776) = &input.platform {
        scope_4775.string(var_4776.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(input: &crate::input::ImportKeyPairInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4777 = writer.prefix("DryRun");
    if let Some(var_4778) = &input.dry_run {
        scope_4777.boolean(*var_4778);
    }
    #[allow(unused_mut)]let mut scope_4779 = writer.prefix("KeyName");
    if let Some(var_4780) = &input.key_name {
        scope_4779.string(var_4780);
    }
    #[allow(unused_mut)]let mut scope_4781 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4782) = &input.public_key_material {
        scope_4781.string(&aws_smithy_types::base64::encode(var_4782));
    }
    #[allow(unused_mut)]let mut scope_4783 = writer.prefix("TagSpecification");
    if let Some(var_4784) = &input.tag_specifications {
        let mut list_4786 = scope_4783.start_list(true, Some("item"));
        for item_4785 in var_4784 {
            #[allow(unused_mut)]let mut entry_4787 = list_4786.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_4787, item_4785)?;
        }
        list_4786.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(input: &crate::input::ImportSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4788 = writer.prefix("ClientData");
    if let Some(var_4789) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4788, var_4789)?;
    }
    #[allow(unused_mut)]let mut scope_4790 = writer.prefix("ClientToken");
    if let Some(var_4791) = &input.client_token {
        scope_4790.string(var_4791);
    }
    #[allow(unused_mut)]let mut scope_4792 = writer.prefix("Description");
    if let Some(var_4793) = &input.description {
        scope_4792.string(var_4793);
    }
    #[allow(unused_mut)]let mut scope_4794 = writer.prefix("DiskContainer");
    if let Some(var_4795) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(scope_4794, var_4795)?;
    }
    #[allow(unused_mut)]let mut scope_4796 = writer.prefix("DryRun");
    if let Some(var_4797) = &input.dry_run {
        scope_4796.boolean(*var_4797);
    }
    #[allow(unused_mut)]let mut scope_4798 = writer.prefix("Encrypted");
    if let Some(var_4799) = &input.encrypted {
        scope_4798.boolean(*var_4799);
    }
    #[allow(unused_mut)]let mut scope_4800 = writer.prefix("KmsKeyId");
    if let Some(var_4801) = &input.kms_key_id {
        scope_4800.string(var_4801);
    }
    #[allow(unused_mut)]let mut scope_4802 = writer.prefix("RoleName");
    if let Some(var_4803) = &input.role_name {
        scope_4802.string(var_4803);
    }
    #[allow(unused_mut)]let mut scope_4804 = writer.prefix("TagSpecification");
    if let Some(var_4805) = &input.tag_specifications {
        let mut list_4807 = scope_4804.start_list(true, Some("item"));
        for item_4806 in var_4805 {
            #[allow(unused_mut)]let mut entry_4808 = list_4807.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_4808, item_4806)?;
        }
        list_4807.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(input: &crate::input::ImportVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4809 = writer.prefix("AvailabilityZone");
    if let Some(var_4810) = &input.availability_zone {
        scope_4809.string(var_4810);
    }
    #[allow(unused_mut)]let mut scope_4811 = writer.prefix("Description");
    if let Some(var_4812) = &input.description {
        scope_4811.string(var_4812);
    }
    #[allow(unused_mut)]let mut scope_4813 = writer.prefix("DryRun");
    if let Some(var_4814) = &input.dry_run {
        scope_4813.boolean(*var_4814);
    }
    #[allow(unused_mut)]let mut scope_4815 = writer.prefix("Image");
    if let Some(var_4816) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4815, var_4816)?;
    }
    #[allow(unused_mut)]let mut scope_4817 = writer.prefix("Volume");
    if let Some(var_4818) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4817, var_4818)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(input: &crate::input::ListImagesInRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4819 = writer.prefix("ImageId");
    if let Some(var_4820) = &input.image_ids {
        let mut list_4822 = scope_4819.start_list(true, Some("ImageId"));
        for item_4821 in var_4820 {
            #[allow(unused_mut)]let mut entry_4823 = list_4822.entry();
            entry_4823.string(item_4821);
        }
        list_4822.finish();
    }
    #[allow(unused_mut)]let mut scope_4824 = writer.prefix("NextToken");
    if let Some(var_4825) = &input.next_token {
        scope_4824.string(var_4825);
    }
    #[allow(unused_mut)]let mut scope_4826 = writer.prefix("MaxResults");
    if let Some(var_4827) = &input.max_results {
        scope_4826.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4827).into()));
    }
    #[allow(unused_mut)]let mut scope_4828 = writer.prefix("DryRun");
    if let Some(var_4829) = &input.dry_run {
        scope_4828.boolean(*var_4829);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(input: &crate::input::ListSnapshotsInRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4830 = writer.prefix("MaxResults");
    if let Some(var_4831) = &input.max_results {
        scope_4830.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4831).into()));
    }
    #[allow(unused_mut)]let mut scope_4832 = writer.prefix("NextToken");
    if let Some(var_4833) = &input.next_token {
        scope_4832.string(var_4833);
    }
    #[allow(unused_mut)]let mut scope_4834 = writer.prefix("SnapshotId");
    if let Some(var_4835) = &input.snapshot_ids {
        let mut list_4837 = scope_4834.start_list(true, Some("SnapshotId"));
        for item_4836 in var_4835 {
            #[allow(unused_mut)]let mut entry_4838 = list_4837.entry();
            entry_4838.string(item_4836);
        }
        list_4837.finish();
    }
    #[allow(unused_mut)]let mut scope_4839 = writer.prefix("DryRun");
    if let Some(var_4840) = &input.dry_run {
        scope_4839.boolean(*var_4840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(input: &crate::input::ModifyAddressAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4841 = writer.prefix("AllocationId");
    if let Some(var_4842) = &input.allocation_id {
        scope_4841.string(var_4842);
    }
    #[allow(unused_mut)]let mut scope_4843 = writer.prefix("DomainName");
    if let Some(var_4844) = &input.domain_name {
        scope_4843.string(var_4844);
    }
    #[allow(unused_mut)]let mut scope_4845 = writer.prefix("DryRun");
    if let Some(var_4846) = &input.dry_run {
        scope_4845.boolean(*var_4846);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(input: &crate::input::ModifyAvailabilityZoneGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4847 = writer.prefix("GroupName");
    if let Some(var_4848) = &input.group_name {
        scope_4847.string(var_4848);
    }
    #[allow(unused_mut)]let mut scope_4849 = writer.prefix("OptInStatus");
    if let Some(var_4850) = &input.opt_in_status {
        scope_4849.string(var_4850.as_str());
    }
    #[allow(unused_mut)]let mut scope_4851 = writer.prefix("DryRun");
    if let Some(var_4852) = &input.dry_run {
        scope_4851.boolean(*var_4852);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(input: &crate::input::ModifyCapacityReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4853 = writer.prefix("CapacityReservationId");
    if let Some(var_4854) = &input.capacity_reservation_id {
        scope_4853.string(var_4854);
    }
    #[allow(unused_mut)]let mut scope_4855 = writer.prefix("InstanceCount");
    if let Some(var_4856) = &input.instance_count {
        scope_4855.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4856).into()));
    }
    #[allow(unused_mut)]let mut scope_4857 = writer.prefix("EndDate");
    if let Some(var_4858) = &input.end_date {
        scope_4857.date_time(var_4858, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_4859 = writer.prefix("EndDateType");
    if let Some(var_4860) = &input.end_date_type {
        scope_4859.string(var_4860.as_str());
    }
    #[allow(unused_mut)]let mut scope_4861 = writer.prefix("Accept");
    if let Some(var_4862) = &input.accept {
        scope_4861.boolean(*var_4862);
    }
    #[allow(unused_mut)]let mut scope_4863 = writer.prefix("DryRun");
    if let Some(var_4864) = &input.dry_run {
        scope_4863.boolean(*var_4864);
    }
    #[allow(unused_mut)]let mut scope_4865 = writer.prefix("AdditionalInfo");
    if let Some(var_4866) = &input.additional_info {
        scope_4865.string(var_4866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(input: &crate::input::ModifyCapacityReservationFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservationFleet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4867 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4868) = &input.capacity_reservation_fleet_id {
        scope_4867.string(var_4868);
    }
    #[allow(unused_mut)]let mut scope_4869 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4870) = &input.total_target_capacity {
        scope_4869.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4870).into()));
    }
    #[allow(unused_mut)]let mut scope_4871 = writer.prefix("EndDate");
    if let Some(var_4872) = &input.end_date {
        scope_4871.date_time(var_4872, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_4873 = writer.prefix("DryRun");
    if let Some(var_4874) = &input.dry_run {
        scope_4873.boolean(*var_4874);
    }
    #[allow(unused_mut)]let mut scope_4875 = writer.prefix("RemoveEndDate");
    if let Some(var_4876) = &input.remove_end_date {
        scope_4875.boolean(*var_4876);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(input: &crate::input::ModifyClientVpnEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4877 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4878) = &input.client_vpn_endpoint_id {
        scope_4877.string(var_4878);
    }
    #[allow(unused_mut)]let mut scope_4879 = writer.prefix("ServerCertificateArn");
    if let Some(var_4880) = &input.server_certificate_arn {
        scope_4879.string(var_4880);
    }
    #[allow(unused_mut)]let mut scope_4881 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4882) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(scope_4881, var_4882)?;
    }
    #[allow(unused_mut)]let mut scope_4883 = writer.prefix("DnsServers");
    if let Some(var_4884) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(scope_4883, var_4884)?;
    }
    #[allow(unused_mut)]let mut scope_4885 = writer.prefix("VpnPort");
    if let Some(var_4886) = &input.vpn_port {
        scope_4885.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4886).into()));
    }
    #[allow(unused_mut)]let mut scope_4887 = writer.prefix("Description");
    if let Some(var_4888) = &input.description {
        scope_4887.string(var_4888);
    }
    #[allow(unused_mut)]let mut scope_4889 = writer.prefix("SplitTunnel");
    if let Some(var_4890) = &input.split_tunnel {
        scope_4889.boolean(*var_4890);
    }
    #[allow(unused_mut)]let mut scope_4891 = writer.prefix("DryRun");
    if let Some(var_4892) = &input.dry_run {
        scope_4891.boolean(*var_4892);
    }
    #[allow(unused_mut)]let mut scope_4893 = writer.prefix("SecurityGroupId");
    if let Some(var_4894) = &input.security_group_ids {
        let mut list_4896 = scope_4893.start_list(true, Some("item"));
        for item_4895 in var_4894 {
            #[allow(unused_mut)]let mut entry_4897 = list_4896.entry();
            entry_4897.string(item_4895);
        }
        list_4896.finish();
    }
    #[allow(unused_mut)]let mut scope_4898 = writer.prefix("VpcId");
    if let Some(var_4899) = &input.vpc_id {
        scope_4898.string(var_4899);
    }
    #[allow(unused_mut)]let mut scope_4900 = writer.prefix("SelfServicePortal");
    if let Some(var_4901) = &input.self_service_portal {
        scope_4900.string(var_4901.as_str());
    }
    #[allow(unused_mut)]let mut scope_4902 = writer.prefix("ClientConnectOptions");
    if let Some(var_4903) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(scope_4902, var_4903)?;
    }
    #[allow(unused_mut)]let mut scope_4904 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4905) = &input.session_timeout_hours {
        scope_4904.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_4905).into()));
    }
    #[allow(unused_mut)]let mut scope_4906 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4907) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(scope_4906, var_4907)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(input: &crate::input::ModifyDefaultCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4908 = writer.prefix("DryRun");
    if let Some(var_4909) = &input.dry_run {
        scope_4908.boolean(*var_4909);
    }
    #[allow(unused_mut)]let mut scope_4910 = writer.prefix("InstanceFamily");
    if let Some(var_4911) = &input.instance_family {
        scope_4910.string(var_4911.as_str());
    }
    #[allow(unused_mut)]let mut scope_4912 = writer.prefix("CpuCredits");
    if let Some(var_4913) = &input.cpu_credits {
        scope_4912.string(var_4913);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(input: &crate::input::ModifyEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4914 = writer.prefix("KmsKeyId");
    if let Some(var_4915) = &input.kms_key_id {
        scope_4914.string(var_4915);
    }
    #[allow(unused_mut)]let mut scope_4916 = writer.prefix("DryRun");
    if let Some(var_4917) = &input.dry_run {
        scope_4916.boolean(*var_4917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(input: &crate::input::ModifyFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4918 = writer.prefix("DryRun");
    if let Some(var_4919) = &input.dry_run {
        scope_4918.boolean(*var_4919);
    }
    #[allow(unused_mut)]let mut scope_4920 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4921) = &input.excess_capacity_termination_policy {
        scope_4920.string(var_4921.as_str());
    }
    #[allow(unused_mut)]let mut scope_4922 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4923) = &input.launch_template_configs {
        let mut list_4925 = scope_4922.start_list(true, Some("item"));
        for item_4924 in var_4923 {
            #[allow(unused_mut)]let mut entry_4926 = list_4925.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(entry_4926, item_4924)?;
        }
        list_4925.finish();
    }
    #[allow(unused_mut)]let mut scope_4927 = writer.prefix("FleetId");
    if let Some(var_4928) = &input.fleet_id {
        scope_4927.string(var_4928);
    }
    #[allow(unused_mut)]let mut scope_4929 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4930) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(scope_4929, var_4930)?;
    }
    #[allow(unused_mut)]let mut scope_4931 = writer.prefix("Context");
    if let Some(var_4932) = &input.context {
        scope_4931.string(var_4932);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(input: &crate::input::ModifyFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4933 = writer.prefix("DryRun");
    if let Some(var_4934) = &input.dry_run {
        scope_4933.boolean(*var_4934);
    }
    #[allow(unused_mut)]let mut scope_4935 = writer.prefix("FpgaImageId");
    if let Some(var_4936) = &input.fpga_image_id {
        scope_4935.string(var_4936);
    }
    #[allow(unused_mut)]let mut scope_4937 = writer.prefix("Attribute");
    if let Some(var_4938) = &input.attribute {
        scope_4937.string(var_4938.as_str());
    }
    #[allow(unused_mut)]let mut scope_4939 = writer.prefix("OperationType");
    if let Some(var_4940) = &input.operation_type {
        scope_4939.string(var_4940.as_str());
    }
    #[allow(unused_mut)]let mut scope_4941 = writer.prefix("UserId");
    if let Some(var_4942) = &input.user_ids {
        let mut list_4944 = scope_4941.start_list(true, Some("UserId"));
        for item_4943 in var_4942 {
            #[allow(unused_mut)]let mut entry_4945 = list_4944.entry();
            entry_4945.string(item_4943);
        }
        list_4944.finish();
    }
    #[allow(unused_mut)]let mut scope_4946 = writer.prefix("UserGroup");
    if let Some(var_4947) = &input.user_groups {
        let mut list_4949 = scope_4946.start_list(true, Some("UserGroup"));
        for item_4948 in var_4947 {
            #[allow(unused_mut)]let mut entry_4950 = list_4949.entry();
            entry_4950.string(item_4948);
        }
        list_4949.finish();
    }
    #[allow(unused_mut)]let mut scope_4951 = writer.prefix("ProductCode");
    if let Some(var_4952) = &input.product_codes {
        let mut list_4954 = scope_4951.start_list(true, Some("ProductCode"));
        for item_4953 in var_4952 {
            #[allow(unused_mut)]let mut entry_4955 = list_4954.entry();
            entry_4955.string(item_4953);
        }
        list_4954.finish();
    }
    #[allow(unused_mut)]let mut scope_4956 = writer.prefix("LoadPermission");
    if let Some(var_4957) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(scope_4956, var_4957)?;
    }
    #[allow(unused_mut)]let mut scope_4958 = writer.prefix("Description");
    if let Some(var_4959) = &input.description {
        scope_4958.string(var_4959);
    }
    #[allow(unused_mut)]let mut scope_4960 = writer.prefix("Name");
    if let Some(var_4961) = &input.name {
        scope_4960.string(var_4961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(input: &crate::input::ModifyHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4962 = writer.prefix("AutoPlacement");
    if let Some(var_4963) = &input.auto_placement {
        scope_4962.string(var_4963.as_str());
    }
    #[allow(unused_mut)]let mut scope_4964 = writer.prefix("HostId");
    if let Some(var_4965) = &input.host_ids {
        let mut list_4967 = scope_4964.start_list(true, Some("item"));
        for item_4966 in var_4965 {
            #[allow(unused_mut)]let mut entry_4968 = list_4967.entry();
            entry_4968.string(item_4966);
        }
        list_4967.finish();
    }
    #[allow(unused_mut)]let mut scope_4969 = writer.prefix("HostRecovery");
    if let Some(var_4970) = &input.host_recovery {
        scope_4969.string(var_4970.as_str());
    }
    #[allow(unused_mut)]let mut scope_4971 = writer.prefix("InstanceType");
    if let Some(var_4972) = &input.instance_type {
        scope_4971.string(var_4972);
    }
    #[allow(unused_mut)]let mut scope_4973 = writer.prefix("InstanceFamily");
    if let Some(var_4974) = &input.instance_family {
        scope_4973.string(var_4974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(input: &crate::input::ModifyIdentityIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4975 = writer.prefix("PrincipalArn");
    if let Some(var_4976) = &input.principal_arn {
        scope_4975.string(var_4976);
    }
    #[allow(unused_mut)]let mut scope_4977 = writer.prefix("Resource");
    if let Some(var_4978) = &input.resource {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]let mut scope_4979 = writer.prefix("UseLongIds");
    if let Some(var_4980) = &input.use_long_ids {
        scope_4979.boolean(*var_4980);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(input: &crate::input::ModifyIdFormatInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4981 = writer.prefix("Resource");
    if let Some(var_4982) = &input.resource {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]let mut scope_4983 = writer.prefix("UseLongIds");
    if let Some(var_4984) = &input.use_long_ids {
        scope_4983.boolean(*var_4984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(input: &crate::input::ModifyImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_4985 = writer.prefix("Attribute");
    if let Some(var_4986) = &input.attribute {
        scope_4985.string(var_4986);
    }
    #[allow(unused_mut)]let mut scope_4987 = writer.prefix("Description");
    if let Some(var_4988) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4987, var_4988)?;
    }
    #[allow(unused_mut)]let mut scope_4989 = writer.prefix("ImageId");
    if let Some(var_4990) = &input.image_id {
        scope_4989.string(var_4990);
    }
    #[allow(unused_mut)]let mut scope_4991 = writer.prefix("LaunchPermission");
    if let Some(var_4992) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(scope_4991, var_4992)?;
    }
    #[allow(unused_mut)]let mut scope_4993 = writer.prefix("OperationType");
    if let Some(var_4994) = &input.operation_type {
        scope_4993.string(var_4994.as_str());
    }
    #[allow(unused_mut)]let mut scope_4995 = writer.prefix("ProductCode");
    if let Some(var_4996) = &input.product_codes {
        let mut list_4998 = scope_4995.start_list(true, Some("ProductCode"));
        for item_4997 in var_4996 {
            #[allow(unused_mut)]let mut entry_4999 = list_4998.entry();
            entry_4999.string(item_4997);
        }
        list_4998.finish();
    }
    #[allow(unused_mut)]let mut scope_5000 = writer.prefix("UserGroup");
    if let Some(var_5001) = &input.user_groups {
        let mut list_5003 = scope_5000.start_list(true, Some("UserGroup"));
        for item_5002 in var_5001 {
            #[allow(unused_mut)]let mut entry_5004 = list_5003.entry();
            entry_5004.string(item_5002);
        }
        list_5003.finish();
    }
    #[allow(unused_mut)]let mut scope_5005 = writer.prefix("UserId");
    if let Some(var_5006) = &input.user_ids {
        let mut list_5008 = scope_5005.start_list(true, Some("UserId"));
        for item_5007 in var_5006 {
            #[allow(unused_mut)]let mut entry_5009 = list_5008.entry();
            entry_5009.string(item_5007);
        }
        list_5008.finish();
    }
    #[allow(unused_mut)]let mut scope_5010 = writer.prefix("Value");
    if let Some(var_5011) = &input.value {
        scope_5010.string(var_5011);
    }
    #[allow(unused_mut)]let mut scope_5012 = writer.prefix("DryRun");
    if let Some(var_5013) = &input.dry_run {
        scope_5012.boolean(*var_5013);
    }
    #[allow(unused_mut)]let mut scope_5014 = writer.prefix("OrganizationArn");
    if let Some(var_5015) = &input.organization_arns {
        let mut list_5017 = scope_5014.start_list(true, Some("OrganizationArn"));
        for item_5016 in var_5015 {
            #[allow(unused_mut)]let mut entry_5018 = list_5017.entry();
            entry_5018.string(item_5016);
        }
        list_5017.finish();
    }
    #[allow(unused_mut)]let mut scope_5019 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_5020) = &input.organizational_unit_arns {
        let mut list_5022 = scope_5019.start_list(true, Some("OrganizationalUnitArn"));
        for item_5021 in var_5020 {
            #[allow(unused_mut)]let mut entry_5023 = list_5022.entry();
            entry_5023.string(item_5021);
        }
        list_5022.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(input: &crate::input::ModifyInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5024 = writer.prefix("SourceDestCheck");
    if let Some(var_5025) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5024, var_5025)?;
    }
    #[allow(unused_mut)]let mut scope_5026 = writer.prefix("Attribute");
    if let Some(var_5027) = &input.attribute {
        scope_5026.string(var_5027.as_str());
    }
    #[allow(unused_mut)]let mut scope_5028 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5029) = &input.block_device_mappings {
        let mut list_5031 = scope_5028.start_list(true, Some("item"));
        for item_5030 in var_5029 {
            #[allow(unused_mut)]let mut entry_5032 = list_5031.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_5032, item_5030)?;
        }
        list_5031.finish();
    }
    #[allow(unused_mut)]let mut scope_5033 = writer.prefix("DisableApiTermination");
    if let Some(var_5034) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5033, var_5034)?;
    }
    #[allow(unused_mut)]let mut scope_5035 = writer.prefix("DryRun");
    if let Some(var_5036) = &input.dry_run {
        scope_5035.boolean(*var_5036);
    }
    #[allow(unused_mut)]let mut scope_5037 = writer.prefix("EbsOptimized");
    if let Some(var_5038) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5037, var_5038)?;
    }
    #[allow(unused_mut)]let mut scope_5039 = writer.prefix("EnaSupport");
    if let Some(var_5040) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5039, var_5040)?;
    }
    #[allow(unused_mut)]let mut scope_5041 = writer.prefix("GroupId");
    if let Some(var_5042) = &input.groups {
        let mut list_5044 = scope_5041.start_list(true, Some("groupId"));
        for item_5043 in var_5042 {
            #[allow(unused_mut)]let mut entry_5045 = list_5044.entry();
            entry_5045.string(item_5043);
        }
        list_5044.finish();
    }
    #[allow(unused_mut)]let mut scope_5046 = writer.prefix("InstanceId");
    if let Some(var_5047) = &input.instance_id {
        scope_5046.string(var_5047);
    }
    #[allow(unused_mut)]let mut scope_5048 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5049) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5048, var_5049)?;
    }
    #[allow(unused_mut)]let mut scope_5050 = writer.prefix("InstanceType");
    if let Some(var_5051) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5050, var_5051)?;
    }
    #[allow(unused_mut)]let mut scope_5052 = writer.prefix("Kernel");
    if let Some(var_5053) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5052, var_5053)?;
    }
    #[allow(unused_mut)]let mut scope_5054 = writer.prefix("Ramdisk");
    if let Some(var_5055) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5054, var_5055)?;
    }
    #[allow(unused_mut)]let mut scope_5056 = writer.prefix("SriovNetSupport");
    if let Some(var_5057) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5056, var_5057)?;
    }
    #[allow(unused_mut)]let mut scope_5058 = writer.prefix("UserData");
    if let Some(var_5059) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(scope_5058, var_5059)?;
    }
    #[allow(unused_mut)]let mut scope_5060 = writer.prefix("Value");
    if let Some(var_5061) = &input.value {
        scope_5060.string(var_5061);
    }
    #[allow(unused_mut)]let mut scope_5062 = writer.prefix("DisableApiStop");
    if let Some(var_5063) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5062, var_5063)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(input: &crate::input::ModifyInstanceCapacityReservationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCapacityReservationAttributes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5064 = writer.prefix("InstanceId");
    if let Some(var_5065) = &input.instance_id {
        scope_5064.string(var_5065);
    }
    #[allow(unused_mut)]let mut scope_5066 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5067) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(scope_5066, var_5067)?;
    }
    #[allow(unused_mut)]let mut scope_5068 = writer.prefix("DryRun");
    if let Some(var_5069) = &input.dry_run {
        scope_5068.boolean(*var_5069);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(input: &crate::input::ModifyInstanceCreditSpecificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5070 = writer.prefix("DryRun");
    if let Some(var_5071) = &input.dry_run {
        scope_5070.boolean(*var_5071);
    }
    #[allow(unused_mut)]let mut scope_5072 = writer.prefix("ClientToken");
    if let Some(var_5073) = &input.client_token {
        scope_5072.string(var_5073);
    }
    #[allow(unused_mut)]let mut scope_5074 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_5075) = &input.instance_credit_specifications {
        let mut list_5077 = scope_5074.start_list(true, Some("item"));
        for item_5076 in var_5075 {
            #[allow(unused_mut)]let mut entry_5078 = list_5077.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_5078, item_5076)?;
        }
        list_5077.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(input: &crate::input::ModifyInstanceEventStartTimeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5079 = writer.prefix("DryRun");
    if let Some(var_5080) = &input.dry_run {
        scope_5079.boolean(*var_5080);
    }
    #[allow(unused_mut)]let mut scope_5081 = writer.prefix("InstanceId");
    if let Some(var_5082) = &input.instance_id {
        scope_5081.string(var_5082);
    }
    #[allow(unused_mut)]let mut scope_5083 = writer.prefix("InstanceEventId");
    if let Some(var_5084) = &input.instance_event_id {
        scope_5083.string(var_5084);
    }
    #[allow(unused_mut)]let mut scope_5085 = writer.prefix("NotBefore");
    if let Some(var_5086) = &input.not_before {
        scope_5085.date_time(var_5086, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(input: &crate::input::ModifyInstanceEventWindowInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5087 = writer.prefix("DryRun");
    if let Some(var_5088) = &input.dry_run {
        scope_5087.boolean(*var_5088);
    }
    #[allow(unused_mut)]let mut scope_5089 = writer.prefix("Name");
    if let Some(var_5090) = &input.name {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]let mut scope_5091 = writer.prefix("InstanceEventWindowId");
    if let Some(var_5092) = &input.instance_event_window_id {
        scope_5091.string(var_5092);
    }
    #[allow(unused_mut)]let mut scope_5093 = writer.prefix("TimeRange");
    if let Some(var_5094) = &input.time_ranges {
        let mut list_5096 = scope_5093.start_list(true, None);
        for item_5095 in var_5094 {
            #[allow(unused_mut)]let mut entry_5097 = list_5096.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_5097, item_5095)?;
        }
        list_5096.finish();
    }
    #[allow(unused_mut)]let mut scope_5098 = writer.prefix("CronExpression");
    if let Some(var_5099) = &input.cron_expression {
        scope_5098.string(var_5099);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(input: &crate::input::ModifyInstanceMaintenanceOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMaintenanceOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5100 = writer.prefix("InstanceId");
    if let Some(var_5101) = &input.instance_id {
        scope_5100.string(var_5101);
    }
    #[allow(unused_mut)]let mut scope_5102 = writer.prefix("AutoRecovery");
    if let Some(var_5103) = &input.auto_recovery {
        scope_5102.string(var_5103.as_str());
    }
    #[allow(unused_mut)]let mut scope_5104 = writer.prefix("DryRun");
    if let Some(var_5105) = &input.dry_run {
        scope_5104.boolean(*var_5105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(input: &crate::input::ModifyInstanceMetadataOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5106 = writer.prefix("InstanceId");
    if let Some(var_5107) = &input.instance_id {
        scope_5106.string(var_5107);
    }
    #[allow(unused_mut)]let mut scope_5108 = writer.prefix("HttpTokens");
    if let Some(var_5109) = &input.http_tokens {
        scope_5108.string(var_5109.as_str());
    }
    #[allow(unused_mut)]let mut scope_5110 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_5111) = &input.http_put_response_hop_limit {
        scope_5110.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5111).into()));
    }
    #[allow(unused_mut)]let mut scope_5112 = writer.prefix("HttpEndpoint");
    if let Some(var_5113) = &input.http_endpoint {
        scope_5112.string(var_5113.as_str());
    }
    #[allow(unused_mut)]let mut scope_5114 = writer.prefix("DryRun");
    if let Some(var_5115) = &input.dry_run {
        scope_5114.boolean(*var_5115);
    }
    #[allow(unused_mut)]let mut scope_5116 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_5117) = &input.http_protocol_ipv6 {
        scope_5116.string(var_5117.as_str());
    }
    #[allow(unused_mut)]let mut scope_5118 = writer.prefix("InstanceMetadataTags");
    if let Some(var_5119) = &input.instance_metadata_tags {
        scope_5118.string(var_5119.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(input: &crate::input::ModifyInstancePlacementInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5120 = writer.prefix("Affinity");
    if let Some(var_5121) = &input.affinity {
        scope_5120.string(var_5121.as_str());
    }
    #[allow(unused_mut)]let mut scope_5122 = writer.prefix("GroupName");
    if let Some(var_5123) = &input.group_name {
        scope_5122.string(var_5123);
    }
    #[allow(unused_mut)]let mut scope_5124 = writer.prefix("HostId");
    if let Some(var_5125) = &input.host_id {
        scope_5124.string(var_5125);
    }
    #[allow(unused_mut)]let mut scope_5126 = writer.prefix("InstanceId");
    if let Some(var_5127) = &input.instance_id {
        scope_5126.string(var_5127);
    }
    #[allow(unused_mut)]let mut scope_5128 = writer.prefix("Tenancy");
    if let Some(var_5129) = &input.tenancy {
        scope_5128.string(var_5129.as_str());
    }
    #[allow(unused_mut)]let mut scope_5130 = writer.prefix("PartitionNumber");
    if let Some(var_5131) = &input.partition_number {
        scope_5130.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5131).into()));
    }
    #[allow(unused_mut)]let mut scope_5132 = writer.prefix("HostResourceGroupArn");
    if let Some(var_5133) = &input.host_resource_group_arn {
        scope_5132.string(var_5133);
    }
    #[allow(unused_mut)]let mut scope_5134 = writer.prefix("GroupId");
    if let Some(var_5135) = &input.group_id {
        scope_5134.string(var_5135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(input: &crate::input::ModifyIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5136 = writer.prefix("DryRun");
    if let Some(var_5137) = &input.dry_run {
        scope_5136.boolean(*var_5137);
    }
    #[allow(unused_mut)]let mut scope_5138 = writer.prefix("IpamId");
    if let Some(var_5139) = &input.ipam_id {
        scope_5138.string(var_5139);
    }
    #[allow(unused_mut)]let mut scope_5140 = writer.prefix("Description");
    if let Some(var_5141) = &input.description {
        scope_5140.string(var_5141);
    }
    #[allow(unused_mut)]let mut scope_5142 = writer.prefix("AddOperatingRegion");
    if let Some(var_5143) = &input.add_operating_regions {
        let mut list_5145 = scope_5142.start_list(true, None);
        for item_5144 in var_5143 {
            #[allow(unused_mut)]let mut entry_5146 = list_5145.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(entry_5146, item_5144)?;
        }
        list_5145.finish();
    }
    #[allow(unused_mut)]let mut scope_5147 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_5148) = &input.remove_operating_regions {
        let mut list_5150 = scope_5147.start_list(true, None);
        for item_5149 in var_5148 {
            #[allow(unused_mut)]let mut entry_5151 = list_5150.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(entry_5151, item_5149)?;
        }
        list_5150.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(input: &crate::input::ModifyIpamPoolInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5152 = writer.prefix("DryRun");
    if let Some(var_5153) = &input.dry_run {
        scope_5152.boolean(*var_5153);
    }
    #[allow(unused_mut)]let mut scope_5154 = writer.prefix("IpamPoolId");
    if let Some(var_5155) = &input.ipam_pool_id {
        scope_5154.string(var_5155);
    }
    #[allow(unused_mut)]let mut scope_5156 = writer.prefix("Description");
    if let Some(var_5157) = &input.description {
        scope_5156.string(var_5157);
    }
    #[allow(unused_mut)]let mut scope_5158 = writer.prefix("AutoImport");
    if let Some(var_5159) = &input.auto_import {
        scope_5158.boolean(*var_5159);
    }
    #[allow(unused_mut)]let mut scope_5160 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_5161) = &input.allocation_min_netmask_length {
        scope_5160.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5161).into()));
    }
    #[allow(unused_mut)]let mut scope_5162 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_5163) = &input.allocation_max_netmask_length {
        scope_5162.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5163).into()));
    }
    #[allow(unused_mut)]let mut scope_5164 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_5165) = &input.allocation_default_netmask_length {
        scope_5164.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5165).into()));
    }
    #[allow(unused_mut)]let mut scope_5166 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_5167) = &input.clear_allocation_default_netmask_length {
        scope_5166.boolean(*var_5167);
    }
    #[allow(unused_mut)]let mut scope_5168 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_5169) = &input.add_allocation_resource_tags {
        let mut list_5171 = scope_5168.start_list(true, Some("item"));
        for item_5170 in var_5169 {
            #[allow(unused_mut)]let mut entry_5172 = list_5171.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_5172, item_5170)?;
        }
        list_5171.finish();
    }
    #[allow(unused_mut)]let mut scope_5173 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_5174) = &input.remove_allocation_resource_tags {
        let mut list_5176 = scope_5173.start_list(true, Some("item"));
        for item_5175 in var_5174 {
            #[allow(unused_mut)]let mut entry_5177 = list_5176.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(entry_5177, item_5175)?;
        }
        list_5176.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(input: &crate::input::ModifyIpamResourceCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5178 = writer.prefix("DryRun");
    if let Some(var_5179) = &input.dry_run {
        scope_5178.boolean(*var_5179);
    }
    #[allow(unused_mut)]let mut scope_5180 = writer.prefix("ResourceId");
    if let Some(var_5181) = &input.resource_id {
        scope_5180.string(var_5181);
    }
    #[allow(unused_mut)]let mut scope_5182 = writer.prefix("ResourceCidr");
    if let Some(var_5183) = &input.resource_cidr {
        scope_5182.string(var_5183);
    }
    #[allow(unused_mut)]let mut scope_5184 = writer.prefix("ResourceRegion");
    if let Some(var_5185) = &input.resource_region {
        scope_5184.string(var_5185);
    }
    #[allow(unused_mut)]let mut scope_5186 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_5187) = &input.current_ipam_scope_id {
        scope_5186.string(var_5187);
    }
    #[allow(unused_mut)]let mut scope_5188 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_5189) = &input.destination_ipam_scope_id {
        scope_5188.string(var_5189);
    }
    #[allow(unused_mut)]let mut scope_5190 = writer.prefix("Monitored");
    if let Some(var_5191) = &input.monitored {
        scope_5190.boolean(*var_5191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(input: &crate::input::ModifyIpamScopeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5192 = writer.prefix("DryRun");
    if let Some(var_5193) = &input.dry_run {
        scope_5192.boolean(*var_5193);
    }
    #[allow(unused_mut)]let mut scope_5194 = writer.prefix("IpamScopeId");
    if let Some(var_5195) = &input.ipam_scope_id {
        scope_5194.string(var_5195);
    }
    #[allow(unused_mut)]let mut scope_5196 = writer.prefix("Description");
    if let Some(var_5197) = &input.description {
        scope_5196.string(var_5197);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(input: &crate::input::ModifyLaunchTemplateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5198 = writer.prefix("DryRun");
    if let Some(var_5199) = &input.dry_run {
        scope_5198.boolean(*var_5199);
    }
    #[allow(unused_mut)]let mut scope_5200 = writer.prefix("ClientToken");
    if let Some(var_5201) = &input.client_token {
        scope_5200.string(var_5201);
    }
    #[allow(unused_mut)]let mut scope_5202 = writer.prefix("LaunchTemplateId");
    if let Some(var_5203) = &input.launch_template_id {
        scope_5202.string(var_5203);
    }
    #[allow(unused_mut)]let mut scope_5204 = writer.prefix("LaunchTemplateName");
    if let Some(var_5205) = &input.launch_template_name {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]let mut scope_5206 = writer.prefix("SetDefaultVersion");
    if let Some(var_5207) = &input.default_version {
        scope_5206.string(var_5207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_local_gateway_route(input: &crate::input::ModifyLocalGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5208 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5209) = &input.destination_cidr_block {
        scope_5208.string(var_5209);
    }
    #[allow(unused_mut)]let mut scope_5210 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_5211) = &input.local_gateway_route_table_id {
        scope_5210.string(var_5211);
    }
    #[allow(unused_mut)]let mut scope_5212 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_5213) = &input.local_gateway_virtual_interface_group_id {
        scope_5212.string(var_5213);
    }
    #[allow(unused_mut)]let mut scope_5214 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5215) = &input.network_interface_id {
        scope_5214.string(var_5215);
    }
    #[allow(unused_mut)]let mut scope_5216 = writer.prefix("DryRun");
    if let Some(var_5217) = &input.dry_run {
        scope_5216.boolean(*var_5217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(input: &crate::input::ModifyManagedPrefixListInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5218 = writer.prefix("DryRun");
    if let Some(var_5219) = &input.dry_run {
        scope_5218.boolean(*var_5219);
    }
    #[allow(unused_mut)]let mut scope_5220 = writer.prefix("PrefixListId");
    if let Some(var_5221) = &input.prefix_list_id {
        scope_5220.string(var_5221);
    }
    #[allow(unused_mut)]let mut scope_5222 = writer.prefix("CurrentVersion");
    if let Some(var_5223) = &input.current_version {
        scope_5222.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5223).into()));
    }
    #[allow(unused_mut)]let mut scope_5224 = writer.prefix("PrefixListName");
    if let Some(var_5225) = &input.prefix_list_name {
        scope_5224.string(var_5225);
    }
    #[allow(unused_mut)]let mut scope_5226 = writer.prefix("AddEntry");
    if let Some(var_5227) = &input.add_entries {
        let mut list_5229 = scope_5226.start_list(true, None);
        for item_5228 in var_5227 {
            #[allow(unused_mut)]let mut entry_5230 = list_5229.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(entry_5230, item_5228)?;
        }
        list_5229.finish();
    }
    #[allow(unused_mut)]let mut scope_5231 = writer.prefix("RemoveEntry");
    if let Some(var_5232) = &input.remove_entries {
        let mut list_5234 = scope_5231.start_list(true, None);
        for item_5233 in var_5232 {
            #[allow(unused_mut)]let mut entry_5235 = list_5234.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(entry_5235, item_5233)?;
        }
        list_5234.finish();
    }
    #[allow(unused_mut)]let mut scope_5236 = writer.prefix("MaxEntries");
    if let Some(var_5237) = &input.max_entries {
        scope_5236.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5237).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(input: &crate::input::ModifyNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5238 = writer.prefix("Attachment");
    if let Some(var_5239) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(scope_5238, var_5239)?;
    }
    #[allow(unused_mut)]let mut scope_5240 = writer.prefix("Description");
    if let Some(var_5241) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5240, var_5241)?;
    }
    #[allow(unused_mut)]let mut scope_5242 = writer.prefix("DryRun");
    if let Some(var_5243) = &input.dry_run {
        scope_5242.boolean(*var_5243);
    }
    #[allow(unused_mut)]let mut scope_5244 = writer.prefix("SecurityGroupId");
    if let Some(var_5245) = &input.groups {
        let mut list_5247 = scope_5244.start_list(true, Some("SecurityGroupId"));
        for item_5246 in var_5245 {
            #[allow(unused_mut)]let mut entry_5248 = list_5247.entry();
            entry_5248.string(item_5246);
        }
        list_5247.finish();
    }
    #[allow(unused_mut)]let mut scope_5249 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5250) = &input.network_interface_id {
        scope_5249.string(var_5250);
    }
    #[allow(unused_mut)]let mut scope_5251 = writer.prefix("SourceDestCheck");
    if let Some(var_5252) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5251, var_5252)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(input: &crate::input::ModifyPrivateDnsNameOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5253 = writer.prefix("DryRun");
    if let Some(var_5254) = &input.dry_run {
        scope_5253.boolean(*var_5254);
    }
    #[allow(unused_mut)]let mut scope_5255 = writer.prefix("InstanceId");
    if let Some(var_5256) = &input.instance_id {
        scope_5255.string(var_5256);
    }
    #[allow(unused_mut)]let mut scope_5257 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5258) = &input.private_dns_hostname_type {
        scope_5257.string(var_5258.as_str());
    }
    #[allow(unused_mut)]let mut scope_5259 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5260) = &input.enable_resource_name_dns_a_record {
        scope_5259.boolean(*var_5260);
    }
    #[allow(unused_mut)]let mut scope_5261 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5262) = &input.enable_resource_name_dns_aaaa_record {
        scope_5261.boolean(*var_5262);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(input: &crate::input::ModifyReservedInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5263 = writer.prefix("ReservedInstancesId");
    if let Some(var_5264) = &input.reserved_instances_ids {
        let mut list_5266 = scope_5263.start_list(true, Some("ReservedInstancesId"));
        for item_5265 in var_5264 {
            #[allow(unused_mut)]let mut entry_5267 = list_5266.entry();
            entry_5267.string(item_5265);
        }
        list_5266.finish();
    }
    #[allow(unused_mut)]let mut scope_5268 = writer.prefix("ClientToken");
    if let Some(var_5269) = &input.client_token {
        scope_5268.string(var_5269);
    }
    #[allow(unused_mut)]let mut scope_5270 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5271) = &input.target_configurations {
        let mut list_5273 = scope_5270.start_list(true, Some("item"));
        for item_5272 in var_5271 {
            #[allow(unused_mut)]let mut entry_5274 = list_5273.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(entry_5274, item_5272)?;
        }
        list_5273.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(input: &crate::input::ModifySecurityGroupRulesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5275 = writer.prefix("GroupId");
    if let Some(var_5276) = &input.group_id {
        scope_5275.string(var_5276);
    }
    #[allow(unused_mut)]let mut scope_5277 = writer.prefix("SecurityGroupRule");
    if let Some(var_5278) = &input.security_group_rules {
        let mut list_5280 = scope_5277.start_list(true, Some("item"));
        for item_5279 in var_5278 {
            #[allow(unused_mut)]let mut entry_5281 = list_5280.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(entry_5281, item_5279)?;
        }
        list_5280.finish();
    }
    #[allow(unused_mut)]let mut scope_5282 = writer.prefix("DryRun");
    if let Some(var_5283) = &input.dry_run {
        scope_5282.boolean(*var_5283);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(input: &crate::input::ModifySnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5284 = writer.prefix("Attribute");
    if let Some(var_5285) = &input.attribute {
        scope_5284.string(var_5285.as_str());
    }
    #[allow(unused_mut)]let mut scope_5286 = writer.prefix("CreateVolumePermission");
    if let Some(var_5287) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(scope_5286, var_5287)?;
    }
    #[allow(unused_mut)]let mut scope_5288 = writer.prefix("UserGroup");
    if let Some(var_5289) = &input.group_names {
        let mut list_5291 = scope_5288.start_list(true, Some("GroupName"));
        for item_5290 in var_5289 {
            #[allow(unused_mut)]let mut entry_5292 = list_5291.entry();
            entry_5292.string(item_5290);
        }
        list_5291.finish();
    }
    #[allow(unused_mut)]let mut scope_5293 = writer.prefix("OperationType");
    if let Some(var_5294) = &input.operation_type {
        scope_5293.string(var_5294.as_str());
    }
    #[allow(unused_mut)]let mut scope_5295 = writer.prefix("SnapshotId");
    if let Some(var_5296) = &input.snapshot_id {
        scope_5295.string(var_5296);
    }
    #[allow(unused_mut)]let mut scope_5297 = writer.prefix("UserId");
    if let Some(var_5298) = &input.user_ids {
        let mut list_5300 = scope_5297.start_list(true, Some("UserId"));
        for item_5299 in var_5298 {
            #[allow(unused_mut)]let mut entry_5301 = list_5300.entry();
            entry_5301.string(item_5299);
        }
        list_5300.finish();
    }
    #[allow(unused_mut)]let mut scope_5302 = writer.prefix("DryRun");
    if let Some(var_5303) = &input.dry_run {
        scope_5302.boolean(*var_5303);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(input: &crate::input::ModifySnapshotTierInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5304 = writer.prefix("SnapshotId");
    if let Some(var_5305) = &input.snapshot_id {
        scope_5304.string(var_5305);
    }
    #[allow(unused_mut)]let mut scope_5306 = writer.prefix("StorageTier");
    if let Some(var_5307) = &input.storage_tier {
        scope_5306.string(var_5307.as_str());
    }
    #[allow(unused_mut)]let mut scope_5308 = writer.prefix("DryRun");
    if let Some(var_5309) = &input.dry_run {
        scope_5308.boolean(*var_5309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(input: &crate::input::ModifySpotFleetRequestInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5310 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5311) = &input.excess_capacity_termination_policy {
        scope_5310.string(var_5311.as_str());
    }
    #[allow(unused_mut)]let mut scope_5312 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5313) = &input.launch_template_configs {
        let mut list_5315 = scope_5312.start_list(true, Some("item"));
        for item_5314 in var_5313 {
            #[allow(unused_mut)]let mut entry_5316 = list_5315.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(entry_5316, item_5314)?;
        }
        list_5315.finish();
    }
    #[allow(unused_mut)]let mut scope_5317 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5318) = &input.spot_fleet_request_id {
        scope_5317.string(var_5318);
    }
    #[allow(unused_mut)]let mut scope_5319 = writer.prefix("TargetCapacity");
    if let Some(var_5320) = &input.target_capacity {
        scope_5319.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5320).into()));
    }
    #[allow(unused_mut)]let mut scope_5321 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5322) = &input.on_demand_target_capacity {
        scope_5321.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5322).into()));
    }
    #[allow(unused_mut)]let mut scope_5323 = writer.prefix("Context");
    if let Some(var_5324) = &input.context {
        scope_5323.string(var_5324);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(input: &crate::input::ModifySubnetAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5325 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5326) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5325, var_5326)?;
    }
    #[allow(unused_mut)]let mut scope_5327 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5328) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5327, var_5328)?;
    }
    #[allow(unused_mut)]let mut scope_5329 = writer.prefix("SubnetId");
    if let Some(var_5330) = &input.subnet_id {
        scope_5329.string(var_5330);
    }
    #[allow(unused_mut)]let mut scope_5331 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5332) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5331, var_5332)?;
    }
    #[allow(unused_mut)]let mut scope_5333 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5334) = &input.customer_owned_ipv4_pool {
        scope_5333.string(var_5334);
    }
    #[allow(unused_mut)]let mut scope_5335 = writer.prefix("EnableDns64");
    if let Some(var_5336) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5335, var_5336)?;
    }
    #[allow(unused_mut)]let mut scope_5337 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5338) = &input.private_dns_hostname_type_on_launch {
        scope_5337.string(var_5338.as_str());
    }
    #[allow(unused_mut)]let mut scope_5339 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5340) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5339, var_5340)?;
    }
    #[allow(unused_mut)]let mut scope_5341 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5342) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5341, var_5342)?;
    }
    #[allow(unused_mut)]let mut scope_5343 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5344) = &input.enable_lni_at_device_index {
        scope_5343.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5344).into()));
    }
    #[allow(unused_mut)]let mut scope_5345 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5346) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5345, var_5346)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterNetworkServices", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5347 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5348) = &input.traffic_mirror_filter_id {
        scope_5347.string(var_5348);
    }
    #[allow(unused_mut)]let mut scope_5349 = writer.prefix("AddNetworkService");
    if let Some(var_5350) = &input.add_network_services {
        let mut list_5352 = scope_5349.start_list(true, Some("item"));
        for item_5351 in var_5350 {
            #[allow(unused_mut)]let mut entry_5353 = list_5352.entry();
            entry_5353.string(item_5351.as_str());
        }
        list_5352.finish();
    }
    #[allow(unused_mut)]let mut scope_5354 = writer.prefix("RemoveNetworkService");
    if let Some(var_5355) = &input.remove_network_services {
        let mut list_5357 = scope_5354.start_list(true, Some("item"));
        for item_5356 in var_5355 {
            #[allow(unused_mut)]let mut entry_5358 = list_5357.entry();
            entry_5358.string(item_5356.as_str());
        }
        list_5357.finish();
    }
    #[allow(unused_mut)]let mut scope_5359 = writer.prefix("DryRun");
    if let Some(var_5360) = &input.dry_run {
        scope_5359.boolean(*var_5360);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(input: &crate::input::ModifyTrafficMirrorFilterRuleInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5361 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5362) = &input.traffic_mirror_filter_rule_id {
        scope_5361.string(var_5362);
    }
    #[allow(unused_mut)]let mut scope_5363 = writer.prefix("TrafficDirection");
    if let Some(var_5364) = &input.traffic_direction {
        scope_5363.string(var_5364.as_str());
    }
    #[allow(unused_mut)]let mut scope_5365 = writer.prefix("RuleNumber");
    if let Some(var_5366) = &input.rule_number {
        scope_5365.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5366).into()));
    }
    #[allow(unused_mut)]let mut scope_5367 = writer.prefix("RuleAction");
    if let Some(var_5368) = &input.rule_action {
        scope_5367.string(var_5368.as_str());
    }
    #[allow(unused_mut)]let mut scope_5369 = writer.prefix("DestinationPortRange");
    if let Some(var_5370) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_5369, var_5370)?;
    }
    #[allow(unused_mut)]let mut scope_5371 = writer.prefix("SourcePortRange");
    if let Some(var_5372) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(scope_5371, var_5372)?;
    }
    #[allow(unused_mut)]let mut scope_5373 = writer.prefix("Protocol");
    if let Some(var_5374) = &input.protocol {
        scope_5373.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5374).into()));
    }
    #[allow(unused_mut)]let mut scope_5375 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5376) = &input.destination_cidr_block {
        scope_5375.string(var_5376);
    }
    #[allow(unused_mut)]let mut scope_5377 = writer.prefix("SourceCidrBlock");
    if let Some(var_5378) = &input.source_cidr_block {
        scope_5377.string(var_5378);
    }
    #[allow(unused_mut)]let mut scope_5379 = writer.prefix("Description");
    if let Some(var_5380) = &input.description {
        scope_5379.string(var_5380);
    }
    #[allow(unused_mut)]let mut scope_5381 = writer.prefix("RemoveField");
    if let Some(var_5382) = &input.remove_fields {
        let mut list_5384 = scope_5381.start_list(true, None);
        for item_5383 in var_5382 {
            #[allow(unused_mut)]let mut entry_5385 = list_5384.entry();
            entry_5385.string(item_5383.as_str());
        }
        list_5384.finish();
    }
    #[allow(unused_mut)]let mut scope_5386 = writer.prefix("DryRun");
    if let Some(var_5387) = &input.dry_run {
        scope_5386.boolean(*var_5387);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(input: &crate::input::ModifyTrafficMirrorSessionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5388 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5389) = &input.traffic_mirror_session_id {
        scope_5388.string(var_5389);
    }
    #[allow(unused_mut)]let mut scope_5390 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5391) = &input.traffic_mirror_target_id {
        scope_5390.string(var_5391);
    }
    #[allow(unused_mut)]let mut scope_5392 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5393) = &input.traffic_mirror_filter_id {
        scope_5392.string(var_5393);
    }
    #[allow(unused_mut)]let mut scope_5394 = writer.prefix("PacketLength");
    if let Some(var_5395) = &input.packet_length {
        scope_5394.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5395).into()));
    }
    #[allow(unused_mut)]let mut scope_5396 = writer.prefix("SessionNumber");
    if let Some(var_5397) = &input.session_number {
        scope_5396.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5397).into()));
    }
    #[allow(unused_mut)]let mut scope_5398 = writer.prefix("VirtualNetworkId");
    if let Some(var_5399) = &input.virtual_network_id {
        scope_5398.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5399).into()));
    }
    #[allow(unused_mut)]let mut scope_5400 = writer.prefix("Description");
    if let Some(var_5401) = &input.description {
        scope_5400.string(var_5401);
    }
    #[allow(unused_mut)]let mut scope_5402 = writer.prefix("RemoveField");
    if let Some(var_5403) = &input.remove_fields {
        let mut list_5405 = scope_5402.start_list(true, None);
        for item_5404 in var_5403 {
            #[allow(unused_mut)]let mut entry_5406 = list_5405.entry();
            entry_5406.string(item_5404.as_str());
        }
        list_5405.finish();
    }
    #[allow(unused_mut)]let mut scope_5407 = writer.prefix("DryRun");
    if let Some(var_5408) = &input.dry_run {
        scope_5407.boolean(*var_5408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(input: &crate::input::ModifyTransitGatewayInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5409 = writer.prefix("TransitGatewayId");
    if let Some(var_5410) = &input.transit_gateway_id {
        scope_5409.string(var_5410);
    }
    #[allow(unused_mut)]let mut scope_5411 = writer.prefix("Description");
    if let Some(var_5412) = &input.description {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]let mut scope_5413 = writer.prefix("Options");
    if let Some(var_5414) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(scope_5413, var_5414)?;
    }
    #[allow(unused_mut)]let mut scope_5415 = writer.prefix("DryRun");
    if let Some(var_5416) = &input.dry_run {
        scope_5415.boolean(*var_5416);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayPrefixListReference", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5417 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5418) = &input.transit_gateway_route_table_id {
        scope_5417.string(var_5418);
    }
    #[allow(unused_mut)]let mut scope_5419 = writer.prefix("PrefixListId");
    if let Some(var_5420) = &input.prefix_list_id {
        scope_5419.string(var_5420);
    }
    #[allow(unused_mut)]let mut scope_5421 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5422) = &input.transit_gateway_attachment_id {
        scope_5421.string(var_5422);
    }
    #[allow(unused_mut)]let mut scope_5423 = writer.prefix("Blackhole");
    if let Some(var_5424) = &input.blackhole {
        scope_5423.boolean(*var_5424);
    }
    #[allow(unused_mut)]let mut scope_5425 = writer.prefix("DryRun");
    if let Some(var_5426) = &input.dry_run {
        scope_5425.boolean(*var_5426);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(input: &crate::input::ModifyTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5427 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5428) = &input.transit_gateway_attachment_id {
        scope_5427.string(var_5428);
    }
    #[allow(unused_mut)]let mut scope_5429 = writer.prefix("AddSubnetIds");
    if let Some(var_5430) = &input.add_subnet_ids {
        let mut list_5432 = scope_5429.start_list(true, Some("item"));
        for item_5431 in var_5430 {
            #[allow(unused_mut)]let mut entry_5433 = list_5432.entry();
            entry_5433.string(item_5431);
        }
        list_5432.finish();
    }
    #[allow(unused_mut)]let mut scope_5434 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5435) = &input.remove_subnet_ids {
        let mut list_5437 = scope_5434.start_list(true, Some("item"));
        for item_5436 in var_5435 {
            #[allow(unused_mut)]let mut entry_5438 = list_5437.entry();
            entry_5438.string(item_5436);
        }
        list_5437.finish();
    }
    #[allow(unused_mut)]let mut scope_5439 = writer.prefix("Options");
    if let Some(var_5440) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5439, var_5440)?;
    }
    #[allow(unused_mut)]let mut scope_5441 = writer.prefix("DryRun");
    if let Some(var_5442) = &input.dry_run {
        scope_5441.boolean(*var_5442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(input: &crate::input::ModifyVolumeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5443 = writer.prefix("DryRun");
    if let Some(var_5444) = &input.dry_run {
        scope_5443.boolean(*var_5444);
    }
    #[allow(unused_mut)]let mut scope_5445 = writer.prefix("VolumeId");
    if let Some(var_5446) = &input.volume_id {
        scope_5445.string(var_5446);
    }
    #[allow(unused_mut)]let mut scope_5447 = writer.prefix("Size");
    if let Some(var_5448) = &input.size {
        scope_5447.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5448).into()));
    }
    #[allow(unused_mut)]let mut scope_5449 = writer.prefix("VolumeType");
    if let Some(var_5450) = &input.volume_type {
        scope_5449.string(var_5450.as_str());
    }
    #[allow(unused_mut)]let mut scope_5451 = writer.prefix("Iops");
    if let Some(var_5452) = &input.iops {
        scope_5451.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5452).into()));
    }
    #[allow(unused_mut)]let mut scope_5453 = writer.prefix("Throughput");
    if let Some(var_5454) = &input.throughput {
        scope_5453.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5454).into()));
    }
    #[allow(unused_mut)]let mut scope_5455 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5456) = &input.multi_attach_enabled {
        scope_5455.boolean(*var_5456);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(input: &crate::input::ModifyVolumeAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5457 = writer.prefix("AutoEnableIO");
    if let Some(var_5458) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5457, var_5458)?;
    }
    #[allow(unused_mut)]let mut scope_5459 = writer.prefix("VolumeId");
    if let Some(var_5460) = &input.volume_id {
        scope_5459.string(var_5460);
    }
    #[allow(unused_mut)]let mut scope_5461 = writer.prefix("DryRun");
    if let Some(var_5462) = &input.dry_run {
        scope_5461.boolean(*var_5462);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(input: &crate::input::ModifyVpcAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5463 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5464) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5463, var_5464)?;
    }
    #[allow(unused_mut)]let mut scope_5465 = writer.prefix("EnableDnsSupport");
    if let Some(var_5466) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5465, var_5466)?;
    }
    #[allow(unused_mut)]let mut scope_5467 = writer.prefix("VpcId");
    if let Some(var_5468) = &input.vpc_id {
        scope_5467.string(var_5468);
    }
    #[allow(unused_mut)]let mut scope_5469 = writer.prefix("EnableNetworkAddressUsageMetrics");
    if let Some(var_5470) = &input.enable_network_address_usage_metrics {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(scope_5469, var_5470)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(input: &crate::input::ModifyVpcEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5471 = writer.prefix("DryRun");
    if let Some(var_5472) = &input.dry_run {
        scope_5471.boolean(*var_5472);
    }
    #[allow(unused_mut)]let mut scope_5473 = writer.prefix("VpcEndpointId");
    if let Some(var_5474) = &input.vpc_endpoint_id {
        scope_5473.string(var_5474);
    }
    #[allow(unused_mut)]let mut scope_5475 = writer.prefix("ResetPolicy");
    if let Some(var_5476) = &input.reset_policy {
        scope_5475.boolean(*var_5476);
    }
    #[allow(unused_mut)]let mut scope_5477 = writer.prefix("PolicyDocument");
    if let Some(var_5478) = &input.policy_document {
        scope_5477.string(var_5478);
    }
    #[allow(unused_mut)]let mut scope_5479 = writer.prefix("AddRouteTableId");
    if let Some(var_5480) = &input.add_route_table_ids {
        let mut list_5482 = scope_5479.start_list(true, Some("item"));
        for item_5481 in var_5480 {
            #[allow(unused_mut)]let mut entry_5483 = list_5482.entry();
            entry_5483.string(item_5481);
        }
        list_5482.finish();
    }
    #[allow(unused_mut)]let mut scope_5484 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5485) = &input.remove_route_table_ids {
        let mut list_5487 = scope_5484.start_list(true, Some("item"));
        for item_5486 in var_5485 {
            #[allow(unused_mut)]let mut entry_5488 = list_5487.entry();
            entry_5488.string(item_5486);
        }
        list_5487.finish();
    }
    #[allow(unused_mut)]let mut scope_5489 = writer.prefix("AddSubnetId");
    if let Some(var_5490) = &input.add_subnet_ids {
        let mut list_5492 = scope_5489.start_list(true, Some("item"));
        for item_5491 in var_5490 {
            #[allow(unused_mut)]let mut entry_5493 = list_5492.entry();
            entry_5493.string(item_5491);
        }
        list_5492.finish();
    }
    #[allow(unused_mut)]let mut scope_5494 = writer.prefix("RemoveSubnetId");
    if let Some(var_5495) = &input.remove_subnet_ids {
        let mut list_5497 = scope_5494.start_list(true, Some("item"));
        for item_5496 in var_5495 {
            #[allow(unused_mut)]let mut entry_5498 = list_5497.entry();
            entry_5498.string(item_5496);
        }
        list_5497.finish();
    }
    #[allow(unused_mut)]let mut scope_5499 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5500) = &input.add_security_group_ids {
        let mut list_5502 = scope_5499.start_list(true, Some("item"));
        for item_5501 in var_5500 {
            #[allow(unused_mut)]let mut entry_5503 = list_5502.entry();
            entry_5503.string(item_5501);
        }
        list_5502.finish();
    }
    #[allow(unused_mut)]let mut scope_5504 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5505) = &input.remove_security_group_ids {
        let mut list_5507 = scope_5504.start_list(true, Some("item"));
        for item_5506 in var_5505 {
            #[allow(unused_mut)]let mut entry_5508 = list_5507.entry();
            entry_5508.string(item_5506);
        }
        list_5507.finish();
    }
    #[allow(unused_mut)]let mut scope_5509 = writer.prefix("IpAddressType");
    if let Some(var_5510) = &input.ip_address_type {
        scope_5509.string(var_5510.as_str());
    }
    #[allow(unused_mut)]let mut scope_5511 = writer.prefix("DnsOptions");
    if let Some(var_5512) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(scope_5511, var_5512)?;
    }
    #[allow(unused_mut)]let mut scope_5513 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5514) = &input.private_dns_enabled {
        scope_5513.boolean(*var_5514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(input: &crate::input::ModifyVpcEndpointConnectionNotificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointConnectionNotification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5515 = writer.prefix("DryRun");
    if let Some(var_5516) = &input.dry_run {
        scope_5515.boolean(*var_5516);
    }
    #[allow(unused_mut)]let mut scope_5517 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5518) = &input.connection_notification_id {
        scope_5517.string(var_5518);
    }
    #[allow(unused_mut)]let mut scope_5519 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5520) = &input.connection_notification_arn {
        scope_5519.string(var_5520);
    }
    #[allow(unused_mut)]let mut scope_5521 = writer.prefix("ConnectionEvents");
    if let Some(var_5522) = &input.connection_events {
        let mut list_5524 = scope_5521.start_list(true, Some("item"));
        for item_5523 in var_5522 {
            #[allow(unused_mut)]let mut entry_5525 = list_5524.entry();
            entry_5525.string(item_5523);
        }
        list_5524.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(input: &crate::input::ModifyVpcEndpointServiceConfigurationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServiceConfiguration", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5526 = writer.prefix("DryRun");
    if let Some(var_5527) = &input.dry_run {
        scope_5526.boolean(*var_5527);
    }
    #[allow(unused_mut)]let mut scope_5528 = writer.prefix("ServiceId");
    if let Some(var_5529) = &input.service_id {
        scope_5528.string(var_5529);
    }
    #[allow(unused_mut)]let mut scope_5530 = writer.prefix("PrivateDnsName");
    if let Some(var_5531) = &input.private_dns_name {
        scope_5530.string(var_5531);
    }
    #[allow(unused_mut)]let mut scope_5532 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5533) = &input.remove_private_dns_name {
        scope_5532.boolean(*var_5533);
    }
    #[allow(unused_mut)]let mut scope_5534 = writer.prefix("AcceptanceRequired");
    if let Some(var_5535) = &input.acceptance_required {
        scope_5534.boolean(*var_5535);
    }
    #[allow(unused_mut)]let mut scope_5536 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5537) = &input.add_network_load_balancer_arns {
        let mut list_5539 = scope_5536.start_list(true, Some("item"));
        for item_5538 in var_5537 {
            #[allow(unused_mut)]let mut entry_5540 = list_5539.entry();
            entry_5540.string(item_5538);
        }
        list_5539.finish();
    }
    #[allow(unused_mut)]let mut scope_5541 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5542) = &input.remove_network_load_balancer_arns {
        let mut list_5544 = scope_5541.start_list(true, Some("item"));
        for item_5543 in var_5542 {
            #[allow(unused_mut)]let mut entry_5545 = list_5544.entry();
            entry_5545.string(item_5543);
        }
        list_5544.finish();
    }
    #[allow(unused_mut)]let mut scope_5546 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5547) = &input.add_gateway_load_balancer_arns {
        let mut list_5549 = scope_5546.start_list(true, Some("item"));
        for item_5548 in var_5547 {
            #[allow(unused_mut)]let mut entry_5550 = list_5549.entry();
            entry_5550.string(item_5548);
        }
        list_5549.finish();
    }
    #[allow(unused_mut)]let mut scope_5551 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5552) = &input.remove_gateway_load_balancer_arns {
        let mut list_5554 = scope_5551.start_list(true, Some("item"));
        for item_5553 in var_5552 {
            #[allow(unused_mut)]let mut entry_5555 = list_5554.entry();
            entry_5555.string(item_5553);
        }
        list_5554.finish();
    }
    #[allow(unused_mut)]let mut scope_5556 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5557) = &input.add_supported_ip_address_types {
        let mut list_5559 = scope_5556.start_list(true, Some("item"));
        for item_5558 in var_5557 {
            #[allow(unused_mut)]let mut entry_5560 = list_5559.entry();
            entry_5560.string(item_5558);
        }
        list_5559.finish();
    }
    #[allow(unused_mut)]let mut scope_5561 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5562) = &input.remove_supported_ip_address_types {
        let mut list_5564 = scope_5561.start_list(true, Some("item"));
        for item_5563 in var_5562 {
            #[allow(unused_mut)]let mut entry_5565 = list_5564.entry();
            entry_5565.string(item_5563);
        }
        list_5564.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServicePayerResponsibility", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5566 = writer.prefix("DryRun");
    if let Some(var_5567) = &input.dry_run {
        scope_5566.boolean(*var_5567);
    }
    #[allow(unused_mut)]let mut scope_5568 = writer.prefix("ServiceId");
    if let Some(var_5569) = &input.service_id {
        scope_5568.string(var_5569);
    }
    #[allow(unused_mut)]let mut scope_5570 = writer.prefix("PayerResponsibility");
    if let Some(var_5571) = &input.payer_responsibility {
        scope_5570.string(var_5571.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(input: &crate::input::ModifyVpcEndpointServicePermissionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpointServicePermissions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5572 = writer.prefix("DryRun");
    if let Some(var_5573) = &input.dry_run {
        scope_5572.boolean(*var_5573);
    }
    #[allow(unused_mut)]let mut scope_5574 = writer.prefix("ServiceId");
    if let Some(var_5575) = &input.service_id {
        scope_5574.string(var_5575);
    }
    #[allow(unused_mut)]let mut scope_5576 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5577) = &input.add_allowed_principals {
        let mut list_5579 = scope_5576.start_list(true, Some("item"));
        for item_5578 in var_5577 {
            #[allow(unused_mut)]let mut entry_5580 = list_5579.entry();
            entry_5580.string(item_5578);
        }
        list_5579.finish();
    }
    #[allow(unused_mut)]let mut scope_5581 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5582) = &input.remove_allowed_principals {
        let mut list_5584 = scope_5581.start_list(true, Some("item"));
        for item_5583 in var_5582 {
            #[allow(unused_mut)]let mut entry_5585 = list_5584.entry();
            entry_5585.string(item_5583);
        }
        list_5584.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(input: &crate::input::ModifyVpcPeeringConnectionOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcPeeringConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5586 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5587) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(scope_5586, var_5587)?;
    }
    #[allow(unused_mut)]let mut scope_5588 = writer.prefix("DryRun");
    if let Some(var_5589) = &input.dry_run {
        scope_5588.boolean(*var_5589);
    }
    #[allow(unused_mut)]let mut scope_5590 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5591) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(scope_5590, var_5591)?;
    }
    #[allow(unused_mut)]let mut scope_5592 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5593) = &input.vpc_peering_connection_id {
        scope_5592.string(var_5593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(input: &crate::input::ModifyVpcTenancyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5594 = writer.prefix("VpcId");
    if let Some(var_5595) = &input.vpc_id {
        scope_5594.string(var_5595);
    }
    #[allow(unused_mut)]let mut scope_5596 = writer.prefix("InstanceTenancy");
    if let Some(var_5597) = &input.instance_tenancy {
        scope_5596.string(var_5597.as_str());
    }
    #[allow(unused_mut)]let mut scope_5598 = writer.prefix("DryRun");
    if let Some(var_5599) = &input.dry_run {
        scope_5598.boolean(*var_5599);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(input: &crate::input::ModifyVpnConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5600 = writer.prefix("VpnConnectionId");
    if let Some(var_5601) = &input.vpn_connection_id {
        scope_5600.string(var_5601);
    }
    #[allow(unused_mut)]let mut scope_5602 = writer.prefix("TransitGatewayId");
    if let Some(var_5603) = &input.transit_gateway_id {
        scope_5602.string(var_5603);
    }
    #[allow(unused_mut)]let mut scope_5604 = writer.prefix("CustomerGatewayId");
    if let Some(var_5605) = &input.customer_gateway_id {
        scope_5604.string(var_5605);
    }
    #[allow(unused_mut)]let mut scope_5606 = writer.prefix("VpnGatewayId");
    if let Some(var_5607) = &input.vpn_gateway_id {
        scope_5606.string(var_5607);
    }
    #[allow(unused_mut)]let mut scope_5608 = writer.prefix("DryRun");
    if let Some(var_5609) = &input.dry_run {
        scope_5608.boolean(*var_5609);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(input: &crate::input::ModifyVpnConnectionOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5610 = writer.prefix("VpnConnectionId");
    if let Some(var_5611) = &input.vpn_connection_id {
        scope_5610.string(var_5611);
    }
    #[allow(unused_mut)]let mut scope_5612 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5613) = &input.local_ipv4_network_cidr {
        scope_5612.string(var_5613);
    }
    #[allow(unused_mut)]let mut scope_5614 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5615) = &input.remote_ipv4_network_cidr {
        scope_5614.string(var_5615);
    }
    #[allow(unused_mut)]let mut scope_5616 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5617) = &input.local_ipv6_network_cidr {
        scope_5616.string(var_5617);
    }
    #[allow(unused_mut)]let mut scope_5618 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5619) = &input.remote_ipv6_network_cidr {
        scope_5618.string(var_5619);
    }
    #[allow(unused_mut)]let mut scope_5620 = writer.prefix("DryRun");
    if let Some(var_5621) = &input.dry_run {
        scope_5620.boolean(*var_5621);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(input: &crate::input::ModifyVpnTunnelCertificateInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5622 = writer.prefix("VpnConnectionId");
    if let Some(var_5623) = &input.vpn_connection_id {
        scope_5622.string(var_5623);
    }
    #[allow(unused_mut)]let mut scope_5624 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5625) = &input.vpn_tunnel_outside_ip_address {
        scope_5624.string(var_5625);
    }
    #[allow(unused_mut)]let mut scope_5626 = writer.prefix("DryRun");
    if let Some(var_5627) = &input.dry_run {
        scope_5626.boolean(*var_5627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(input: &crate::input::ModifyVpnTunnelOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5628 = writer.prefix("VpnConnectionId");
    if let Some(var_5629) = &input.vpn_connection_id {
        scope_5628.string(var_5629);
    }
    #[allow(unused_mut)]let mut scope_5630 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5631) = &input.vpn_tunnel_outside_ip_address {
        scope_5630.string(var_5631);
    }
    #[allow(unused_mut)]let mut scope_5632 = writer.prefix("TunnelOptions");
    if let Some(var_5633) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(scope_5632, var_5633)?;
    }
    #[allow(unused_mut)]let mut scope_5634 = writer.prefix("DryRun");
    if let Some(var_5635) = &input.dry_run {
        scope_5634.boolean(*var_5635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(input: &crate::input::MonitorInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5636 = writer.prefix("InstanceId");
    if let Some(var_5637) = &input.instance_ids {
        let mut list_5639 = scope_5636.start_list(true, Some("InstanceId"));
        for item_5638 in var_5637 {
            #[allow(unused_mut)]let mut entry_5640 = list_5639.entry();
            entry_5640.string(item_5638);
        }
        list_5639.finish();
    }
    #[allow(unused_mut)]let mut scope_5641 = writer.prefix("DryRun");
    if let Some(var_5642) = &input.dry_run {
        scope_5641.boolean(*var_5642);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(input: &crate::input::MoveAddressToVpcInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5643 = writer.prefix("DryRun");
    if let Some(var_5644) = &input.dry_run {
        scope_5643.boolean(*var_5644);
    }
    #[allow(unused_mut)]let mut scope_5645 = writer.prefix("PublicIp");
    if let Some(var_5646) = &input.public_ip {
        scope_5645.string(var_5646);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(input: &crate::input::MoveByoipCidrToIpamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5647 = writer.prefix("DryRun");
    if let Some(var_5648) = &input.dry_run {
        scope_5647.boolean(*var_5648);
    }
    #[allow(unused_mut)]let mut scope_5649 = writer.prefix("Cidr");
    if let Some(var_5650) = &input.cidr {
        scope_5649.string(var_5650);
    }
    #[allow(unused_mut)]let mut scope_5651 = writer.prefix("IpamPoolId");
    if let Some(var_5652) = &input.ipam_pool_id {
        scope_5651.string(var_5652);
    }
    #[allow(unused_mut)]let mut scope_5653 = writer.prefix("IpamPoolOwner");
    if let Some(var_5654) = &input.ipam_pool_owner {
        scope_5653.string(var_5654);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(input: &crate::input::ProvisionByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5655 = writer.prefix("Cidr");
    if let Some(var_5656) = &input.cidr {
        scope_5655.string(var_5656);
    }
    #[allow(unused_mut)]let mut scope_5657 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5658) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(scope_5657, var_5658)?;
    }
    #[allow(unused_mut)]let mut scope_5659 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5660) = &input.publicly_advertisable {
        scope_5659.boolean(*var_5660);
    }
    #[allow(unused_mut)]let mut scope_5661 = writer.prefix("Description");
    if let Some(var_5662) = &input.description {
        scope_5661.string(var_5662);
    }
    #[allow(unused_mut)]let mut scope_5663 = writer.prefix("DryRun");
    if let Some(var_5664) = &input.dry_run {
        scope_5663.boolean(*var_5664);
    }
    #[allow(unused_mut)]let mut scope_5665 = writer.prefix("PoolTagSpecification");
    if let Some(var_5666) = &input.pool_tag_specifications {
        let mut list_5668 = scope_5665.start_list(true, Some("item"));
        for item_5667 in var_5666 {
            #[allow(unused_mut)]let mut entry_5669 = list_5668.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5669, item_5667)?;
        }
        list_5668.finish();
    }
    #[allow(unused_mut)]let mut scope_5670 = writer.prefix("MultiRegion");
    if let Some(var_5671) = &input.multi_region {
        scope_5670.boolean(*var_5671);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(input: &crate::input::ProvisionIpamPoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5672 = writer.prefix("DryRun");
    if let Some(var_5673) = &input.dry_run {
        scope_5672.boolean(*var_5673);
    }
    #[allow(unused_mut)]let mut scope_5674 = writer.prefix("IpamPoolId");
    if let Some(var_5675) = &input.ipam_pool_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]let mut scope_5676 = writer.prefix("Cidr");
    if let Some(var_5677) = &input.cidr {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]let mut scope_5678 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5679) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(scope_5678, var_5679)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(input: &crate::input::ProvisionPublicIpv4PoolCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5680 = writer.prefix("DryRun");
    if let Some(var_5681) = &input.dry_run {
        scope_5680.boolean(*var_5681);
    }
    #[allow(unused_mut)]let mut scope_5682 = writer.prefix("IpamPoolId");
    if let Some(var_5683) = &input.ipam_pool_id {
        scope_5682.string(var_5683);
    }
    #[allow(unused_mut)]let mut scope_5684 = writer.prefix("PoolId");
    if let Some(var_5685) = &input.pool_id {
        scope_5684.string(var_5685);
    }
    #[allow(unused_mut)]let mut scope_5686 = writer.prefix("NetmaskLength");
    if let Some(var_5687) = &input.netmask_length {
        scope_5686.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5687).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(input: &crate::input::PurchaseHostReservationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5688 = writer.prefix("ClientToken");
    if let Some(var_5689) = &input.client_token {
        scope_5688.string(var_5689);
    }
    #[allow(unused_mut)]let mut scope_5690 = writer.prefix("CurrencyCode");
    if let Some(var_5691) = &input.currency_code {
        scope_5690.string(var_5691.as_str());
    }
    #[allow(unused_mut)]let mut scope_5692 = writer.prefix("HostIdSet");
    if let Some(var_5693) = &input.host_id_set {
        let mut list_5695 = scope_5692.start_list(true, Some("item"));
        for item_5694 in var_5693 {
            #[allow(unused_mut)]let mut entry_5696 = list_5695.entry();
            entry_5696.string(item_5694);
        }
        list_5695.finish();
    }
    #[allow(unused_mut)]let mut scope_5697 = writer.prefix("LimitPrice");
    if let Some(var_5698) = &input.limit_price {
        scope_5697.string(var_5698);
    }
    #[allow(unused_mut)]let mut scope_5699 = writer.prefix("OfferingId");
    if let Some(var_5700) = &input.offering_id {
        scope_5699.string(var_5700);
    }
    #[allow(unused_mut)]let mut scope_5701 = writer.prefix("TagSpecification");
    if let Some(var_5702) = &input.tag_specifications {
        let mut list_5704 = scope_5701.start_list(true, Some("item"));
        for item_5703 in var_5702 {
            #[allow(unused_mut)]let mut entry_5705 = list_5704.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5705, item_5703)?;
        }
        list_5704.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(input: &crate::input::PurchaseReservedInstancesOfferingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedInstancesOffering", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5706 = writer.prefix("InstanceCount");
    if let Some(var_5707) = &input.instance_count {
        scope_5706.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5707).into()));
    }
    #[allow(unused_mut)]let mut scope_5708 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5709) = &input.reserved_instances_offering_id {
        scope_5708.string(var_5709);
    }
    #[allow(unused_mut)]let mut scope_5710 = writer.prefix("DryRun");
    if let Some(var_5711) = &input.dry_run {
        scope_5710.boolean(*var_5711);
    }
    #[allow(unused_mut)]let mut scope_5712 = writer.prefix("LimitPrice");
    if let Some(var_5713) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(scope_5712, var_5713)?;
    }
    #[allow(unused_mut)]let mut scope_5714 = writer.prefix("PurchaseTime");
    if let Some(var_5715) = &input.purchase_time {
        scope_5714.date_time(var_5715, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(input: &crate::input::PurchaseScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5716 = writer.prefix("ClientToken");
    if let Some(var_5717) = &input.client_token {
        scope_5716.string(var_5717);
    }
    #[allow(unused_mut)]let mut scope_5718 = writer.prefix("DryRun");
    if let Some(var_5719) = &input.dry_run {
        scope_5718.boolean(*var_5719);
    }
    #[allow(unused_mut)]let mut scope_5720 = writer.prefix("PurchaseRequest");
    if let Some(var_5721) = &input.purchase_requests {
        let mut list_5723 = scope_5720.start_list(true, Some("PurchaseRequest"));
        for item_5722 in var_5721 {
            #[allow(unused_mut)]let mut entry_5724 = list_5723.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(entry_5724, item_5722)?;
        }
        list_5723.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(input: &crate::input::RebootInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5725 = writer.prefix("InstanceId");
    if let Some(var_5726) = &input.instance_ids {
        let mut list_5728 = scope_5725.start_list(true, Some("InstanceId"));
        for item_5727 in var_5726 {
            #[allow(unused_mut)]let mut entry_5729 = list_5728.entry();
            entry_5729.string(item_5727);
        }
        list_5728.finish();
    }
    #[allow(unused_mut)]let mut scope_5730 = writer.prefix("DryRun");
    if let Some(var_5731) = &input.dry_run {
        scope_5730.boolean(*var_5731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(input: &crate::input::RegisterImageInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5732 = writer.prefix("ImageLocation");
    if let Some(var_5733) = &input.image_location {
        scope_5732.string(var_5733);
    }
    #[allow(unused_mut)]let mut scope_5734 = writer.prefix("Architecture");
    if let Some(var_5735) = &input.architecture {
        scope_5734.string(var_5735.as_str());
    }
    #[allow(unused_mut)]let mut scope_5736 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5737) = &input.block_device_mappings {
        let mut list_5739 = scope_5736.start_list(true, Some("BlockDeviceMapping"));
        for item_5738 in var_5737 {
            #[allow(unused_mut)]let mut entry_5740 = list_5739.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_5740, item_5738)?;
        }
        list_5739.finish();
    }
    #[allow(unused_mut)]let mut scope_5741 = writer.prefix("Description");
    if let Some(var_5742) = &input.description {
        scope_5741.string(var_5742);
    }
    #[allow(unused_mut)]let mut scope_5743 = writer.prefix("DryRun");
    if let Some(var_5744) = &input.dry_run {
        scope_5743.boolean(*var_5744);
    }
    #[allow(unused_mut)]let mut scope_5745 = writer.prefix("EnaSupport");
    if let Some(var_5746) = &input.ena_support {
        scope_5745.boolean(*var_5746);
    }
    #[allow(unused_mut)]let mut scope_5747 = writer.prefix("KernelId");
    if let Some(var_5748) = &input.kernel_id {
        scope_5747.string(var_5748);
    }
    #[allow(unused_mut)]let mut scope_5749 = writer.prefix("Name");
    if let Some(var_5750) = &input.name {
        scope_5749.string(var_5750);
    }
    #[allow(unused_mut)]let mut scope_5751 = writer.prefix("BillingProduct");
    if let Some(var_5752) = &input.billing_products {
        let mut list_5754 = scope_5751.start_list(true, Some("item"));
        for item_5753 in var_5752 {
            #[allow(unused_mut)]let mut entry_5755 = list_5754.entry();
            entry_5755.string(item_5753);
        }
        list_5754.finish();
    }
    #[allow(unused_mut)]let mut scope_5756 = writer.prefix("RamdiskId");
    if let Some(var_5757) = &input.ramdisk_id {
        scope_5756.string(var_5757);
    }
    #[allow(unused_mut)]let mut scope_5758 = writer.prefix("RootDeviceName");
    if let Some(var_5759) = &input.root_device_name {
        scope_5758.string(var_5759);
    }
    #[allow(unused_mut)]let mut scope_5760 = writer.prefix("SriovNetSupport");
    if let Some(var_5761) = &input.sriov_net_support {
        scope_5760.string(var_5761);
    }
    #[allow(unused_mut)]let mut scope_5762 = writer.prefix("VirtualizationType");
    if let Some(var_5763) = &input.virtualization_type {
        scope_5762.string(var_5763);
    }
    #[allow(unused_mut)]let mut scope_5764 = writer.prefix("BootMode");
    if let Some(var_5765) = &input.boot_mode {
        scope_5764.string(var_5765.as_str());
    }
    #[allow(unused_mut)]let mut scope_5766 = writer.prefix("TpmSupport");
    if let Some(var_5767) = &input.tpm_support {
        scope_5766.string(var_5767.as_str());
    }
    #[allow(unused_mut)]let mut scope_5768 = writer.prefix("UefiData");
    if let Some(var_5769) = &input.uefi_data {
        scope_5768.string(var_5769);
    }
    #[allow(unused_mut)]let mut scope_5770 = writer.prefix("ImdsSupport");
    if let Some(var_5771) = &input.imds_support {
        scope_5770.string(var_5771.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(input: &crate::input::RegisterInstanceEventNotificationAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterInstanceEventNotificationAttributes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5772 = writer.prefix("DryRun");
    if let Some(var_5773) = &input.dry_run {
        scope_5772.boolean(*var_5773);
    }
    #[allow(unused_mut)]let mut scope_5774 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5775) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(scope_5774, var_5775)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterTransitGatewayMulticastGroupMembers", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5776 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5777) = &input.transit_gateway_multicast_domain_id {
        scope_5776.string(var_5777);
    }
    #[allow(unused_mut)]let mut scope_5778 = writer.prefix("GroupIpAddress");
    if let Some(var_5779) = &input.group_ip_address {
        scope_5778.string(var_5779);
    }
    #[allow(unused_mut)]let mut scope_5780 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5781) = &input.network_interface_ids {
        let mut list_5783 = scope_5780.start_list(true, Some("item"));
        for item_5782 in var_5781 {
            #[allow(unused_mut)]let mut entry_5784 = list_5783.entry();
            entry_5784.string(item_5782);
        }
        list_5783.finish();
    }
    #[allow(unused_mut)]let mut scope_5785 = writer.prefix("DryRun");
    if let Some(var_5786) = &input.dry_run {
        scope_5785.boolean(*var_5786);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterTransitGatewayMulticastGroupSources", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5787 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5788) = &input.transit_gateway_multicast_domain_id {
        scope_5787.string(var_5788);
    }
    #[allow(unused_mut)]let mut scope_5789 = writer.prefix("GroupIpAddress");
    if let Some(var_5790) = &input.group_ip_address {
        scope_5789.string(var_5790);
    }
    #[allow(unused_mut)]let mut scope_5791 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5792) = &input.network_interface_ids {
        let mut list_5794 = scope_5791.start_list(true, Some("item"));
        for item_5793 in var_5792 {
            #[allow(unused_mut)]let mut entry_5795 = list_5794.entry();
            entry_5795.string(item_5793);
        }
        list_5794.finish();
    }
    #[allow(unused_mut)]let mut scope_5796 = writer.prefix("DryRun");
    if let Some(var_5797) = &input.dry_run {
        scope_5796.boolean(*var_5797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayMulticastDomainAssociations", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5798 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5799) = &input.transit_gateway_multicast_domain_id {
        scope_5798.string(var_5799);
    }
    #[allow(unused_mut)]let mut scope_5800 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5801) = &input.transit_gateway_attachment_id {
        scope_5800.string(var_5801);
    }
    #[allow(unused_mut)]let mut scope_5802 = writer.prefix("SubnetIds");
    if let Some(var_5803) = &input.subnet_ids {
        let mut list_5805 = scope_5802.start_list(true, Some("item"));
        for item_5804 in var_5803 {
            #[allow(unused_mut)]let mut entry_5806 = list_5805.entry();
            entry_5806.string(item_5804);
        }
        list_5805.finish();
    }
    #[allow(unused_mut)]let mut scope_5807 = writer.prefix("DryRun");
    if let Some(var_5808) = &input.dry_run {
        scope_5807.boolean(*var_5808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(input: &crate::input::RejectTransitGatewayPeeringAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayPeeringAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5809 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5810) = &input.transit_gateway_attachment_id {
        scope_5809.string(var_5810);
    }
    #[allow(unused_mut)]let mut scope_5811 = writer.prefix("DryRun");
    if let Some(var_5812) = &input.dry_run {
        scope_5811.boolean(*var_5812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(input: &crate::input::RejectTransitGatewayVpcAttachmentInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectTransitGatewayVpcAttachment", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5813 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5814) = &input.transit_gateway_attachment_id {
        scope_5813.string(var_5814);
    }
    #[allow(unused_mut)]let mut scope_5815 = writer.prefix("DryRun");
    if let Some(var_5816) = &input.dry_run {
        scope_5815.boolean(*var_5816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(input: &crate::input::RejectVpcEndpointConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5817 = writer.prefix("DryRun");
    if let Some(var_5818) = &input.dry_run {
        scope_5817.boolean(*var_5818);
    }
    #[allow(unused_mut)]let mut scope_5819 = writer.prefix("ServiceId");
    if let Some(var_5820) = &input.service_id {
        scope_5819.string(var_5820);
    }
    #[allow(unused_mut)]let mut scope_5821 = writer.prefix("VpcEndpointId");
    if let Some(var_5822) = &input.vpc_endpoint_ids {
        let mut list_5824 = scope_5821.start_list(true, Some("item"));
        for item_5823 in var_5822 {
            #[allow(unused_mut)]let mut entry_5825 = list_5824.entry();
            entry_5825.string(item_5823);
        }
        list_5824.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(input: &crate::input::RejectVpcPeeringConnectionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5826 = writer.prefix("DryRun");
    if let Some(var_5827) = &input.dry_run {
        scope_5826.boolean(*var_5827);
    }
    #[allow(unused_mut)]let mut scope_5828 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5829) = &input.vpc_peering_connection_id {
        scope_5828.string(var_5829);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(input: &crate::input::ReleaseAddressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5830 = writer.prefix("AllocationId");
    if let Some(var_5831) = &input.allocation_id {
        scope_5830.string(var_5831);
    }
    #[allow(unused_mut)]let mut scope_5832 = writer.prefix("PublicIp");
    if let Some(var_5833) = &input.public_ip {
        scope_5832.string(var_5833);
    }
    #[allow(unused_mut)]let mut scope_5834 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5835) = &input.network_border_group {
        scope_5834.string(var_5835);
    }
    #[allow(unused_mut)]let mut scope_5836 = writer.prefix("DryRun");
    if let Some(var_5837) = &input.dry_run {
        scope_5836.boolean(*var_5837);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(input: &crate::input::ReleaseHostsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5838 = writer.prefix("HostId");
    if let Some(var_5839) = &input.host_ids {
        let mut list_5841 = scope_5838.start_list(true, Some("item"));
        for item_5840 in var_5839 {
            #[allow(unused_mut)]let mut entry_5842 = list_5841.entry();
            entry_5842.string(item_5840);
        }
        list_5841.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(input: &crate::input::ReleaseIpamPoolAllocationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5843 = writer.prefix("DryRun");
    if let Some(var_5844) = &input.dry_run {
        scope_5843.boolean(*var_5844);
    }
    #[allow(unused_mut)]let mut scope_5845 = writer.prefix("IpamPoolId");
    if let Some(var_5846) = &input.ipam_pool_id {
        scope_5845.string(var_5846);
    }
    #[allow(unused_mut)]let mut scope_5847 = writer.prefix("Cidr");
    if let Some(var_5848) = &input.cidr {
        scope_5847.string(var_5848);
    }
    #[allow(unused_mut)]let mut scope_5849 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5850) = &input.ipam_pool_allocation_id {
        scope_5849.string(var_5850);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(input: &crate::input::ReplaceIamInstanceProfileAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceIamInstanceProfileAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5851 = writer.prefix("IamInstanceProfile");
    if let Some(var_5852) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_5851, var_5852)?;
    }
    #[allow(unused_mut)]let mut scope_5853 = writer.prefix("AssociationId");
    if let Some(var_5854) = &input.association_id {
        scope_5853.string(var_5854);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(input: &crate::input::ReplaceNetworkAclAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5855 = writer.prefix("AssociationId");
    if let Some(var_5856) = &input.association_id {
        scope_5855.string(var_5856);
    }
    #[allow(unused_mut)]let mut scope_5857 = writer.prefix("DryRun");
    if let Some(var_5858) = &input.dry_run {
        scope_5857.boolean(*var_5858);
    }
    #[allow(unused_mut)]let mut scope_5859 = writer.prefix("NetworkAclId");
    if let Some(var_5860) = &input.network_acl_id {
        scope_5859.string(var_5860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(input: &crate::input::ReplaceNetworkAclEntryInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5861 = writer.prefix("CidrBlock");
    if let Some(var_5862) = &input.cidr_block {
        scope_5861.string(var_5862);
    }
    #[allow(unused_mut)]let mut scope_5863 = writer.prefix("DryRun");
    if let Some(var_5864) = &input.dry_run {
        scope_5863.boolean(*var_5864);
    }
    #[allow(unused_mut)]let mut scope_5865 = writer.prefix("Egress");
    if let Some(var_5866) = &input.egress {
        scope_5865.boolean(*var_5866);
    }
    #[allow(unused_mut)]let mut scope_5867 = writer.prefix("Icmp");
    if let Some(var_5868) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5867, var_5868)?;
    }
    #[allow(unused_mut)]let mut scope_5869 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5870) = &input.ipv6_cidr_block {
        scope_5869.string(var_5870);
    }
    #[allow(unused_mut)]let mut scope_5871 = writer.prefix("NetworkAclId");
    if let Some(var_5872) = &input.network_acl_id {
        scope_5871.string(var_5872);
    }
    #[allow(unused_mut)]let mut scope_5873 = writer.prefix("PortRange");
    if let Some(var_5874) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5873, var_5874)?;
    }
    #[allow(unused_mut)]let mut scope_5875 = writer.prefix("Protocol");
    if let Some(var_5876) = &input.protocol {
        scope_5875.string(var_5876);
    }
    #[allow(unused_mut)]let mut scope_5877 = writer.prefix("RuleAction");
    if let Some(var_5878) = &input.rule_action {
        scope_5877.string(var_5878.as_str());
    }
    #[allow(unused_mut)]let mut scope_5879 = writer.prefix("RuleNumber");
    if let Some(var_5880) = &input.rule_number {
        scope_5879.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5880).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(input: &crate::input::ReplaceRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5881 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5882) = &input.destination_cidr_block {
        scope_5881.string(var_5882);
    }
    #[allow(unused_mut)]let mut scope_5883 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5884) = &input.destination_ipv6_cidr_block {
        scope_5883.string(var_5884);
    }
    #[allow(unused_mut)]let mut scope_5885 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5886) = &input.destination_prefix_list_id {
        scope_5885.string(var_5886);
    }
    #[allow(unused_mut)]let mut scope_5887 = writer.prefix("DryRun");
    if let Some(var_5888) = &input.dry_run {
        scope_5887.boolean(*var_5888);
    }
    #[allow(unused_mut)]let mut scope_5889 = writer.prefix("VpcEndpointId");
    if let Some(var_5890) = &input.vpc_endpoint_id {
        scope_5889.string(var_5890);
    }
    #[allow(unused_mut)]let mut scope_5891 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5892) = &input.egress_only_internet_gateway_id {
        scope_5891.string(var_5892);
    }
    #[allow(unused_mut)]let mut scope_5893 = writer.prefix("GatewayId");
    if let Some(var_5894) = &input.gateway_id {
        scope_5893.string(var_5894);
    }
    #[allow(unused_mut)]let mut scope_5895 = writer.prefix("InstanceId");
    if let Some(var_5896) = &input.instance_id {
        scope_5895.string(var_5896);
    }
    #[allow(unused_mut)]let mut scope_5897 = writer.prefix("LocalTarget");
    if let Some(var_5898) = &input.local_target {
        scope_5897.boolean(*var_5898);
    }
    #[allow(unused_mut)]let mut scope_5899 = writer.prefix("NatGatewayId");
    if let Some(var_5900) = &input.nat_gateway_id {
        scope_5899.string(var_5900);
    }
    #[allow(unused_mut)]let mut scope_5901 = writer.prefix("TransitGatewayId");
    if let Some(var_5902) = &input.transit_gateway_id {
        scope_5901.string(var_5902);
    }
    #[allow(unused_mut)]let mut scope_5903 = writer.prefix("LocalGatewayId");
    if let Some(var_5904) = &input.local_gateway_id {
        scope_5903.string(var_5904);
    }
    #[allow(unused_mut)]let mut scope_5905 = writer.prefix("CarrierGatewayId");
    if let Some(var_5906) = &input.carrier_gateway_id {
        scope_5905.string(var_5906);
    }
    #[allow(unused_mut)]let mut scope_5907 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5908) = &input.network_interface_id {
        scope_5907.string(var_5908);
    }
    #[allow(unused_mut)]let mut scope_5909 = writer.prefix("RouteTableId");
    if let Some(var_5910) = &input.route_table_id {
        scope_5909.string(var_5910);
    }
    #[allow(unused_mut)]let mut scope_5911 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5912) = &input.vpc_peering_connection_id {
        scope_5911.string(var_5912);
    }
    #[allow(unused_mut)]let mut scope_5913 = writer.prefix("CoreNetworkArn");
    if let Some(var_5914) = &input.core_network_arn {
        scope_5913.string(var_5914);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(input: &crate::input::ReplaceRouteTableAssociationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5915 = writer.prefix("AssociationId");
    if let Some(var_5916) = &input.association_id {
        scope_5915.string(var_5916);
    }
    #[allow(unused_mut)]let mut scope_5917 = writer.prefix("DryRun");
    if let Some(var_5918) = &input.dry_run {
        scope_5917.boolean(*var_5918);
    }
    #[allow(unused_mut)]let mut scope_5919 = writer.prefix("RouteTableId");
    if let Some(var_5920) = &input.route_table_id {
        scope_5919.string(var_5920);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(input: &crate::input::ReplaceTransitGatewayRouteInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5921 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5922) = &input.destination_cidr_block {
        scope_5921.string(var_5922);
    }
    #[allow(unused_mut)]let mut scope_5923 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5924) = &input.transit_gateway_route_table_id {
        scope_5923.string(var_5924);
    }
    #[allow(unused_mut)]let mut scope_5925 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5926) = &input.transit_gateway_attachment_id {
        scope_5925.string(var_5926);
    }
    #[allow(unused_mut)]let mut scope_5927 = writer.prefix("Blackhole");
    if let Some(var_5928) = &input.blackhole {
        scope_5927.boolean(*var_5928);
    }
    #[allow(unused_mut)]let mut scope_5929 = writer.prefix("DryRun");
    if let Some(var_5930) = &input.dry_run {
        scope_5929.boolean(*var_5930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(input: &crate::input::ReportInstanceStatusInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5931 = writer.prefix("Description");
    if let Some(var_5932) = &input.description {
        scope_5931.string(var_5932);
    }
    #[allow(unused_mut)]let mut scope_5933 = writer.prefix("DryRun");
    if let Some(var_5934) = &input.dry_run {
        scope_5933.boolean(*var_5934);
    }
    #[allow(unused_mut)]let mut scope_5935 = writer.prefix("EndTime");
    if let Some(var_5936) = &input.end_time {
        scope_5935.date_time(var_5936, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_5937 = writer.prefix("InstanceId");
    if let Some(var_5938) = &input.instances {
        let mut list_5940 = scope_5937.start_list(true, Some("InstanceId"));
        for item_5939 in var_5938 {
            #[allow(unused_mut)]let mut entry_5941 = list_5940.entry();
            entry_5941.string(item_5939);
        }
        list_5940.finish();
    }
    #[allow(unused_mut)]let mut scope_5942 = writer.prefix("ReasonCode");
    if let Some(var_5943) = &input.reason_codes {
        let mut list_5945 = scope_5942.start_list(true, Some("item"));
        for item_5944 in var_5943 {
            #[allow(unused_mut)]let mut entry_5946 = list_5945.entry();
            entry_5946.string(item_5944.as_str());
        }
        list_5945.finish();
    }
    #[allow(unused_mut)]let mut scope_5947 = writer.prefix("StartTime");
    if let Some(var_5948) = &input.start_time {
        scope_5947.date_time(var_5948, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_5949 = writer.prefix("Status");
    if let Some(var_5950) = &input.status {
        scope_5949.string(var_5950.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(input: &crate::input::RequestSpotFleetInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5951 = writer.prefix("DryRun");
    if let Some(var_5952) = &input.dry_run {
        scope_5951.boolean(*var_5952);
    }
    #[allow(unused_mut)]let mut scope_5953 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5954) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(scope_5953, var_5954)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(input: &crate::input::RequestSpotInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5955 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5956) = &input.availability_zone_group {
        scope_5955.string(var_5956);
    }
    #[allow(unused_mut)]let mut scope_5957 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5958) = &input.block_duration_minutes {
        scope_5957.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5958).into()));
    }
    #[allow(unused_mut)]let mut scope_5959 = writer.prefix("ClientToken");
    if let Some(var_5960) = &input.client_token {
        scope_5959.string(var_5960);
    }
    #[allow(unused_mut)]let mut scope_5961 = writer.prefix("DryRun");
    if let Some(var_5962) = &input.dry_run {
        scope_5961.boolean(*var_5962);
    }
    #[allow(unused_mut)]let mut scope_5963 = writer.prefix("InstanceCount");
    if let Some(var_5964) = &input.instance_count {
        scope_5963.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_5964).into()));
    }
    #[allow(unused_mut)]let mut scope_5965 = writer.prefix("LaunchGroup");
    if let Some(var_5966) = &input.launch_group {
        scope_5965.string(var_5966);
    }
    #[allow(unused_mut)]let mut scope_5967 = writer.prefix("LaunchSpecification");
    if let Some(var_5968) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(scope_5967, var_5968)?;
    }
    #[allow(unused_mut)]let mut scope_5969 = writer.prefix("SpotPrice");
    if let Some(var_5970) = &input.spot_price {
        scope_5969.string(var_5970);
    }
    #[allow(unused_mut)]let mut scope_5971 = writer.prefix("Type");
    if let Some(var_5972) = &input.r#type {
        scope_5971.string(var_5972.as_str());
    }
    #[allow(unused_mut)]let mut scope_5973 = writer.prefix("ValidFrom");
    if let Some(var_5974) = &input.valid_from {
        scope_5973.date_time(var_5974, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_5975 = writer.prefix("ValidUntil");
    if let Some(var_5976) = &input.valid_until {
        scope_5975.date_time(var_5976, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_5977 = writer.prefix("TagSpecification");
    if let Some(var_5978) = &input.tag_specifications {
        let mut list_5980 = scope_5977.start_list(true, Some("item"));
        for item_5979 in var_5978 {
            #[allow(unused_mut)]let mut entry_5981 = list_5980.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_5981, item_5979)?;
        }
        list_5980.finish();
    }
    #[allow(unused_mut)]let mut scope_5982 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5983) = &input.instance_interruption_behavior {
        scope_5982.string(var_5983.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(input: &crate::input::ResetAddressAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5984 = writer.prefix("AllocationId");
    if let Some(var_5985) = &input.allocation_id {
        scope_5984.string(var_5985);
    }
    #[allow(unused_mut)]let mut scope_5986 = writer.prefix("Attribute");
    if let Some(var_5987) = &input.attribute {
        scope_5986.string(var_5987.as_str());
    }
    #[allow(unused_mut)]let mut scope_5988 = writer.prefix("DryRun");
    if let Some(var_5989) = &input.dry_run {
        scope_5988.boolean(*var_5989);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(input: &crate::input::ResetEbsDefaultKmsKeyIdInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5990 = writer.prefix("DryRun");
    if let Some(var_5991) = &input.dry_run {
        scope_5990.boolean(*var_5991);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(input: &crate::input::ResetFpgaImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5992 = writer.prefix("DryRun");
    if let Some(var_5993) = &input.dry_run {
        scope_5992.boolean(*var_5993);
    }
    #[allow(unused_mut)]let mut scope_5994 = writer.prefix("FpgaImageId");
    if let Some(var_5995) = &input.fpga_image_id {
        scope_5994.string(var_5995);
    }
    #[allow(unused_mut)]let mut scope_5996 = writer.prefix("Attribute");
    if let Some(var_5997) = &input.attribute {
        scope_5996.string(var_5997.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(input: &crate::input::ResetImageAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_5998 = writer.prefix("Attribute");
    if let Some(var_5999) = &input.attribute {
        scope_5998.string(var_5999.as_str());
    }
    #[allow(unused_mut)]let mut scope_6000 = writer.prefix("ImageId");
    if let Some(var_6001) = &input.image_id {
        scope_6000.string(var_6001);
    }
    #[allow(unused_mut)]let mut scope_6002 = writer.prefix("DryRun");
    if let Some(var_6003) = &input.dry_run {
        scope_6002.boolean(*var_6003);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(input: &crate::input::ResetInstanceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6004 = writer.prefix("Attribute");
    if let Some(var_6005) = &input.attribute {
        scope_6004.string(var_6005.as_str());
    }
    #[allow(unused_mut)]let mut scope_6006 = writer.prefix("DryRun");
    if let Some(var_6007) = &input.dry_run {
        scope_6006.boolean(*var_6007);
    }
    #[allow(unused_mut)]let mut scope_6008 = writer.prefix("InstanceId");
    if let Some(var_6009) = &input.instance_id {
        scope_6008.string(var_6009);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(input: &crate::input::ResetNetworkInterfaceAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetNetworkInterfaceAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6010 = writer.prefix("DryRun");
    if let Some(var_6011) = &input.dry_run {
        scope_6010.boolean(*var_6011);
    }
    #[allow(unused_mut)]let mut scope_6012 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6013) = &input.network_interface_id {
        scope_6012.string(var_6013);
    }
    #[allow(unused_mut)]let mut scope_6014 = writer.prefix("SourceDestCheck");
    if let Some(var_6015) = &input.source_dest_check {
        scope_6014.string(var_6015);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(input: &crate::input::ResetSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6016 = writer.prefix("Attribute");
    if let Some(var_6017) = &input.attribute {
        scope_6016.string(var_6017.as_str());
    }
    #[allow(unused_mut)]let mut scope_6018 = writer.prefix("SnapshotId");
    if let Some(var_6019) = &input.snapshot_id {
        scope_6018.string(var_6019);
    }
    #[allow(unused_mut)]let mut scope_6020 = writer.prefix("DryRun");
    if let Some(var_6021) = &input.dry_run {
        scope_6020.boolean(*var_6021);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(input: &crate::input::RestoreAddressToClassicInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6022 = writer.prefix("DryRun");
    if let Some(var_6023) = &input.dry_run {
        scope_6022.boolean(*var_6023);
    }
    #[allow(unused_mut)]let mut scope_6024 = writer.prefix("PublicIp");
    if let Some(var_6025) = &input.public_ip {
        scope_6024.string(var_6025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(input: &crate::input::RestoreImageFromRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6026 = writer.prefix("ImageId");
    if let Some(var_6027) = &input.image_id {
        scope_6026.string(var_6027);
    }
    #[allow(unused_mut)]let mut scope_6028 = writer.prefix("DryRun");
    if let Some(var_6029) = &input.dry_run {
        scope_6028.boolean(*var_6029);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(input: &crate::input::RestoreManagedPrefixListVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreManagedPrefixListVersion", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6030 = writer.prefix("DryRun");
    if let Some(var_6031) = &input.dry_run {
        scope_6030.boolean(*var_6031);
    }
    #[allow(unused_mut)]let mut scope_6032 = writer.prefix("PrefixListId");
    if let Some(var_6033) = &input.prefix_list_id {
        scope_6032.string(var_6033);
    }
    #[allow(unused_mut)]let mut scope_6034 = writer.prefix("PreviousVersion");
    if let Some(var_6035) = &input.previous_version {
        scope_6034.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6035).into()));
    }
    #[allow(unused_mut)]let mut scope_6036 = writer.prefix("CurrentVersion");
    if let Some(var_6037) = &input.current_version {
        scope_6036.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6037).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(input: &crate::input::RestoreSnapshotFromRecycleBinInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6038 = writer.prefix("SnapshotId");
    if let Some(var_6039) = &input.snapshot_id {
        scope_6038.string(var_6039);
    }
    #[allow(unused_mut)]let mut scope_6040 = writer.prefix("DryRun");
    if let Some(var_6041) = &input.dry_run {
        scope_6040.boolean(*var_6041);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(input: &crate::input::RestoreSnapshotTierInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6042 = writer.prefix("SnapshotId");
    if let Some(var_6043) = &input.snapshot_id {
        scope_6042.string(var_6043);
    }
    #[allow(unused_mut)]let mut scope_6044 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_6045) = &input.temporary_restore_days {
        scope_6044.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6045).into()));
    }
    #[allow(unused_mut)]let mut scope_6046 = writer.prefix("PermanentRestore");
    if let Some(var_6047) = &input.permanent_restore {
        scope_6046.boolean(*var_6047);
    }
    #[allow(unused_mut)]let mut scope_6048 = writer.prefix("DryRun");
    if let Some(var_6049) = &input.dry_run {
        scope_6048.boolean(*var_6049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(input: &crate::input::RevokeClientVpnIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6050 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6051) = &input.client_vpn_endpoint_id {
        scope_6050.string(var_6051);
    }
    #[allow(unused_mut)]let mut scope_6052 = writer.prefix("TargetNetworkCidr");
    if let Some(var_6053) = &input.target_network_cidr {
        scope_6052.string(var_6053);
    }
    #[allow(unused_mut)]let mut scope_6054 = writer.prefix("AccessGroupId");
    if let Some(var_6055) = &input.access_group_id {
        scope_6054.string(var_6055);
    }
    #[allow(unused_mut)]let mut scope_6056 = writer.prefix("RevokeAllGroups");
    if let Some(var_6057) = &input.revoke_all_groups {
        scope_6056.boolean(*var_6057);
    }
    #[allow(unused_mut)]let mut scope_6058 = writer.prefix("DryRun");
    if let Some(var_6059) = &input.dry_run {
        scope_6058.boolean(*var_6059);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(input: &crate::input::RevokeSecurityGroupEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6060 = writer.prefix("DryRun");
    if let Some(var_6061) = &input.dry_run {
        scope_6060.boolean(*var_6061);
    }
    #[allow(unused_mut)]let mut scope_6062 = writer.prefix("GroupId");
    if let Some(var_6063) = &input.group_id {
        scope_6062.string(var_6063);
    }
    #[allow(unused_mut)]let mut scope_6064 = writer.prefix("IpPermissions");
    if let Some(var_6065) = &input.ip_permissions {
        let mut list_6067 = scope_6064.start_list(true, Some("item"));
        for item_6066 in var_6065 {
            #[allow(unused_mut)]let mut entry_6068 = list_6067.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6068, item_6066)?;
        }
        list_6067.finish();
    }
    #[allow(unused_mut)]let mut scope_6069 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6070) = &input.security_group_rule_ids {
        let mut list_6072 = scope_6069.start_list(true, Some("item"));
        for item_6071 in var_6070 {
            #[allow(unused_mut)]let mut entry_6073 = list_6072.entry();
            entry_6073.string(item_6071);
        }
        list_6072.finish();
    }
    #[allow(unused_mut)]let mut scope_6074 = writer.prefix("CidrIp");
    if let Some(var_6075) = &input.cidr_ip {
        scope_6074.string(var_6075);
    }
    #[allow(unused_mut)]let mut scope_6076 = writer.prefix("FromPort");
    if let Some(var_6077) = &input.from_port {
        scope_6076.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6077).into()));
    }
    #[allow(unused_mut)]let mut scope_6078 = writer.prefix("IpProtocol");
    if let Some(var_6079) = &input.ip_protocol {
        scope_6078.string(var_6079);
    }
    #[allow(unused_mut)]let mut scope_6080 = writer.prefix("ToPort");
    if let Some(var_6081) = &input.to_port {
        scope_6080.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6081).into()));
    }
    #[allow(unused_mut)]let mut scope_6082 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6083) = &input.source_security_group_name {
        scope_6082.string(var_6083);
    }
    #[allow(unused_mut)]let mut scope_6084 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6085) = &input.source_security_group_owner_id {
        scope_6084.string(var_6085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(input: &crate::input::RevokeSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6086 = writer.prefix("CidrIp");
    if let Some(var_6087) = &input.cidr_ip {
        scope_6086.string(var_6087);
    }
    #[allow(unused_mut)]let mut scope_6088 = writer.prefix("FromPort");
    if let Some(var_6089) = &input.from_port {
        scope_6088.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6089).into()));
    }
    #[allow(unused_mut)]let mut scope_6090 = writer.prefix("GroupId");
    if let Some(var_6091) = &input.group_id {
        scope_6090.string(var_6091);
    }
    #[allow(unused_mut)]let mut scope_6092 = writer.prefix("GroupName");
    if let Some(var_6093) = &input.group_name {
        scope_6092.string(var_6093);
    }
    #[allow(unused_mut)]let mut scope_6094 = writer.prefix("IpPermissions");
    if let Some(var_6095) = &input.ip_permissions {
        let mut list_6097 = scope_6094.start_list(true, Some("item"));
        for item_6096 in var_6095 {
            #[allow(unused_mut)]let mut entry_6098 = list_6097.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6098, item_6096)?;
        }
        list_6097.finish();
    }
    #[allow(unused_mut)]let mut scope_6099 = writer.prefix("IpProtocol");
    if let Some(var_6100) = &input.ip_protocol {
        scope_6099.string(var_6100);
    }
    #[allow(unused_mut)]let mut scope_6101 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_6102) = &input.source_security_group_name {
        scope_6101.string(var_6102);
    }
    #[allow(unused_mut)]let mut scope_6103 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_6104) = &input.source_security_group_owner_id {
        scope_6103.string(var_6104);
    }
    #[allow(unused_mut)]let mut scope_6105 = writer.prefix("ToPort");
    if let Some(var_6106) = &input.to_port {
        scope_6105.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6106).into()));
    }
    #[allow(unused_mut)]let mut scope_6107 = writer.prefix("DryRun");
    if let Some(var_6108) = &input.dry_run {
        scope_6107.boolean(*var_6108);
    }
    #[allow(unused_mut)]let mut scope_6109 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_6110) = &input.security_group_rule_ids {
        let mut list_6112 = scope_6109.start_list(true, Some("item"));
        for item_6111 in var_6110 {
            #[allow(unused_mut)]let mut entry_6113 = list_6112.entry();
            entry_6113.string(item_6111);
        }
        list_6112.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(input: &crate::input::RunInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6114 = writer.prefix("BlockDeviceMapping");
    if let Some(var_6115) = &input.block_device_mappings {
        let mut list_6117 = scope_6114.start_list(true, Some("BlockDeviceMapping"));
        for item_6116 in var_6115 {
            #[allow(unused_mut)]let mut entry_6118 = list_6117.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_6118, item_6116)?;
        }
        list_6117.finish();
    }
    #[allow(unused_mut)]let mut scope_6119 = writer.prefix("ImageId");
    if let Some(var_6120) = &input.image_id {
        scope_6119.string(var_6120);
    }
    #[allow(unused_mut)]let mut scope_6121 = writer.prefix("InstanceType");
    if let Some(var_6122) = &input.instance_type {
        scope_6121.string(var_6122.as_str());
    }
    #[allow(unused_mut)]let mut scope_6123 = writer.prefix("Ipv6AddressCount");
    if let Some(var_6124) = &input.ipv6_address_count {
        scope_6123.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6124).into()));
    }
    #[allow(unused_mut)]let mut scope_6125 = writer.prefix("Ipv6Address");
    if let Some(var_6126) = &input.ipv6_addresses {
        let mut list_6128 = scope_6125.start_list(true, Some("item"));
        for item_6127 in var_6126 {
            #[allow(unused_mut)]let mut entry_6129 = list_6128.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_6129, item_6127)?;
        }
        list_6128.finish();
    }
    #[allow(unused_mut)]let mut scope_6130 = writer.prefix("KernelId");
    if let Some(var_6131) = &input.kernel_id {
        scope_6130.string(var_6131);
    }
    #[allow(unused_mut)]let mut scope_6132 = writer.prefix("KeyName");
    if let Some(var_6133) = &input.key_name {
        scope_6132.string(var_6133);
    }
    #[allow(unused_mut)]let mut scope_6134 = writer.prefix("MaxCount");
    if let Some(var_6135) = &input.max_count {
        scope_6134.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6135).into()));
    }
    #[allow(unused_mut)]let mut scope_6136 = writer.prefix("MinCount");
    if let Some(var_6137) = &input.min_count {
        scope_6136.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6137).into()));
    }
    #[allow(unused_mut)]let mut scope_6138 = writer.prefix("Monitoring");
    if let Some(var_6139) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(scope_6138, var_6139)?;
    }
    #[allow(unused_mut)]let mut scope_6140 = writer.prefix("Placement");
    if let Some(var_6141) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_6140, var_6141)?;
    }
    #[allow(unused_mut)]let mut scope_6142 = writer.prefix("RamdiskId");
    if let Some(var_6143) = &input.ramdisk_id {
        scope_6142.string(var_6143);
    }
    #[allow(unused_mut)]let mut scope_6144 = writer.prefix("SecurityGroupId");
    if let Some(var_6145) = &input.security_group_ids {
        let mut list_6147 = scope_6144.start_list(true, Some("SecurityGroupId"));
        for item_6146 in var_6145 {
            #[allow(unused_mut)]let mut entry_6148 = list_6147.entry();
            entry_6148.string(item_6146);
        }
        list_6147.finish();
    }
    #[allow(unused_mut)]let mut scope_6149 = writer.prefix("SecurityGroup");
    if let Some(var_6150) = &input.security_groups {
        let mut list_6152 = scope_6149.start_list(true, Some("SecurityGroup"));
        for item_6151 in var_6150 {
            #[allow(unused_mut)]let mut entry_6153 = list_6152.entry();
            entry_6153.string(item_6151);
        }
        list_6152.finish();
    }
    #[allow(unused_mut)]let mut scope_6154 = writer.prefix("SubnetId");
    if let Some(var_6155) = &input.subnet_id {
        scope_6154.string(var_6155);
    }
    #[allow(unused_mut)]let mut scope_6156 = writer.prefix("UserData");
    if let Some(var_6157) = &input.user_data {
        scope_6156.string(var_6157);
    }
    #[allow(unused_mut)]let mut scope_6158 = writer.prefix("AdditionalInfo");
    if let Some(var_6159) = &input.additional_info {
        scope_6158.string(var_6159);
    }
    #[allow(unused_mut)]let mut scope_6160 = writer.prefix("ClientToken");
    if let Some(var_6161) = &input.client_token {
        scope_6160.string(var_6161);
    }
    #[allow(unused_mut)]let mut scope_6162 = writer.prefix("DisableApiTermination");
    if let Some(var_6163) = &input.disable_api_termination {
        scope_6162.boolean(*var_6163);
    }
    #[allow(unused_mut)]let mut scope_6164 = writer.prefix("DryRun");
    if let Some(var_6165) = &input.dry_run {
        scope_6164.boolean(*var_6165);
    }
    #[allow(unused_mut)]let mut scope_6166 = writer.prefix("EbsOptimized");
    if let Some(var_6167) = &input.ebs_optimized {
        scope_6166.boolean(*var_6167);
    }
    #[allow(unused_mut)]let mut scope_6168 = writer.prefix("IamInstanceProfile");
    if let Some(var_6169) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_6168, var_6169)?;
    }
    #[allow(unused_mut)]let mut scope_6170 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_6171) = &input.instance_initiated_shutdown_behavior {
        scope_6170.string(var_6171.as_str());
    }
    #[allow(unused_mut)]let mut scope_6172 = writer.prefix("NetworkInterface");
    if let Some(var_6173) = &input.network_interfaces {
        let mut list_6175 = scope_6172.start_list(true, Some("item"));
        for item_6174 in var_6173 {
            #[allow(unused_mut)]let mut entry_6176 = list_6175.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_6176, item_6174)?;
        }
        list_6175.finish();
    }
    #[allow(unused_mut)]let mut scope_6177 = writer.prefix("PrivateIpAddress");
    if let Some(var_6178) = &input.private_ip_address {
        scope_6177.string(var_6178);
    }
    #[allow(unused_mut)]let mut scope_6179 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_6180) = &input.elastic_gpu_specification {
        let mut list_6182 = scope_6179.start_list(true, Some("item"));
        for item_6181 in var_6180 {
            #[allow(unused_mut)]let mut entry_6183 = list_6182.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(entry_6183, item_6181)?;
        }
        list_6182.finish();
    }
    #[allow(unused_mut)]let mut scope_6184 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_6185) = &input.elastic_inference_accelerators {
        let mut list_6187 = scope_6184.start_list(true, Some("item"));
        for item_6186 in var_6185 {
            #[allow(unused_mut)]let mut entry_6188 = list_6187.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(entry_6188, item_6186)?;
        }
        list_6187.finish();
    }
    #[allow(unused_mut)]let mut scope_6189 = writer.prefix("TagSpecification");
    if let Some(var_6190) = &input.tag_specifications {
        let mut list_6192 = scope_6189.start_list(true, Some("item"));
        for item_6191 in var_6190 {
            #[allow(unused_mut)]let mut entry_6193 = list_6192.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6193, item_6191)?;
        }
        list_6192.finish();
    }
    #[allow(unused_mut)]let mut scope_6194 = writer.prefix("LaunchTemplate");
    if let Some(var_6195) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(scope_6194, var_6195)?;
    }
    #[allow(unused_mut)]let mut scope_6196 = writer.prefix("InstanceMarketOptions");
    if let Some(var_6197) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(scope_6196, var_6197)?;
    }
    #[allow(unused_mut)]let mut scope_6198 = writer.prefix("CreditSpecification");
    if let Some(var_6199) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(scope_6198, var_6199)?;
    }
    #[allow(unused_mut)]let mut scope_6200 = writer.prefix("CpuOptions");
    if let Some(var_6201) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(scope_6200, var_6201)?;
    }
    #[allow(unused_mut)]let mut scope_6202 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_6203) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(scope_6202, var_6203)?;
    }
    #[allow(unused_mut)]let mut scope_6204 = writer.prefix("HibernationOptions");
    if let Some(var_6205) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(scope_6204, var_6205)?;
    }
    #[allow(unused_mut)]let mut scope_6206 = writer.prefix("LicenseSpecification");
    if let Some(var_6207) = &input.license_specifications {
        let mut list_6209 = scope_6206.start_list(true, Some("item"));
        for item_6208 in var_6207 {
            #[allow(unused_mut)]let mut entry_6210 = list_6209.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(entry_6210, item_6208)?;
        }
        list_6209.finish();
    }
    #[allow(unused_mut)]let mut scope_6211 = writer.prefix("MetadataOptions");
    if let Some(var_6212) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(scope_6211, var_6212)?;
    }
    #[allow(unused_mut)]let mut scope_6213 = writer.prefix("EnclaveOptions");
    if let Some(var_6214) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(scope_6213, var_6214)?;
    }
    #[allow(unused_mut)]let mut scope_6215 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_6216) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(scope_6215, var_6216)?;
    }
    #[allow(unused_mut)]let mut scope_6217 = writer.prefix("MaintenanceOptions");
    if let Some(var_6218) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(scope_6217, var_6218)?;
    }
    #[allow(unused_mut)]let mut scope_6219 = writer.prefix("DisableApiStop");
    if let Some(var_6220) = &input.disable_api_stop {
        scope_6219.boolean(*var_6220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(input: &crate::input::RunScheduledInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6221 = writer.prefix("ClientToken");
    if let Some(var_6222) = &input.client_token {
        scope_6221.string(var_6222);
    }
    #[allow(unused_mut)]let mut scope_6223 = writer.prefix("DryRun");
    if let Some(var_6224) = &input.dry_run {
        scope_6223.boolean(*var_6224);
    }
    #[allow(unused_mut)]let mut scope_6225 = writer.prefix("InstanceCount");
    if let Some(var_6226) = &input.instance_count {
        scope_6225.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6226).into()));
    }
    #[allow(unused_mut)]let mut scope_6227 = writer.prefix("LaunchSpecification");
    if let Some(var_6228) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(scope_6227, var_6228)?;
    }
    #[allow(unused_mut)]let mut scope_6229 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6230) = &input.scheduled_instance_id {
        scope_6229.string(var_6230);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(input: &crate::input::SearchLocalGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6231 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6232) = &input.local_gateway_route_table_id {
        scope_6231.string(var_6232);
    }
    #[allow(unused_mut)]let mut scope_6233 = writer.prefix("Filter");
    if let Some(var_6234) = &input.filters {
        let mut list_6236 = scope_6233.start_list(true, Some("Filter"));
        for item_6235 in var_6234 {
            #[allow(unused_mut)]let mut entry_6237 = list_6236.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6237, item_6235)?;
        }
        list_6236.finish();
    }
    #[allow(unused_mut)]let mut scope_6238 = writer.prefix("MaxResults");
    if let Some(var_6239) = &input.max_results {
        scope_6238.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6239).into()));
    }
    #[allow(unused_mut)]let mut scope_6240 = writer.prefix("NextToken");
    if let Some(var_6241) = &input.next_token {
        scope_6240.string(var_6241);
    }
    #[allow(unused_mut)]let mut scope_6242 = writer.prefix("DryRun");
    if let Some(var_6243) = &input.dry_run {
        scope_6242.boolean(*var_6243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(input: &crate::input::SearchTransitGatewayMulticastGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayMulticastGroups", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6244 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6245) = &input.transit_gateway_multicast_domain_id {
        scope_6244.string(var_6245);
    }
    #[allow(unused_mut)]let mut scope_6246 = writer.prefix("Filter");
    if let Some(var_6247) = &input.filters {
        let mut list_6249 = scope_6246.start_list(true, Some("Filter"));
        for item_6248 in var_6247 {
            #[allow(unused_mut)]let mut entry_6250 = list_6249.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6250, item_6248)?;
        }
        list_6249.finish();
    }
    #[allow(unused_mut)]let mut scope_6251 = writer.prefix("MaxResults");
    if let Some(var_6252) = &input.max_results {
        scope_6251.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6252).into()));
    }
    #[allow(unused_mut)]let mut scope_6253 = writer.prefix("NextToken");
    if let Some(var_6254) = &input.next_token {
        scope_6253.string(var_6254);
    }
    #[allow(unused_mut)]let mut scope_6255 = writer.prefix("DryRun");
    if let Some(var_6256) = &input.dry_run {
        scope_6255.boolean(*var_6256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(input: &crate::input::SearchTransitGatewayRoutesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6257 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6258) = &input.transit_gateway_route_table_id {
        scope_6257.string(var_6258);
    }
    #[allow(unused_mut)]let mut scope_6259 = writer.prefix("Filter");
    if let Some(var_6260) = &input.filters {
        let mut list_6262 = scope_6259.start_list(true, Some("Filter"));
        for item_6261 in var_6260 {
            #[allow(unused_mut)]let mut entry_6263 = list_6262.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6263, item_6261)?;
        }
        list_6262.finish();
    }
    #[allow(unused_mut)]let mut scope_6264 = writer.prefix("MaxResults");
    if let Some(var_6265) = &input.max_results {
        scope_6264.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_6265).into()));
    }
    #[allow(unused_mut)]let mut scope_6266 = writer.prefix("DryRun");
    if let Some(var_6267) = &input.dry_run {
        scope_6266.boolean(*var_6267);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(input: &crate::input::SendDiagnosticInterruptInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6268 = writer.prefix("InstanceId");
    if let Some(var_6269) = &input.instance_id {
        scope_6268.string(var_6269);
    }
    #[allow(unused_mut)]let mut scope_6270 = writer.prefix("DryRun");
    if let Some(var_6271) = &input.dry_run {
        scope_6270.boolean(*var_6271);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(input: &crate::input::StartInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6272 = writer.prefix("InstanceId");
    if let Some(var_6273) = &input.instance_ids {
        let mut list_6275 = scope_6272.start_list(true, Some("InstanceId"));
        for item_6274 in var_6273 {
            #[allow(unused_mut)]let mut entry_6276 = list_6275.entry();
            entry_6276.string(item_6274);
        }
        list_6275.finish();
    }
    #[allow(unused_mut)]let mut scope_6277 = writer.prefix("AdditionalInfo");
    if let Some(var_6278) = &input.additional_info {
        scope_6277.string(var_6278);
    }
    #[allow(unused_mut)]let mut scope_6279 = writer.prefix("DryRun");
    if let Some(var_6280) = &input.dry_run {
        scope_6279.boolean(*var_6280);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAccessScopeAnalysis", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6281 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6282) = &input.network_insights_access_scope_id {
        scope_6281.string(var_6282);
    }
    #[allow(unused_mut)]let mut scope_6283 = writer.prefix("DryRun");
    if let Some(var_6284) = &input.dry_run {
        scope_6283.boolean(*var_6284);
    }
    #[allow(unused_mut)]let mut scope_6285 = writer.prefix("TagSpecification");
    if let Some(var_6286) = &input.tag_specifications {
        let mut list_6288 = scope_6285.start_list(true, Some("item"));
        for item_6287 in var_6286 {
            #[allow(unused_mut)]let mut entry_6289 = list_6288.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6289, item_6287)?;
        }
        list_6288.finish();
    }
    #[allow(unused_mut)]let mut scope_6290 = writer.prefix("ClientToken");
    if let Some(var_6291) = &input.client_token {
        scope_6290.string(var_6291);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(input: &crate::input::StartNetworkInsightsAnalysisInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6292 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6293) = &input.network_insights_path_id {
        scope_6292.string(var_6293);
    }
    #[allow(unused_mut)]let mut scope_6294 = writer.prefix("FilterInArn");
    if let Some(var_6295) = &input.filter_in_arns {
        let mut list_6297 = scope_6294.start_list(true, Some("item"));
        for item_6296 in var_6295 {
            #[allow(unused_mut)]let mut entry_6298 = list_6297.entry();
            entry_6298.string(item_6296);
        }
        list_6297.finish();
    }
    #[allow(unused_mut)]let mut scope_6299 = writer.prefix("DryRun");
    if let Some(var_6300) = &input.dry_run {
        scope_6299.boolean(*var_6300);
    }
    #[allow(unused_mut)]let mut scope_6301 = writer.prefix("TagSpecification");
    if let Some(var_6302) = &input.tag_specifications {
        let mut list_6304 = scope_6301.start_list(true, Some("item"));
        for item_6303 in var_6302 {
            #[allow(unused_mut)]let mut entry_6305 = list_6304.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_6305, item_6303)?;
        }
        list_6304.finish();
    }
    #[allow(unused_mut)]let mut scope_6306 = writer.prefix("ClientToken");
    if let Some(var_6307) = &input.client_token {
        scope_6306.string(var_6307);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartVpcEndpointServicePrivateDnsVerification", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6308 = writer.prefix("DryRun");
    if let Some(var_6309) = &input.dry_run {
        scope_6308.boolean(*var_6309);
    }
    #[allow(unused_mut)]let mut scope_6310 = writer.prefix("ServiceId");
    if let Some(var_6311) = &input.service_id {
        scope_6310.string(var_6311);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(input: &crate::input::StopInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6312 = writer.prefix("InstanceId");
    if let Some(var_6313) = &input.instance_ids {
        let mut list_6315 = scope_6312.start_list(true, Some("InstanceId"));
        for item_6314 in var_6313 {
            #[allow(unused_mut)]let mut entry_6316 = list_6315.entry();
            entry_6316.string(item_6314);
        }
        list_6315.finish();
    }
    #[allow(unused_mut)]let mut scope_6317 = writer.prefix("Hibernate");
    if let Some(var_6318) = &input.hibernate {
        scope_6317.boolean(*var_6318);
    }
    #[allow(unused_mut)]let mut scope_6319 = writer.prefix("DryRun");
    if let Some(var_6320) = &input.dry_run {
        scope_6319.boolean(*var_6320);
    }
    #[allow(unused_mut)]let mut scope_6321 = writer.prefix("Force");
    if let Some(var_6322) = &input.force {
        scope_6321.boolean(*var_6322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(input: &crate::input::TerminateClientVpnConnectionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6323 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6324) = &input.client_vpn_endpoint_id {
        scope_6323.string(var_6324);
    }
    #[allow(unused_mut)]let mut scope_6325 = writer.prefix("ConnectionId");
    if let Some(var_6326) = &input.connection_id {
        scope_6325.string(var_6326);
    }
    #[allow(unused_mut)]let mut scope_6327 = writer.prefix("Username");
    if let Some(var_6328) = &input.username {
        scope_6327.string(var_6328);
    }
    #[allow(unused_mut)]let mut scope_6329 = writer.prefix("DryRun");
    if let Some(var_6330) = &input.dry_run {
        scope_6329.boolean(*var_6330);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(input: &crate::input::TerminateInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6331 = writer.prefix("InstanceId");
    if let Some(var_6332) = &input.instance_ids {
        let mut list_6334 = scope_6331.start_list(true, Some("InstanceId"));
        for item_6333 in var_6332 {
            #[allow(unused_mut)]let mut entry_6335 = list_6334.entry();
            entry_6335.string(item_6333);
        }
        list_6334.finish();
    }
    #[allow(unused_mut)]let mut scope_6336 = writer.prefix("DryRun");
    if let Some(var_6337) = &input.dry_run {
        scope_6336.boolean(*var_6337);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(input: &crate::input::UnassignIpv6AddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6338 = writer.prefix("Ipv6Addresses");
    if let Some(var_6339) = &input.ipv6_addresses {
        let mut list_6341 = scope_6338.start_list(true, Some("item"));
        for item_6340 in var_6339 {
            #[allow(unused_mut)]let mut entry_6342 = list_6341.entry();
            entry_6342.string(item_6340);
        }
        list_6341.finish();
    }
    #[allow(unused_mut)]let mut scope_6343 = writer.prefix("Ipv6Prefix");
    if let Some(var_6344) = &input.ipv6_prefixes {
        let mut list_6346 = scope_6343.start_list(true, Some("item"));
        for item_6345 in var_6344 {
            #[allow(unused_mut)]let mut entry_6347 = list_6346.entry();
            entry_6347.string(item_6345);
        }
        list_6346.finish();
    }
    #[allow(unused_mut)]let mut scope_6348 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6349) = &input.network_interface_id {
        scope_6348.string(var_6349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(input: &crate::input::UnassignPrivateIpAddressesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6350 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6351) = &input.network_interface_id {
        scope_6350.string(var_6351);
    }
    #[allow(unused_mut)]let mut scope_6352 = writer.prefix("PrivateIpAddress");
    if let Some(var_6353) = &input.private_ip_addresses {
        let mut list_6355 = scope_6352.start_list(true, Some("PrivateIpAddress"));
        for item_6354 in var_6353 {
            #[allow(unused_mut)]let mut entry_6356 = list_6355.entry();
            entry_6356.string(item_6354);
        }
        list_6355.finish();
    }
    #[allow(unused_mut)]let mut scope_6357 = writer.prefix("Ipv4Prefix");
    if let Some(var_6358) = &input.ipv4_prefixes {
        let mut list_6360 = scope_6357.start_list(true, Some("item"));
        for item_6359 in var_6358 {
            #[allow(unused_mut)]let mut entry_6361 = list_6360.entry();
            entry_6361.string(item_6359);
        }
        list_6360.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(input: &crate::input::UnmonitorInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6362 = writer.prefix("InstanceId");
    if let Some(var_6363) = &input.instance_ids {
        let mut list_6365 = scope_6362.start_list(true, Some("InstanceId"));
        for item_6364 in var_6363 {
            #[allow(unused_mut)]let mut entry_6366 = list_6365.entry();
            entry_6366.string(item_6364);
        }
        list_6365.finish();
    }
    #[allow(unused_mut)]let mut scope_6367 = writer.prefix("DryRun");
    if let Some(var_6368) = &input.dry_run {
        scope_6367.boolean(*var_6368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateSecurityGroupRuleDescriptionsEgress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6369 = writer.prefix("DryRun");
    if let Some(var_6370) = &input.dry_run {
        scope_6369.boolean(*var_6370);
    }
    #[allow(unused_mut)]let mut scope_6371 = writer.prefix("GroupId");
    if let Some(var_6372) = &input.group_id {
        scope_6371.string(var_6372);
    }
    #[allow(unused_mut)]let mut scope_6373 = writer.prefix("GroupName");
    if let Some(var_6374) = &input.group_name {
        scope_6373.string(var_6374);
    }
    #[allow(unused_mut)]let mut scope_6375 = writer.prefix("IpPermissions");
    if let Some(var_6376) = &input.ip_permissions {
        let mut list_6378 = scope_6375.start_list(true, Some("item"));
        for item_6377 in var_6376 {
            #[allow(unused_mut)]let mut entry_6379 = list_6378.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6379, item_6377)?;
        }
        list_6378.finish();
    }
    #[allow(unused_mut)]let mut scope_6380 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6381) = &input.security_group_rule_descriptions {
        let mut list_6383 = scope_6380.start_list(true, Some("item"));
        for item_6382 in var_6381 {
            #[allow(unused_mut)]let mut entry_6384 = list_6383.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(entry_6384, item_6382)?;
        }
        list_6383.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UpdateSecurityGroupRuleDescriptionsIngress", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6385 = writer.prefix("DryRun");
    if let Some(var_6386) = &input.dry_run {
        scope_6385.boolean(*var_6386);
    }
    #[allow(unused_mut)]let mut scope_6387 = writer.prefix("GroupId");
    if let Some(var_6388) = &input.group_id {
        scope_6387.string(var_6388);
    }
    #[allow(unused_mut)]let mut scope_6389 = writer.prefix("GroupName");
    if let Some(var_6390) = &input.group_name {
        scope_6389.string(var_6390);
    }
    #[allow(unused_mut)]let mut scope_6391 = writer.prefix("IpPermissions");
    if let Some(var_6392) = &input.ip_permissions {
        let mut list_6394 = scope_6391.start_list(true, Some("item"));
        for item_6393 in var_6392 {
            #[allow(unused_mut)]let mut entry_6395 = list_6394.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6395, item_6393)?;
        }
        list_6394.finish();
    }
    #[allow(unused_mut)]let mut scope_6396 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6397) = &input.security_group_rule_descriptions {
        let mut list_6399 = scope_6396.start_list(true, Some("item"));
        for item_6398 in var_6397 {
            #[allow(unused_mut)]let mut entry_6400 = list_6399.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(entry_6400, item_6398)?;
        }
        list_6399.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(input: &crate::input::WithdrawByoipCidrInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]let mut scope_6401 = writer.prefix("Cidr");
    if let Some(var_6402) = &input.cidr {
        scope_6401.string(var_6402);
    }
    #[allow(unused_mut)]let mut scope_6403 = writer.prefix("DryRun");
    if let Some(var_6404) = &input.dry_run {
        scope_6403.boolean(*var_6404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

