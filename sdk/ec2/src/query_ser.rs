// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]pub fn serialize_structure_crate_model_tag_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TagSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("ResourceType");
    if let Some(var_2) = &input.resource_type {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("Tag");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(true, Some("item"));
        for item_5 in var_4 {
            #[allow(unused_mut)]let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_target_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_8 = writer.prefix("InstanceCount");
    if let Some(var_9) = &input.instance_count {
        scope_8.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_9).into()));
    }
    #[allow(unused_mut)]let mut scope_10 = writer.prefix("OfferingId");
    if let Some(var_11) = &input.offering_id {
        scope_10.string(var_11);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_iam_instance_profile_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IamInstanceProfileSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_event_window_association_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowAssociationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ip_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpPermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_32).into()));
    }
    #[allow(unused_mut)]let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_51).into()));
    }
    #[allow(unused_mut)]let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(entry_56, item_54)?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_storage(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Storage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservationFleetInstanceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_64).into()));
    }
    #[allow(unused_mut)]let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_72).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_client_vpn_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientVpnAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(scope_75, var_76)?;
    }
    #[allow(unused_mut)]let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(scope_77, var_78)?;
    }
    #[allow(unused_mut)]let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(scope_79, var_80)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_connection_log_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ConnectionLogOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_client_connect_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientConnectOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_client_login_banner_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientLoginBannerOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_new_dhcp_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NewDhcpConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_109).into()));
    }
    #[allow(unused_mut)]let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_115).into()));
    }
    #[allow(unused_mut)]let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_on_demand_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::OnDemandOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(scope_120, var_121)?;
    }
    #[allow(unused_mut)]let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_127).into()));
    }
    #[allow(unused_mut)]let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_launch_template_config_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateConfigRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_target_capacity_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetCapacitySpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_138).into()));
    }
    #[allow(unused_mut)]let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_140).into()));
    }
    #[allow(unused_mut)]let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_142).into()));
    }
    #[allow(unused_mut)]let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_destination_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DestinationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_storage_location(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::StorageLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_block_device_mapping(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BlockDeviceMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_event_window_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_168).into()));
    }
    #[allow(unused_mut)]let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_172).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_export_to_s3_task_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ExportToS3TaskSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_add_ipam_operating_region(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AddIpamOperatingRegion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_request_ipam_resource_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestIpamResourceTag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_request_launch_template_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestLaunchTemplateData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 = scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(scope_209, var_210)?;
    }
    #[allow(unused_mut)]let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(scope_211, var_212)?;
    }
    #[allow(unused_mut)]let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 = scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(entry_230, item_228)?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(scope_248, var_249)?;
    }
    #[allow(unused_mut)]let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(scope_250, var_251)?;
    }
    #[allow(unused_mut)]let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(scope_263, var_264)?;
    }
    #[allow(unused_mut)]let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_265, var_266)?;
    }
    #[allow(unused_mut)]let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]let mut scope_269 = writer.prefix("MaintenanceOptions");
    if let Some(var_270) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_269, var_270)?;
    }
    #[allow(unused_mut)]let mut scope_271 = writer.prefix("DisableApiStop");
    if let Some(var_272) = &input.disable_api_stop {
        scope_271.boolean(*var_272);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_add_prefix_list_entry(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AddPrefixListEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_273 = writer.prefix("Cidr");
    if let Some(var_274) = &input.cidr {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]let mut scope_275 = writer.prefix("Description");
    if let Some(var_276) = &input.description {
        scope_275.string(var_276);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_icmp_type_code(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IcmpTypeCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_277 = writer.prefix("Code");
    if let Some(var_278) = &input.code {
        scope_277.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_278).into()));
    }
    #[allow(unused_mut)]let mut scope_279 = writer.prefix("Type");
    if let Some(var_280) = &input.r#type {
        scope_279.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_280).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_port_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PortRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_281 = writer.prefix("From");
    if let Some(var_282) = &input.from {
        scope_281.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_282).into()));
    }
    #[allow(unused_mut)]let mut scope_283 = writer.prefix("To");
    if let Some(var_284) = &input.to {
        scope_283.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_284).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_access_scope_path_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AccessScopePathRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_285 = writer.prefix("Source");
    if let Some(var_286) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(scope_285, var_286)?;
    }
    #[allow(unused_mut)]let mut scope_287 = writer.prefix("Destination");
    if let Some(var_288) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(scope_287, var_288)?;
    }
    #[allow(unused_mut)]let mut scope_289 = writer.prefix("ThroughResource");
    if let Some(var_290) = &input.through_resources {
        let mut list_292 = scope_289.start_list(true, Some("item"));
        for item_291 in var_290 {
            #[allow(unused_mut)]let mut entry_293 = list_292.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(entry_293, item_291)?;
        }
        list_292.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_ipv6_address(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceIpv6Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_294 = writer.prefix("Ipv6Address");
    if let Some(var_295) = &input.ipv6_address {
        scope_294.string(var_295);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_private_ip_address_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrivateIpAddressSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_296 = writer.prefix("Primary");
    if let Some(var_297) = &input.primary {
        scope_296.boolean(*var_297);
    }
    #[allow(unused_mut)]let mut scope_298 = writer.prefix("PrivateIpAddress");
    if let Some(var_299) = &input.private_ip_address {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv4PrefixSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_300 = writer.prefix("Ipv4Prefix");
    if let Some(var_301) = &input.ipv4_prefix {
        scope_300.string(var_301);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv6PrefixSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_302 = writer.prefix("Ipv6Prefix");
    if let Some(var_303) = &input.ipv6_prefix {
        scope_302.string(var_303);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_price_schedule_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PriceScheduleSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_304 = writer.prefix("CurrencyCode");
    if let Some(var_305) = &input.currency_code {
        scope_304.string(var_305.as_str());
    }
    #[allow(unused_mut)]let mut scope_306 = writer.prefix("Price");
    if let Some(var_307) = &input.price {
        scope_306.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_307).into()));
    }
    #[allow(unused_mut)]let mut scope_308 = writer.prefix("Term");
    if let Some(var_309) = &input.term {
        scope_308.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_309).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_310 = writer.prefix("InstanceId");
    if let Some(var_311) = &input.instance_id {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]let mut scope_312 = writer.prefix("ExcludeBootVolume");
    if let Some(var_313) = &input.exclude_boot_volume {
        scope_312.boolean(*var_313);
    }
    #[allow(unused_mut)]let mut scope_314 = writer.prefix("ExcludeDataVolumeId");
    if let Some(var_315) = &input.exclude_data_volume_ids {
        let mut list_317 = scope_314.start_list(true, Some("VolumeId"));
        for item_316 in var_315 {
            #[allow(unused_mut)]let mut entry_318 = list_317.entry();
            entry_318.string(item_316);
        }
        list_317.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_s3_object_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::S3ObjectTag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_319 = writer.prefix("Key");
    if let Some(var_320) = &input.key {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]let mut scope_321 = writer.prefix("Value");
    if let Some(var_322) = &input.value {
        scope_321.string(var_322);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_tag(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_323 = writer.prefix("Key");
    if let Some(var_324) = &input.key {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]let mut scope_325 = writer.prefix("Value");
    if let Some(var_326) = &input.value {
        scope_325.string(var_326);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TrafficMirrorPortRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_327 = writer.prefix("FromPort");
    if let Some(var_328) = &input.from_port {
        scope_327.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_328).into()));
    }
    #[allow(unused_mut)]let mut scope_329 = writer.prefix("ToPort");
    if let Some(var_330) = &input.to_port {
        scope_329.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_330).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_transit_gateway_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TransitGatewayRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_331 = writer.prefix("AmazonSideAsn");
    if let Some(var_332) = &input.amazon_side_asn {
        scope_331.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_332).into()));
    }
    #[allow(unused_mut)]let mut scope_333 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_334) = &input.auto_accept_shared_attachments {
        scope_333.string(var_334.as_str());
    }
    #[allow(unused_mut)]let mut scope_335 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_336) = &input.default_route_table_association {
        scope_335.string(var_336.as_str());
    }
    #[allow(unused_mut)]let mut scope_337 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_338) = &input.default_route_table_propagation {
        scope_337.string(var_338.as_str());
    }
    #[allow(unused_mut)]let mut scope_339 = writer.prefix("VpnEcmpSupport");
    if let Some(var_340) = &input.vpn_ecmp_support {
        scope_339.string(var_340.as_str());
    }
    #[allow(unused_mut)]let mut scope_341 = writer.prefix("DnsSupport");
    if let Some(var_342) = &input.dns_support {
        scope_341.string(var_342.as_str());
    }
    #[allow(unused_mut)]let mut scope_343 = writer.prefix("MulticastSupport");
    if let Some(var_344) = &input.multicast_support {
        scope_343.string(var_344.as_str());
    }
    #[allow(unused_mut)]let mut scope_345 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_346) = &input.transit_gateway_cidr_blocks {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]let mut entry_349 = list_348.entry();
            entry_349.string(item_347);
        }
        list_348.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayConnectRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_350 = writer.prefix("Protocol");
    if let Some(var_351) = &input.protocol {
        scope_350.string(var_351.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TransitGatewayConnectRequestBgpOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_352 = writer.prefix("PeerAsn");
    if let Some(var_353) = &input.peer_asn {
        scope_352.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_353).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_354 = writer.prefix("Igmpv2Support");
    if let Some(var_355) = &input.igmpv2_support {
        scope_354.string(var_355.as_str());
    }
    #[allow(unused_mut)]let mut scope_356 = writer.prefix("StaticSourcesSupport");
    if let Some(var_357) = &input.static_sources_support {
        scope_356.string(var_357.as_str());
    }
    #[allow(unused_mut)]let mut scope_358 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_359) = &input.auto_accept_shared_associations {
        scope_358.string(var_359.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_transit_gateway_peering_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayPeeringAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_360 = writer.prefix("DynamicRouting");
    if let Some(var_361) = &input.dynamic_routing {
        scope_360.string(var_361.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_362 = writer.prefix("DnsSupport");
    if let Some(var_363) = &input.dns_support {
        scope_362.string(var_363.as_str());
    }
    #[allow(unused_mut)]let mut scope_364 = writer.prefix("Ipv6Support");
    if let Some(var_365) = &input.ipv6_support {
        scope_364.string(var_365.as_str());
    }
    #[allow(unused_mut)]let mut scope_366 = writer.prefix("ApplianceModeSupport");
    if let Some(var_367) = &input.appliance_mode_support {
        scope_366.string(var_367.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_dns_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DnsOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_368 = writer.prefix("DnsRecordIpType");
    if let Some(var_369) = &input.dns_record_ip_type {
        scope_368.string(var_369.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_vpn_connection_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnConnectionOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_370 = writer.prefix("EnableAcceleration");
    if let Some(var_371) = &input.enable_acceleration {
        scope_370.boolean(*var_371);
    }
    #[allow(unused_mut)]let mut scope_372 = writer.prefix("StaticRoutesOnly");
    if let Some(var_373) = &input.static_routes_only {
        scope_372.boolean(*var_373);
    }
    #[allow(unused_mut)]let mut scope_374 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_375) = &input.tunnel_inside_ip_version {
        scope_374.string(var_375.as_str());
    }
    #[allow(unused_mut)]let mut scope_376 = writer.prefix("TunnelOptions");
    if let Some(var_377) = &input.tunnel_options {
        let mut list_379 = scope_376.start_list(true, None);
        for item_378 in var_377 {
            #[allow(unused_mut)]let mut entry_380 = list_379.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(entry_380, item_378)?;
        }
        list_379.finish();
    }
    #[allow(unused_mut)]let mut scope_381 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_382) = &input.local_ipv4_network_cidr {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]let mut scope_383 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_384) = &input.remote_ipv4_network_cidr {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]let mut scope_385 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_386) = &input.local_ipv6_network_cidr {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]let mut scope_387 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_388) = &input.remote_ipv6_network_cidr {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]let mut scope_389 = writer.prefix("OutsideIpAddressType");
    if let Some(var_390) = &input.outside_ip_address_type {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]let mut scope_391 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_392) = &input.transport_transit_gateway_attachment_id {
        scope_391.string(var_392);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DeregisterInstanceTagAttributeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_393 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_394) = &input.include_all_tags_of_instance {
        scope_393.boolean(*var_394);
    }
    #[allow(unused_mut)]let mut scope_395 = writer.prefix("InstanceTagKey");
    if let Some(var_396) = &input.instance_tag_keys {
        let mut list_398 = scope_395.start_list(true, Some("item"));
        for item_397 in var_396 {
            #[allow(unused_mut)]let mut entry_399 = list_398.entry();
            entry_399.string(item_397);
        }
        list_398.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_filter(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_400 = writer.prefix("Name");
    if let Some(var_401) = &input.name {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]let mut scope_402 = writer.prefix("Value");
    if let Some(var_403) = &input.values {
        let mut list_405 = scope_402.start_list(true, Some("item"));
        for item_404 in var_403 {
            #[allow(unused_mut)]let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_slot_date_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SlotDateTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_407 = writer.prefix("EarliestTime");
    if let Some(var_408) = &input.earliest_time {
        scope_407.date_time(var_408, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_409 = writer.prefix("LatestTime");
    if let Some(var_410) = &input.latest_time {
        scope_409.date_time(var_410, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstanceRecurrenceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_411 = writer.prefix("Frequency");
    if let Some(var_412) = &input.frequency {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]let mut scope_413 = writer.prefix("Interval");
    if let Some(var_414) = &input.interval {
        scope_413.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_414).into()));
    }
    #[allow(unused_mut)]let mut scope_415 = writer.prefix("OccurrenceDay");
    if let Some(var_416) = &input.occurrence_days {
        let mut list_418 = scope_415.start_list(true, Some("OccurenceDay"));
        for item_417 in var_416 {
            #[allow(unused_mut)]let mut entry_419 = list_418.entry();
            entry_419.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*item_417).into()));
        }
        list_418.finish();
    }
    #[allow(unused_mut)]let mut scope_420 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_421) = &input.occurrence_relative_to_end {
        scope_420.boolean(*var_421);
    }
    #[allow(unused_mut)]let mut scope_422 = writer.prefix("OccurrenceUnit");
    if let Some(var_423) = &input.occurrence_unit {
        scope_422.string(var_423);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_slot_start_time_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SlotStartTimeRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_424 = writer.prefix("EarliestTime");
    if let Some(var_425) = &input.earliest_time {
        scope_424.date_time(var_425, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_426 = writer.prefix("LatestTime");
    if let Some(var_427) = &input.latest_time {
        scope_426.date_time(var_427, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceEventWindowDisassociationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_428 = writer.prefix("InstanceId");
    if let Some(var_429) = &input.instance_ids {
        let mut list_431 = scope_428.start_list(true, Some("item"));
        for item_430 in var_429 {
            #[allow(unused_mut)]let mut entry_432 = list_431.entry();
            entry_432.string(item_430);
        }
        list_431.finish();
    }
    #[allow(unused_mut)]let mut scope_433 = writer.prefix("InstanceTag");
    if let Some(var_434) = &input.instance_tags {
        let mut list_436 = scope_433.start_list(true, Some("item"));
        for item_435 in var_434 {
            #[allow(unused_mut)]let mut entry_437 = list_436.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_437, item_435)?;
        }
        list_436.finish();
    }
    #[allow(unused_mut)]let mut scope_438 = writer.prefix("DedicatedHostId");
    if let Some(var_439) = &input.dedicated_host_ids {
        let mut list_441 = scope_438.start_list(true, Some("item"));
        for item_440 in var_439 {
            #[allow(unused_mut)]let mut entry_442 = list_441.entry();
            entry_442.string(item_440);
        }
        list_441.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FastLaunchSnapshotConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_443 = writer.prefix("TargetResourceCount");
    if let Some(var_444) = &input.target_resource_count {
        scope_443.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_444).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_445 = writer.prefix("LaunchTemplateId");
    if let Some(var_446) = &input.launch_template_id {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]let mut scope_447 = writer.prefix("LaunchTemplateName");
    if let Some(var_448) = &input.launch_template_name {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]let mut scope_449 = writer.prefix("Version");
    if let Some(var_450) = &input.version {
        scope_449.string(var_450);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_export_task_s3_location_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ExportTaskS3LocationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_451 = writer.prefix("S3Bucket");
    if let Some(var_452) = &input.s3_bucket {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]let mut scope_453 = writer.prefix("S3Prefix");
    if let Some(var_454) = &input.s3_prefix {
        scope_453.string(var_454);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_integrate_services(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IntegrateServices) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_455 = writer.prefix("AthenaIntegration");
    if let Some(var_456) = &input.athena_integrations {
        let mut list_458 = scope_455.start_list(true, Some("item"));
        for item_457 in var_456 {
            #[allow(unused_mut)]let mut entry_459 = list_458.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(entry_459, item_457)?;
        }
        list_458.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_requirements_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirementsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_460 = writer.prefix("VCpuCount");
    if let Some(var_461) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(scope_460, var_461)?;
    }
    #[allow(unused_mut)]let mut scope_462 = writer.prefix("MemoryMiB");
    if let Some(var_463) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_462, var_463)?;
    }
    #[allow(unused_mut)]let mut scope_464 = writer.prefix("CpuManufacturer");
    if let Some(var_465) = &input.cpu_manufacturers {
        let mut list_467 = scope_464.start_list(true, Some("item"));
        for item_466 in var_465 {
            #[allow(unused_mut)]let mut entry_468 = list_467.entry();
            entry_468.string(item_466.as_str());
        }
        list_467.finish();
    }
    #[allow(unused_mut)]let mut scope_469 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_470) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(scope_469, var_470)?;
    }
    #[allow(unused_mut)]let mut scope_471 = writer.prefix("ExcludedInstanceType");
    if let Some(var_472) = &input.excluded_instance_types {
        let mut list_474 = scope_471.start_list(true, Some("item"));
        for item_473 in var_472 {
            #[allow(unused_mut)]let mut entry_475 = list_474.entry();
            entry_475.string(item_473);
        }
        list_474.finish();
    }
    #[allow(unused_mut)]let mut scope_476 = writer.prefix("InstanceGeneration");
    if let Some(var_477) = &input.instance_generations {
        let mut list_479 = scope_476.start_list(true, Some("item"));
        for item_478 in var_477 {
            #[allow(unused_mut)]let mut entry_480 = list_479.entry();
            entry_480.string(item_478.as_str());
        }
        list_479.finish();
    }
    #[allow(unused_mut)]let mut scope_481 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_482) = &input.spot_max_price_percentage_over_lowest_price {
        scope_481.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_482).into()));
    }
    #[allow(unused_mut)]let mut scope_483 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_484) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_483.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_484).into()));
    }
    #[allow(unused_mut)]let mut scope_485 = writer.prefix("BareMetal");
    if let Some(var_486) = &input.bare_metal {
        scope_485.string(var_486.as_str());
    }
    #[allow(unused_mut)]let mut scope_487 = writer.prefix("BurstablePerformance");
    if let Some(var_488) = &input.burstable_performance {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]let mut scope_489 = writer.prefix("RequireHibernateSupport");
    if let Some(var_490) = &input.require_hibernate_support {
        scope_489.boolean(*var_490);
    }
    #[allow(unused_mut)]let mut scope_491 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_492) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(scope_491, var_492)?;
    }
    #[allow(unused_mut)]let mut scope_493 = writer.prefix("LocalStorage");
    if let Some(var_494) = &input.local_storage {
        scope_493.string(var_494.as_str());
    }
    #[allow(unused_mut)]let mut scope_495 = writer.prefix("LocalStorageType");
    if let Some(var_496) = &input.local_storage_types {
        let mut list_498 = scope_495.start_list(true, Some("item"));
        for item_497 in var_496 {
            #[allow(unused_mut)]let mut entry_499 = list_498.entry();
            entry_499.string(item_497.as_str());
        }
        list_498.finish();
    }
    #[allow(unused_mut)]let mut scope_500 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_501) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(scope_500, var_501)?;
    }
    #[allow(unused_mut)]let mut scope_502 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_503) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(scope_502, var_503)?;
    }
    #[allow(unused_mut)]let mut scope_504 = writer.prefix("AcceleratorType");
    if let Some(var_505) = &input.accelerator_types {
        let mut list_507 = scope_504.start_list(true, Some("item"));
        for item_506 in var_505 {
            #[allow(unused_mut)]let mut entry_508 = list_507.entry();
            entry_508.string(item_506.as_str());
        }
        list_507.finish();
    }
    #[allow(unused_mut)]let mut scope_509 = writer.prefix("AcceleratorCount");
    if let Some(var_510) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(scope_509, var_510)?;
    }
    #[allow(unused_mut)]let mut scope_511 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_512) = &input.accelerator_manufacturers {
        let mut list_514 = scope_511.start_list(true, Some("item"));
        for item_513 in var_512 {
            #[allow(unused_mut)]let mut entry_515 = list_514.entry();
            entry_515.string(item_513.as_str());
        }
        list_514.finish();
    }
    #[allow(unused_mut)]let mut scope_516 = writer.prefix("AcceleratorName");
    if let Some(var_517) = &input.accelerator_names {
        let mut list_519 = scope_516.start_list(true, Some("item"));
        for item_518 in var_517 {
            #[allow(unused_mut)]let mut entry_520 = list_519.entry();
            entry_520.string(item_518.as_str());
        }
        list_519.finish();
    }
    #[allow(unused_mut)]let mut scope_521 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_522) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(scope_521, var_522)?;
    }
    #[allow(unused_mut)]let mut scope_523 = writer.prefix("NetworkBandwidthGbps");
    if let Some(var_524) = &input.network_bandwidth_gbps {
        crate::query_ser::serialize_structure_crate_model_network_bandwidth_gbps_request(scope_523, var_524)?;
    }
    #[allow(unused_mut)]let mut scope_525 = writer.prefix("AllowedInstanceType");
    if let Some(var_526) = &input.allowed_instance_types {
        let mut list_528 = scope_525.start_list(true, Some("item"));
        for item_527 in var_526 {
            #[allow(unused_mut)]let mut entry_529 = list_528.entry();
            entry_529.string(item_527);
        }
        list_528.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirementsWithMetadataRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_530 = writer.prefix("ArchitectureType");
    if let Some(var_531) = &input.architecture_types {
        let mut list_533 = scope_530.start_list(true, Some("item"));
        for item_532 in var_531 {
            #[allow(unused_mut)]let mut entry_534 = list_533.entry();
            entry_534.string(item_532.as_str());
        }
        list_533.finish();
    }
    #[allow(unused_mut)]let mut scope_535 = writer.prefix("VirtualizationType");
    if let Some(var_536) = &input.virtualization_types {
        let mut list_538 = scope_535.start_list(true, Some("item"));
        for item_537 in var_536 {
            #[allow(unused_mut)]let mut entry_539 = list_538.entry();
            entry_539.string(item_537.as_str());
        }
        list_538.finish();
    }
    #[allow(unused_mut)]let mut scope_540 = writer.prefix("InstanceRequirements");
    if let Some(var_541) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_540, var_541)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_client_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClientData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_542 = writer.prefix("Comment");
    if let Some(var_543) = &input.comment {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]let mut scope_544 = writer.prefix("UploadEnd");
    if let Some(var_545) = &input.upload_end {
        scope_544.date_time(var_545, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_546 = writer.prefix("UploadSize");
    if let Some(var_547) = &input.upload_size {
        scope_546.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_547).into()));
    }
    #[allow(unused_mut)]let mut scope_548 = writer.prefix("UploadStart");
    if let Some(var_549) = &input.upload_start {
        scope_548.date_time(var_549, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_image_disk_container(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImageDiskContainer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_550 = writer.prefix("Description");
    if let Some(var_551) = &input.description {
        scope_550.string(var_551);
    }
    #[allow(unused_mut)]let mut scope_552 = writer.prefix("DeviceName");
    if let Some(var_553) = &input.device_name {
        scope_552.string(var_553);
    }
    #[allow(unused_mut)]let mut scope_554 = writer.prefix("Format");
    if let Some(var_555) = &input.format {
        scope_554.string(var_555);
    }
    #[allow(unused_mut)]let mut scope_556 = writer.prefix("SnapshotId");
    if let Some(var_557) = &input.snapshot_id {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]let mut scope_558 = writer.prefix("Url");
    if let Some(var_559) = &input.url {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]let mut scope_560 = writer.prefix("UserBucket");
    if let Some(var_561) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_560, var_561)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_import_image_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImportImageLicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_562 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_563) = &input.license_configuration_arn {
        scope_562.string(var_563);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_disk_image(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DiskImage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_564 = writer.prefix("Description");
    if let Some(var_565) = &input.description {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]let mut scope_566 = writer.prefix("Image");
    if let Some(var_567) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_566, var_567)?;
    }
    #[allow(unused_mut)]let mut scope_568 = writer.prefix("Volume");
    if let Some(var_569) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_568, var_569)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_import_instance_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ImportInstanceLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_570 = writer.prefix("AdditionalInfo");
    if let Some(var_571) = &input.additional_info {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]let mut scope_572 = writer.prefix("Architecture");
    if let Some(var_573) = &input.architecture {
        scope_572.string(var_573.as_str());
    }
    #[allow(unused_mut)]let mut scope_574 = writer.prefix("GroupId");
    if let Some(var_575) = &input.group_ids {
        let mut list_577 = scope_574.start_list(true, Some("SecurityGroupId"));
        for item_576 in var_575 {
            #[allow(unused_mut)]let mut entry_578 = list_577.entry();
            entry_578.string(item_576);
        }
        list_577.finish();
    }
    #[allow(unused_mut)]let mut scope_579 = writer.prefix("GroupName");
    if let Some(var_580) = &input.group_names {
        let mut list_582 = scope_579.start_list(true, Some("SecurityGroup"));
        for item_581 in var_580 {
            #[allow(unused_mut)]let mut entry_583 = list_582.entry();
            entry_583.string(item_581);
        }
        list_582.finish();
    }
    #[allow(unused_mut)]let mut scope_584 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_585) = &input.instance_initiated_shutdown_behavior {
        scope_584.string(var_585.as_str());
    }
    #[allow(unused_mut)]let mut scope_586 = writer.prefix("InstanceType");
    if let Some(var_587) = &input.instance_type {
        scope_586.string(var_587.as_str());
    }
    #[allow(unused_mut)]let mut scope_588 = writer.prefix("Monitoring");
    if let Some(var_589) = &input.monitoring {
        scope_588.boolean(*var_589);
    }
    #[allow(unused_mut)]let mut scope_590 = writer.prefix("Placement");
    if let Some(var_591) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_590, var_591)?;
    }
    #[allow(unused_mut)]let mut scope_592 = writer.prefix("PrivateIpAddress");
    if let Some(var_593) = &input.private_ip_address {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]let mut scope_594 = writer.prefix("SubnetId");
    if let Some(var_595) = &input.subnet_id {
        scope_594.string(var_595);
    }
    #[allow(unused_mut)]let mut scope_596 = writer.prefix("UserData");
    if let Some(var_597) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_596, var_597)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_snapshot_disk_container(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SnapshotDiskContainer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_598 = writer.prefix("Description");
    if let Some(var_599) = &input.description {
        scope_598.string(var_599);
    }
    #[allow(unused_mut)]let mut scope_600 = writer.prefix("Format");
    if let Some(var_601) = &input.format {
        scope_600.string(var_601);
    }
    #[allow(unused_mut)]let mut scope_602 = writer.prefix("Url");
    if let Some(var_603) = &input.url {
        scope_602.string(var_603);
    }
    #[allow(unused_mut)]let mut scope_604 = writer.prefix("UserBucket");
    if let Some(var_605) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_604, var_605)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_disk_image_detail(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DiskImageDetail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_606 = writer.prefix("Bytes");
    if let Some(var_607) = &input.bytes {
        scope_606.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_607).into()));
    }
    #[allow(unused_mut)]let mut scope_608 = writer.prefix("Format");
    if let Some(var_609) = &input.format {
        scope_608.string(var_609.as_str());
    }
    #[allow(unused_mut)]let mut scope_610 = writer.prefix("ImportManifestUrl");
    if let Some(var_611) = &input.import_manifest_url {
        scope_610.string(var_611);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_volume_detail(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VolumeDetail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_612 = writer.prefix("Size");
    if let Some(var_613) = &input.size {
        scope_612.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_613).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DnsServersOptionsModifyStructure) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_614 = writer.prefix("CustomDnsServers");
    if let Some(var_615) = &input.custom_dns_servers {
        let mut list_617 = scope_614.start_list(true, Some("item"));
        for item_616 in var_615 {
            #[allow(unused_mut)]let mut entry_618 = list_617.entry();
            entry_618.string(item_616);
        }
        list_617.finish();
    }
    #[allow(unused_mut)]let mut scope_619 = writer.prefix("Enabled");
    if let Some(var_620) = &input.enabled {
        scope_619.boolean(*var_620);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_load_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadPermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_621 = writer.prefix("Add");
    if let Some(var_622) = &input.add {
        let mut list_624 = scope_621.start_list(true, Some("item"));
        for item_623 in var_622 {
            #[allow(unused_mut)]let mut entry_625 = list_624.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(entry_625, item_623)?;
        }
        list_624.finish();
    }
    #[allow(unused_mut)]let mut scope_626 = writer.prefix("Remove");
    if let Some(var_627) = &input.remove {
        let mut list_629 = scope_626.start_list(true, Some("item"));
        for item_628 in var_627 {
            #[allow(unused_mut)]let mut entry_630 = list_629.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(entry_630, item_628)?;
        }
        list_629.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_attribute_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_631 = writer.prefix("Value");
    if let Some(var_632) = &input.value {
        scope_631.string(var_632);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchPermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_633 = writer.prefix("Add");
    if let Some(var_634) = &input.add {
        let mut list_636 = scope_633.start_list(true, Some("item"));
        for item_635 in var_634 {
            #[allow(unused_mut)]let mut entry_637 = list_636.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(entry_637, item_635)?;
        }
        list_636.finish();
    }
    #[allow(unused_mut)]let mut scope_638 = writer.prefix("Remove");
    if let Some(var_639) = &input.remove {
        let mut list_641 = scope_638.start_list(true, Some("item"));
        for item_640 in var_639 {
            #[allow(unused_mut)]let mut entry_642 = list_641.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(entry_642, item_640)?;
        }
        list_641.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_attribute_boolean_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AttributeBooleanValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_643 = writer.prefix("Value");
    if let Some(var_644) = &input.value {
        scope_643.boolean(*var_644);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceBlockDeviceMappingSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_645 = writer.prefix("DeviceName");
    if let Some(var_646) = &input.device_name {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]let mut scope_647 = writer.prefix("Ebs");
    if let Some(var_648) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(scope_647, var_648)?;
    }
    #[allow(unused_mut)]let mut scope_649 = writer.prefix("NoDevice");
    if let Some(var_650) = &input.no_device {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]let mut scope_651 = writer.prefix("VirtualName");
    if let Some(var_652) = &input.virtual_name {
        scope_651.string(var_652);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_blob_attribute_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BlobAttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_653 = writer.prefix("Value");
    if let Some(var_654) = &input.value {
        scope_653.string(&aws_smithy_types::base64::encode(var_654));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_capacity_reservation_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_655 = writer.prefix("CapacityReservationPreference");
    if let Some(var_656) = &input.capacity_reservation_preference {
        scope_655.string(var_656.as_str());
    }
    #[allow(unused_mut)]let mut scope_657 = writer.prefix("CapacityReservationTarget");
    if let Some(var_658) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(scope_657, var_658)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_credit_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceCreditSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_659 = writer.prefix("InstanceId");
    if let Some(var_660) = &input.instance_id {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]let mut scope_661 = writer.prefix("CpuCredits");
    if let Some(var_662) = &input.cpu_credits {
        scope_661.string(var_662);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_remove_ipam_operating_region(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RemoveIpamOperatingRegion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_663 = writer.prefix("RegionName");
    if let Some(var_664) = &input.region_name {
        scope_663.string(var_664);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_remove_prefix_list_entry(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RemovePrefixListEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_665 = writer.prefix("Cidr");
    if let Some(var_666) = &input.cidr {
        scope_665.string(var_666);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_network_interface_attachment_changes(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceAttachmentChanges) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_667 = writer.prefix("AttachmentId");
    if let Some(var_668) = &input.attachment_id {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]let mut scope_669 = writer.prefix("DeleteOnTermination");
    if let Some(var_670) = &input.delete_on_termination {
        scope_669.boolean(*var_670);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_reserved_instances_configuration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservedInstancesConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_671 = writer.prefix("AvailabilityZone");
    if let Some(var_672) = &input.availability_zone {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]let mut scope_673 = writer.prefix("InstanceCount");
    if let Some(var_674) = &input.instance_count {
        scope_673.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_674).into()));
    }
    #[allow(unused_mut)]let mut scope_675 = writer.prefix("InstanceType");
    if let Some(var_676) = &input.instance_type {
        scope_675.string(var_676.as_str());
    }
    #[allow(unused_mut)]let mut scope_677 = writer.prefix("Platform");
    if let Some(var_678) = &input.platform {
        scope_677.string(var_678);
    }
    #[allow(unused_mut)]let mut scope_679 = writer.prefix("Scope");
    if let Some(var_680) = &input.scope {
        scope_679.string(var_680.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_security_group_rule_update(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_681 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_682) = &input.security_group_rule_id {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]let mut scope_683 = writer.prefix("SecurityGroupRule");
    if let Some(var_684) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(scope_683, var_684)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_volume_permission_modifications(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVolumePermissionModifications) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_685 = writer.prefix("Add");
    if let Some(var_686) = &input.add {
        let mut list_688 = scope_685.start_list(true, Some("item"));
        for item_687 in var_686 {
            #[allow(unused_mut)]let mut entry_689 = list_688.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(entry_689, item_687)?;
        }
        list_688.finish();
    }
    #[allow(unused_mut)]let mut scope_690 = writer.prefix("Remove");
    if let Some(var_691) = &input.remove {
        let mut list_693 = scope_690.start_list(true, Some("item"));
        for item_692 in var_691 {
            #[allow(unused_mut)]let mut entry_694 = list_693.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(entry_694, item_692)?;
        }
        list_693.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_695 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_696) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(scope_695, var_696)?;
    }
    #[allow(unused_mut)]let mut scope_697 = writer.prefix("Overrides");
    if let Some(var_698) = &input.overrides {
        let mut list_700 = scope_697.start_list(true, Some("item"));
        for item_699 in var_698 {
            #[allow(unused_mut)]let mut entry_701 = list_700.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(entry_701, item_699)?;
        }
        list_700.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_modify_transit_gateway_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyTransitGatewayOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_702 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_703) = &input.add_transit_gateway_cidr_blocks {
        let mut list_705 = scope_702.start_list(true, Some("item"));
        for item_704 in var_703 {
            #[allow(unused_mut)]let mut entry_706 = list_705.entry();
            entry_706.string(item_704);
        }
        list_705.finish();
    }
    #[allow(unused_mut)]let mut scope_707 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_708) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_710 = scope_707.start_list(true, Some("item"));
        for item_709 in var_708 {
            #[allow(unused_mut)]let mut entry_711 = list_710.entry();
            entry_711.string(item_709);
        }
        list_710.finish();
    }
    #[allow(unused_mut)]let mut scope_712 = writer.prefix("VpnEcmpSupport");
    if let Some(var_713) = &input.vpn_ecmp_support {
        scope_712.string(var_713.as_str());
    }
    #[allow(unused_mut)]let mut scope_714 = writer.prefix("DnsSupport");
    if let Some(var_715) = &input.dns_support {
        scope_714.string(var_715.as_str());
    }
    #[allow(unused_mut)]let mut scope_716 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_717) = &input.auto_accept_shared_attachments {
        scope_716.string(var_717.as_str());
    }
    #[allow(unused_mut)]let mut scope_718 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_719) = &input.default_route_table_association {
        scope_718.string(var_719.as_str());
    }
    #[allow(unused_mut)]let mut scope_720 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_721) = &input.association_default_route_table_id {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]let mut scope_722 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_723) = &input.default_route_table_propagation {
        scope_722.string(var_723.as_str());
    }
    #[allow(unused_mut)]let mut scope_724 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_725) = &input.propagation_default_route_table_id {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]let mut scope_726 = writer.prefix("AmazonSideAsn");
    if let Some(var_727) = &input.amazon_side_asn {
        scope_726.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_727).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_728 = writer.prefix("DnsSupport");
    if let Some(var_729) = &input.dns_support {
        scope_728.string(var_729.as_str());
    }
    #[allow(unused_mut)]let mut scope_730 = writer.prefix("Ipv6Support");
    if let Some(var_731) = &input.ipv6_support {
        scope_730.string(var_731.as_str());
    }
    #[allow(unused_mut)]let mut scope_732 = writer.prefix("ApplianceModeSupport");
    if let Some(var_733) = &input.appliance_mode_support {
        scope_732.string(var_733.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_peering_connection_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PeeringConnectionOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_734 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_735) = &input.allow_dns_resolution_from_remote_vpc {
        scope_734.boolean(*var_735);
    }
    #[allow(unused_mut)]let mut scope_736 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_737) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_736.boolean(*var_737);
    }
    #[allow(unused_mut)]let mut scope_738 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_739) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_738.boolean(*var_739);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ModifyVpnTunnelOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_740 = writer.prefix("TunnelInsideCidr");
    if let Some(var_741) = &input.tunnel_inside_cidr {
        scope_740.string(var_741);
    }
    #[allow(unused_mut)]let mut scope_742 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_743) = &input.tunnel_inside_ipv6_cidr {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]let mut scope_744 = writer.prefix("PreSharedKey");
    if let Some(var_745) = &input.pre_shared_key {
        scope_744.string(var_745);
    }
    #[allow(unused_mut)]let mut scope_746 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_747) = &input.phase1_lifetime_seconds {
        scope_746.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_747).into()));
    }
    #[allow(unused_mut)]let mut scope_748 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_749) = &input.phase2_lifetime_seconds {
        scope_748.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_749).into()));
    }
    #[allow(unused_mut)]let mut scope_750 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_751) = &input.rekey_margin_time_seconds {
        scope_750.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_751).into()));
    }
    #[allow(unused_mut)]let mut scope_752 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_753) = &input.rekey_fuzz_percentage {
        scope_752.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_753).into()));
    }
    #[allow(unused_mut)]let mut scope_754 = writer.prefix("ReplayWindowSize");
    if let Some(var_755) = &input.replay_window_size {
        scope_754.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_755).into()));
    }
    #[allow(unused_mut)]let mut scope_756 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_757) = &input.dpd_timeout_seconds {
        scope_756.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_757).into()));
    }
    #[allow(unused_mut)]let mut scope_758 = writer.prefix("DPDTimeoutAction");
    if let Some(var_759) = &input.dpd_timeout_action {
        scope_758.string(var_759);
    }
    #[allow(unused_mut)]let mut scope_760 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_761) = &input.phase1_encryption_algorithms {
        let mut list_763 = scope_760.start_list(true, Some("item"));
        for item_762 in var_761 {
            #[allow(unused_mut)]let mut entry_764 = list_763.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_764, item_762)?;
        }
        list_763.finish();
    }
    #[allow(unused_mut)]let mut scope_765 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_766) = &input.phase2_encryption_algorithms {
        let mut list_768 = scope_765.start_list(true, Some("item"));
        for item_767 in var_766 {
            #[allow(unused_mut)]let mut entry_769 = list_768.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_769, item_767)?;
        }
        list_768.finish();
    }
    #[allow(unused_mut)]let mut scope_770 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_771) = &input.phase1_integrity_algorithms {
        let mut list_773 = scope_770.start_list(true, Some("item"));
        for item_772 in var_771 {
            #[allow(unused_mut)]let mut entry_774 = list_773.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_774, item_772)?;
        }
        list_773.finish();
    }
    #[allow(unused_mut)]let mut scope_775 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_776) = &input.phase2_integrity_algorithms {
        let mut list_778 = scope_775.start_list(true, Some("item"));
        for item_777 in var_776 {
            #[allow(unused_mut)]let mut entry_779 = list_778.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_779, item_777)?;
        }
        list_778.finish();
    }
    #[allow(unused_mut)]let mut scope_780 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_781) = &input.phase1_dh_group_numbers {
        let mut list_783 = scope_780.start_list(true, Some("item"));
        for item_782 in var_781 {
            #[allow(unused_mut)]let mut entry_784 = list_783.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_784, item_782)?;
        }
        list_783.finish();
    }
    #[allow(unused_mut)]let mut scope_785 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_786) = &input.phase2_dh_group_numbers {
        let mut list_788 = scope_785.start_list(true, Some("item"));
        for item_787 in var_786 {
            #[allow(unused_mut)]let mut entry_789 = list_788.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_789, item_787)?;
        }
        list_788.finish();
    }
    #[allow(unused_mut)]let mut scope_790 = writer.prefix("IKEVersion");
    if let Some(var_791) = &input.ike_versions {
        let mut list_793 = scope_790.start_list(true, Some("item"));
        for item_792 in var_791 {
            #[allow(unused_mut)]let mut entry_794 = list_793.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(entry_794, item_792)?;
        }
        list_793.finish();
    }
    #[allow(unused_mut)]let mut scope_795 = writer.prefix("StartupAction");
    if let Some(var_796) = &input.startup_action {
        scope_795.string(var_796);
    }
    #[allow(unused_mut)]let mut scope_797 = writer.prefix("LogOptions");
    if let Some(var_798) = &input.log_options {
        crate::query_ser::serialize_structure_crate_model_vpn_tunnel_log_options_specification(scope_797, var_798)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_cidr_authorization_context(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CidrAuthorizationContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_799 = writer.prefix("Message");
    if let Some(var_800) = &input.message {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]let mut scope_801 = writer.prefix("Signature");
    if let Some(var_802) = &input.signature {
        scope_801.string(var_802);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpamCidrAuthorizationContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_803 = writer.prefix("Message");
    if let Some(var_804) = &input.message {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]let mut scope_805 = writer.prefix("Signature");
    if let Some(var_806) = &input.signature {
        scope_805.string(var_806);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_reserved_instance_limit_price(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ReservedInstanceLimitPrice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_807 = writer.prefix("Amount");
    if let Some(var_808) = &input.amount {
        scope_807.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_808).into()));
    }
    #[allow(unused_mut)]let mut scope_809 = writer.prefix("CurrencyCode");
    if let Some(var_810) = &input.currency_code {
        scope_809.string(var_810.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_purchase_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PurchaseRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_811 = writer.prefix("InstanceCount");
    if let Some(var_812) = &input.instance_count {
        scope_811.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_812).into()));
    }
    #[allow(unused_mut)]let mut scope_813 = writer.prefix("PurchaseToken");
    if let Some(var_814) = &input.purchase_token {
        scope_813.string(var_814);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RegisterInstanceTagAttributeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_815 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_816) = &input.include_all_tags_of_instance {
        scope_815.boolean(*var_816);
    }
    #[allow(unused_mut)]let mut scope_817 = writer.prefix("InstanceTagKey");
    if let Some(var_818) = &input.instance_tag_keys {
        let mut list_820 = scope_817.start_list(true, Some("item"));
        for item_819 in var_818 {
            #[allow(unused_mut)]let mut entry_821 = list_820.entry();
            entry_821.string(item_819);
        }
        list_820.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_fleet_request_config_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetRequestConfigData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_822 = writer.prefix("AllocationStrategy");
    if let Some(var_823) = &input.allocation_strategy {
        scope_822.string(var_823.as_str());
    }
    #[allow(unused_mut)]let mut scope_824 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_825) = &input.on_demand_allocation_strategy {
        scope_824.string(var_825.as_str());
    }
    #[allow(unused_mut)]let mut scope_826 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_827) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(scope_826, var_827)?;
    }
    #[allow(unused_mut)]let mut scope_828 = writer.prefix("ClientToken");
    if let Some(var_829) = &input.client_token {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]let mut scope_830 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_831) = &input.excess_capacity_termination_policy {
        scope_830.string(var_831.as_str());
    }
    #[allow(unused_mut)]let mut scope_832 = writer.prefix("FulfilledCapacity");
    if let Some(var_833) = &input.fulfilled_capacity {
        scope_832.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_833).into()));
    }
    #[allow(unused_mut)]let mut scope_834 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_835) = &input.on_demand_fulfilled_capacity {
        scope_834.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_835).into()));
    }
    #[allow(unused_mut)]let mut scope_836 = writer.prefix("IamFleetRole");
    if let Some(var_837) = &input.iam_fleet_role {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]let mut scope_838 = writer.prefix("LaunchSpecifications");
    if let Some(var_839) = &input.launch_specifications {
        let mut list_841 = scope_838.start_list(true, Some("item"));
        for item_840 in var_839 {
            #[allow(unused_mut)]let mut entry_842 = list_841.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(entry_842, item_840)?;
        }
        list_841.finish();
    }
    #[allow(unused_mut)]let mut scope_843 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_844) = &input.launch_template_configs {
        let mut list_846 = scope_843.start_list(true, Some("item"));
        for item_845 in var_844 {
            #[allow(unused_mut)]let mut entry_847 = list_846.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(entry_847, item_845)?;
        }
        list_846.finish();
    }
    #[allow(unused_mut)]let mut scope_848 = writer.prefix("SpotPrice");
    if let Some(var_849) = &input.spot_price {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]let mut scope_850 = writer.prefix("TargetCapacity");
    if let Some(var_851) = &input.target_capacity {
        scope_850.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_851).into()));
    }
    #[allow(unused_mut)]let mut scope_852 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_853) = &input.on_demand_target_capacity {
        scope_852.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_853).into()));
    }
    #[allow(unused_mut)]let mut scope_854 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_855) = &input.on_demand_max_total_price {
        scope_854.string(var_855);
    }
    #[allow(unused_mut)]let mut scope_856 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_857) = &input.spot_max_total_price {
        scope_856.string(var_857);
    }
    #[allow(unused_mut)]let mut scope_858 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_859) = &input.terminate_instances_with_expiration {
        scope_858.boolean(*var_859);
    }
    #[allow(unused_mut)]let mut scope_860 = writer.prefix("Type");
    if let Some(var_861) = &input.r#type {
        scope_860.string(var_861.as_str());
    }
    #[allow(unused_mut)]let mut scope_862 = writer.prefix("ValidFrom");
    if let Some(var_863) = &input.valid_from {
        scope_862.date_time(var_863, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_864 = writer.prefix("ValidUntil");
    if let Some(var_865) = &input.valid_until {
        scope_864.date_time(var_865, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_866 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_867) = &input.replace_unhealthy_instances {
        scope_866.boolean(*var_867);
    }
    #[allow(unused_mut)]let mut scope_868 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_869) = &input.instance_interruption_behavior {
        scope_868.string(var_869.as_str());
    }
    #[allow(unused_mut)]let mut scope_870 = writer.prefix("LoadBalancersConfig");
    if let Some(var_871) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(scope_870, var_871)?;
    }
    #[allow(unused_mut)]let mut scope_872 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_873) = &input.instance_pools_to_use_count {
        scope_872.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_873).into()));
    }
    #[allow(unused_mut)]let mut scope_874 = writer.prefix("Context");
    if let Some(var_875) = &input.context {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]let mut scope_876 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_877) = &input.target_capacity_unit_type {
        scope_876.string(var_877.as_str());
    }
    #[allow(unused_mut)]let mut scope_878 = writer.prefix("TagSpecification");
    if let Some(var_879) = &input.tag_specifications {
        let mut list_881 = scope_878.start_list(true, Some("item"));
        for item_880 in var_879 {
            #[allow(unused_mut)]let mut entry_882 = list_881.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_882, item_880)?;
        }
        list_881.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_request_spot_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RequestSpotLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_883 = writer.prefix("SecurityGroupId");
    if let Some(var_884) = &input.security_group_ids {
        let mut list_886 = scope_883.start_list(true, Some("item"));
        for item_885 in var_884 {
            #[allow(unused_mut)]let mut entry_887 = list_886.entry();
            entry_887.string(item_885);
        }
        list_886.finish();
    }
    #[allow(unused_mut)]let mut scope_888 = writer.prefix("SecurityGroup");
    if let Some(var_889) = &input.security_groups {
        let mut list_891 = scope_888.start_list(true, Some("item"));
        for item_890 in var_889 {
            #[allow(unused_mut)]let mut entry_892 = list_891.entry();
            entry_892.string(item_890);
        }
        list_891.finish();
    }
    #[allow(unused_mut)]let mut scope_893 = writer.prefix("AddressingType");
    if let Some(var_894) = &input.addressing_type {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]let mut scope_895 = writer.prefix("BlockDeviceMapping");
    if let Some(var_896) = &input.block_device_mappings {
        let mut list_898 = scope_895.start_list(true, Some("item"));
        for item_897 in var_896 {
            #[allow(unused_mut)]let mut entry_899 = list_898.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_899, item_897)?;
        }
        list_898.finish();
    }
    #[allow(unused_mut)]let mut scope_900 = writer.prefix("EbsOptimized");
    if let Some(var_901) = &input.ebs_optimized {
        scope_900.boolean(*var_901);
    }
    #[allow(unused_mut)]let mut scope_902 = writer.prefix("IamInstanceProfile");
    if let Some(var_903) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_902, var_903)?;
    }
    #[allow(unused_mut)]let mut scope_904 = writer.prefix("ImageId");
    if let Some(var_905) = &input.image_id {
        scope_904.string(var_905);
    }
    #[allow(unused_mut)]let mut scope_906 = writer.prefix("InstanceType");
    if let Some(var_907) = &input.instance_type {
        scope_906.string(var_907.as_str());
    }
    #[allow(unused_mut)]let mut scope_908 = writer.prefix("KernelId");
    if let Some(var_909) = &input.kernel_id {
        scope_908.string(var_909);
    }
    #[allow(unused_mut)]let mut scope_910 = writer.prefix("KeyName");
    if let Some(var_911) = &input.key_name {
        scope_910.string(var_911);
    }
    #[allow(unused_mut)]let mut scope_912 = writer.prefix("Monitoring");
    if let Some(var_913) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(scope_912, var_913)?;
    }
    #[allow(unused_mut)]let mut scope_914 = writer.prefix("NetworkInterface");
    if let Some(var_915) = &input.network_interfaces {
        let mut list_917 = scope_914.start_list(true, Some("item"));
        for item_916 in var_915 {
            #[allow(unused_mut)]let mut entry_918 = list_917.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_918, item_916)?;
        }
        list_917.finish();
    }
    #[allow(unused_mut)]let mut scope_919 = writer.prefix("Placement");
    if let Some(var_920) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_919, var_920)?;
    }
    #[allow(unused_mut)]let mut scope_921 = writer.prefix("RamdiskId");
    if let Some(var_922) = &input.ramdisk_id {
        scope_921.string(var_922);
    }
    #[allow(unused_mut)]let mut scope_923 = writer.prefix("SubnetId");
    if let Some(var_924) = &input.subnet_id {
        scope_923.string(var_924);
    }
    #[allow(unused_mut)]let mut scope_925 = writer.prefix("UserData");
    if let Some(var_926) = &input.user_data {
        scope_925.string(var_926);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::RunInstancesMonitoringEnabled) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_927 = writer.prefix("Enabled");
    if let Some(var_928) = &input.enabled {
        scope_927.boolean(*var_928);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Placement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_929 = writer.prefix("AvailabilityZone");
    if let Some(var_930) = &input.availability_zone {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]let mut scope_931 = writer.prefix("Affinity");
    if let Some(var_932) = &input.affinity {
        scope_931.string(var_932);
    }
    #[allow(unused_mut)]let mut scope_933 = writer.prefix("GroupName");
    if let Some(var_934) = &input.group_name {
        scope_933.string(var_934);
    }
    #[allow(unused_mut)]let mut scope_935 = writer.prefix("PartitionNumber");
    if let Some(var_936) = &input.partition_number {
        scope_935.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_936).into()));
    }
    #[allow(unused_mut)]let mut scope_937 = writer.prefix("HostId");
    if let Some(var_938) = &input.host_id {
        scope_937.string(var_938);
    }
    #[allow(unused_mut)]let mut scope_939 = writer.prefix("Tenancy");
    if let Some(var_940) = &input.tenancy {
        scope_939.string(var_940.as_str());
    }
    #[allow(unused_mut)]let mut scope_941 = writer.prefix("SpreadDomain");
    if let Some(var_942) = &input.spread_domain {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]let mut scope_943 = writer.prefix("HostResourceGroupArn");
    if let Some(var_944) = &input.host_resource_group_arn {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]let mut scope_945 = writer.prefix("GroupId");
    if let Some(var_946) = &input.group_id {
        scope_945.string(var_946);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_network_interface_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceNetworkInterfaceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_947 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_948) = &input.associate_public_ip_address {
        scope_947.boolean(*var_948);
    }
    #[allow(unused_mut)]let mut scope_949 = writer.prefix("DeleteOnTermination");
    if let Some(var_950) = &input.delete_on_termination {
        scope_949.boolean(*var_950);
    }
    #[allow(unused_mut)]let mut scope_951 = writer.prefix("Description");
    if let Some(var_952) = &input.description {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]let mut scope_953 = writer.prefix("DeviceIndex");
    if let Some(var_954) = &input.device_index {
        scope_953.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_954).into()));
    }
    #[allow(unused_mut)]let mut scope_955 = writer.prefix("SecurityGroupId");
    if let Some(var_956) = &input.groups {
        let mut list_958 = scope_955.start_list(true, Some("SecurityGroupId"));
        for item_957 in var_956 {
            #[allow(unused_mut)]let mut entry_959 = list_958.entry();
            entry_959.string(item_957);
        }
        list_958.finish();
    }
    #[allow(unused_mut)]let mut scope_960 = writer.prefix("Ipv6AddressCount");
    if let Some(var_961) = &input.ipv6_address_count {
        scope_960.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_961).into()));
    }
    #[allow(unused_mut)]let mut scope_962 = writer.prefix("Ipv6Addresses");
    if let Some(var_963) = &input.ipv6_addresses {
        let mut list_965 = scope_962.start_list(true, Some("item"));
        for item_964 in var_963 {
            #[allow(unused_mut)]let mut entry_966 = list_965.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(entry_966, item_964)?;
        }
        list_965.finish();
    }
    #[allow(unused_mut)]let mut scope_967 = writer.prefix("NetworkInterfaceId");
    if let Some(var_968) = &input.network_interface_id {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]let mut scope_969 = writer.prefix("PrivateIpAddress");
    if let Some(var_970) = &input.private_ip_address {
        scope_969.string(var_970);
    }
    #[allow(unused_mut)]let mut scope_971 = writer.prefix("PrivateIpAddresses");
    if let Some(var_972) = &input.private_ip_addresses {
        let mut list_974 = scope_971.start_list(true, Some("item"));
        for item_973 in var_972 {
            #[allow(unused_mut)]let mut entry_975 = list_974.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_975, item_973)?;
        }
        list_974.finish();
    }
    #[allow(unused_mut)]let mut scope_976 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_977) = &input.secondary_private_ip_address_count {
        scope_976.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_977).into()));
    }
    #[allow(unused_mut)]let mut scope_978 = writer.prefix("SubnetId");
    if let Some(var_979) = &input.subnet_id {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]let mut scope_980 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_981) = &input.associate_carrier_ip_address {
        scope_980.boolean(*var_981);
    }
    #[allow(unused_mut)]let mut scope_982 = writer.prefix("InterfaceType");
    if let Some(var_983) = &input.interface_type {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]let mut scope_984 = writer.prefix("NetworkCardIndex");
    if let Some(var_985) = &input.network_card_index {
        scope_984.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_985).into()));
    }
    #[allow(unused_mut)]let mut scope_986 = writer.prefix("Ipv4Prefix");
    if let Some(var_987) = &input.ipv4_prefixes {
        let mut list_989 = scope_986.start_list(true, Some("item"));
        for item_988 in var_987 {
            #[allow(unused_mut)]let mut entry_990 = list_989.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_990, item_988)?;
        }
        list_989.finish();
    }
    #[allow(unused_mut)]let mut scope_991 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_992) = &input.ipv4_prefix_count {
        scope_991.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_992).into()));
    }
    #[allow(unused_mut)]let mut scope_993 = writer.prefix("Ipv6Prefix");
    if let Some(var_994) = &input.ipv6_prefixes {
        let mut list_996 = scope_993.start_list(true, Some("item"));
        for item_995 in var_994 {
            #[allow(unused_mut)]let mut entry_997 = list_996.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_997, item_995)?;
        }
        list_996.finish();
    }
    #[allow(unused_mut)]let mut scope_998 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_999) = &input.ipv6_prefix_count {
        scope_998.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_999).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_elastic_gpu_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ElasticGpuSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1000 = writer.prefix("Type");
    if let Some(var_1001) = &input.r#type {
        scope_1000.string(var_1001);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_elastic_inference_accelerator(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ElasticInferenceAccelerator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1002 = writer.prefix("Type");
    if let Some(var_1003) = &input.r#type {
        scope_1002.string(var_1003);
    }
    #[allow(unused_mut)]let mut scope_1004 = writer.prefix("Count");
    if let Some(var_1005) = &input.count {
        scope_1004.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1005).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1006 = writer.prefix("LaunchTemplateId");
    if let Some(var_1007) = &input.launch_template_id {
        scope_1006.string(var_1007);
    }
    #[allow(unused_mut)]let mut scope_1008 = writer.prefix("LaunchTemplateName");
    if let Some(var_1009) = &input.launch_template_name {
        scope_1008.string(var_1009);
    }
    #[allow(unused_mut)]let mut scope_1010 = writer.prefix("Version");
    if let Some(var_1011) = &input.version {
        scope_1010.string(var_1011);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1012 = writer.prefix("MarketType");
    if let Some(var_1013) = &input.market_type {
        scope_1012.string(var_1013.as_str());
    }
    #[allow(unused_mut)]let mut scope_1014 = writer.prefix("SpotOptions");
    if let Some(var_1015) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_1014, var_1015)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_credit_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreditSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1016 = writer.prefix("CpuCredits");
    if let Some(var_1017) = &input.cpu_credits {
        scope_1016.string(var_1017);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_cpu_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CpuOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1018 = writer.prefix("CoreCount");
    if let Some(var_1019) = &input.core_count {
        scope_1018.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1019).into()));
    }
    #[allow(unused_mut)]let mut scope_1020 = writer.prefix("ThreadsPerCore");
    if let Some(var_1021) = &input.threads_per_core {
        scope_1020.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1021).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_hibernation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::HibernationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1022 = writer.prefix("Configured");
    if let Some(var_1023) = &input.configured {
        scope_1022.boolean(*var_1023);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1024 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1025) = &input.license_configuration_arn {
        scope_1024.string(var_1025);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_metadata_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMetadataOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1026 = writer.prefix("HttpTokens");
    if let Some(var_1027) = &input.http_tokens {
        scope_1026.string(var_1027.as_str());
    }
    #[allow(unused_mut)]let mut scope_1028 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1029) = &input.http_put_response_hop_limit {
        scope_1028.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1029).into()));
    }
    #[allow(unused_mut)]let mut scope_1030 = writer.prefix("HttpEndpoint");
    if let Some(var_1031) = &input.http_endpoint {
        scope_1030.string(var_1031.as_str());
    }
    #[allow(unused_mut)]let mut scope_1032 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1033) = &input.http_protocol_ipv6 {
        scope_1032.string(var_1033.as_str());
    }
    #[allow(unused_mut)]let mut scope_1034 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1035) = &input.instance_metadata_tags {
        scope_1034.string(var_1035.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_enclave_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EnclaveOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1036 = writer.prefix("Enabled");
    if let Some(var_1037) = &input.enabled {
        scope_1036.boolean(*var_1037);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_private_dns_name_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrivateDnsNameOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1038 = writer.prefix("HostnameType");
    if let Some(var_1039) = &input.hostname_type {
        scope_1038.string(var_1039.as_str());
    }
    #[allow(unused_mut)]let mut scope_1040 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1041) = &input.enable_resource_name_dns_a_record {
        scope_1040.boolean(*var_1041);
    }
    #[allow(unused_mut)]let mut scope_1042 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1043) = &input.enable_resource_name_dns_aaaa_record {
        scope_1042.boolean(*var_1043);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_maintenance_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceMaintenanceOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1044 = writer.prefix("AutoRecovery");
    if let Some(var_1045) = &input.auto_recovery {
        scope_1044.string(var_1045.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1046 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1047) = &input.block_device_mappings {
        let mut list_1049 = scope_1046.start_list(true, Some("BlockDeviceMapping"));
        for item_1048 in var_1047 {
            #[allow(unused_mut)]let mut entry_1050 = list_1049.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1050, item_1048)?;
        }
        list_1049.finish();
    }
    #[allow(unused_mut)]let mut scope_1051 = writer.prefix("EbsOptimized");
    if let Some(var_1052) = &input.ebs_optimized {
        scope_1051.boolean(*var_1052);
    }
    #[allow(unused_mut)]let mut scope_1053 = writer.prefix("IamInstanceProfile");
    if let Some(var_1054) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(scope_1053, var_1054)?;
    }
    #[allow(unused_mut)]let mut scope_1055 = writer.prefix("ImageId");
    if let Some(var_1056) = &input.image_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]let mut scope_1057 = writer.prefix("InstanceType");
    if let Some(var_1058) = &input.instance_type {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]let mut scope_1059 = writer.prefix("KernelId");
    if let Some(var_1060) = &input.kernel_id {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]let mut scope_1061 = writer.prefix("KeyName");
    if let Some(var_1062) = &input.key_name {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]let mut scope_1063 = writer.prefix("Monitoring");
    if let Some(var_1064) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(scope_1063, var_1064)?;
    }
    #[allow(unused_mut)]let mut scope_1065 = writer.prefix("NetworkInterface");
    if let Some(var_1066) = &input.network_interfaces {
        let mut list_1068 = scope_1065.start_list(true, Some("NetworkInterface"));
        for item_1067 in var_1066 {
            #[allow(unused_mut)]let mut entry_1069 = list_1068.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1069, item_1067)?;
        }
        list_1068.finish();
    }
    #[allow(unused_mut)]let mut scope_1070 = writer.prefix("Placement");
    if let Some(var_1071) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(scope_1070, var_1071)?;
    }
    #[allow(unused_mut)]let mut scope_1072 = writer.prefix("RamdiskId");
    if let Some(var_1073) = &input.ramdisk_id {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]let mut scope_1074 = writer.prefix("SecurityGroupId");
    if let Some(var_1075) = &input.security_group_ids {
        let mut list_1077 = scope_1074.start_list(true, Some("SecurityGroupId"));
        for item_1076 in var_1075 {
            #[allow(unused_mut)]let mut entry_1078 = list_1077.entry();
            entry_1078.string(item_1076);
        }
        list_1077.finish();
    }
    #[allow(unused_mut)]let mut scope_1079 = writer.prefix("SubnetId");
    if let Some(var_1080) = &input.subnet_id {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]let mut scope_1081 = writer.prefix("UserData");
    if let Some(var_1082) = &input.user_data {
        scope_1081.string(var_1082);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_security_group_rule_description(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleDescription) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1083 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1084) = &input.security_group_rule_id {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]let mut scope_1085 = writer.prefix("Description");
    if let Some(var_1086) = &input.description {
        scope_1085.string(var_1086);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ip_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IpRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1087 = writer.prefix("CidrIp");
    if let Some(var_1088) = &input.cidr_ip {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]let mut scope_1089 = writer.prefix("Description");
    if let Some(var_1090) = &input.description {
        scope_1089.string(var_1090);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ipv6_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Ipv6Range) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1091 = writer.prefix("CidrIpv6");
    if let Some(var_1092) = &input.cidr_ipv6 {
        scope_1091.string(var_1092);
    }
    #[allow(unused_mut)]let mut scope_1093 = writer.prefix("Description");
    if let Some(var_1094) = &input.description {
        scope_1093.string(var_1094);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_prefix_list_id(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PrefixListId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1095 = writer.prefix("Description");
    if let Some(var_1096) = &input.description {
        scope_1095.string(var_1096);
    }
    #[allow(unused_mut)]let mut scope_1097 = writer.prefix("PrefixListId");
    if let Some(var_1098) = &input.prefix_list_id {
        scope_1097.string(var_1098);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_user_id_group_pair(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserIdGroupPair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1099 = writer.prefix("Description");
    if let Some(var_1100) = &input.description {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]let mut scope_1101 = writer.prefix("GroupId");
    if let Some(var_1102) = &input.group_id {
        scope_1101.string(var_1102);
    }
    #[allow(unused_mut)]let mut scope_1103 = writer.prefix("GroupName");
    if let Some(var_1104) = &input.group_name {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]let mut scope_1105 = writer.prefix("PeeringStatus");
    if let Some(var_1106) = &input.peering_status {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]let mut scope_1107 = writer.prefix("UserId");
    if let Some(var_1108) = &input.user_id {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]let mut scope_1109 = writer.prefix("VpcId");
    if let Some(var_1110) = &input.vpc_id {
        scope_1109.string(var_1110);
    }
    #[allow(unused_mut)]let mut scope_1111 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1112) = &input.vpc_peering_connection_id {
        scope_1111.string(var_1112);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_s3_storage(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::S3Storage) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1113 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1114) = &input.aws_access_key_id {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]let mut scope_1115 = writer.prefix("Bucket");
    if let Some(var_1116) = &input.bucket {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]let mut scope_1117 = writer.prefix("Prefix");
    if let Some(var_1118) = &input.prefix {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]let mut scope_1119 = writer.prefix("UploadPolicy");
    if let Some(var_1120) = &input.upload_policy {
        scope_1119.string(&aws_smithy_types::base64::encode(var_1120));
    }
    #[allow(unused_mut)]let mut scope_1121 = writer.prefix("UploadPolicySignature");
    if let Some(var_1122) = &input.upload_policy_signature {
        scope_1121.string(var_1122);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_directory_service_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::DirectoryServiceAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1123 = writer.prefix("DirectoryId");
    if let Some(var_1124) = &input.directory_id {
        scope_1123.string(var_1124);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_certificate_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CertificateAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1125 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1126) = &input.client_root_certificate_chain_arn {
        scope_1125.string(var_1126);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_federated_authentication_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FederatedAuthenticationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1127 = writer.prefix("SAMLProviderArn");
    if let Some(var_1128) = &input.saml_provider_arn {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]let mut scope_1129 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1130) = &input.self_service_saml_provider_arn {
        scope_1129.string(var_1130);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetSpotMaintenanceStrategiesRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1131 = writer.prefix("CapacityRebalance");
    if let Some(var_1132) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(scope_1131, var_1132)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_capacity_reservation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1133 = writer.prefix("UsageStrategy");
    if let Some(var_1134) = &input.usage_strategy {
        scope_1133.string(var_1134.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1135 = writer.prefix("LaunchTemplateId");
    if let Some(var_1136) = &input.launch_template_id {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]let mut scope_1137 = writer.prefix("LaunchTemplateName");
    if let Some(var_1138) = &input.launch_template_name {
        scope_1137.string(var_1138);
    }
    #[allow(unused_mut)]let mut scope_1139 = writer.prefix("Version");
    if let Some(var_1140) = &input.version {
        scope_1139.string(var_1140);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateOverridesRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1141 = writer.prefix("InstanceType");
    if let Some(var_1142) = &input.instance_type {
        scope_1141.string(var_1142.as_str());
    }
    #[allow(unused_mut)]let mut scope_1143 = writer.prefix("MaxPrice");
    if let Some(var_1144) = &input.max_price {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]let mut scope_1145 = writer.prefix("SubnetId");
    if let Some(var_1146) = &input.subnet_id {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]let mut scope_1147 = writer.prefix("AvailabilityZone");
    if let Some(var_1148) = &input.availability_zone {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]let mut scope_1149 = writer.prefix("WeightedCapacity");
    if let Some(var_1150) = &input.weighted_capacity {
        scope_1149.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1150).into()));
    }
    #[allow(unused_mut)]let mut scope_1151 = writer.prefix("Priority");
    if let Some(var_1152) = &input.priority {
        scope_1151.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1152).into()));
    }
    #[allow(unused_mut)]let mut scope_1153 = writer.prefix("Placement");
    if let Some(var_1154) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1153, var_1154)?;
    }
    #[allow(unused_mut)]let mut scope_1155 = writer.prefix("InstanceRequirements");
    if let Some(var_1156) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(scope_1155, var_1156)?;
    }
    #[allow(unused_mut)]let mut scope_1157 = writer.prefix("ImageId");
    if let Some(var_1158) = &input.image_id {
        scope_1157.string(var_1158);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ebs_block_device(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EbsBlockDevice) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1159 = writer.prefix("DeleteOnTermination");
    if let Some(var_1160) = &input.delete_on_termination {
        scope_1159.boolean(*var_1160);
    }
    #[allow(unused_mut)]let mut scope_1161 = writer.prefix("Iops");
    if let Some(var_1162) = &input.iops {
        scope_1161.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1162).into()));
    }
    #[allow(unused_mut)]let mut scope_1163 = writer.prefix("SnapshotId");
    if let Some(var_1164) = &input.snapshot_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]let mut scope_1165 = writer.prefix("VolumeSize");
    if let Some(var_1166) = &input.volume_size {
        scope_1165.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1166).into()));
    }
    #[allow(unused_mut)]let mut scope_1167 = writer.prefix("VolumeType");
    if let Some(var_1168) = &input.volume_type {
        scope_1167.string(var_1168.as_str());
    }
    #[allow(unused_mut)]let mut scope_1169 = writer.prefix("KmsKeyId");
    if let Some(var_1170) = &input.kms_key_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]let mut scope_1171 = writer.prefix("Throughput");
    if let Some(var_1172) = &input.throughput {
        scope_1171.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1172).into()));
    }
    #[allow(unused_mut)]let mut scope_1173 = writer.prefix("OutpostArn");
    if let Some(var_1174) = &input.outpost_arn {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]let mut scope_1175 = writer.prefix("Encrypted");
    if let Some(var_1176) = &input.encrypted {
        scope_1175.boolean(*var_1176);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1177 = writer.prefix("Arn");
    if let Some(var_1178) = &input.arn {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]let mut scope_1179 = writer.prefix("Name");
    if let Some(var_1180) = &input.name {
        scope_1179.string(var_1180);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateBlockDeviceMappingRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1181 = writer.prefix("DeviceName");
    if let Some(var_1182) = &input.device_name {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]let mut scope_1183 = writer.prefix("VirtualName");
    if let Some(var_1184) = &input.virtual_name {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]let mut scope_1185 = writer.prefix("Ebs");
    if let Some(var_1186) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(scope_1185, var_1186)?;
    }
    #[allow(unused_mut)]let mut scope_1187 = writer.prefix("NoDevice");
    if let Some(var_1188) = &input.no_device {
        scope_1187.string(var_1188);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1189 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1190) = &input.associate_carrier_ip_address {
        scope_1189.boolean(*var_1190);
    }
    #[allow(unused_mut)]let mut scope_1191 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1192) = &input.associate_public_ip_address {
        scope_1191.boolean(*var_1192);
    }
    #[allow(unused_mut)]let mut scope_1193 = writer.prefix("DeleteOnTermination");
    if let Some(var_1194) = &input.delete_on_termination {
        scope_1193.boolean(*var_1194);
    }
    #[allow(unused_mut)]let mut scope_1195 = writer.prefix("Description");
    if let Some(var_1196) = &input.description {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]let mut scope_1197 = writer.prefix("DeviceIndex");
    if let Some(var_1198) = &input.device_index {
        scope_1197.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1198).into()));
    }
    #[allow(unused_mut)]let mut scope_1199 = writer.prefix("SecurityGroupId");
    if let Some(var_1200) = &input.groups {
        let mut list_1202 = scope_1199.start_list(true, Some("SecurityGroupId"));
        for item_1201 in var_1200 {
            #[allow(unused_mut)]let mut entry_1203 = list_1202.entry();
            entry_1203.string(item_1201);
        }
        list_1202.finish();
    }
    #[allow(unused_mut)]let mut scope_1204 = writer.prefix("InterfaceType");
    if let Some(var_1205) = &input.interface_type {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]let mut scope_1206 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1207) = &input.ipv6_address_count {
        scope_1206.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1207).into()));
    }
    #[allow(unused_mut)]let mut scope_1208 = writer.prefix("Ipv6Addresses");
    if let Some(var_1209) = &input.ipv6_addresses {
        let mut list_1211 = scope_1208.start_list(true, Some("InstanceIpv6Address"));
        for item_1210 in var_1209 {
            #[allow(unused_mut)]let mut entry_1212 = list_1211.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(entry_1212, item_1210)?;
        }
        list_1211.finish();
    }
    #[allow(unused_mut)]let mut scope_1213 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1214) = &input.network_interface_id {
        scope_1213.string(var_1214);
    }
    #[allow(unused_mut)]let mut scope_1215 = writer.prefix("PrivateIpAddress");
    if let Some(var_1216) = &input.private_ip_address {
        scope_1215.string(var_1216);
    }
    #[allow(unused_mut)]let mut scope_1217 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1218) = &input.private_ip_addresses {
        let mut list_1220 = scope_1217.start_list(true, Some("item"));
        for item_1219 in var_1218 {
            #[allow(unused_mut)]let mut entry_1221 = list_1220.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(entry_1221, item_1219)?;
        }
        list_1220.finish();
    }
    #[allow(unused_mut)]let mut scope_1222 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1223) = &input.secondary_private_ip_address_count {
        scope_1222.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1223).into()));
    }
    #[allow(unused_mut)]let mut scope_1224 = writer.prefix("SubnetId");
    if let Some(var_1225) = &input.subnet_id {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]let mut scope_1226 = writer.prefix("NetworkCardIndex");
    if let Some(var_1227) = &input.network_card_index {
        scope_1226.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1227).into()));
    }
    #[allow(unused_mut)]let mut scope_1228 = writer.prefix("Ipv4Prefix");
    if let Some(var_1229) = &input.ipv4_prefixes {
        let mut list_1231 = scope_1228.start_list(true, Some("item"));
        for item_1230 in var_1229 {
            #[allow(unused_mut)]let mut entry_1232 = list_1231.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(entry_1232, item_1230)?;
        }
        list_1231.finish();
    }
    #[allow(unused_mut)]let mut scope_1233 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1234) = &input.ipv4_prefix_count {
        scope_1233.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1234).into()));
    }
    #[allow(unused_mut)]let mut scope_1235 = writer.prefix("Ipv6Prefix");
    if let Some(var_1236) = &input.ipv6_prefixes {
        let mut list_1238 = scope_1235.start_list(true, Some("item"));
        for item_1237 in var_1236 {
            #[allow(unused_mut)]let mut entry_1239 = list_1238.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(entry_1239, item_1237)?;
        }
        list_1238.finish();
    }
    #[allow(unused_mut)]let mut scope_1240 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1241) = &input.ipv6_prefix_count {
        scope_1240.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1241).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_templates_monitoring_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatesMonitoringRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1242 = writer.prefix("Enabled");
    if let Some(var_1243) = &input.enabled {
        scope_1242.boolean(*var_1243);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_placement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatePlacementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1244 = writer.prefix("AvailabilityZone");
    if let Some(var_1245) = &input.availability_zone {
        scope_1244.string(var_1245);
    }
    #[allow(unused_mut)]let mut scope_1246 = writer.prefix("Affinity");
    if let Some(var_1247) = &input.affinity {
        scope_1246.string(var_1247);
    }
    #[allow(unused_mut)]let mut scope_1248 = writer.prefix("GroupName");
    if let Some(var_1249) = &input.group_name {
        scope_1248.string(var_1249);
    }
    #[allow(unused_mut)]let mut scope_1250 = writer.prefix("HostId");
    if let Some(var_1251) = &input.host_id {
        scope_1250.string(var_1251);
    }
    #[allow(unused_mut)]let mut scope_1252 = writer.prefix("Tenancy");
    if let Some(var_1253) = &input.tenancy {
        scope_1252.string(var_1253.as_str());
    }
    #[allow(unused_mut)]let mut scope_1254 = writer.prefix("SpreadDomain");
    if let Some(var_1255) = &input.spread_domain {
        scope_1254.string(var_1255);
    }
    #[allow(unused_mut)]let mut scope_1256 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1257) = &input.host_resource_group_arn {
        scope_1256.string(var_1257);
    }
    #[allow(unused_mut)]let mut scope_1258 = writer.prefix("PartitionNumber");
    if let Some(var_1259) = &input.partition_number {
        scope_1258.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1259).into()));
    }
    #[allow(unused_mut)]let mut scope_1260 = writer.prefix("GroupId");
    if let Some(var_1261) = &input.group_id {
        scope_1260.string(var_1261);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_tag_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateTagSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1262 = writer.prefix("ResourceType");
    if let Some(var_1263) = &input.resource_type {
        scope_1262.string(var_1263.as_str());
    }
    #[allow(unused_mut)]let mut scope_1264 = writer.prefix("Tag");
    if let Some(var_1265) = &input.tags {
        let mut list_1267 = scope_1264.start_list(true, Some("item"));
        for item_1266 in var_1265 {
            #[allow(unused_mut)]let mut entry_1268 = list_1267.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1268, item_1266)?;
        }
        list_1267.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateElasticInferenceAccelerator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1269 = writer.prefix("Type");
    if let Some(var_1270) = &input.r#type {
        scope_1269.string(var_1270);
    }
    #[allow(unused_mut)]let mut scope_1271 = writer.prefix("Count");
    if let Some(var_1272) = &input.count {
        scope_1271.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1272).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1273 = writer.prefix("MarketType");
    if let Some(var_1274) = &input.market_type {
        scope_1273.string(var_1274.as_str());
    }
    #[allow(unused_mut)]let mut scope_1275 = writer.prefix("SpotOptions");
    if let Some(var_1276) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1275, var_1276)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_cpu_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateCpuOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1277 = writer.prefix("CoreCount");
    if let Some(var_1278) = &input.core_count {
        scope_1277.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1278).into()));
    }
    #[allow(unused_mut)]let mut scope_1279 = writer.prefix("ThreadsPerCore");
    if let Some(var_1280) = &input.threads_per_core {
        scope_1279.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1280).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1281 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1282) = &input.capacity_reservation_preference {
        scope_1281.string(var_1282.as_str());
    }
    #[allow(unused_mut)]let mut scope_1283 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1284) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(scope_1283, var_1284)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_license_configuration_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateLicenseConfigurationRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1285 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1286) = &input.license_configuration_arn {
        scope_1285.string(var_1286);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateHibernationOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1287 = writer.prefix("Configured");
    if let Some(var_1288) = &input.configured {
        scope_1287.boolean(*var_1288);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1289 = writer.prefix("HttpTokens");
    if let Some(var_1290) = &input.http_tokens {
        scope_1289.string(var_1290.as_str());
    }
    #[allow(unused_mut)]let mut scope_1291 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1292) = &input.http_put_response_hop_limit {
        scope_1291.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1292).into()));
    }
    #[allow(unused_mut)]let mut scope_1293 = writer.prefix("HttpEndpoint");
    if let Some(var_1294) = &input.http_endpoint {
        scope_1293.string(var_1294.as_str());
    }
    #[allow(unused_mut)]let mut scope_1295 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1296) = &input.http_protocol_ipv6 {
        scope_1295.string(var_1296.as_str());
    }
    #[allow(unused_mut)]let mut scope_1297 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1298) = &input.instance_metadata_tags {
        scope_1297.string(var_1298.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_enclave_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateEnclaveOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1299 = writer.prefix("Enabled");
    if let Some(var_1300) = &input.enabled {
        scope_1299.boolean(*var_1300);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1301 = writer.prefix("HostnameType");
    if let Some(var_1302) = &input.hostname_type {
        scope_1301.string(var_1302.as_str());
    }
    #[allow(unused_mut)]let mut scope_1303 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1304) = &input.enable_resource_name_dns_a_record {
        scope_1303.boolean(*var_1304);
    }
    #[allow(unused_mut)]let mut scope_1305 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1306) = &input.enable_resource_name_dns_aaaa_record {
        scope_1305.boolean(*var_1306);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1307 = writer.prefix("AutoRecovery");
    if let Some(var_1308) = &input.auto_recovery {
        scope_1307.string(var_1308.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_path_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PathStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1309 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1310) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(scope_1309, var_1310)?;
    }
    #[allow(unused_mut)]let mut scope_1311 = writer.prefix("ResourceStatement");
    if let Some(var_1312) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(scope_1311, var_1312)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_through_resources_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ThroughResourcesStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1313 = writer.prefix("ResourceStatement");
    if let Some(var_1314) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(scope_1313, var_1314)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnTunnelOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1315 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1316) = &input.tunnel_inside_cidr {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]let mut scope_1317 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1318) = &input.tunnel_inside_ipv6_cidr {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]let mut scope_1319 = writer.prefix("PreSharedKey");
    if let Some(var_1320) = &input.pre_shared_key {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]let mut scope_1321 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1322) = &input.phase1_lifetime_seconds {
        scope_1321.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1322).into()));
    }
    #[allow(unused_mut)]let mut scope_1323 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1324) = &input.phase2_lifetime_seconds {
        scope_1323.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1324).into()));
    }
    #[allow(unused_mut)]let mut scope_1325 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1326) = &input.rekey_margin_time_seconds {
        scope_1325.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1326).into()));
    }
    #[allow(unused_mut)]let mut scope_1327 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1328) = &input.rekey_fuzz_percentage {
        scope_1327.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1328).into()));
    }
    #[allow(unused_mut)]let mut scope_1329 = writer.prefix("ReplayWindowSize");
    if let Some(var_1330) = &input.replay_window_size {
        scope_1329.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1330).into()));
    }
    #[allow(unused_mut)]let mut scope_1331 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1332) = &input.dpd_timeout_seconds {
        scope_1331.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1332).into()));
    }
    #[allow(unused_mut)]let mut scope_1333 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1334) = &input.dpd_timeout_action {
        scope_1333.string(var_1334);
    }
    #[allow(unused_mut)]let mut scope_1335 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1336) = &input.phase1_encryption_algorithms {
        let mut list_1338 = scope_1335.start_list(true, Some("item"));
        for item_1337 in var_1336 {
            #[allow(unused_mut)]let mut entry_1339 = list_1338.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1339, item_1337)?;
        }
        list_1338.finish();
    }
    #[allow(unused_mut)]let mut scope_1340 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1341) = &input.phase2_encryption_algorithms {
        let mut list_1343 = scope_1340.start_list(true, Some("item"));
        for item_1342 in var_1341 {
            #[allow(unused_mut)]let mut entry_1344 = list_1343.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1344, item_1342)?;
        }
        list_1343.finish();
    }
    #[allow(unused_mut)]let mut scope_1345 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1346) = &input.phase1_integrity_algorithms {
        let mut list_1348 = scope_1345.start_list(true, Some("item"));
        for item_1347 in var_1346 {
            #[allow(unused_mut)]let mut entry_1349 = list_1348.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1349, item_1347)?;
        }
        list_1348.finish();
    }
    #[allow(unused_mut)]let mut scope_1350 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1351) = &input.phase2_integrity_algorithms {
        let mut list_1353 = scope_1350.start_list(true, Some("item"));
        for item_1352 in var_1351 {
            #[allow(unused_mut)]let mut entry_1354 = list_1353.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1354, item_1352)?;
        }
        list_1353.finish();
    }
    #[allow(unused_mut)]let mut scope_1355 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1356) = &input.phase1_dh_group_numbers {
        let mut list_1358 = scope_1355.start_list(true, Some("item"));
        for item_1357 in var_1356 {
            #[allow(unused_mut)]let mut entry_1359 = list_1358.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1359, item_1357)?;
        }
        list_1358.finish();
    }
    #[allow(unused_mut)]let mut scope_1360 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1361) = &input.phase2_dh_group_numbers {
        let mut list_1363 = scope_1360.start_list(true, Some("item"));
        for item_1362 in var_1361 {
            #[allow(unused_mut)]let mut entry_1364 = list_1363.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1364, item_1362)?;
        }
        list_1363.finish();
    }
    #[allow(unused_mut)]let mut scope_1365 = writer.prefix("IKEVersion");
    if let Some(var_1366) = &input.ike_versions {
        let mut list_1368 = scope_1365.start_list(true, Some("item"));
        for item_1367 in var_1366 {
            #[allow(unused_mut)]let mut entry_1369 = list_1368.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(entry_1369, item_1367)?;
        }
        list_1368.finish();
    }
    #[allow(unused_mut)]let mut scope_1370 = writer.prefix("StartupAction");
    if let Some(var_1371) = &input.startup_action {
        scope_1370.string(var_1371);
    }
    #[allow(unused_mut)]let mut scope_1372 = writer.prefix("LogOptions");
    if let Some(var_1373) = &input.log_options {
        crate::query_ser::serialize_structure_crate_model_vpn_tunnel_log_options_specification(scope_1372, var_1373)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_athena_integration(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AthenaIntegration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1374 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1375) = &input.integration_result_s3_destination_arn {
        scope_1374.string(var_1375);
    }
    #[allow(unused_mut)]let mut scope_1376 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1377) = &input.partition_load_frequency {
        scope_1376.string(var_1377.as_str());
    }
    #[allow(unused_mut)]let mut scope_1378 = writer.prefix("PartitionStartDate");
    if let Some(var_1379) = &input.partition_start_date {
        scope_1378.date_time(var_1379, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_1380 = writer.prefix("PartitionEndDate");
    if let Some(var_1381) = &input.partition_end_date {
        scope_1380.date_time(var_1381, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_v_cpu_count_range_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VCpuCountRangeRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1382 = writer.prefix("Min");
    if let Some(var_1383) = &input.min {
        scope_1382.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1383).into()));
    }
    #[allow(unused_mut)]let mut scope_1384 = writer.prefix("Max");
    if let Some(var_1385) = &input.max {
        scope_1384.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1385).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_memory_mi_b_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryMiBRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1386 = writer.prefix("Min");
    if let Some(var_1387) = &input.min {
        scope_1386.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1387).into()));
    }
    #[allow(unused_mut)]let mut scope_1388 = writer.prefix("Max");
    if let Some(var_1389) = &input.max {
        scope_1388.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1389).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryGiBPerVCpuRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1390 = writer.prefix("Min");
    if let Some(var_1391) = &input.min {
        scope_1390.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1391).into()));
    }
    #[allow(unused_mut)]let mut scope_1392 = writer.prefix("Max");
    if let Some(var_1393) = &input.max {
        scope_1392.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1393).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_network_interface_count_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceCountRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1394 = writer.prefix("Min");
    if let Some(var_1395) = &input.min {
        scope_1394.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1395).into()));
    }
    #[allow(unused_mut)]let mut scope_1396 = writer.prefix("Max");
    if let Some(var_1397) = &input.max {
        scope_1396.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1397).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_total_local_storage_gb_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TotalLocalStorageGbRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1398 = writer.prefix("Min");
    if let Some(var_1399) = &input.min {
        scope_1398.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1399).into()));
    }
    #[allow(unused_mut)]let mut scope_1400 = writer.prefix("Max");
    if let Some(var_1401) = &input.max {
        scope_1400.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1401).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BaselineEbsBandwidthMbpsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1402 = writer.prefix("Min");
    if let Some(var_1403) = &input.min {
        scope_1402.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1403).into()));
    }
    #[allow(unused_mut)]let mut scope_1404 = writer.prefix("Max");
    if let Some(var_1405) = &input.max {
        scope_1404.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1405).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_accelerator_count_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorCountRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1406 = writer.prefix("Min");
    if let Some(var_1407) = &input.min {
        scope_1406.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1407).into()));
    }
    #[allow(unused_mut)]let mut scope_1408 = writer.prefix("Max");
    if let Some(var_1409) = &input.max {
        scope_1408.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1409).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorTotalMemoryMiBRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1410 = writer.prefix("Min");
    if let Some(var_1411) = &input.min {
        scope_1410.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1411).into()));
    }
    #[allow(unused_mut)]let mut scope_1412 = writer.prefix("Max");
    if let Some(var_1413) = &input.max {
        scope_1412.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1413).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_network_bandwidth_gbps_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkBandwidthGbpsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1414 = writer.prefix("Min");
    if let Some(var_1415) = &input.min {
        scope_1414.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1415).into()));
    }
    #[allow(unused_mut)]let mut scope_1416 = writer.prefix("Max");
    if let Some(var_1417) = &input.max {
        scope_1416.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1417).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_user_bucket(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserBucket) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1418 = writer.prefix("S3Bucket");
    if let Some(var_1419) = &input.s3_bucket {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]let mut scope_1420 = writer.prefix("S3Key");
    if let Some(var_1421) = &input.s3_key {
        scope_1420.string(var_1421);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_user_data(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::UserData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1422 = writer.prefix("Data");
    if let Some(var_1423) = &input.data {
        scope_1422.string(var_1423);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_load_permission_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadPermissionRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1424 = writer.prefix("Group");
    if let Some(var_1425) = &input.group {
        scope_1424.string(var_1425.as_str());
    }
    #[allow(unused_mut)]let mut scope_1426 = writer.prefix("UserId");
    if let Some(var_1427) = &input.user_id {
        scope_1426.string(var_1427);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchPermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1428 = writer.prefix("Group");
    if let Some(var_1429) = &input.group {
        scope_1428.string(var_1429.as_str());
    }
    #[allow(unused_mut)]let mut scope_1430 = writer.prefix("UserId");
    if let Some(var_1431) = &input.user_id {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]let mut scope_1432 = writer.prefix("OrganizationArn");
    if let Some(var_1433) = &input.organization_arn {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]let mut scope_1434 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1435) = &input.organizational_unit_arn {
        scope_1434.string(var_1435);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::EbsInstanceBlockDeviceSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1436 = writer.prefix("DeleteOnTermination");
    if let Some(var_1437) = &input.delete_on_termination {
        scope_1436.boolean(*var_1437);
    }
    #[allow(unused_mut)]let mut scope_1438 = writer.prefix("VolumeId");
    if let Some(var_1439) = &input.volume_id {
        scope_1438.string(var_1439);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_capacity_reservation_target(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CapacityReservationTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1440 = writer.prefix("CapacityReservationId");
    if let Some(var_1441) = &input.capacity_reservation_id {
        scope_1440.string(var_1441);
    }
    #[allow(unused_mut)]let mut scope_1442 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1443) = &input.capacity_reservation_resource_group_arn {
        scope_1442.string(var_1443);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_security_group_rule_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SecurityGroupRuleRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1444 = writer.prefix("IpProtocol");
    if let Some(var_1445) = &input.ip_protocol {
        scope_1444.string(var_1445);
    }
    #[allow(unused_mut)]let mut scope_1446 = writer.prefix("FromPort");
    if let Some(var_1447) = &input.from_port {
        scope_1446.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1447).into()));
    }
    #[allow(unused_mut)]let mut scope_1448 = writer.prefix("ToPort");
    if let Some(var_1449) = &input.to_port {
        scope_1448.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1449).into()));
    }
    #[allow(unused_mut)]let mut scope_1450 = writer.prefix("CidrIpv4");
    if let Some(var_1451) = &input.cidr_ipv4 {
        scope_1450.string(var_1451);
    }
    #[allow(unused_mut)]let mut scope_1452 = writer.prefix("CidrIpv6");
    if let Some(var_1453) = &input.cidr_ipv6 {
        scope_1452.string(var_1453);
    }
    #[allow(unused_mut)]let mut scope_1454 = writer.prefix("PrefixListId");
    if let Some(var_1455) = &input.prefix_list_id {
        scope_1454.string(var_1455);
    }
    #[allow(unused_mut)]let mut scope_1456 = writer.prefix("ReferencedGroupId");
    if let Some(var_1457) = &input.referenced_group_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]let mut scope_1458 = writer.prefix("Description");
    if let Some(var_1459) = &input.description {
        scope_1458.string(var_1459);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_create_volume_permission(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CreateVolumePermission) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1460 = writer.prefix("Group");
    if let Some(var_1461) = &input.group {
        scope_1460.string(var_1461.as_str());
    }
    #[allow(unused_mut)]let mut scope_1462 = writer.prefix("UserId");
    if let Some(var_1463) = &input.user_id {
        scope_1462.string(var_1463);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_launch_template_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetLaunchTemplateSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1464 = writer.prefix("LaunchTemplateId");
    if let Some(var_1465) = &input.launch_template_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]let mut scope_1466 = writer.prefix("LaunchTemplateName");
    if let Some(var_1467) = &input.launch_template_name {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]let mut scope_1468 = writer.prefix("Version");
    if let Some(var_1469) = &input.version {
        scope_1468.string(var_1469);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_overrides(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateOverrides) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1470 = writer.prefix("InstanceType");
    if let Some(var_1471) = &input.instance_type {
        scope_1470.string(var_1471.as_str());
    }
    #[allow(unused_mut)]let mut scope_1472 = writer.prefix("SpotPrice");
    if let Some(var_1473) = &input.spot_price {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]let mut scope_1474 = writer.prefix("SubnetId");
    if let Some(var_1475) = &input.subnet_id {
        scope_1474.string(var_1475);
    }
    #[allow(unused_mut)]let mut scope_1476 = writer.prefix("AvailabilityZone");
    if let Some(var_1477) = &input.availability_zone {
        scope_1476.string(var_1477);
    }
    #[allow(unused_mut)]let mut scope_1478 = writer.prefix("WeightedCapacity");
    if let Some(var_1479) = &input.weighted_capacity {
        scope_1478.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1479).into()));
    }
    #[allow(unused_mut)]let mut scope_1480 = writer.prefix("Priority");
    if let Some(var_1481) = &input.priority {
        scope_1480.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1481).into()));
    }
    #[allow(unused_mut)]let mut scope_1482 = writer.prefix("InstanceRequirements");
    if let Some(var_1483) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(scope_1482, var_1483)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1484 = writer.prefix("Value");
    if let Some(var_1485) = &input.value {
        scope_1484.string(var_1485);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1486 = writer.prefix("Value");
    if let Some(var_1487) = &input.value {
        scope_1486.string(var_1487);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1488 = writer.prefix("Value");
    if let Some(var_1489) = &input.value {
        scope_1488.string(var_1489);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1490 = writer.prefix("Value");
    if let Some(var_1491) = &input.value {
        scope_1490.string(var_1491);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase1DhGroupNumbersRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1492 = writer.prefix("Value");
    if let Some(var_1493) = &input.value {
        scope_1492.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1493).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::Phase2DhGroupNumbersRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1494 = writer.prefix("Value");
    if let Some(var_1495) = &input.value {
        scope_1494.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1495).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_ike_versions_request_list_value(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::IkeVersionsRequestListValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1496 = writer.prefix("Value");
    if let Some(var_1497) = &input.value {
        scope_1496.string(var_1497);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_vpn_tunnel_log_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VpnTunnelLogOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1498 = writer.prefix("CloudWatchLogOptions");
    if let Some(var_1499) = &input.cloud_watch_log_options {
        crate::query_ser::serialize_structure_crate_model_cloud_watch_log_options_specification(scope_1498, var_1499)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_maintenance_strategies(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotMaintenanceStrategies) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1500 = writer.prefix("CapacityRebalance");
    if let Some(var_1501) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(scope_1500, var_1501)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_fleet_launch_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetLaunchSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1502 = writer.prefix("GroupSet");
    if let Some(var_1503) = &input.security_groups {
        let mut list_1505 = scope_1502.start_list(true, Some("item"));
        for item_1504 in var_1503 {
            #[allow(unused_mut)]let mut entry_1506 = list_1505.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(entry_1506, item_1504)?;
        }
        list_1505.finish();
    }
    #[allow(unused_mut)]let mut scope_1507 = writer.prefix("AddressingType");
    if let Some(var_1508) = &input.addressing_type {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]let mut scope_1509 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1510) = &input.block_device_mappings {
        let mut list_1512 = scope_1509.start_list(true, Some("item"));
        for item_1511 in var_1510 {
            #[allow(unused_mut)]let mut entry_1513 = list_1512.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(entry_1513, item_1511)?;
        }
        list_1512.finish();
    }
    #[allow(unused_mut)]let mut scope_1514 = writer.prefix("EbsOptimized");
    if let Some(var_1515) = &input.ebs_optimized {
        scope_1514.boolean(*var_1515);
    }
    #[allow(unused_mut)]let mut scope_1516 = writer.prefix("IamInstanceProfile");
    if let Some(var_1517) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(scope_1516, var_1517)?;
    }
    #[allow(unused_mut)]let mut scope_1518 = writer.prefix("ImageId");
    if let Some(var_1519) = &input.image_id {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]let mut scope_1520 = writer.prefix("InstanceType");
    if let Some(var_1521) = &input.instance_type {
        scope_1520.string(var_1521.as_str());
    }
    #[allow(unused_mut)]let mut scope_1522 = writer.prefix("KernelId");
    if let Some(var_1523) = &input.kernel_id {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]let mut scope_1524 = writer.prefix("KeyName");
    if let Some(var_1525) = &input.key_name {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]let mut scope_1526 = writer.prefix("Monitoring");
    if let Some(var_1527) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(scope_1526, var_1527)?;
    }
    #[allow(unused_mut)]let mut scope_1528 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1529) = &input.network_interfaces {
        let mut list_1531 = scope_1528.start_list(true, Some("item"));
        for item_1530 in var_1529 {
            #[allow(unused_mut)]let mut entry_1532 = list_1531.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1532, item_1530)?;
        }
        list_1531.finish();
    }
    #[allow(unused_mut)]let mut scope_1533 = writer.prefix("Placement");
    if let Some(var_1534) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1533, var_1534)?;
    }
    #[allow(unused_mut)]let mut scope_1535 = writer.prefix("RamdiskId");
    if let Some(var_1536) = &input.ramdisk_id {
        scope_1535.string(var_1536);
    }
    #[allow(unused_mut)]let mut scope_1537 = writer.prefix("SpotPrice");
    if let Some(var_1538) = &input.spot_price {
        scope_1537.string(var_1538);
    }
    #[allow(unused_mut)]let mut scope_1539 = writer.prefix("SubnetId");
    if let Some(var_1540) = &input.subnet_id {
        scope_1539.string(var_1540);
    }
    #[allow(unused_mut)]let mut scope_1541 = writer.prefix("UserData");
    if let Some(var_1542) = &input.user_data {
        scope_1541.string(var_1542);
    }
    #[allow(unused_mut)]let mut scope_1543 = writer.prefix("WeightedCapacity");
    if let Some(var_1544) = &input.weighted_capacity {
        scope_1543.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1544).into()));
    }
    #[allow(unused_mut)]let mut scope_1545 = writer.prefix("TagSpecificationSet");
    if let Some(var_1546) = &input.tag_specifications {
        let mut list_1548 = scope_1545.start_list(true, Some("item"));
        for item_1547 in var_1546 {
            #[allow(unused_mut)]let mut entry_1549 = list_1548.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(entry_1549, item_1547)?;
        }
        list_1548.finish();
    }
    #[allow(unused_mut)]let mut scope_1550 = writer.prefix("InstanceRequirements");
    if let Some(var_1551) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(scope_1550, var_1551)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_load_balancers_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LoadBalancersConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1552 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1553) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(scope_1552, var_1553)?;
    }
    #[allow(unused_mut)]let mut scope_1554 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1555) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(scope_1554, var_1555)?;
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotPlacement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1556 = writer.prefix("AvailabilityZone");
    if let Some(var_1557) = &input.availability_zone {
        scope_1556.string(var_1557);
    }
    #[allow(unused_mut)]let mut scope_1558 = writer.prefix("GroupName");
    if let Some(var_1559) = &input.group_name {
        scope_1558.string(var_1559);
    }
    #[allow(unused_mut)]let mut scope_1560 = writer.prefix("Tenancy");
    if let Some(var_1561) = &input.tenancy {
        scope_1560.string(var_1561.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_market_options(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotMarketOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1562 = writer.prefix("MaxPrice");
    if let Some(var_1563) = &input.max_price {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]let mut scope_1564 = writer.prefix("SpotInstanceType");
    if let Some(var_1565) = &input.spot_instance_type {
        scope_1564.string(var_1565.as_str());
    }
    #[allow(unused_mut)]let mut scope_1566 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1567) = &input.block_duration_minutes {
        scope_1566.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1567).into()));
    }
    #[allow(unused_mut)]let mut scope_1568 = writer.prefix("ValidUntil");
    if let Some(var_1569) = &input.valid_until {
        scope_1568.date_time(var_1569, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_1570 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1571) = &input.instance_interruption_behavior {
        scope_1570.string(var_1571.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesBlockDeviceMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1572 = writer.prefix("DeviceName");
    if let Some(var_1573) = &input.device_name {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]let mut scope_1574 = writer.prefix("Ebs");
    if let Some(var_1575) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(scope_1574, var_1575)?;
    }
    #[allow(unused_mut)]let mut scope_1576 = writer.prefix("NoDevice");
    if let Some(var_1577) = &input.no_device {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]let mut scope_1578 = writer.prefix("VirtualName");
    if let Some(var_1579) = &input.virtual_name {
        scope_1578.string(var_1579);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesIamInstanceProfile) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1580 = writer.prefix("Arn");
    if let Some(var_1581) = &input.arn {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]let mut scope_1582 = writer.prefix("Name");
    if let Some(var_1583) = &input.name {
        scope_1582.string(var_1583);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_monitoring(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesMonitoring) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1584 = writer.prefix("Enabled");
    if let Some(var_1585) = &input.enabled {
        scope_1584.boolean(*var_1585);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_network_interface(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesNetworkInterface) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1586 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1587) = &input.associate_public_ip_address {
        scope_1586.boolean(*var_1587);
    }
    #[allow(unused_mut)]let mut scope_1588 = writer.prefix("DeleteOnTermination");
    if let Some(var_1589) = &input.delete_on_termination {
        scope_1588.boolean(*var_1589);
    }
    #[allow(unused_mut)]let mut scope_1590 = writer.prefix("Description");
    if let Some(var_1591) = &input.description {
        scope_1590.string(var_1591);
    }
    #[allow(unused_mut)]let mut scope_1592 = writer.prefix("DeviceIndex");
    if let Some(var_1593) = &input.device_index {
        scope_1592.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1593).into()));
    }
    #[allow(unused_mut)]let mut scope_1594 = writer.prefix("Group");
    if let Some(var_1595) = &input.groups {
        let mut list_1597 = scope_1594.start_list(true, Some("SecurityGroupId"));
        for item_1596 in var_1595 {
            #[allow(unused_mut)]let mut entry_1598 = list_1597.entry();
            entry_1598.string(item_1596);
        }
        list_1597.finish();
    }
    #[allow(unused_mut)]let mut scope_1599 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1600) = &input.ipv6_address_count {
        scope_1599.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1600).into()));
    }
    #[allow(unused_mut)]let mut scope_1601 = writer.prefix("Ipv6Address");
    if let Some(var_1602) = &input.ipv6_addresses {
        let mut list_1604 = scope_1601.start_list(true, Some("Ipv6Address"));
        for item_1603 in var_1602 {
            #[allow(unused_mut)]let mut entry_1605 = list_1604.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(entry_1605, item_1603)?;
        }
        list_1604.finish();
    }
    #[allow(unused_mut)]let mut scope_1606 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1607) = &input.network_interface_id {
        scope_1606.string(var_1607);
    }
    #[allow(unused_mut)]let mut scope_1608 = writer.prefix("PrivateIpAddress");
    if let Some(var_1609) = &input.private_ip_address {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]let mut scope_1610 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1611) = &input.private_ip_address_configs {
        let mut list_1613 = scope_1610.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1612 in var_1611 {
            #[allow(unused_mut)]let mut entry_1614 = list_1613.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1614, item_1612)?;
        }
        list_1613.finish();
    }
    #[allow(unused_mut)]let mut scope_1615 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1616) = &input.secondary_private_ip_address_count {
        scope_1615.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1616).into()));
    }
    #[allow(unused_mut)]let mut scope_1617 = writer.prefix("SubnetId");
    if let Some(var_1618) = &input.subnet_id {
        scope_1617.string(var_1618);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_placement(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesPlacement) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1619 = writer.prefix("AvailabilityZone");
    if let Some(var_1620) = &input.availability_zone {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]let mut scope_1621 = writer.prefix("GroupName");
    if let Some(var_1622) = &input.group_name {
        scope_1621.string(var_1622);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::FleetSpotCapacityRebalanceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1623 = writer.prefix("ReplacementStrategy");
    if let Some(var_1624) = &input.replacement_strategy {
        scope_1623.string(var_1624.as_str());
    }
    #[allow(unused_mut)]let mut scope_1625 = writer.prefix("TerminationDelay");
    if let Some(var_1626) = &input.termination_delay {
        scope_1625.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1626).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateEbsBlockDeviceRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1627 = writer.prefix("Encrypted");
    if let Some(var_1628) = &input.encrypted {
        scope_1627.boolean(*var_1628);
    }
    #[allow(unused_mut)]let mut scope_1629 = writer.prefix("DeleteOnTermination");
    if let Some(var_1630) = &input.delete_on_termination {
        scope_1629.boolean(*var_1630);
    }
    #[allow(unused_mut)]let mut scope_1631 = writer.prefix("Iops");
    if let Some(var_1632) = &input.iops {
        scope_1631.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1632).into()));
    }
    #[allow(unused_mut)]let mut scope_1633 = writer.prefix("KmsKeyId");
    if let Some(var_1634) = &input.kms_key_id {
        scope_1633.string(var_1634);
    }
    #[allow(unused_mut)]let mut scope_1635 = writer.prefix("SnapshotId");
    if let Some(var_1636) = &input.snapshot_id {
        scope_1635.string(var_1636);
    }
    #[allow(unused_mut)]let mut scope_1637 = writer.prefix("VolumeSize");
    if let Some(var_1638) = &input.volume_size {
        scope_1637.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1638).into()));
    }
    #[allow(unused_mut)]let mut scope_1639 = writer.prefix("VolumeType");
    if let Some(var_1640) = &input.volume_type {
        scope_1639.string(var_1640.as_str());
    }
    #[allow(unused_mut)]let mut scope_1641 = writer.prefix("Throughput");
    if let Some(var_1642) = &input.throughput {
        scope_1641.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1642).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_ipv6_address_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceIpv6AddressRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1643 = writer.prefix("Ipv6Address");
    if let Some(var_1644) = &input.ipv6_address {
        scope_1643.string(var_1644);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::LaunchTemplateSpotMarketOptionsRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1645 = writer.prefix("MaxPrice");
    if let Some(var_1646) = &input.max_price {
        scope_1645.string(var_1646);
    }
    #[allow(unused_mut)]let mut scope_1647 = writer.prefix("SpotInstanceType");
    if let Some(var_1648) = &input.spot_instance_type {
        scope_1647.string(var_1648.as_str());
    }
    #[allow(unused_mut)]let mut scope_1649 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1650) = &input.block_duration_minutes {
        scope_1649.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1650).into()));
    }
    #[allow(unused_mut)]let mut scope_1651 = writer.prefix("ValidUntil");
    if let Some(var_1652) = &input.valid_until {
        scope_1651.date_time(var_1652, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_1653 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1654) = &input.instance_interruption_behavior {
        scope_1653.string(var_1654.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_packet_header_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::PacketHeaderStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1655 = writer.prefix("SourceAddress");
    if let Some(var_1656) = &input.source_addresses {
        let mut list_1658 = scope_1655.start_list(true, Some("item"));
        for item_1657 in var_1656 {
            #[allow(unused_mut)]let mut entry_1659 = list_1658.entry();
            entry_1659.string(item_1657);
        }
        list_1658.finish();
    }
    #[allow(unused_mut)]let mut scope_1660 = writer.prefix("DestinationAddress");
    if let Some(var_1661) = &input.destination_addresses {
        let mut list_1663 = scope_1660.start_list(true, Some("item"));
        for item_1662 in var_1661 {
            #[allow(unused_mut)]let mut entry_1664 = list_1663.entry();
            entry_1664.string(item_1662);
        }
        list_1663.finish();
    }
    #[allow(unused_mut)]let mut scope_1665 = writer.prefix("SourcePort");
    if let Some(var_1666) = &input.source_ports {
        let mut list_1668 = scope_1665.start_list(true, Some("item"));
        for item_1667 in var_1666 {
            #[allow(unused_mut)]let mut entry_1669 = list_1668.entry();
            entry_1669.string(item_1667);
        }
        list_1668.finish();
    }
    #[allow(unused_mut)]let mut scope_1670 = writer.prefix("DestinationPort");
    if let Some(var_1671) = &input.destination_ports {
        let mut list_1673 = scope_1670.start_list(true, Some("item"));
        for item_1672 in var_1671 {
            #[allow(unused_mut)]let mut entry_1674 = list_1673.entry();
            entry_1674.string(item_1672);
        }
        list_1673.finish();
    }
    #[allow(unused_mut)]let mut scope_1675 = writer.prefix("SourcePrefixList");
    if let Some(var_1676) = &input.source_prefix_lists {
        let mut list_1678 = scope_1675.start_list(true, Some("item"));
        for item_1677 in var_1676 {
            #[allow(unused_mut)]let mut entry_1679 = list_1678.entry();
            entry_1679.string(item_1677);
        }
        list_1678.finish();
    }
    #[allow(unused_mut)]let mut scope_1680 = writer.prefix("DestinationPrefixList");
    if let Some(var_1681) = &input.destination_prefix_lists {
        let mut list_1683 = scope_1680.start_list(true, Some("item"));
        for item_1682 in var_1681 {
            #[allow(unused_mut)]let mut entry_1684 = list_1683.entry();
            entry_1684.string(item_1682);
        }
        list_1683.finish();
    }
    #[allow(unused_mut)]let mut scope_1685 = writer.prefix("Protocol");
    if let Some(var_1686) = &input.protocols {
        let mut list_1688 = scope_1685.start_list(true, Some("item"));
        for item_1687 in var_1686 {
            #[allow(unused_mut)]let mut entry_1689 = list_1688.entry();
            entry_1689.string(item_1687.as_str());
        }
        list_1688.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_resource_statement_request(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ResourceStatementRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1690 = writer.prefix("Resource");
    if let Some(var_1691) = &input.resources {
        let mut list_1693 = scope_1690.start_list(true, Some("item"));
        for item_1692 in var_1691 {
            #[allow(unused_mut)]let mut entry_1694 = list_1693.entry();
            entry_1694.string(item_1692);
        }
        list_1693.finish();
    }
    #[allow(unused_mut)]let mut scope_1695 = writer.prefix("ResourceType");
    if let Some(var_1696) = &input.resource_types {
        let mut list_1698 = scope_1695.start_list(true, Some("item"));
        for item_1697 in var_1696 {
            #[allow(unused_mut)]let mut entry_1699 = list_1698.entry();
            entry_1699.string(item_1697);
        }
        list_1698.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_instance_requirements(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::InstanceRequirements) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1700 = writer.prefix("VCpuCount");
    if let Some(var_1701) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1700, var_1701)?;
    }
    #[allow(unused_mut)]let mut scope_1702 = writer.prefix("MemoryMiB");
    if let Some(var_1703) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1702, var_1703)?;
    }
    #[allow(unused_mut)]let mut scope_1704 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1705) = &input.cpu_manufacturers {
        let mut list_1707 = scope_1704.start_list(true, Some("item"));
        for item_1706 in var_1705 {
            #[allow(unused_mut)]let mut entry_1708 = list_1707.entry();
            entry_1708.string(item_1706.as_str());
        }
        list_1707.finish();
    }
    #[allow(unused_mut)]let mut scope_1709 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1710) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(scope_1709, var_1710)?;
    }
    #[allow(unused_mut)]let mut scope_1711 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1712) = &input.excluded_instance_types {
        let mut list_1714 = scope_1711.start_list(true, Some("item"));
        for item_1713 in var_1712 {
            #[allow(unused_mut)]let mut entry_1715 = list_1714.entry();
            entry_1715.string(item_1713);
        }
        list_1714.finish();
    }
    #[allow(unused_mut)]let mut scope_1716 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1717) = &input.instance_generations {
        let mut list_1719 = scope_1716.start_list(true, Some("item"));
        for item_1718 in var_1717 {
            #[allow(unused_mut)]let mut entry_1720 = list_1719.entry();
            entry_1720.string(item_1718.as_str());
        }
        list_1719.finish();
    }
    #[allow(unused_mut)]let mut scope_1721 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1722) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1721.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1722).into()));
    }
    #[allow(unused_mut)]let mut scope_1723 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1724) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1723.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1724).into()));
    }
    #[allow(unused_mut)]let mut scope_1725 = writer.prefix("BareMetal");
    if let Some(var_1726) = &input.bare_metal {
        scope_1725.string(var_1726.as_str());
    }
    #[allow(unused_mut)]let mut scope_1727 = writer.prefix("BurstablePerformance");
    if let Some(var_1728) = &input.burstable_performance {
        scope_1727.string(var_1728.as_str());
    }
    #[allow(unused_mut)]let mut scope_1729 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1730) = &input.require_hibernate_support {
        scope_1729.boolean(*var_1730);
    }
    #[allow(unused_mut)]let mut scope_1731 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1732) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(scope_1731, var_1732)?;
    }
    #[allow(unused_mut)]let mut scope_1733 = writer.prefix("LocalStorage");
    if let Some(var_1734) = &input.local_storage {
        scope_1733.string(var_1734.as_str());
    }
    #[allow(unused_mut)]let mut scope_1735 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1736) = &input.local_storage_types {
        let mut list_1738 = scope_1735.start_list(true, Some("item"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]let mut entry_1739 = list_1738.entry();
            entry_1739.string(item_1737.as_str());
        }
        list_1738.finish();
    }
    #[allow(unused_mut)]let mut scope_1740 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1741) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(scope_1740, var_1741)?;
    }
    #[allow(unused_mut)]let mut scope_1742 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1743) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(scope_1742, var_1743)?;
    }
    #[allow(unused_mut)]let mut scope_1744 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1745) = &input.accelerator_types {
        let mut list_1747 = scope_1744.start_list(true, Some("item"));
        for item_1746 in var_1745 {
            #[allow(unused_mut)]let mut entry_1748 = list_1747.entry();
            entry_1748.string(item_1746.as_str());
        }
        list_1747.finish();
    }
    #[allow(unused_mut)]let mut scope_1749 = writer.prefix("AcceleratorCount");
    if let Some(var_1750) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1749, var_1750)?;
    }
    #[allow(unused_mut)]let mut scope_1751 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1752) = &input.accelerator_manufacturers {
        let mut list_1754 = scope_1751.start_list(true, Some("item"));
        for item_1753 in var_1752 {
            #[allow(unused_mut)]let mut entry_1755 = list_1754.entry();
            entry_1755.string(item_1753.as_str());
        }
        list_1754.finish();
    }
    #[allow(unused_mut)]let mut scope_1756 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1757) = &input.accelerator_names {
        let mut list_1759 = scope_1756.start_list(true, Some("item"));
        for item_1758 in var_1757 {
            #[allow(unused_mut)]let mut entry_1760 = list_1759.entry();
            entry_1760.string(item_1758.as_str());
        }
        list_1759.finish();
    }
    #[allow(unused_mut)]let mut scope_1761 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1762) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(scope_1761, var_1762)?;
    }
    #[allow(unused_mut)]let mut scope_1763 = writer.prefix("NetworkBandwidthGbps");
    if let Some(var_1764) = &input.network_bandwidth_gbps {
        crate::query_ser::serialize_structure_crate_model_network_bandwidth_gbps(scope_1763, var_1764)?;
    }
    #[allow(unused_mut)]let mut scope_1765 = writer.prefix("AllowedInstanceTypeSet");
    if let Some(var_1766) = &input.allowed_instance_types {
        let mut list_1768 = scope_1765.start_list(true, Some("item"));
        for item_1767 in var_1766 {
            #[allow(unused_mut)]let mut entry_1769 = list_1768.entry();
            entry_1769.string(item_1767);
        }
        list_1768.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_cloud_watch_log_options_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::CloudWatchLogOptionsSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1770 = writer.prefix("LogEnabled");
    if let Some(var_1771) = &input.log_enabled {
        scope_1770.boolean(*var_1771);
    }
    #[allow(unused_mut)]let mut scope_1772 = writer.prefix("LogGroupArn");
    if let Some(var_1773) = &input.log_group_arn {
        scope_1772.string(var_1773);
    }
    #[allow(unused_mut)]let mut scope_1774 = writer.prefix("LogOutputFormat");
    if let Some(var_1775) = &input.log_output_format {
        scope_1774.string(var_1775);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_capacity_rebalance(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotCapacityRebalance) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1776 = writer.prefix("ReplacementStrategy");
    if let Some(var_1777) = &input.replacement_strategy {
        scope_1776.string(var_1777.as_str());
    }
    #[allow(unused_mut)]let mut scope_1778 = writer.prefix("TerminationDelay");
    if let Some(var_1779) = &input.termination_delay {
        scope_1778.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1779).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_group_identifier(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::GroupIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1780 = writer.prefix("GroupName");
    if let Some(var_1781) = &input.group_name {
        scope_1780.string(var_1781);
    }
    #[allow(unused_mut)]let mut scope_1782 = writer.prefix("GroupId");
    if let Some(var_1783) = &input.group_id {
        scope_1782.string(var_1783);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_fleet_monitoring(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetMonitoring) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1784 = writer.prefix("Enabled");
    if let Some(var_1785) = &input.enabled {
        scope_1784.boolean(*var_1785);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_spot_fleet_tag_specification(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::SpotFleetTagSpecification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1786 = writer.prefix("ResourceType");
    if let Some(var_1787) = &input.resource_type {
        scope_1786.string(var_1787.as_str());
    }
    #[allow(unused_mut)]let mut scope_1788 = writer.prefix("Tag");
    if let Some(var_1789) = &input.tags {
        let mut list_1791 = scope_1788.start_list(true, Some("item"));
        for item_1790 in var_1789 {
            #[allow(unused_mut)]let mut entry_1792 = list_1791.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1792, item_1790)?;
        }
        list_1791.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_classic_load_balancers_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClassicLoadBalancersConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1793 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1794) = &input.classic_load_balancers {
        let mut list_1796 = scope_1793.start_list(true, Some("item"));
        for item_1795 in var_1794 {
            #[allow(unused_mut)]let mut entry_1797 = list_1796.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(entry_1797, item_1795)?;
        }
        list_1796.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_target_groups_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetGroupsConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1798 = writer.prefix("TargetGroups");
    if let Some(var_1799) = &input.target_groups {
        let mut list_1801 = scope_1798.start_list(true, Some("item"));
        for item_1800 in var_1799 {
            #[allow(unused_mut)]let mut entry_1802 = list_1801.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1802, item_1800)?;
        }
        list_1801.finish();
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_ebs(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesEbs) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1803 = writer.prefix("DeleteOnTermination");
    if let Some(var_1804) = &input.delete_on_termination {
        scope_1803.boolean(*var_1804);
    }
    #[allow(unused_mut)]let mut scope_1805 = writer.prefix("Encrypted");
    if let Some(var_1806) = &input.encrypted {
        scope_1805.boolean(*var_1806);
    }
    #[allow(unused_mut)]let mut scope_1807 = writer.prefix("Iops");
    if let Some(var_1808) = &input.iops {
        scope_1807.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1808).into()));
    }
    #[allow(unused_mut)]let mut scope_1809 = writer.prefix("SnapshotId");
    if let Some(var_1810) = &input.snapshot_id {
        scope_1809.string(var_1810);
    }
    #[allow(unused_mut)]let mut scope_1811 = writer.prefix("VolumeSize");
    if let Some(var_1812) = &input.volume_size {
        scope_1811.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1812).into()));
    }
    #[allow(unused_mut)]let mut scope_1813 = writer.prefix("VolumeType");
    if let Some(var_1814) = &input.volume_type {
        scope_1813.string(var_1814);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesIpv6Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1815 = writer.prefix("Ipv6Address");
    if let Some(var_1816) = &input.ipv6_address {
        scope_1815.string(var_1816);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ScheduledInstancesPrivateIpAddressConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1817 = writer.prefix("Primary");
    if let Some(var_1818) = &input.primary {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]let mut scope_1819 = writer.prefix("PrivateIpAddress");
    if let Some(var_1820) = &input.private_ip_address {
        scope_1819.string(var_1820);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_v_cpu_count_range(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::VCpuCountRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1821 = writer.prefix("Min");
    if let Some(var_1822) = &input.min {
        scope_1821.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1822).into()));
    }
    #[allow(unused_mut)]let mut scope_1823 = writer.prefix("Max");
    if let Some(var_1824) = &input.max {
        scope_1823.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1824).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_memory_mi_b(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryMiB) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1825 = writer.prefix("Min");
    if let Some(var_1826) = &input.min {
        scope_1825.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1826).into()));
    }
    #[allow(unused_mut)]let mut scope_1827 = writer.prefix("Max");
    if let Some(var_1828) = &input.max {
        scope_1827.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1828).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::MemoryGiBPerVCpu) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1829 = writer.prefix("Min");
    if let Some(var_1830) = &input.min {
        scope_1829.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1830).into()));
    }
    #[allow(unused_mut)]let mut scope_1831 = writer.prefix("Max");
    if let Some(var_1832) = &input.max {
        scope_1831.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1832).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_network_interface_count(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkInterfaceCount) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1833 = writer.prefix("Min");
    if let Some(var_1834) = &input.min {
        scope_1833.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1834).into()));
    }
    #[allow(unused_mut)]let mut scope_1835 = writer.prefix("Max");
    if let Some(var_1836) = &input.max {
        scope_1835.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1836).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_total_local_storage_gb(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TotalLocalStorageGb) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1837 = writer.prefix("Min");
    if let Some(var_1838) = &input.min {
        scope_1837.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1838).into()));
    }
    #[allow(unused_mut)]let mut scope_1839 = writer.prefix("Max");
    if let Some(var_1840) = &input.max {
        scope_1839.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1840).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::BaselineEbsBandwidthMbps) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1841 = writer.prefix("Min");
    if let Some(var_1842) = &input.min {
        scope_1841.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1842).into()));
    }
    #[allow(unused_mut)]let mut scope_1843 = writer.prefix("Max");
    if let Some(var_1844) = &input.max {
        scope_1843.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1844).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_accelerator_count(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorCount) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1845 = writer.prefix("Min");
    if let Some(var_1846) = &input.min {
        scope_1845.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1846).into()));
    }
    #[allow(unused_mut)]let mut scope_1847 = writer.prefix("Max");
    if let Some(var_1848) = &input.max {
        scope_1847.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1848).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::AcceleratorTotalMemoryMiB) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1849 = writer.prefix("Min");
    if let Some(var_1850) = &input.min {
        scope_1849.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1850).into()));
    }
    #[allow(unused_mut)]let mut scope_1851 = writer.prefix("Max");
    if let Some(var_1852) = &input.max {
        scope_1851.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1852).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_network_bandwidth_gbps(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::NetworkBandwidthGbps) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1853 = writer.prefix("Min");
    if let Some(var_1854) = &input.min {
        scope_1853.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1854).into()));
    }
    #[allow(unused_mut)]let mut scope_1855 = writer.prefix("Max");
    if let Some(var_1856) = &input.max {
        scope_1855.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1856).into()));
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_classic_load_balancer(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::ClassicLoadBalancer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1857 = writer.prefix("Name");
    if let Some(var_1858) = &input.name {
        scope_1857.string(var_1858);
    }
    Ok(())
}

#[allow(unused_mut)]pub fn serialize_structure_crate_model_target_group(mut writer: aws_smithy_query::QueryValueWriter, input: &crate::model::TargetGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]let mut scope_1859 = writer.prefix("Arn");
    if let Some(var_1860) = &input.arn {
        scope_1859.string(var_1860);
    }
    Ok(())
}

