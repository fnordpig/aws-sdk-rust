// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddTagsToResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.resource_type {
        object.key("ResourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
             {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_ops_item_related_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateOpsItemRelatedItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.ops_item_id {
        object.key("OpsItemId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.association_type {
        object.key("AssociationType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_type {
        object.key("ResourceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.resource_uri {
        object.key("ResourceUri").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_command_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelCommandInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.command_id {
        object.key("CommandId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.instance_ids {
        let mut array_13 = object.key("InstanceIds").start_array();
        for item_14 in var_12 {
             {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_maintenance_window_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelMaintenanceWindowExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_activation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateActivationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_16) = &input.description {
        object.key("Description").string(var_16.as_str());
    }
    if let Some(var_17) = &input.default_instance_name {
        object.key("DefaultInstanceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.iam_role {
        object.key("IamRole").string(var_18.as_str());
    }
    if let Some(var_19) = &input.registration_limit {
        object.key("RegistrationLimit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_19).into()));
    }
    if let Some(var_20) = &input.expiration_date {
        object.key("ExpirationDate").date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
             {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.registration_metadata {
        let mut array_26 = object.key("RegistrationMetadata").start_array();
        for item_27 in var_25 {
             {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_registration_metadata_item(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.name {
        object.key("Name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.document_version {
        object.key("DocumentVersion").string(var_30.as_str());
    }
    if let Some(var_31) = &input.instance_id {
        object.key("InstanceId").string(var_31.as_str());
    }
    if let Some(var_32) = &input.parameters {
        let mut object_33 = object.key("Parameters").start_object();
        for (key_34, value_35) in var_32 {
             {
                let mut array_36 = object_33.key(key_34.as_str()).start_array();
                for item_37 in value_35 {
                     {
                        array_36.value().string(item_37.as_str());
                    }
                }
                array_36.finish();
            }
        }
        object_33.finish();
    }
    if let Some(var_38) = &input.targets {
        let mut array_39 = object.key("Targets").start_array();
        for item_40 in var_38 {
             {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_42.as_str());
    }
    if let Some(var_43) = &input.output_location {
        let mut object_44 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(&mut object_44, var_43)?;
        object_44.finish();
    }
    if let Some(var_45) = &input.association_name {
        object.key("AssociationName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_46.as_str());
    }
    if let Some(var_47) = &input.max_errors {
        object.key("MaxErrors").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_48.as_str());
    }
    if let Some(var_49) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_49.as_str());
    }
    if let Some(var_50) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_50.as_str());
    }
    if input.apply_only_at_cron_interval {
        object.key("ApplyOnlyAtCronInterval").boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_51) = &input.calendar_names {
        let mut array_52 = object.key("CalendarNames").start_array();
        for item_53 in var_51 {
             {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.target_locations {
        let mut array_55 = object.key("TargetLocations").start_array();
        for item_56 in var_54 {
             {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(&mut object_57, item_56)?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    if let Some(var_58) = &input.schedule_offset {
        object.key("ScheduleOffset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_58).into()));
    }
    if let Some(var_59) = &input.target_maps {
        let mut array_60 = object.key("TargetMaps").start_array();
        for item_61 in var_59 {
             {
                let mut object_62 = array_60.value().start_object();
                for (key_63, value_64) in item_61 {
                     {
                        let mut array_65 = object_62.key(key_63.as_str()).start_array();
                        for item_66 in value_64 {
                             {
                                array_65.value().string(item_66.as_str());
                            }
                        }
                        array_65.finish();
                    }
                }
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_67) = &input.tags {
        let mut array_68 = object.key("Tags").start_array();
        for item_69 in var_67 {
             {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_70, item_69)?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    if let Some(var_71) = &input.alarm_configuration {
        let mut object_72 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_72, var_71)?;
        object_72.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_batch_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAssociationBatchInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.entries {
        let mut array_74 = object.key("Entries").start_array();
        for item_75 in var_73 {
             {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_association_batch_request_entry(&mut object_76, item_75)?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_document_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDocumentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.content {
        object.key("Content").string(var_77.as_str());
    }
    if let Some(var_78) = &input.requires {
        let mut array_79 = object.key("Requires").start_array();
        for item_80 in var_78 {
             {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_requires(&mut object_81, item_80)?;
                object_81.finish();
            }
        }
        array_79.finish();
    }
    if let Some(var_82) = &input.attachments {
        let mut array_83 = object.key("Attachments").start_array();
        for item_84 in var_82 {
             {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(&mut object_85, item_84)?;
                object_85.finish();
            }
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.name {
        object.key("Name").string(var_86.as_str());
    }
    if let Some(var_87) = &input.display_name {
        object.key("DisplayName").string(var_87.as_str());
    }
    if let Some(var_88) = &input.version_name {
        object.key("VersionName").string(var_88.as_str());
    }
    if let Some(var_89) = &input.document_type {
        object.key("DocumentType").string(var_89.as_str());
    }
    if let Some(var_90) = &input.document_format {
        object.key("DocumentFormat").string(var_90.as_str());
    }
    if let Some(var_91) = &input.target_type {
        object.key("TargetType").string(var_91.as_str());
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
             {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_96) = &input.name {
        object.key("Name").string(var_96.as_str());
    }
    if let Some(var_97) = &input.description {
        object.key("Description").string(var_97.as_str());
    }
    if let Some(var_98) = &input.start_date {
        object.key("StartDate").string(var_98.as_str());
    }
    if let Some(var_99) = &input.end_date {
        object.key("EndDate").string(var_99.as_str());
    }
    if let Some(var_100) = &input.schedule {
        object.key("Schedule").string(var_100.as_str());
    }
    if let Some(var_101) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_101.as_str());
    }
    if let Some(var_102) = &input.schedule_offset {
        object.key("ScheduleOffset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_102).into()));
    }
     {
        object.key("Duration").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.duration).into()));
    }
     {
        object.key("Cutoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.cutoff).into()));
    }
     {
        object.key("AllowUnassociatedTargets").boolean(input.allow_unassociated_targets);
    }
    if let Some(var_103) = &input.client_token {
        object.key("ClientToken").string(var_103.as_str());
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
             {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_107, item_106)?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateOpsItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_108) = &input.description {
        object.key("Description").string(var_108.as_str());
    }
    if let Some(var_109) = &input.ops_item_type {
        object.key("OpsItemType").string(var_109.as_str());
    }
    if let Some(var_110) = &input.operational_data {
        let mut object_111 = object.key("OperationalData").start_object();
        for (key_112, value_113) in var_110 {
             {
                let mut object_114 = object_111.key(key_112.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(&mut object_114, value_113)?;
                object_114.finish();
            }
        }
        object_111.finish();
    }
    if let Some(var_115) = &input.notifications {
        let mut array_116 = object.key("Notifications").start_array();
        for item_117 in var_115 {
             {
                let mut object_118 = array_116.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(&mut object_118, item_117)?;
                object_118.finish();
            }
        }
        array_116.finish();
    }
    if let Some(var_119) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_119).into()));
    }
    if let Some(var_120) = &input.related_ops_items {
        let mut array_121 = object.key("RelatedOpsItems").start_array();
        for item_122 in var_120 {
             {
                let mut object_123 = array_121.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(&mut object_123, item_122)?;
                object_123.finish();
            }
        }
        array_121.finish();
    }
    if let Some(var_124) = &input.source {
        object.key("Source").string(var_124.as_str());
    }
    if let Some(var_125) = &input.title {
        object.key("Title").string(var_125.as_str());
    }
    if let Some(var_126) = &input.tags {
        let mut array_127 = object.key("Tags").start_array();
        for item_128 in var_126 {
             {
                let mut object_129 = array_127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_129, item_128)?;
                object_129.finish();
            }
        }
        array_127.finish();
    }
    if let Some(var_130) = &input.category {
        object.key("Category").string(var_130.as_str());
    }
    if let Some(var_131) = &input.severity {
        object.key("Severity").string(var_131.as_str());
    }
    if let Some(var_132) = &input.actual_start_time {
        object.key("ActualStartTime").date_time(var_132, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_133) = &input.actual_end_time {
        object.key("ActualEndTime").date_time(var_133, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_134) = &input.planned_start_time {
        object.key("PlannedStartTime").date_time(var_134, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_135) = &input.planned_end_time {
        object.key("PlannedEndTime").date_time(var_135, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateOpsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.resource_id {
        object.key("ResourceId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.metadata {
        let mut object_138 = object.key("Metadata").start_object();
        for (key_139, value_140) in var_137 {
             {
                let mut object_141 = object_138.key(key_139.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(&mut object_141, value_140)?;
                object_141.finish();
            }
        }
        object_138.finish();
    }
    if let Some(var_142) = &input.tags {
        let mut array_143 = object.key("Tags").start_array();
        for item_144 in var_142 {
             {
                let mut object_145 = array_143.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_145, item_144)?;
                object_145.finish();
            }
        }
        array_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.operating_system {
        object.key("OperatingSystem").string(var_146.as_str());
    }
    if let Some(var_147) = &input.name {
        object.key("Name").string(var_147.as_str());
    }
    if let Some(var_148) = &input.global_filters {
        let mut object_149 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(&mut object_149, var_148)?;
        object_149.finish();
    }
    if let Some(var_150) = &input.approval_rules {
        let mut object_151 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(&mut object_151, var_150)?;
        object_151.finish();
    }
    if let Some(var_152) = &input.approved_patches {
        let mut array_153 = object.key("ApprovedPatches").start_array();
        for item_154 in var_152 {
             {
                array_153.value().string(item_154.as_str());
            }
        }
        array_153.finish();
    }
    if let Some(var_155) = &input.approved_patches_compliance_level {
        object.key("ApprovedPatchesComplianceLevel").string(var_155.as_str());
    }
    if let Some(var_156) = &input.approved_patches_enable_non_security {
        object.key("ApprovedPatchesEnableNonSecurity").boolean(*var_156);
    }
    if let Some(var_157) = &input.rejected_patches {
        let mut array_158 = object.key("RejectedPatches").start_array();
        for item_159 in var_157 {
             {
                array_158.value().string(item_159.as_str());
            }
        }
        array_158.finish();
    }
    if let Some(var_160) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_160.as_str());
    }
    if let Some(var_161) = &input.description {
        object.key("Description").string(var_161.as_str());
    }
    if let Some(var_162) = &input.sources {
        let mut array_163 = object.key("Sources").start_array();
        for item_164 in var_162 {
             {
                let mut object_165 = array_163.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(&mut object_165, item_164)?;
                object_165.finish();
            }
        }
        array_163.finish();
    }
    if let Some(var_166) = &input.client_token {
        object.key("ClientToken").string(var_166.as_str());
    }
    if let Some(var_167) = &input.tags {
        let mut array_168 = object.key("Tags").start_array();
        for item_169 in var_167 {
             {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_170, item_169)?;
                object_170.finish();
            }
        }
        array_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_data_sync_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateResourceDataSyncInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_171) = &input.sync_name {
        object.key("SyncName").string(var_171.as_str());
    }
    if let Some(var_172) = &input.s3_destination {
        let mut object_173 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_s3_destination(&mut object_173, var_172)?;
        object_173.finish();
    }
    if let Some(var_174) = &input.sync_type {
        object.key("SyncType").string(var_174.as_str());
    }
    if let Some(var_175) = &input.sync_source {
        let mut object_176 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(&mut object_176, var_175)?;
        object_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_activation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteActivationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_177) = &input.activation_id {
        object.key("ActivationId").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_178) = &input.name {
        object.key("Name").string(var_178.as_str());
    }
    if let Some(var_179) = &input.instance_id {
        object.key("InstanceId").string(var_179.as_str());
    }
    if let Some(var_180) = &input.association_id {
        object.key("AssociationId").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_document_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDocumentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.name {
        object.key("Name").string(var_181.as_str());
    }
    if let Some(var_182) = &input.document_version {
        object.key("DocumentVersion").string(var_182.as_str());
    }
    if let Some(var_183) = &input.version_name {
        object.key("VersionName").string(var_183.as_str());
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_inventory_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteInventoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_184) = &input.type_name {
        object.key("TypeName").string(var_184.as_str());
    }
    if let Some(var_185) = &input.schema_delete_option {
        object.key("SchemaDeleteOption").string(var_185.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_186) = &input.client_token {
        object.key("ClientToken").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_187) = &input.window_id {
        object.key("WindowId").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ops_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteOpsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_188) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteParameterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.name {
        object.key("Name").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteParametersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_190) = &input.names {
        let mut array_191 = object.key("Names").start_array();
        for item_192 in var_190 {
             {
                array_191.value().string(item_192.as_str());
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_193) = &input.baseline_id {
        object.key("BaselineId").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_data_sync_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourceDataSyncInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.sync_name {
        object.key("SyncName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.sync_type {
        object.key("SyncType").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_managed_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterManagedInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_196) = &input.instance_id {
        object.key("InstanceId").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_patch_baseline_for_patch_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterPatchBaselineForPatchGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_197) = &input.baseline_id {
        object.key("BaselineId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.patch_group {
        object.key("PatchGroup").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_target_from_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterTargetFromMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.window_id {
        object.key("WindowId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.window_target_id {
        object.key("WindowTargetId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.safe {
        object.key("Safe").boolean(*var_201);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_task_from_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeregisterTaskFromMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_202) = &input.window_id {
        object.key("WindowId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.window_task_id {
        object.key("WindowTaskId").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_activations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeActivationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_204) = &input.filters {
        let mut array_205 = object.key("Filters").start_array();
        for item_206 in var_204 {
             {
                let mut object_207 = array_205.value().start_object();
                crate::json_ser::serialize_structure_crate_model_describe_activations_filter(&mut object_207, item_206)?;
                object_207.finish();
            }
        }
        array_205.finish();
    }
    if let Some(var_208) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_208).into()));
    }
    if let Some(var_209) = &input.next_token {
        object.key("NextToken").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_210) = &input.name {
        object.key("Name").string(var_210.as_str());
    }
    if let Some(var_211) = &input.instance_id {
        object.key("InstanceId").string(var_211.as_str());
    }
    if let Some(var_212) = &input.association_id {
        object.key("AssociationId").string(var_212.as_str());
    }
    if let Some(var_213) = &input.association_version {
        object.key("AssociationVersion").string(var_213.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAssociationExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_214) = &input.association_id {
        object.key("AssociationId").string(var_214.as_str());
    }
    if let Some(var_215) = &input.filters {
        let mut array_216 = object.key("Filters").start_array();
        for item_217 in var_215 {
             {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_filter(&mut object_218, item_217)?;
                object_218.finish();
            }
        }
        array_216.finish();
    }
    if let Some(var_219) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_219).into()));
    }
    if let Some(var_220) = &input.next_token {
        object.key("NextToken").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_execution_targets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAssociationExecutionTargetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_221) = &input.association_id {
        object.key("AssociationId").string(var_221.as_str());
    }
    if let Some(var_222) = &input.execution_id {
        object.key("ExecutionId").string(var_222.as_str());
    }
    if let Some(var_223) = &input.filters {
        let mut array_224 = object.key("Filters").start_array();
        for item_225 in var_223 {
             {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_targets_filter(&mut object_226, item_225)?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_227).into()));
    }
    if let Some(var_228) = &input.next_token {
        object.key("NextToken").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAutomationExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_229) = &input.filters {
        let mut array_230 = object.key("Filters").start_array();
        for item_231 in var_229 {
             {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_automation_execution_filter(&mut object_232, item_231)?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_233).into()));
    }
    if let Some(var_234) = &input.next_token {
        object.key("NextToken").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_step_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAutomationStepExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_235) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_235.as_str());
    }
    if let Some(var_236) = &input.filters {
        let mut array_237 = object.key("Filters").start_array();
        for item_238 in var_236 {
             {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_execution_filter(&mut object_239, item_238)?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.next_token {
        object.key("NextToken").string(var_240.as_str());
    }
    if let Some(var_241) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_241).into()));
    }
    if let Some(var_242) = &input.reverse_order {
        object.key("ReverseOrder").boolean(*var_242);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_available_patches_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeAvailablePatchesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_243) = &input.filters {
        let mut array_244 = object.key("Filters").start_array();
        for item_245 in var_243 {
             {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(&mut object_246, item_245)?;
                object_246.finish();
            }
        }
        array_244.finish();
    }
    if let Some(var_247) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_247).into()));
    }
    if let Some(var_248) = &input.next_token {
        object.key("NextToken").string(var_248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDocumentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_249) = &input.name {
        object.key("Name").string(var_249.as_str());
    }
    if let Some(var_250) = &input.document_version {
        object.key("DocumentVersion").string(var_250.as_str());
    }
    if let Some(var_251) = &input.version_name {
        object.key("VersionName").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDocumentPermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_252) = &input.name {
        object.key("Name").string(var_252.as_str());
    }
    if let Some(var_253) = &input.permission_type {
        object.key("PermissionType").string(var_253.as_str());
    }
    if let Some(var_254) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_254).into()));
    }
    if let Some(var_255) = &input.next_token {
        object.key("NextToken").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_instance_associations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEffectiveInstanceAssociationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_256) = &input.instance_id {
        object.key("InstanceId").string(var_256.as_str());
    }
    if let Some(var_257) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_257).into()));
    }
    if let Some(var_258) = &input.next_token {
        object.key("NextToken").string(var_258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_patches_for_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_259) = &input.baseline_id {
        object.key("BaselineId").string(var_259.as_str());
    }
    if let Some(var_260) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_260).into()));
    }
    if let Some(var_261) = &input.next_token {
        object.key("NextToken").string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_associations_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInstanceAssociationsStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_262) = &input.instance_id {
        object.key("InstanceId").string(var_262.as_str());
    }
    if let Some(var_263) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_263).into()));
    }
    if let Some(var_264) = &input.next_token {
        object.key("NextToken").string(var_264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_information_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInstanceInformationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_265) = &input.instance_information_filter_list {
        let mut array_266 = object.key("InstanceInformationFilterList").start_array();
        for item_267 in var_265 {
             {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_filter(&mut object_268, item_267)?;
                object_268.finish();
            }
        }
        array_266.finish();
    }
    if let Some(var_269) = &input.filters {
        let mut array_270 = object.key("Filters").start_array();
        for item_271 in var_269 {
             {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_string_filter(&mut object_272, item_271)?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_273).into()));
    }
    if let Some(var_274) = &input.next_token {
        object.key("NextToken").string(var_274.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patches_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInstancePatchesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.instance_id {
        object.key("InstanceId").string(var_275.as_str());
    }
    if let Some(var_276) = &input.filters {
        let mut array_277 = object.key("Filters").start_array();
        for item_278 in var_276 {
             {
                let mut object_279 = array_277.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(&mut object_279, item_278)?;
                object_279.finish();
            }
        }
        array_277.finish();
    }
    if let Some(var_280) = &input.next_token {
        object.key("NextToken").string(var_280.as_str());
    }
    if let Some(var_281) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_281).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInstancePatchStatesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_282) = &input.instance_ids {
        let mut array_283 = object.key("InstanceIds").start_array();
        for item_284 in var_282 {
             {
                array_283.value().string(item_284.as_str());
            }
        }
        array_283.finish();
    }
    if let Some(var_285) = &input.next_token {
        object.key("NextToken").string(var_285.as_str());
    }
    if let Some(var_286) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_286).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_for_patch_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_287) = &input.patch_group {
        object.key("PatchGroup").string(var_287.as_str());
    }
    if let Some(var_288) = &input.filters {
        let mut array_289 = object.key("Filters").start_array();
        for item_290 in var_288 {
             {
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_patch_state_filter(&mut object_291, item_290)?;
                object_291.finish();
            }
        }
        array_289.finish();
    }
    if let Some(var_292) = &input.next_token {
        object.key("NextToken").string(var_292.as_str());
    }
    if let Some(var_293) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_293).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inventory_deletions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInventoryDeletionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_294) = &input.deletion_id {
        object.key("DeletionId").string(var_294.as_str());
    }
    if let Some(var_295) = &input.next_token {
        object.key("NextToken").string(var_295.as_str());
    }
    if let Some(var_296) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_296).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_executions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowExecutionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_297) = &input.window_id {
        object.key("WindowId").string(var_297.as_str());
    }
    if let Some(var_298) = &input.filters {
        let mut array_299 = object.key("Filters").start_array();
        for item_300 in var_298 {
             {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_301, item_300)?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_302).into()));
    }
    if let Some(var_303) = &input.next_token {
        object.key("NextToken").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_task_invocations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_304) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_304.as_str());
    }
    if let Some(var_305) = &input.task_id {
        object.key("TaskId").string(var_305.as_str());
    }
    if let Some(var_306) = &input.filters {
        let mut array_307 = object.key("Filters").start_array();
        for item_308 in var_306 {
             {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_309, item_308)?;
                object_309.finish();
            }
        }
        array_307.finish();
    }
    if let Some(var_310) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_310).into()));
    }
    if let Some(var_311) = &input.next_token {
        object.key("NextToken").string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_tasks_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_312) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_312.as_str());
    }
    if let Some(var_313) = &input.filters {
        let mut array_314 = object.key("Filters").start_array();
        for item_315 in var_313 {
             {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_316, item_315)?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_317).into()));
    }
    if let Some(var_318) = &input.next_token {
        object.key("NextToken").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_319) = &input.filters {
        let mut array_320 = object.key("Filters").start_array();
        for item_321 in var_319 {
             {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_322, item_321)?;
                object_322.finish();
            }
        }
        array_320.finish();
    }
    if let Some(var_323) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_323).into()));
    }
    if let Some(var_324) = &input.next_token {
        object.key("NextToken").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_325) = &input.window_id {
        object.key("WindowId").string(var_325.as_str());
    }
    if let Some(var_326) = &input.targets {
        let mut array_327 = object.key("Targets").start_array();
        for item_328 in var_326 {
             {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_329, item_328)?;
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.resource_type {
        object.key("ResourceType").string(var_330.as_str());
    }
    if let Some(var_331) = &input.filters {
        let mut array_332 = object.key("Filters").start_array();
        for item_333 in var_331 {
             {
                let mut object_334 = array_332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(&mut object_334, item_333)?;
                object_334.finish();
            }
        }
        array_332.finish();
    }
    if let Some(var_335) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_335).into()));
    }
    if let Some(var_336) = &input.next_token {
        object.key("NextToken").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_for_target_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowsForTargetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_337) = &input.targets {
        let mut array_338 = object.key("Targets").start_array();
        for item_339 in var_337 {
             {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_340, item_339)?;
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.resource_type {
        object.key("ResourceType").string(var_341.as_str());
    }
    if let Some(var_342) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_342).into()));
    }
    if let Some(var_343) = &input.next_token {
        object.key("NextToken").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_targets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowTargetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_344) = &input.window_id {
        object.key("WindowId").string(var_344.as_str());
    }
    if let Some(var_345) = &input.filters {
        let mut array_346 = object.key("Filters").start_array();
        for item_347 in var_345 {
             {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_348, item_347)?;
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_349).into()));
    }
    if let Some(var_350) = &input.next_token {
        object.key("NextToken").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_tasks_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMaintenanceWindowTasksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_351) = &input.window_id {
        object.key("WindowId").string(var_351.as_str());
    }
    if let Some(var_352) = &input.filters {
        let mut array_353 = object.key("Filters").start_array();
        for item_354 in var_352 {
             {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(&mut object_355, item_354)?;
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_356).into()));
    }
    if let Some(var_357) = &input.next_token {
        object.key("NextToken").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_ops_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeOpsItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_358) = &input.ops_item_filters {
        let mut array_359 = object.key("OpsItemFilters").start_array();
        for item_360 in var_358 {
             {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_filter(&mut object_361, item_360)?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_362).into()));
    }
    if let Some(var_363) = &input.next_token {
        object.key("NextToken").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_parameters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeParametersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_364) = &input.filters {
        let mut array_365 = object.key("Filters").start_array();
        for item_366 in var_364 {
             {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameters_filter(&mut object_367, item_366)?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    if let Some(var_368) = &input.parameter_filters {
        let mut array_369 = object.key("ParameterFilters").start_array();
        for item_370 in var_368 {
             {
                let mut object_371 = array_369.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(&mut object_371, item_370)?;
                object_371.finish();
            }
        }
        array_369.finish();
    }
    if let Some(var_372) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_372).into()));
    }
    if let Some(var_373) = &input.next_token {
        object.key("NextToken").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_baselines_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePatchBaselinesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_374) = &input.filters {
        let mut array_375 = object.key("Filters").start_array();
        for item_376 in var_374 {
             {
                let mut object_377 = array_375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(&mut object_377, item_376)?;
                object_377.finish();
            }
        }
        array_375.finish();
    }
    if let Some(var_378) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_378).into()));
    }
    if let Some(var_379) = &input.next_token {
        object.key("NextToken").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePatchGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_380) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_380).into()));
    }
    if let Some(var_381) = &input.filters {
        let mut array_382 = object.key("Filters").start_array();
        for item_383 in var_381 {
             {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(&mut object_384, item_383)?;
                object_384.finish();
            }
        }
        array_382.finish();
    }
    if let Some(var_385) = &input.next_token {
        object.key("NextToken").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_group_state_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePatchGroupStateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_386) = &input.patch_group {
        object.key("PatchGroup").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePatchPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_387) = &input.operating_system {
        object.key("OperatingSystem").string(var_387.as_str());
    }
    if let Some(var_388) = &input.property {
        object.key("Property").string(var_388.as_str());
    }
    if let Some(var_389) = &input.patch_set {
        object.key("PatchSet").string(var_389.as_str());
    }
    if let Some(var_390) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_390).into()));
    }
    if let Some(var_391) = &input.next_token {
        object.key("NextToken").string(var_391.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeSessionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_392) = &input.state {
        object.key("State").string(var_392.as_str());
    }
    if let Some(var_393) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_393).into()));
    }
    if let Some(var_394) = &input.next_token {
        object.key("NextToken").string(var_394.as_str());
    }
    if let Some(var_395) = &input.filters {
        let mut array_396 = object.key("Filters").start_array();
        for item_397 in var_395 {
             {
                let mut object_398 = array_396.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_filter(&mut object_398, item_397)?;
                object_398.finish();
            }
        }
        array_396.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_ops_item_related_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateOpsItemRelatedItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_399) = &input.ops_item_id {
        object.key("OpsItemId").string(var_399.as_str());
    }
    if let Some(var_400) = &input.association_id {
        object.key("AssociationId").string(var_400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_automation_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetAutomationExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_401) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_calendar_state_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCalendarStateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_402) = &input.calendar_names {
        let mut array_403 = object.key("CalendarNames").start_array();
        for item_404 in var_402 {
             {
                array_403.value().string(item_404.as_str());
            }
        }
        array_403.finish();
    }
    if let Some(var_405) = &input.at_time {
        object.key("AtTime").string(var_405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_command_invocation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCommandInvocationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_406) = &input.command_id {
        object.key("CommandId").string(var_406.as_str());
    }
    if let Some(var_407) = &input.instance_id {
        object.key("InstanceId").string(var_407.as_str());
    }
    if let Some(var_408) = &input.plugin_name {
        object.key("PluginName").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetConnectionStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_409) = &input.target {
        object.key("Target").string(var_409.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDefaultPatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_410) = &input.operating_system {
        object.key("OperatingSystem").string(var_410.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_deployable_patch_snapshot_for_instance_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDeployablePatchSnapshotForInstanceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_411) = &input.instance_id {
        object.key("InstanceId").string(var_411.as_str());
    }
    if let Some(var_412) = &input.snapshot_id {
        object.key("SnapshotId").string(var_412.as_str());
    }
    if let Some(var_413) = &input.baseline_override {
        let mut object_414 = object.key("BaselineOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_baseline_override(&mut object_414, var_413)?;
        object_414.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_document_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDocumentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_415) = &input.name {
        object.key("Name").string(var_415.as_str());
    }
    if let Some(var_416) = &input.version_name {
        object.key("VersionName").string(var_416.as_str());
    }
    if let Some(var_417) = &input.document_version {
        object.key("DocumentVersion").string(var_417.as_str());
    }
    if let Some(var_418) = &input.document_format {
        object.key("DocumentFormat").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInventoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_419) = &input.filters {
        let mut array_420 = object.key("Filters").start_array();
        for item_421 in var_419 {
             {
                let mut object_422 = array_420.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(&mut object_422, item_421)?;
                object_422.finish();
            }
        }
        array_420.finish();
    }
    if let Some(var_423) = &input.aggregators {
        let mut array_424 = object.key("Aggregators").start_array();
        for item_425 in var_423 {
             {
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(&mut object_426, item_425)?;
                object_426.finish();
            }
        }
        array_424.finish();
    }
    if let Some(var_427) = &input.result_attributes {
        let mut array_428 = object.key("ResultAttributes").start_array();
        for item_429 in var_427 {
             {
                let mut object_430 = array_428.value().start_object();
                crate::json_ser::serialize_structure_crate_model_result_attribute(&mut object_430, item_429)?;
                object_430.finish();
            }
        }
        array_428.finish();
    }
    if let Some(var_431) = &input.next_token {
        object.key("NextToken").string(var_431.as_str());
    }
    if let Some(var_432) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_432).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetInventorySchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_433) = &input.type_name {
        object.key("TypeName").string(var_433.as_str());
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434.as_str());
    }
    if let Some(var_435) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_435).into()));
    }
    if input.aggregator {
        object.key("Aggregator").boolean(input.aggregator);
    }
    if let Some(var_436) = &input.sub_type {
        object.key("SubType").boolean(*var_436);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_437) = &input.window_id {
        object.key("WindowId").string(var_437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMaintenanceWindowExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_438) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_438.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMaintenanceWindowExecutionTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_439) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_439.as_str());
    }
    if let Some(var_440) = &input.task_id {
        object.key("TaskId").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_invocation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_441) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_441.as_str());
    }
    if let Some(var_442) = &input.task_id {
        object.key("TaskId").string(var_442.as_str());
    }
    if let Some(var_443) = &input.invocation_id {
        object.key("InvocationId").string(var_443.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMaintenanceWindowTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_444) = &input.window_id {
        object.key("WindowId").string(var_444.as_str());
    }
    if let Some(var_445) = &input.window_task_id {
        object.key("WindowTaskId").string(var_445.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetOpsItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_446) = &input.ops_item_id {
        object.key("OpsItemId").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetOpsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_447.as_str());
    }
    if let Some(var_448) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_448).into()));
    }
    if let Some(var_449) = &input.next_token {
        object.key("NextToken").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_summary_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetOpsSummaryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_450) = &input.sync_name {
        object.key("SyncName").string(var_450.as_str());
    }
    if let Some(var_451) = &input.filters {
        let mut array_452 = object.key("Filters").start_array();
        for item_453 in var_451 {
             {
                let mut object_454 = array_452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(&mut object_454, item_453)?;
                object_454.finish();
            }
        }
        array_452.finish();
    }
    if let Some(var_455) = &input.aggregators {
        let mut array_456 = object.key("Aggregators").start_array();
        for item_457 in var_455 {
             {
                let mut object_458 = array_456.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(&mut object_458, item_457)?;
                object_458.finish();
            }
        }
        array_456.finish();
    }
    if let Some(var_459) = &input.result_attributes {
        let mut array_460 = object.key("ResultAttributes").start_array();
        for item_461 in var_459 {
             {
                let mut object_462 = array_460.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_result_attribute(&mut object_462, item_461)?;
                object_462.finish();
            }
        }
        array_460.finish();
    }
    if let Some(var_463) = &input.next_token {
        object.key("NextToken").string(var_463.as_str());
    }
    if let Some(var_464) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_464).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetParameterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_465) = &input.name {
        object.key("Name").string(var_465.as_str());
    }
    if let Some(var_466) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_466);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_history_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetParameterHistoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467.as_str());
    }
    if let Some(var_468) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_468);
    }
    if let Some(var_469) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_469).into()));
    }
    if let Some(var_470) = &input.next_token {
        object.key("NextToken").string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetParametersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_471) = &input.names {
        let mut array_472 = object.key("Names").start_array();
        for item_473 in var_471 {
             {
                array_472.value().string(item_473.as_str());
            }
        }
        array_472.finish();
    }
    if let Some(var_474) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_474);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_by_path_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetParametersByPathInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_475) = &input.path {
        object.key("Path").string(var_475.as_str());
    }
    if let Some(var_476) = &input.recursive {
        object.key("Recursive").boolean(*var_476);
    }
    if let Some(var_477) = &input.parameter_filters {
        let mut array_478 = object.key("ParameterFilters").start_array();
        for item_479 in var_477 {
             {
                let mut object_480 = array_478.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(&mut object_480, item_479)?;
                object_480.finish();
            }
        }
        array_478.finish();
    }
    if let Some(var_481) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_481);
    }
    if let Some(var_482) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_482).into()));
    }
    if let Some(var_483) = &input.next_token {
        object.key("NextToken").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_484) = &input.baseline_id {
        object.key("BaselineId").string(var_484.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_for_patch_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPatchBaselineForPatchGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_485) = &input.patch_group {
        object.key("PatchGroup").string(var_485.as_str());
    }
    if let Some(var_486) = &input.operating_system {
        object.key("OperatingSystem").string(var_486.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_setting_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetServiceSettingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_487) = &input.setting_id {
        object.key("SettingId").string(var_487.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_label_parameter_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::LabelParameterVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_488) = &input.name {
        object.key("Name").string(var_488.as_str());
    }
    if let Some(var_489) = &input.parameter_version {
        object.key("ParameterVersion").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_489).into()));
    }
    if let Some(var_490) = &input.labels {
        let mut array_491 = object.key("Labels").start_array();
        for item_492 in var_490 {
             {
                array_491.value().string(item_492.as_str());
            }
        }
        array_491.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAssociationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_493) = &input.association_filter_list {
        let mut array_494 = object.key("AssociationFilterList").start_array();
        for item_495 in var_493 {
             {
                let mut object_496 = array_494.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_filter(&mut object_496, item_495)?;
                object_496.finish();
            }
        }
        array_494.finish();
    }
    if let Some(var_497) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_497).into()));
    }
    if let Some(var_498) = &input.next_token {
        object.key("NextToken").string(var_498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_association_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAssociationVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_499) = &input.association_id {
        object.key("AssociationId").string(var_499.as_str());
    }
    if let Some(var_500) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_500).into()));
    }
    if let Some(var_501) = &input.next_token {
        object.key("NextToken").string(var_501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_command_invocations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCommandInvocationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_502) = &input.command_id {
        object.key("CommandId").string(var_502.as_str());
    }
    if let Some(var_503) = &input.instance_id {
        object.key("InstanceId").string(var_503.as_str());
    }
    if let Some(var_504) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_504).into()));
    }
    if let Some(var_505) = &input.next_token {
        object.key("NextToken").string(var_505.as_str());
    }
    if let Some(var_506) = &input.filters {
        let mut array_507 = object.key("Filters").start_array();
        for item_508 in var_506 {
             {
                let mut object_509 = array_507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(&mut object_509, item_508)?;
                object_509.finish();
            }
        }
        array_507.finish();
    }
    if input.details {
        object.key("Details").boolean(input.details);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_commands_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCommandsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_510) = &input.command_id {
        object.key("CommandId").string(var_510.as_str());
    }
    if let Some(var_511) = &input.instance_id {
        object.key("InstanceId").string(var_511.as_str());
    }
    if let Some(var_512) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_512).into()));
    }
    if let Some(var_513) = &input.next_token {
        object.key("NextToken").string(var_513.as_str());
    }
    if let Some(var_514) = &input.filters {
        let mut array_515 = object.key("Filters").start_array();
        for item_516 in var_514 {
             {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(&mut object_517, item_516)?;
                object_517.finish();
            }
        }
        array_515.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListComplianceItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_518) = &input.filters {
        let mut array_519 = object.key("Filters").start_array();
        for item_520 in var_518 {
             {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(&mut object_521, item_520)?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    if let Some(var_522) = &input.resource_ids {
        let mut array_523 = object.key("ResourceIds").start_array();
        for item_524 in var_522 {
             {
                array_523.value().string(item_524.as_str());
            }
        }
        array_523.finish();
    }
    if let Some(var_525) = &input.resource_types {
        let mut array_526 = object.key("ResourceTypes").start_array();
        for item_527 in var_525 {
             {
                array_526.value().string(item_527.as_str());
            }
        }
        array_526.finish();
    }
    if let Some(var_528) = &input.next_token {
        object.key("NextToken").string(var_528.as_str());
    }
    if let Some(var_529) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_529).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_summaries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListComplianceSummariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_530) = &input.filters {
        let mut array_531 = object.key("Filters").start_array();
        for item_532 in var_530 {
             {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(&mut object_533, item_532)?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    if let Some(var_534) = &input.next_token {
        object.key("NextToken").string(var_534.as_str());
    }
    if let Some(var_535) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_535).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_metadata_history_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDocumentMetadataHistoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_536) = &input.name {
        object.key("Name").string(var_536.as_str());
    }
    if let Some(var_537) = &input.document_version {
        object.key("DocumentVersion").string(var_537.as_str());
    }
    if let Some(var_538) = &input.metadata {
        object.key("Metadata").string(var_538.as_str());
    }
    if let Some(var_539) = &input.next_token {
        object.key("NextToken").string(var_539.as_str());
    }
    if let Some(var_540) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_540).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_documents_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDocumentsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_541) = &input.document_filter_list {
        let mut array_542 = object.key("DocumentFilterList").start_array();
        for item_543 in var_541 {
             {
                let mut object_544 = array_542.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_filter(&mut object_544, item_543)?;
                object_544.finish();
            }
        }
        array_542.finish();
    }
    if let Some(var_545) = &input.filters {
        let mut array_546 = object.key("Filters").start_array();
        for item_547 in var_545 {
             {
                let mut object_548 = array_546.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_key_values_filter(&mut object_548, item_547)?;
                object_548.finish();
            }
        }
        array_546.finish();
    }
    if let Some(var_549) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_549).into()));
    }
    if let Some(var_550) = &input.next_token {
        object.key("NextToken").string(var_550.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDocumentVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_551) = &input.name {
        object.key("Name").string(var_551.as_str());
    }
    if let Some(var_552) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_552).into()));
    }
    if let Some(var_553) = &input.next_token {
        object.key("NextToken").string(var_553.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inventory_entries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListInventoryEntriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_554) = &input.instance_id {
        object.key("InstanceId").string(var_554.as_str());
    }
    if let Some(var_555) = &input.type_name {
        object.key("TypeName").string(var_555.as_str());
    }
    if let Some(var_556) = &input.filters {
        let mut array_557 = object.key("Filters").start_array();
        for item_558 in var_556 {
             {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(&mut object_559, item_558)?;
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.next_token {
        object.key("NextToken").string(var_560.as_str());
    }
    if let Some(var_561) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_561).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListOpsItemEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_562) = &input.filters {
        let mut array_563 = object.key("Filters").start_array();
        for item_564 in var_562 {
             {
                let mut object_565 = array_563.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_event_filter(&mut object_565, item_564)?;
                object_565.finish();
            }
        }
        array_563.finish();
    }
    if let Some(var_566) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_566).into()));
    }
    if let Some(var_567) = &input.next_token {
        object.key("NextToken").string(var_567.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_related_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListOpsItemRelatedItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_568) = &input.ops_item_id {
        object.key("OpsItemId").string(var_568.as_str());
    }
    if let Some(var_569) = &input.filters {
        let mut array_570 = object.key("Filters").start_array();
        for item_571 in var_569 {
             {
                let mut object_572 = array_570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_related_items_filter(&mut object_572, item_571)?;
                object_572.finish();
            }
        }
        array_570.finish();
    }
    if let Some(var_573) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_573).into()));
    }
    if let Some(var_574) = &input.next_token {
        object.key("NextToken").string(var_574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListOpsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_575) = &input.filters {
        let mut array_576 = object.key("Filters").start_array();
        for item_577 in var_575 {
             {
                let mut object_578 = array_576.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_metadata_filter(&mut object_578, item_577)?;
                object_578.finish();
            }
        }
        array_576.finish();
    }
    if let Some(var_579) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_579).into()));
    }
    if let Some(var_580) = &input.next_token {
        object.key("NextToken").string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_compliance_summaries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourceComplianceSummariesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_581) = &input.filters {
        let mut array_582 = object.key("Filters").start_array();
        for item_583 in var_581 {
             {
                let mut object_584 = array_582.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(&mut object_584, item_583)?;
                object_584.finish();
            }
        }
        array_582.finish();
    }
    if let Some(var_585) = &input.next_token {
        object.key("NextToken").string(var_585.as_str());
    }
    if let Some(var_586) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_586).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_data_sync_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourceDataSyncInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_587) = &input.sync_type {
        object.key("SyncType").string(var_587.as_str());
    }
    if let Some(var_588) = &input.next_token {
        object.key("NextToken").string(var_588.as_str());
    }
    if let Some(var_589) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_589).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_590) = &input.resource_type {
        object.key("ResourceType").string(var_590.as_str());
    }
    if let Some(var_591) = &input.resource_id {
        object.key("ResourceId").string(var_591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_document_permission_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ModifyDocumentPermissionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_592) = &input.name {
        object.key("Name").string(var_592.as_str());
    }
    if let Some(var_593) = &input.permission_type {
        object.key("PermissionType").string(var_593.as_str());
    }
    if let Some(var_594) = &input.account_ids_to_add {
        let mut array_595 = object.key("AccountIdsToAdd").start_array();
        for item_596 in var_594 {
             {
                array_595.value().string(item_596.as_str());
            }
        }
        array_595.finish();
    }
    if let Some(var_597) = &input.account_ids_to_remove {
        let mut array_598 = object.key("AccountIdsToRemove").start_array();
        for item_599 in var_597 {
             {
                array_598.value().string(item_599.as_str());
            }
        }
        array_598.finish();
    }
    if let Some(var_600) = &input.shared_document_version {
        object.key("SharedDocumentVersion").string(var_600.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_compliance_items_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutComplianceItemsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_601) = &input.resource_id {
        object.key("ResourceId").string(var_601.as_str());
    }
    if let Some(var_602) = &input.resource_type {
        object.key("ResourceType").string(var_602.as_str());
    }
    if let Some(var_603) = &input.compliance_type {
        object.key("ComplianceType").string(var_603.as_str());
    }
    if let Some(var_604) = &input.execution_summary {
        let mut object_605 = object.key("ExecutionSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance_execution_summary(&mut object_605, var_604)?;
        object_605.finish();
    }
    if let Some(var_606) = &input.items {
        let mut array_607 = object.key("Items").start_array();
        for item_608 in var_606 {
             {
                let mut object_609 = array_607.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_item_entry(&mut object_609, item_608)?;
                object_609.finish();
            }
        }
        array_607.finish();
    }
    if let Some(var_610) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_610.as_str());
    }
    if let Some(var_611) = &input.upload_type {
        object.key("UploadType").string(var_611.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inventory_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutInventoryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_612) = &input.instance_id {
        object.key("InstanceId").string(var_612.as_str());
    }
    if let Some(var_613) = &input.items {
        let mut array_614 = object.key("Items").start_array();
        for item_615 in var_613 {
             {
                let mut object_616 = array_614.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_item(&mut object_616, item_615)?;
                object_616.finish();
            }
        }
        array_614.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_parameter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutParameterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_617) = &input.name {
        object.key("Name").string(var_617.as_str());
    }
    if let Some(var_618) = &input.description {
        object.key("Description").string(var_618.as_str());
    }
    if let Some(var_619) = &input.value {
        object.key("Value").string(var_619.as_str());
    }
    if let Some(var_620) = &input.r#type {
        object.key("Type").string(var_620.as_str());
    }
    if let Some(var_621) = &input.key_id {
        object.key("KeyId").string(var_621.as_str());
    }
    if let Some(var_622) = &input.overwrite {
        object.key("Overwrite").boolean(*var_622);
    }
    if let Some(var_623) = &input.allowed_pattern {
        object.key("AllowedPattern").string(var_623.as_str());
    }
    if let Some(var_624) = &input.tags {
        let mut array_625 = object.key("Tags").start_array();
        for item_626 in var_624 {
             {
                let mut object_627 = array_625.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_627, item_626)?;
                object_627.finish();
            }
        }
        array_625.finish();
    }
    if let Some(var_628) = &input.tier {
        object.key("Tier").string(var_628.as_str());
    }
    if let Some(var_629) = &input.policies {
        object.key("Policies").string(var_629.as_str());
    }
    if let Some(var_630) = &input.data_type {
        object.key("DataType").string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_default_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterDefaultPatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_631) = &input.baseline_id {
        object.key("BaselineId").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_patch_baseline_for_patch_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterPatchBaselineForPatchGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_632) = &input.baseline_id {
        object.key("BaselineId").string(var_632.as_str());
    }
    if let Some(var_633) = &input.patch_group {
        object.key("PatchGroup").string(var_633.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_target_with_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterTargetWithMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_634) = &input.window_id {
        object.key("WindowId").string(var_634.as_str());
    }
    if let Some(var_635) = &input.resource_type {
        object.key("ResourceType").string(var_635.as_str());
    }
    if let Some(var_636) = &input.targets {
        let mut array_637 = object.key("Targets").start_array();
        for item_638 in var_636 {
             {
                let mut object_639 = array_637.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_639, item_638)?;
                object_639.finish();
            }
        }
        array_637.finish();
    }
    if let Some(var_640) = &input.owner_information {
        object.key("OwnerInformation").string(var_640.as_str());
    }
    if let Some(var_641) = &input.name {
        object.key("Name").string(var_641.as_str());
    }
    if let Some(var_642) = &input.description {
        object.key("Description").string(var_642.as_str());
    }
    if let Some(var_643) = &input.client_token {
        object.key("ClientToken").string(var_643.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_task_with_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterTaskWithMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_644) = &input.window_id {
        object.key("WindowId").string(var_644.as_str());
    }
    if let Some(var_645) = &input.targets {
        let mut array_646 = object.key("Targets").start_array();
        for item_647 in var_645 {
             {
                let mut object_648 = array_646.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_648, item_647)?;
                object_648.finish();
            }
        }
        array_646.finish();
    }
    if let Some(var_649) = &input.task_arn {
        object.key("TaskArn").string(var_649.as_str());
    }
    if let Some(var_650) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_650.as_str());
    }
    if let Some(var_651) = &input.task_type {
        object.key("TaskType").string(var_651.as_str());
    }
    if let Some(var_652) = &input.task_parameters {
        let mut object_653 = object.key("TaskParameters").start_object();
        for (key_654, value_655) in var_652 {
             {
                let mut object_656 = object_653.key(key_654.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_656, value_655)?;
                object_656.finish();
            }
        }
        object_653.finish();
    }
    if let Some(var_657) = &input.task_invocation_parameters {
        let mut object_658 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_658, var_657)?;
        object_658.finish();
    }
    if let Some(var_659) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_659).into()));
    }
    if let Some(var_660) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_660.as_str());
    }
    if let Some(var_661) = &input.max_errors {
        object.key("MaxErrors").string(var_661.as_str());
    }
    if let Some(var_662) = &input.logging_info {
        let mut object_663 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_663, var_662)?;
        object_663.finish();
    }
    if let Some(var_664) = &input.name {
        object.key("Name").string(var_664.as_str());
    }
    if let Some(var_665) = &input.description {
        object.key("Description").string(var_665.as_str());
    }
    if let Some(var_666) = &input.client_token {
        object.key("ClientToken").string(var_666.as_str());
    }
    if let Some(var_667) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_667.as_str());
    }
    if let Some(var_668) = &input.alarm_configuration {
        let mut object_669 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_669, var_668)?;
        object_669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RemoveTagsFromResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_670) = &input.resource_type {
        object.key("ResourceType").string(var_670.as_str());
    }
    if let Some(var_671) = &input.resource_id {
        object.key("ResourceId").string(var_671.as_str());
    }
    if let Some(var_672) = &input.tag_keys {
        let mut array_673 = object.key("TagKeys").start_array();
        for item_674 in var_672 {
             {
                array_673.value().string(item_674.as_str());
            }
        }
        array_673.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_service_setting_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResetServiceSettingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_675) = &input.setting_id {
        object.key("SettingId").string(var_675.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResumeSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_676) = &input.session_id {
        object.key("SessionId").string(var_676.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_automation_signal_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SendAutomationSignalInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_677) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_677.as_str());
    }
    if let Some(var_678) = &input.signal_type {
        object.key("SignalType").string(var_678.as_str());
    }
    if let Some(var_679) = &input.payload {
        let mut object_680 = object.key("Payload").start_object();
        for (key_681, value_682) in var_679 {
             {
                let mut array_683 = object_680.key(key_681.as_str()).start_array();
                for item_684 in value_682 {
                     {
                        array_683.value().string(item_684.as_str());
                    }
                }
                array_683.finish();
            }
        }
        object_680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_command_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SendCommandInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_685) = &input.instance_ids {
        let mut array_686 = object.key("InstanceIds").start_array();
        for item_687 in var_685 {
             {
                array_686.value().string(item_687.as_str());
            }
        }
        array_686.finish();
    }
    if let Some(var_688) = &input.targets {
        let mut array_689 = object.key("Targets").start_array();
        for item_690 in var_688 {
             {
                let mut object_691 = array_689.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_691, item_690)?;
                object_691.finish();
            }
        }
        array_689.finish();
    }
    if let Some(var_692) = &input.document_name {
        object.key("DocumentName").string(var_692.as_str());
    }
    if let Some(var_693) = &input.document_version {
        object.key("DocumentVersion").string(var_693.as_str());
    }
    if let Some(var_694) = &input.document_hash {
        object.key("DocumentHash").string(var_694.as_str());
    }
    if let Some(var_695) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_695.as_str());
    }
    if let Some(var_696) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_696).into()));
    }
    if let Some(var_697) = &input.comment {
        object.key("Comment").string(var_697.as_str());
    }
    if let Some(var_698) = &input.parameters {
        let mut object_699 = object.key("Parameters").start_object();
        for (key_700, value_701) in var_698 {
             {
                let mut array_702 = object_699.key(key_700.as_str()).start_array();
                for item_703 in value_701 {
                     {
                        array_702.value().string(item_703.as_str());
                    }
                }
                array_702.finish();
            }
        }
        object_699.finish();
    }
    if let Some(var_704) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_704.as_str());
    }
    if let Some(var_705) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_705.as_str());
    }
    if let Some(var_706) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_706.as_str());
    }
    if let Some(var_707) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_707.as_str());
    }
    if let Some(var_708) = &input.max_errors {
        object.key("MaxErrors").string(var_708.as_str());
    }
    if let Some(var_709) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_709.as_str());
    }
    if let Some(var_710) = &input.notification_config {
        let mut object_711 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(&mut object_711, var_710)?;
        object_711.finish();
    }
    if let Some(var_712) = &input.cloud_watch_output_config {
        let mut object_713 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(&mut object_713, var_712)?;
        object_713.finish();
    }
    if let Some(var_714) = &input.alarm_configuration {
        let mut object_715 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_715, var_714)?;
        object_715.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_associations_once_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartAssociationsOnceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_716) = &input.association_ids {
        let mut array_717 = object.key("AssociationIds").start_array();
        for item_718 in var_716 {
             {
                array_717.value().string(item_718.as_str());
            }
        }
        array_717.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_automation_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartAutomationExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_719) = &input.document_name {
        object.key("DocumentName").string(var_719.as_str());
    }
    if let Some(var_720) = &input.document_version {
        object.key("DocumentVersion").string(var_720.as_str());
    }
    if let Some(var_721) = &input.parameters {
        let mut object_722 = object.key("Parameters").start_object();
        for (key_723, value_724) in var_721 {
             {
                let mut array_725 = object_722.key(key_723.as_str()).start_array();
                for item_726 in value_724 {
                     {
                        array_725.value().string(item_726.as_str());
                    }
                }
                array_725.finish();
            }
        }
        object_722.finish();
    }
    if let Some(var_727) = &input.client_token {
        object.key("ClientToken").string(var_727.as_str());
    }
    if let Some(var_728) = &input.mode {
        object.key("Mode").string(var_728.as_str());
    }
    if let Some(var_729) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_729.as_str());
    }
    if let Some(var_730) = &input.targets {
        let mut array_731 = object.key("Targets").start_array();
        for item_732 in var_730 {
             {
                let mut object_733 = array_731.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_733, item_732)?;
                object_733.finish();
            }
        }
        array_731.finish();
    }
    if let Some(var_734) = &input.target_maps {
        let mut array_735 = object.key("TargetMaps").start_array();
        for item_736 in var_734 {
             {
                let mut object_737 = array_735.value().start_object();
                for (key_738, value_739) in item_736 {
                     {
                        let mut array_740 = object_737.key(key_738.as_str()).start_array();
                        for item_741 in value_739 {
                             {
                                array_740.value().string(item_741.as_str());
                            }
                        }
                        array_740.finish();
                    }
                }
                object_737.finish();
            }
        }
        array_735.finish();
    }
    if let Some(var_742) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_742.as_str());
    }
    if let Some(var_743) = &input.max_errors {
        object.key("MaxErrors").string(var_743.as_str());
    }
    if let Some(var_744) = &input.target_locations {
        let mut array_745 = object.key("TargetLocations").start_array();
        for item_746 in var_744 {
             {
                let mut object_747 = array_745.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(&mut object_747, item_746)?;
                object_747.finish();
            }
        }
        array_745.finish();
    }
    if let Some(var_748) = &input.tags {
        let mut array_749 = object.key("Tags").start_array();
        for item_750 in var_748 {
             {
                let mut object_751 = array_749.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_751, item_750)?;
                object_751.finish();
            }
        }
        array_749.finish();
    }
    if let Some(var_752) = &input.alarm_configuration {
        let mut object_753 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_753, var_752)?;
        object_753.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_change_request_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartChangeRequestExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_754) = &input.scheduled_time {
        object.key("ScheduledTime").date_time(var_754, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_755) = &input.document_name {
        object.key("DocumentName").string(var_755.as_str());
    }
    if let Some(var_756) = &input.document_version {
        object.key("DocumentVersion").string(var_756.as_str());
    }
    if let Some(var_757) = &input.parameters {
        let mut object_758 = object.key("Parameters").start_object();
        for (key_759, value_760) in var_757 {
             {
                let mut array_761 = object_758.key(key_759.as_str()).start_array();
                for item_762 in value_760 {
                     {
                        array_761.value().string(item_762.as_str());
                    }
                }
                array_761.finish();
            }
        }
        object_758.finish();
    }
    if let Some(var_763) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_763.as_str());
    }
    if let Some(var_764) = &input.client_token {
        object.key("ClientToken").string(var_764.as_str());
    }
    if input.auto_approve {
        object.key("AutoApprove").boolean(input.auto_approve);
    }
    if let Some(var_765) = &input.runbooks {
        let mut array_766 = object.key("Runbooks").start_array();
        for item_767 in var_765 {
             {
                let mut object_768 = array_766.value().start_object();
                crate::json_ser::serialize_structure_crate_model_runbook(&mut object_768, item_767)?;
                object_768.finish();
            }
        }
        array_766.finish();
    }
    if let Some(var_769) = &input.tags {
        let mut array_770 = object.key("Tags").start_array();
        for item_771 in var_769 {
             {
                let mut object_772 = array_770.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_772, item_771)?;
                object_772.finish();
            }
        }
        array_770.finish();
    }
    if let Some(var_773) = &input.scheduled_end_time {
        object.key("ScheduledEndTime").date_time(var_773, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_774) = &input.change_details {
        object.key("ChangeDetails").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_775) = &input.target {
        object.key("Target").string(var_775.as_str());
    }
    if let Some(var_776) = &input.document_name {
        object.key("DocumentName").string(var_776.as_str());
    }
    if let Some(var_777) = &input.reason {
        object.key("Reason").string(var_777.as_str());
    }
    if let Some(var_778) = &input.parameters {
        let mut object_779 = object.key("Parameters").start_object();
        for (key_780, value_781) in var_778 {
             {
                let mut array_782 = object_779.key(key_780.as_str()).start_array();
                for item_783 in value_781 {
                     {
                        array_782.value().string(item_783.as_str());
                    }
                }
                array_782.finish();
            }
        }
        object_779.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_automation_execution_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopAutomationExecutionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_784) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_784.as_str());
    }
    if let Some(var_785) = &input.r#type {
        object.key("Type").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TerminateSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_786) = &input.session_id {
        object.key("SessionId").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unlabel_parameter_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UnlabelParameterVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_787) = &input.name {
        object.key("Name").string(var_787.as_str());
    }
    if let Some(var_788) = &input.parameter_version {
        object.key("ParameterVersion").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_788).into()));
    }
    if let Some(var_789) = &input.labels {
        let mut array_790 = object.key("Labels").start_array();
        for item_791 in var_789 {
             {
                array_790.value().string(item_791.as_str());
            }
        }
        array_790.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAssociationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_792) = &input.association_id {
        object.key("AssociationId").string(var_792.as_str());
    }
    if let Some(var_793) = &input.parameters {
        let mut object_794 = object.key("Parameters").start_object();
        for (key_795, value_796) in var_793 {
             {
                let mut array_797 = object_794.key(key_795.as_str()).start_array();
                for item_798 in value_796 {
                     {
                        array_797.value().string(item_798.as_str());
                    }
                }
                array_797.finish();
            }
        }
        object_794.finish();
    }
    if let Some(var_799) = &input.document_version {
        object.key("DocumentVersion").string(var_799.as_str());
    }
    if let Some(var_800) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_800.as_str());
    }
    if let Some(var_801) = &input.output_location {
        let mut object_802 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(&mut object_802, var_801)?;
        object_802.finish();
    }
    if let Some(var_803) = &input.name {
        object.key("Name").string(var_803.as_str());
    }
    if let Some(var_804) = &input.targets {
        let mut array_805 = object.key("Targets").start_array();
        for item_806 in var_804 {
             {
                let mut object_807 = array_805.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_807, item_806)?;
                object_807.finish();
            }
        }
        array_805.finish();
    }
    if let Some(var_808) = &input.association_name {
        object.key("AssociationName").string(var_808.as_str());
    }
    if let Some(var_809) = &input.association_version {
        object.key("AssociationVersion").string(var_809.as_str());
    }
    if let Some(var_810) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_810.as_str());
    }
    if let Some(var_811) = &input.max_errors {
        object.key("MaxErrors").string(var_811.as_str());
    }
    if let Some(var_812) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_812.as_str());
    }
    if let Some(var_813) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_813.as_str());
    }
    if let Some(var_814) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_814.as_str());
    }
    if input.apply_only_at_cron_interval {
        object.key("ApplyOnlyAtCronInterval").boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_815) = &input.calendar_names {
        let mut array_816 = object.key("CalendarNames").start_array();
        for item_817 in var_815 {
             {
                array_816.value().string(item_817.as_str());
            }
        }
        array_816.finish();
    }
    if let Some(var_818) = &input.target_locations {
        let mut array_819 = object.key("TargetLocations").start_array();
        for item_820 in var_818 {
             {
                let mut object_821 = array_819.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(&mut object_821, item_820)?;
                object_821.finish();
            }
        }
        array_819.finish();
    }
    if let Some(var_822) = &input.schedule_offset {
        object.key("ScheduleOffset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_822).into()));
    }
    if let Some(var_823) = &input.target_maps {
        let mut array_824 = object.key("TargetMaps").start_array();
        for item_825 in var_823 {
             {
                let mut object_826 = array_824.value().start_object();
                for (key_827, value_828) in item_825 {
                     {
                        let mut array_829 = object_826.key(key_827.as_str()).start_array();
                        for item_830 in value_828 {
                             {
                                array_829.value().string(item_830.as_str());
                            }
                        }
                        array_829.finish();
                    }
                }
                object_826.finish();
            }
        }
        array_824.finish();
    }
    if let Some(var_831) = &input.alarm_configuration {
        let mut object_832 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_832, var_831)?;
        object_832.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAssociationStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_833) = &input.name {
        object.key("Name").string(var_833.as_str());
    }
    if let Some(var_834) = &input.instance_id {
        object.key("InstanceId").string(var_834.as_str());
    }
    if let Some(var_835) = &input.association_status {
        let mut object_836 = object.key("AssociationStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_association_status(&mut object_836, var_835)?;
        object_836.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDocumentInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_837) = &input.content {
        object.key("Content").string(var_837.as_str());
    }
    if let Some(var_838) = &input.attachments {
        let mut array_839 = object.key("Attachments").start_array();
        for item_840 in var_838 {
             {
                let mut object_841 = array_839.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(&mut object_841, item_840)?;
                object_841.finish();
            }
        }
        array_839.finish();
    }
    if let Some(var_842) = &input.name {
        object.key("Name").string(var_842.as_str());
    }
    if let Some(var_843) = &input.display_name {
        object.key("DisplayName").string(var_843.as_str());
    }
    if let Some(var_844) = &input.version_name {
        object.key("VersionName").string(var_844.as_str());
    }
    if let Some(var_845) = &input.document_version {
        object.key("DocumentVersion").string(var_845.as_str());
    }
    if let Some(var_846) = &input.document_format {
        object.key("DocumentFormat").string(var_846.as_str());
    }
    if let Some(var_847) = &input.target_type {
        object.key("TargetType").string(var_847.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_default_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDocumentDefaultVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_848) = &input.name {
        object.key("Name").string(var_848.as_str());
    }
    if let Some(var_849) = &input.document_version {
        object.key("DocumentVersion").string(var_849.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDocumentMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_850) = &input.name {
        object.key("Name").string(var_850.as_str());
    }
    if let Some(var_851) = &input.document_version {
        object.key("DocumentVersion").string(var_851.as_str());
    }
    if let Some(var_852) = &input.document_reviews {
        let mut object_853 = object.key("DocumentReviews").start_object();
        crate::json_ser::serialize_structure_crate_model_document_reviews(&mut object_853, var_852)?;
        object_853.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMaintenanceWindowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_854) = &input.window_id {
        object.key("WindowId").string(var_854.as_str());
    }
    if let Some(var_855) = &input.name {
        object.key("Name").string(var_855.as_str());
    }
    if let Some(var_856) = &input.description {
        object.key("Description").string(var_856.as_str());
    }
    if let Some(var_857) = &input.start_date {
        object.key("StartDate").string(var_857.as_str());
    }
    if let Some(var_858) = &input.end_date {
        object.key("EndDate").string(var_858.as_str());
    }
    if let Some(var_859) = &input.schedule {
        object.key("Schedule").string(var_859.as_str());
    }
    if let Some(var_860) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_860.as_str());
    }
    if let Some(var_861) = &input.schedule_offset {
        object.key("ScheduleOffset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_861).into()));
    }
    if let Some(var_862) = &input.duration {
        object.key("Duration").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_862).into()));
    }
    if let Some(var_863) = &input.cutoff {
        object.key("Cutoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_863).into()));
    }
    if let Some(var_864) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_864);
    }
    if let Some(var_865) = &input.enabled {
        object.key("Enabled").boolean(*var_865);
    }
    if let Some(var_866) = &input.replace {
        object.key("Replace").boolean(*var_866);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_target_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMaintenanceWindowTargetInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_867) = &input.window_id {
        object.key("WindowId").string(var_867.as_str());
    }
    if let Some(var_868) = &input.window_target_id {
        object.key("WindowTargetId").string(var_868.as_str());
    }
    if let Some(var_869) = &input.targets {
        let mut array_870 = object.key("Targets").start_array();
        for item_871 in var_869 {
             {
                let mut object_872 = array_870.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_872, item_871)?;
                object_872.finish();
            }
        }
        array_870.finish();
    }
    if let Some(var_873) = &input.owner_information {
        object.key("OwnerInformation").string(var_873.as_str());
    }
    if let Some(var_874) = &input.name {
        object.key("Name").string(var_874.as_str());
    }
    if let Some(var_875) = &input.description {
        object.key("Description").string(var_875.as_str());
    }
    if let Some(var_876) = &input.replace {
        object.key("Replace").boolean(*var_876);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMaintenanceWindowTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_877) = &input.window_id {
        object.key("WindowId").string(var_877.as_str());
    }
    if let Some(var_878) = &input.window_task_id {
        object.key("WindowTaskId").string(var_878.as_str());
    }
    if let Some(var_879) = &input.targets {
        let mut array_880 = object.key("Targets").start_array();
        for item_881 in var_879 {
             {
                let mut object_882 = array_880.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_882, item_881)?;
                object_882.finish();
            }
        }
        array_880.finish();
    }
    if let Some(var_883) = &input.task_arn {
        object.key("TaskArn").string(var_883.as_str());
    }
    if let Some(var_884) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_884.as_str());
    }
    if let Some(var_885) = &input.task_parameters {
        let mut object_886 = object.key("TaskParameters").start_object();
        for (key_887, value_888) in var_885 {
             {
                let mut object_889 = object_886.key(key_887.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_889, value_888)?;
                object_889.finish();
            }
        }
        object_886.finish();
    }
    if let Some(var_890) = &input.task_invocation_parameters {
        let mut object_891 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_891, var_890)?;
        object_891.finish();
    }
    if let Some(var_892) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_892).into()));
    }
    if let Some(var_893) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_893.as_str());
    }
    if let Some(var_894) = &input.max_errors {
        object.key("MaxErrors").string(var_894.as_str());
    }
    if let Some(var_895) = &input.logging_info {
        let mut object_896 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_896, var_895)?;
        object_896.finish();
    }
    if let Some(var_897) = &input.name {
        object.key("Name").string(var_897.as_str());
    }
    if let Some(var_898) = &input.description {
        object.key("Description").string(var_898.as_str());
    }
    if let Some(var_899) = &input.replace {
        object.key("Replace").boolean(*var_899);
    }
    if let Some(var_900) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_900.as_str());
    }
    if let Some(var_901) = &input.alarm_configuration {
        let mut object_902 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_902, var_901)?;
        object_902.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_instance_role_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateManagedInstanceRoleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_903) = &input.instance_id {
        object.key("InstanceId").string(var_903.as_str());
    }
    if let Some(var_904) = &input.iam_role {
        object.key("IamRole").string(var_904.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_item_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateOpsItemInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_905) = &input.description {
        object.key("Description").string(var_905.as_str());
    }
    if let Some(var_906) = &input.operational_data {
        let mut object_907 = object.key("OperationalData").start_object();
        for (key_908, value_909) in var_906 {
             {
                let mut object_910 = object_907.key(key_908.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(&mut object_910, value_909)?;
                object_910.finish();
            }
        }
        object_907.finish();
    }
    if let Some(var_911) = &input.operational_data_to_delete {
        let mut array_912 = object.key("OperationalDataToDelete").start_array();
        for item_913 in var_911 {
             {
                array_912.value().string(item_913.as_str());
            }
        }
        array_912.finish();
    }
    if let Some(var_914) = &input.notifications {
        let mut array_915 = object.key("Notifications").start_array();
        for item_916 in var_914 {
             {
                let mut object_917 = array_915.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(&mut object_917, item_916)?;
                object_917.finish();
            }
        }
        array_915.finish();
    }
    if let Some(var_918) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_918).into()));
    }
    if let Some(var_919) = &input.related_ops_items {
        let mut array_920 = object.key("RelatedOpsItems").start_array();
        for item_921 in var_919 {
             {
                let mut object_922 = array_920.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(&mut object_922, item_921)?;
                object_922.finish();
            }
        }
        array_920.finish();
    }
    if let Some(var_923) = &input.status {
        object.key("Status").string(var_923.as_str());
    }
    if let Some(var_924) = &input.ops_item_id {
        object.key("OpsItemId").string(var_924.as_str());
    }
    if let Some(var_925) = &input.title {
        object.key("Title").string(var_925.as_str());
    }
    if let Some(var_926) = &input.category {
        object.key("Category").string(var_926.as_str());
    }
    if let Some(var_927) = &input.severity {
        object.key("Severity").string(var_927.as_str());
    }
    if let Some(var_928) = &input.actual_start_time {
        object.key("ActualStartTime").date_time(var_928, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_929) = &input.actual_end_time {
        object.key("ActualEndTime").date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_930) = &input.planned_start_time {
        object.key("PlannedStartTime").date_time(var_930, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_931) = &input.planned_end_time {
        object.key("PlannedEndTime").date_time(var_931, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateOpsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_932) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_932.as_str());
    }
    if let Some(var_933) = &input.metadata_to_update {
        let mut object_934 = object.key("MetadataToUpdate").start_object();
        for (key_935, value_936) in var_933 {
             {
                let mut object_937 = object_934.key(key_935.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(&mut object_937, value_936)?;
                object_937.finish();
            }
        }
        object_934.finish();
    }
    if let Some(var_938) = &input.keys_to_delete {
        let mut array_939 = object.key("KeysToDelete").start_array();
        for item_940 in var_938 {
             {
                array_939.value().string(item_940.as_str());
            }
        }
        array_939.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_patch_baseline_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePatchBaselineInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_941) = &input.baseline_id {
        object.key("BaselineId").string(var_941.as_str());
    }
    if let Some(var_942) = &input.name {
        object.key("Name").string(var_942.as_str());
    }
    if let Some(var_943) = &input.global_filters {
        let mut object_944 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(&mut object_944, var_943)?;
        object_944.finish();
    }
    if let Some(var_945) = &input.approval_rules {
        let mut object_946 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(&mut object_946, var_945)?;
        object_946.finish();
    }
    if let Some(var_947) = &input.approved_patches {
        let mut array_948 = object.key("ApprovedPatches").start_array();
        for item_949 in var_947 {
             {
                array_948.value().string(item_949.as_str());
            }
        }
        array_948.finish();
    }
    if let Some(var_950) = &input.approved_patches_compliance_level {
        object.key("ApprovedPatchesComplianceLevel").string(var_950.as_str());
    }
    if let Some(var_951) = &input.approved_patches_enable_non_security {
        object.key("ApprovedPatchesEnableNonSecurity").boolean(*var_951);
    }
    if let Some(var_952) = &input.rejected_patches {
        let mut array_953 = object.key("RejectedPatches").start_array();
        for item_954 in var_952 {
             {
                array_953.value().string(item_954.as_str());
            }
        }
        array_953.finish();
    }
    if let Some(var_955) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_955.as_str());
    }
    if let Some(var_956) = &input.description {
        object.key("Description").string(var_956.as_str());
    }
    if let Some(var_957) = &input.sources {
        let mut array_958 = object.key("Sources").start_array();
        for item_959 in var_957 {
             {
                let mut object_960 = array_958.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(&mut object_960, item_959)?;
                object_960.finish();
            }
        }
        array_958.finish();
    }
    if let Some(var_961) = &input.replace {
        object.key("Replace").boolean(*var_961);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_data_sync_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateResourceDataSyncInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_962) = &input.sync_name {
        object.key("SyncName").string(var_962.as_str());
    }
    if let Some(var_963) = &input.sync_type {
        object.key("SyncType").string(var_963.as_str());
    }
    if let Some(var_964) = &input.sync_source {
        let mut object_965 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(&mut object_965, var_964)?;
        object_965.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_setting_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateServiceSettingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_966) = &input.setting_id {
        object.key("SettingId").string(var_966.as_str());
    }
    if let Some(var_967) = &input.setting_value {
        object.key("SettingValue").string(var_967.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_968) = &input.key {
        object.key("Key").string(var_968.as_str());
    }
    if let Some(var_969) = &input.value {
        object.key("Value").string(var_969.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_metadata_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RegistrationMetadataItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_970) = &input.key {
        object.key("Key").string(var_970.as_str());
    }
    if let Some(var_971) = &input.value {
        object.key("Value").string(var_971.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Target) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_972) = &input.key {
        object.key("Key").string(var_972.as_str());
    }
    if let Some(var_973) = &input.values {
        let mut array_974 = object.key("Values").start_array();
        for item_975 in var_973 {
             {
                array_974.value().string(item_975.as_str());
            }
        }
        array_974.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_association_output_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceAssociationOutputLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_976) = &input.s3_location {
        let mut object_977 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_output_location(&mut object_977, var_976)?;
        object_977.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TargetLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_978) = &input.accounts {
        let mut array_979 = object.key("Accounts").start_array();
        for item_980 in var_978 {
             {
                array_979.value().string(item_980.as_str());
            }
        }
        array_979.finish();
    }
    if let Some(var_981) = &input.regions {
        let mut array_982 = object.key("Regions").start_array();
        for item_983 in var_981 {
             {
                array_982.value().string(item_983.as_str());
            }
        }
        array_982.finish();
    }
    if let Some(var_984) = &input.target_location_max_concurrency {
        object.key("TargetLocationMaxConcurrency").string(var_984.as_str());
    }
    if let Some(var_985) = &input.target_location_max_errors {
        object.key("TargetLocationMaxErrors").string(var_985.as_str());
    }
    if let Some(var_986) = &input.execution_role_name {
        object.key("ExecutionRoleName").string(var_986.as_str());
    }
    if let Some(var_987) = &input.target_location_alarm_configuration {
        let mut object_988 = object.key("TargetLocationAlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_988, var_987)?;
        object_988.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AlarmConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.ignore_poll_alarm_failure {
        object.key("IgnorePollAlarmFailure").boolean(input.ignore_poll_alarm_failure);
    }
    if let Some(var_989) = &input.alarms {
        let mut array_990 = object.key("Alarms").start_array();
        for item_991 in var_989 {
             {
                let mut object_992 = array_990.value().start_object();
                crate::json_ser::serialize_structure_crate_model_alarm(&mut object_992, item_991)?;
                object_992.finish();
            }
        }
        array_990.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_association_batch_request_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateAssociationBatchRequestEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_993) = &input.name {
        object.key("Name").string(var_993.as_str());
    }
    if let Some(var_994) = &input.instance_id {
        object.key("InstanceId").string(var_994.as_str());
    }
    if let Some(var_995) = &input.parameters {
        let mut object_996 = object.key("Parameters").start_object();
        for (key_997, value_998) in var_995 {
             {
                let mut array_999 = object_996.key(key_997.as_str()).start_array();
                for item_1000 in value_998 {
                     {
                        array_999.value().string(item_1000.as_str());
                    }
                }
                array_999.finish();
            }
        }
        object_996.finish();
    }
    if let Some(var_1001) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.document_version {
        object.key("DocumentVersion").string(var_1002.as_str());
    }
    if let Some(var_1003) = &input.targets {
        let mut array_1004 = object.key("Targets").start_array();
        for item_1005 in var_1003 {
             {
                let mut object_1006 = array_1004.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_1006, item_1005)?;
                object_1006.finish();
            }
        }
        array_1004.finish();
    }
    if let Some(var_1007) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.output_location {
        let mut object_1009 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(&mut object_1009, var_1008)?;
        object_1009.finish();
    }
    if let Some(var_1010) = &input.association_name {
        object.key("AssociationName").string(var_1010.as_str());
    }
    if let Some(var_1011) = &input.max_errors {
        object.key("MaxErrors").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1012.as_str());
    }
    if let Some(var_1013) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_1013.as_str());
    }
    if let Some(var_1014) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_1014.as_str());
    }
    if input.apply_only_at_cron_interval {
        object.key("ApplyOnlyAtCronInterval").boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_1015) = &input.calendar_names {
        let mut array_1016 = object.key("CalendarNames").start_array();
        for item_1017 in var_1015 {
             {
                array_1016.value().string(item_1017.as_str());
            }
        }
        array_1016.finish();
    }
    if let Some(var_1018) = &input.target_locations {
        let mut array_1019 = object.key("TargetLocations").start_array();
        for item_1020 in var_1018 {
             {
                let mut object_1021 = array_1019.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(&mut object_1021, item_1020)?;
                object_1021.finish();
            }
        }
        array_1019.finish();
    }
    if let Some(var_1022) = &input.schedule_offset {
        object.key("ScheduleOffset").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1022).into()));
    }
    if let Some(var_1023) = &input.target_maps {
        let mut array_1024 = object.key("TargetMaps").start_array();
        for item_1025 in var_1023 {
             {
                let mut object_1026 = array_1024.value().start_object();
                for (key_1027, value_1028) in item_1025 {
                     {
                        let mut array_1029 = object_1026.key(key_1027.as_str()).start_array();
                        for item_1030 in value_1028 {
                             {
                                array_1029.value().string(item_1030.as_str());
                            }
                        }
                        array_1029.finish();
                    }
                }
                object_1026.finish();
            }
        }
        array_1024.finish();
    }
    if let Some(var_1031) = &input.alarm_configuration {
        let mut object_1032 = object.key("AlarmConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alarm_configuration(&mut object_1032, var_1031)?;
        object_1032.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_requires(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DocumentRequires) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1033) = &input.name {
        object.key("Name").string(var_1033.as_str());
    }
    if let Some(var_1034) = &input.version {
        object.key("Version").string(var_1034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attachments_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AttachmentsSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1035) = &input.key {
        object.key("Key").string(var_1035.as_str());
    }
    if let Some(var_1036) = &input.values {
        let mut array_1037 = object.key("Values").start_array();
        for item_1038 in var_1036 {
             {
                array_1037.value().string(item_1038.as_str());
            }
        }
        array_1037.finish();
    }
    if let Some(var_1039) = &input.name {
        object.key("Name").string(var_1039.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_data_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsItemDataValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1040) = &input.value {
        object.key("Value").string(var_1040.as_str());
    }
    if let Some(var_1041) = &input.r#type {
        object.key("Type").string(var_1041.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_notification(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsItemNotification) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1042) = &input.arn {
        object.key("Arn").string(var_1042.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_ops_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelatedOpsItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1043) = &input.ops_item_id {
        object.key("OpsItemId").string(var_1043.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetadataValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1044) = &input.value {
        object.key("Value").string(var_1044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchFilterGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1045) = &input.patch_filters {
        let mut array_1046 = object.key("PatchFilters").start_array();
        for item_1047 in var_1045 {
             {
                let mut object_1048 = array_1046.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_filter(&mut object_1048, item_1047)?;
                object_1048.finish();
            }
        }
        array_1046.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchRuleGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1049) = &input.patch_rules {
        let mut array_1050 = object.key("PatchRules").start_array();
        for item_1051 in var_1049 {
             {
                let mut object_1052 = array_1050.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_rule(&mut object_1052, item_1051)?;
                object_1052.finish();
            }
        }
        array_1050.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1053) = &input.name {
        object.key("Name").string(var_1053.as_str());
    }
    if let Some(var_1054) = &input.products {
        let mut array_1055 = object.key("Products").start_array();
        for item_1056 in var_1054 {
             {
                array_1055.value().string(item_1056.as_str());
            }
        }
        array_1055.finish();
    }
    if let Some(var_1057) = &input.configuration {
        object.key("Configuration").string(var_1057.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_s3_destination(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceDataSyncS3Destination) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1058) = &input.bucket_name {
        object.key("BucketName").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.prefix {
        object.key("Prefix").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.sync_format {
        object.key("SyncFormat").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.region {
        object.key("Region").string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.destination_data_sharing {
        let mut object_1064 = object.key("DestinationDataSharing").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_destination_data_sharing(&mut object_1064, var_1063)?;
        object_1064.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceDataSyncSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1065) = &input.source_type {
        object.key("SourceType").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.aws_organizations_source {
        let mut object_1067 = object.key("AwsOrganizationsSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_aws_organizations_source(&mut object_1067, var_1066)?;
        object_1067.finish();
    }
    if let Some(var_1068) = &input.source_regions {
        let mut array_1069 = object.key("SourceRegions").start_array();
        for item_1070 in var_1068 {
             {
                array_1069.value().string(item_1070.as_str());
            }
        }
        array_1069.finish();
    }
    if input.include_future_regions {
        object.key("IncludeFutureRegions").boolean(input.include_future_regions);
    }
    if input.enable_all_ops_data_sources {
        object.key("EnableAllOpsDataSources").boolean(input.enable_all_ops_data_sources);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_activations_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DescribeActivationsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1071) = &input.filter_key {
        object.key("FilterKey").string(var_1071.as_str());
    }
    if let Some(var_1072) = &input.filter_values {
        let mut array_1073 = object.key("FilterValues").start_array();
        for item_1074 in var_1072 {
             {
                array_1073.value().string(item_1074.as_str());
            }
        }
        array_1073.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssociationExecutionFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1075) = &input.key {
        object.key("Key").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.value {
        object.key("Value").string(var_1076.as_str());
    }
    if let Some(var_1077) = &input.r#type {
        object.key("Type").string(var_1077.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_targets_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssociationExecutionTargetsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1078) = &input.key {
        object.key("Key").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.value {
        object.key("Value").string(var_1079.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_automation_execution_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutomationExecutionFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1080) = &input.key {
        object.key("Key").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.values {
        let mut array_1082 = object.key("Values").start_array();
        for item_1083 in var_1081 {
             {
                array_1082.value().string(item_1083.as_str());
            }
        }
        array_1082.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_execution_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StepExecutionFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1084) = &input.key {
        object.key("Key").string(var_1084.as_str());
    }
    if let Some(var_1085) = &input.values {
        let mut array_1086 = object.key("Values").start_array();
        for item_1087 in var_1085 {
             {
                array_1086.value().string(item_1087.as_str());
            }
        }
        array_1086.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_orchestrator_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchOrchestratorFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1088) = &input.key {
        object.key("Key").string(var_1088.as_str());
    }
    if let Some(var_1089) = &input.values {
        let mut array_1090 = object.key("Values").start_array();
        for item_1091 in var_1089 {
             {
                array_1090.value().string(item_1091.as_str());
            }
        }
        array_1090.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceInformationFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1092) = &input.key {
        object.key("key").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.value_set {
        let mut array_1094 = object.key("valueSet").start_array();
        for item_1095 in var_1093 {
             {
                array_1094.value().string(item_1095.as_str());
            }
        }
        array_1094.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_string_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstanceInformationStringFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1096) = &input.key {
        object.key("Key").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.values {
        let mut array_1098 = object.key("Values").start_array();
        for item_1099 in var_1097 {
             {
                array_1098.value().string(item_1099.as_str());
            }
        }
        array_1098.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_patch_state_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InstancePatchStateFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1100) = &input.key {
        object.key("Key").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.values {
        let mut array_1102 = object.key("Values").start_array();
        for item_1103 in var_1101 {
             {
                array_1102.value().string(item_1103.as_str());
            }
        }
        array_1102.finish();
    }
    if let Some(var_1104) = &input.r#type {
        object.key("Type").string(var_1104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1105) = &input.key {
        object.key("Key").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.values {
        let mut array_1107 = object.key("Values").start_array();
        for item_1108 in var_1106 {
             {
                array_1107.value().string(item_1108.as_str());
            }
        }
        array_1107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsItemFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1109) = &input.key {
        object.key("Key").string(var_1109.as_str());
    }
    if let Some(var_1110) = &input.values {
        let mut array_1111 = object.key("Values").start_array();
        for item_1112 in var_1110 {
             {
                array_1111.value().string(item_1112.as_str());
            }
        }
        array_1111.finish();
    }
    if let Some(var_1113) = &input.operator {
        object.key("Operator").string(var_1113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParametersFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1114) = &input.key {
        object.key("Key").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.values {
        let mut array_1116 = object.key("Values").start_array();
        for item_1117 in var_1115 {
             {
                array_1116.value().string(item_1117.as_str());
            }
        }
        array_1116.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_string_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ParameterStringFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1118) = &input.key {
        object.key("Key").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.option {
        object.key("Option").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.values {
        let mut array_1121 = object.key("Values").start_array();
        for item_1122 in var_1120 {
             {
                array_1121.value().string(item_1122.as_str());
            }
        }
        array_1121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SessionFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1123) = &input.key {
        object.key("key").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.value {
        object.key("value").string(var_1124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_baseline_override(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BaselineOverride) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1125) = &input.operating_system {
        object.key("OperatingSystem").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.global_filters {
        let mut object_1127 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(&mut object_1127, var_1126)?;
        object_1127.finish();
    }
    if let Some(var_1128) = &input.approval_rules {
        let mut object_1129 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(&mut object_1129, var_1128)?;
        object_1129.finish();
    }
    if let Some(var_1130) = &input.approved_patches {
        let mut array_1131 = object.key("ApprovedPatches").start_array();
        for item_1132 in var_1130 {
             {
                array_1131.value().string(item_1132.as_str());
            }
        }
        array_1131.finish();
    }
    if let Some(var_1133) = &input.approved_patches_compliance_level {
        object.key("ApprovedPatchesComplianceLevel").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.rejected_patches {
        let mut array_1135 = object.key("RejectedPatches").start_array();
        for item_1136 in var_1134 {
             {
                array_1135.value().string(item_1136.as_str());
            }
        }
        array_1135.finish();
    }
    if let Some(var_1137) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_1137.as_str());
    }
    if input.approved_patches_enable_non_security {
        object.key("ApprovedPatchesEnableNonSecurity").boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_1138) = &input.sources {
        let mut array_1139 = object.key("Sources").start_array();
        for item_1140 in var_1138 {
             {
                let mut object_1141 = array_1139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(&mut object_1141, item_1140)?;
                object_1141.finish();
            }
        }
        array_1139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InventoryFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1142) = &input.key {
        object.key("Key").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.values {
        let mut array_1144 = object.key("Values").start_array();
        for item_1145 in var_1143 {
             {
                array_1144.value().string(item_1145.as_str());
            }
        }
        array_1144.finish();
    }
    if let Some(var_1146) = &input.r#type {
        object.key("Type").string(var_1146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_aggregator(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InventoryAggregator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1147) = &input.expression {
        object.key("Expression").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.aggregators {
        let mut array_1149 = object.key("Aggregators").start_array();
        for item_1150 in var_1148 {
             {
                let mut object_1151 = array_1149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(&mut object_1151, item_1150)?;
                object_1151.finish();
            }
        }
        array_1149.finish();
    }
    if let Some(var_1152) = &input.groups {
        let mut array_1153 = object.key("Groups").start_array();
        for item_1154 in var_1152 {
             {
                let mut object_1155 = array_1153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_group(&mut object_1155, item_1154)?;
                object_1155.finish();
            }
        }
        array_1153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_result_attribute(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResultAttribute) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1156) = &input.type_name {
        object.key("TypeName").string(var_1156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1157) = &input.key {
        object.key("Key").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.values {
        let mut array_1159 = object.key("Values").start_array();
        for item_1160 in var_1158 {
             {
                array_1159.value().string(item_1160.as_str());
            }
        }
        array_1159.finish();
    }
    if let Some(var_1161) = &input.r#type {
        object.key("Type").string(var_1161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_aggregator(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsAggregator) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1162) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.type_name {
        object.key("TypeName").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.attribute_name {
        object.key("AttributeName").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.values {
        let mut object_1166 = object.key("Values").start_object();
        for (key_1167, value_1168) in var_1165 {
             {
                object_1166.key(key_1167.as_str()).string(value_1168.as_str());
            }
        }
        object_1166.finish();
    }
    if let Some(var_1169) = &input.filters {
        let mut array_1170 = object.key("Filters").start_array();
        for item_1171 in var_1169 {
             {
                let mut object_1172 = array_1170.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(&mut object_1172, item_1171)?;
                object_1172.finish();
            }
        }
        array_1170.finish();
    }
    if let Some(var_1173) = &input.aggregators {
        let mut array_1174 = object.key("Aggregators").start_array();
        for item_1175 in var_1173 {
             {
                let mut object_1176 = array_1174.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(&mut object_1176, item_1175)?;
                object_1176.finish();
            }
        }
        array_1174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_result_attribute(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsResultAttribute) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1177) = &input.type_name {
        object.key("TypeName").string(var_1177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssociationFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1178) = &input.key {
        object.key("key").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.value {
        object.key("value").string(var_1179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_command_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CommandFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1180) = &input.key {
        object.key("key").string(var_1180.as_str());
    }
    if let Some(var_1181) = &input.value {
        object.key("value").string(var_1181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_string_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ComplianceStringFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1182) = &input.key {
        object.key("Key").string(var_1182.as_str());
    }
    if let Some(var_1183) = &input.values {
        let mut array_1184 = object.key("Values").start_array();
        for item_1185 in var_1183 {
             {
                array_1184.value().string(item_1185.as_str());
            }
        }
        array_1184.finish();
    }
    if let Some(var_1186) = &input.r#type {
        object.key("Type").string(var_1186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DocumentFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1187) = &input.key {
        object.key("key").string(var_1187.as_str());
    }
    if let Some(var_1188) = &input.value {
        object.key("value").string(var_1188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_key_values_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DocumentKeyValuesFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1189) = &input.key {
        object.key("Key").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.values {
        let mut array_1191 = object.key("Values").start_array();
        for item_1192 in var_1190 {
             {
                array_1191.value().string(item_1192.as_str());
            }
        }
        array_1191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_event_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsItemEventFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1193) = &input.key {
        object.key("Key").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.values {
        let mut array_1195 = object.key("Values").start_array();
        for item_1196 in var_1194 {
             {
                array_1195.value().string(item_1196.as_str());
            }
        }
        array_1195.finish();
    }
    if let Some(var_1197) = &input.operator {
        object.key("Operator").string(var_1197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_related_items_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsItemRelatedItemsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1198) = &input.key {
        object.key("Key").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.values {
        let mut array_1200 = object.key("Values").start_array();
        for item_1201 in var_1199 {
             {
                array_1200.value().string(item_1201.as_str());
            }
        }
        array_1200.finish();
    }
    if let Some(var_1202) = &input.operator {
        object.key("Operator").string(var_1202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_metadata_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OpsMetadataFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1203) = &input.key {
        object.key("Key").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.values {
        let mut array_1205 = object.key("Values").start_array();
        for item_1206 in var_1204 {
             {
                array_1205.value().string(item_1206.as_str());
            }
        }
        array_1205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_execution_summary(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ComplianceExecutionSummary) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1207) = &input.execution_time {
        object.key("ExecutionTime").date_time(var_1207, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1208) = &input.execution_id {
        object.key("ExecutionId").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.execution_type {
        object.key("ExecutionType").string(var_1209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_item_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ComplianceItemEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1210) = &input.id {
        object.key("Id").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.title {
        object.key("Title").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.severity {
        object.key("Severity").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.status {
        object.key("Status").string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.details {
        let mut object_1215 = object.key("Details").start_object();
        for (key_1216, value_1217) in var_1214 {
             {
                object_1215.key(key_1216.as_str()).string(value_1217.as_str());
            }
        }
        object_1215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_item(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InventoryItem) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1218) = &input.type_name {
        object.key("TypeName").string(var_1218.as_str());
    }
    if let Some(var_1219) = &input.schema_version {
        object.key("SchemaVersion").string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.capture_time {
        object.key("CaptureTime").string(var_1220.as_str());
    }
    if let Some(var_1221) = &input.content_hash {
        object.key("ContentHash").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.content {
        let mut array_1223 = object.key("Content").start_array();
        for item_1224 in var_1222 {
             {
                let mut object_1225 = array_1223.value().start_object();
                for (key_1226, value_1227) in item_1224 {
                     {
                        object_1225.key(key_1226.as_str()).string(value_1227.as_str());
                    }
                }
                object_1225.finish();
            }
        }
        array_1223.finish();
    }
    if let Some(var_1228) = &input.context {
        let mut object_1229 = object.key("Context").start_object();
        for (key_1230, value_1231) in var_1228 {
             {
                object_1229.key(key_1230.as_str()).string(value_1231.as_str());
            }
        }
        object_1229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowTaskParameterValueExpression) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1232) = &input.values {
        let mut array_1233 = object.key("Values").start_array();
        for item_1234 in var_1232 {
             {
                array_1233.value().string(item_1234.as_str());
            }
        }
        array_1233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_invocation_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowTaskInvocationParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1235) = &input.run_command {
        let mut object_1236 = object.key("RunCommand").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_run_command_parameters(&mut object_1236, var_1235)?;
        object_1236.finish();
    }
    if let Some(var_1237) = &input.automation {
        let mut object_1238 = object.key("Automation").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_automation_parameters(&mut object_1238, var_1237)?;
        object_1238.finish();
    }
    if let Some(var_1239) = &input.step_functions {
        let mut object_1240 = object.key("StepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_step_functions_parameters(&mut object_1240, var_1239)?;
        object_1240.finish();
    }
    if let Some(var_1241) = &input.lambda {
        let mut object_1242 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_lambda_parameters(&mut object_1242, var_1241)?;
        object_1242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LoggingInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1243) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1244.as_str());
    }
    if let Some(var_1245) = &input.s3_region {
        object.key("S3Region").string(var_1245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1246) = &input.notification_arn {
        object.key("NotificationArn").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.notification_events {
        let mut array_1248 = object.key("NotificationEvents").start_array();
        for item_1249 in var_1247 {
             {
                array_1248.value().string(item_1249.as_str());
            }
        }
        array_1248.finish();
    }
    if let Some(var_1250) = &input.notification_type {
        object.key("NotificationType").string(var_1250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_output_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CloudWatchOutputConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1251) = &input.cloud_watch_log_group_name {
        object.key("CloudWatchLogGroupName").string(var_1251.as_str());
    }
    if input.cloud_watch_output_enabled {
        object.key("CloudWatchOutputEnabled").boolean(input.cloud_watch_output_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_runbook(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Runbook) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1252) = &input.document_name {
        object.key("DocumentName").string(var_1252.as_str());
    }
    if let Some(var_1253) = &input.document_version {
        object.key("DocumentVersion").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.parameters {
        let mut object_1255 = object.key("Parameters").start_object();
        for (key_1256, value_1257) in var_1254 {
             {
                let mut array_1258 = object_1255.key(key_1256.as_str()).start_array();
                for item_1259 in value_1257 {
                     {
                        array_1258.value().string(item_1259.as_str());
                    }
                }
                array_1258.finish();
            }
        }
        object_1255.finish();
    }
    if let Some(var_1260) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_1260.as_str());
    }
    if let Some(var_1261) = &input.targets {
        let mut array_1262 = object.key("Targets").start_array();
        for item_1263 in var_1261 {
             {
                let mut object_1264 = array_1262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_1264, item_1263)?;
                object_1264.finish();
            }
        }
        array_1262.finish();
    }
    if let Some(var_1265) = &input.target_maps {
        let mut array_1266 = object.key("TargetMaps").start_array();
        for item_1267 in var_1265 {
             {
                let mut object_1268 = array_1266.value().start_object();
                for (key_1269, value_1270) in item_1267 {
                     {
                        let mut array_1271 = object_1268.key(key_1269.as_str()).start_array();
                        for item_1272 in value_1270 {
                             {
                                array_1271.value().string(item_1272.as_str());
                            }
                        }
                        array_1271.finish();
                    }
                }
                object_1268.finish();
            }
        }
        array_1266.finish();
    }
    if let Some(var_1273) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.max_errors {
        object.key("MaxErrors").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.target_locations {
        let mut array_1276 = object.key("TargetLocations").start_array();
        for item_1277 in var_1275 {
             {
                let mut object_1278 = array_1276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(&mut object_1278, item_1277)?;
                object_1278.finish();
            }
        }
        array_1276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_status(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AssociationStatus) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1279) = &input.date {
        object.key("Date").date_time(var_1279, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1280) = &input.name {
        object.key("Name").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.message {
        object.key("Message").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.additional_info {
        object.key("AdditionalInfo").string(var_1282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_reviews(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DocumentReviews) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1283) = &input.action {
        object.key("Action").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.comment {
        let mut array_1285 = object.key("Comment").start_array();
        for item_1286 in var_1284 {
             {
                let mut object_1287 = array_1285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_review_comment_source(&mut object_1287, item_1286)?;
                object_1287.finish();
            }
        }
        array_1285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_output_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3OutputLocation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1288) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alarm(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Alarm) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1291) = &input.name {
        object.key("Name").string(var_1291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1292) = &input.key {
        object.key("Key").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.values {
        let mut array_1294 = object.key("Values").start_array();
        for item_1295 in var_1293 {
             {
                array_1294.value().string(item_1295.as_str());
            }
        }
        array_1294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PatchRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1296) = &input.patch_filter_group {
        let mut object_1297 = object.key("PatchFilterGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(&mut object_1297, var_1296)?;
        object_1297.finish();
    }
    if let Some(var_1298) = &input.compliance_level {
        object.key("ComplianceLevel").string(var_1298.as_str());
    }
    if let Some(var_1299) = &input.approve_after_days {
        object.key("ApproveAfterDays").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1299).into()));
    }
    if let Some(var_1300) = &input.approve_until_date {
        object.key("ApproveUntilDate").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.enable_non_security {
        object.key("EnableNonSecurity").boolean(*var_1301);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_destination_data_sharing(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceDataSyncDestinationDataSharing) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1302) = &input.destination_data_sharing_type {
        object.key("DestinationDataSharingType").string(var_1302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_aws_organizations_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceDataSyncAwsOrganizationsSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1303) = &input.organization_source_type {
        object.key("OrganizationSourceType").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.organizational_units {
        let mut array_1305 = object.key("OrganizationalUnits").start_array();
        for item_1306 in var_1304 {
             {
                let mut object_1307 = array_1305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_data_sync_organizational_unit(&mut object_1307, item_1306)?;
                object_1307.finish();
            }
        }
        array_1305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InventoryGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1308) = &input.name {
        object.key("Name").string(var_1308.as_str());
    }
    if let Some(var_1309) = &input.filters {
        let mut array_1310 = object.key("Filters").start_array();
        for item_1311 in var_1309 {
             {
                let mut object_1312 = array_1310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(&mut object_1312, item_1311)?;
                object_1312.finish();
            }
        }
        array_1310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_run_command_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowRunCommandParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1313) = &input.comment {
        object.key("Comment").string(var_1313.as_str());
    }
    if let Some(var_1314) = &input.cloud_watch_output_config {
        let mut object_1315 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(&mut object_1315, var_1314)?;
        object_1315.finish();
    }
    if let Some(var_1316) = &input.document_hash {
        object.key("DocumentHash").string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_1317.as_str());
    }
    if let Some(var_1318) = &input.document_version {
        object.key("DocumentVersion").string(var_1318.as_str());
    }
    if let Some(var_1319) = &input.notification_config {
        let mut object_1320 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(&mut object_1320, var_1319)?;
        object_1320.finish();
    }
    if let Some(var_1321) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1321.as_str());
    }
    if let Some(var_1322) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1322.as_str());
    }
    if let Some(var_1323) = &input.parameters {
        let mut object_1324 = object.key("Parameters").start_object();
        for (key_1325, value_1326) in var_1323 {
             {
                let mut array_1327 = object_1324.key(key_1325.as_str()).start_array();
                for item_1328 in value_1326 {
                     {
                        array_1327.value().string(item_1328.as_str());
                    }
                }
                array_1327.finish();
            }
        }
        object_1324.finish();
    }
    if let Some(var_1329) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1330).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_automation_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowAutomationParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1331) = &input.document_version {
        object.key("DocumentVersion").string(var_1331.as_str());
    }
    if let Some(var_1332) = &input.parameters {
        let mut object_1333 = object.key("Parameters").start_object();
        for (key_1334, value_1335) in var_1332 {
             {
                let mut array_1336 = object_1333.key(key_1334.as_str()).start_array();
                for item_1337 in value_1335 {
                     {
                        array_1336.value().string(item_1337.as_str());
                    }
                }
                array_1336.finish();
            }
        }
        object_1333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_step_functions_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowStepFunctionsParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1338) = &input.input {
        object.key("Input").string(var_1338.as_str());
    }
    if let Some(var_1339) = &input.name {
        object.key("Name").string(var_1339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_lambda_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MaintenanceWindowLambdaParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1340) = &input.client_context {
        object.key("ClientContext").string(var_1340.as_str());
    }
    if let Some(var_1341) = &input.qualifier {
        object.key("Qualifier").string(var_1341.as_str());
    }
    if let Some(var_1342) = &input.payload {
        object.key("Payload").string_unchecked(&aws_smithy_types::base64::encode(var_1342));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_review_comment_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DocumentReviewCommentSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1343) = &input.r#type {
        object.key("Type").string(var_1343.as_str());
    }
    if let Some(var_1344) = &input.content {
        object.key("Content").string(var_1344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_organizational_unit(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceDataSyncOrganizationalUnit) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1345) = &input.organizational_unit_id {
        object.key("OrganizationalUnitId").string(var_1345.as_str());
    }
    Ok(())
}

