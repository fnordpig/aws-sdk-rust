// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("ARN").string(var_1.as_str());
    }
    if let Some(var_2) = &input.tag_list {
        let mut array_3 = object.key("TagList").start_array();
        for item_4 in var_2 {
             {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_authorize_vpc_endpoint_access_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AuthorizeVpcEndpointAccessInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.account {
        object.key("Account").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_service_software_update_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelServiceSoftwareUpdateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_7) = &input.domain_name {
        object.key("DomainName").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_8) = &input.access_policies {
        object.key("AccessPolicies").string(var_8.as_str());
    }
    if let Some(var_9) = &input.advanced_options {
        let mut object_10 = object.key("AdvancedOptions").start_object();
        for (key_11, value_12) in var_9 {
             {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.advanced_security_options {
        let mut object_14 = object.key("AdvancedSecurityOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_advanced_security_options_input(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.auto_tune_options {
        let mut object_16 = object.key("AutoTuneOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_tune_options_input(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.cluster_config {
        let mut object_18 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cluster_config(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.cognito_options {
        let mut object_20 = object.key("CognitoOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_options(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.domain_endpoint_options {
        let mut object_22 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_endpoint_options(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.domain_name {
        object.key("DomainName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.ebs_options {
        let mut object_25 = object.key("EBSOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_options(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.encryption_at_rest_options {
        let mut object_27 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest_options(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.engine_version {
        object.key("EngineVersion").string(var_28.as_str());
    }
    if let Some(var_29) = &input.log_publishing_options {
        let mut object_30 = object.key("LogPublishingOptions").start_object();
        for (key_31, value_32) in var_29 {
             {
                let mut object_33 = object_30.key(key_31.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_log_publishing_option(&mut object_33, value_32)?;
                object_33.finish();
            }
        }
        object_30.finish();
    }
    if let Some(var_34) = &input.node_to_node_encryption_options {
        let mut object_35 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_node_to_node_encryption_options(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.snapshot_options {
        let mut object_37 = object.key("SnapshotOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_snapshot_options(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.tag_list {
        let mut array_39 = object.key("TagList").start_array();
        for item_40 in var_38 {
             {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.vpc_options {
        let mut object_43 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_options(&mut object_43, var_42)?;
        object_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_outbound_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateOutboundConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.connection_alias {
        object.key("ConnectionAlias").string(var_44.as_str());
    }
    if let Some(var_45) = &input.local_domain_info {
        let mut object_46 = object.key("LocalDomainInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_information_container(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.remote_domain_info {
        let mut object_48 = object.key("RemoteDomainInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_information_container(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_49) = &input.package_description {
        object.key("PackageDescription").string(var_49.as_str());
    }
    if let Some(var_50) = &input.package_name {
        object.key("PackageName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.package_source {
        let mut object_52 = object.key("PackageSource").start_object();
        crate::json_ser::serialize_structure_crate_model_package_source(&mut object_52, var_51)?;
        object_52.finish();
    }
    if let Some(var_53) = &input.package_type {
        object.key("PackageType").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vpc_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateVpcEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_54) = &input.client_token {
        object.key("ClientToken").string(var_54.as_str());
    }
    if let Some(var_55) = &input.domain_arn {
        object.key("DomainArn").string(var_55.as_str());
    }
    if let Some(var_56) = &input.vpc_options {
        let mut object_57 = object.key("VpcOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_options(&mut object_57, var_56)?;
        object_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_auto_tunes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDomainAutoTunesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_58) = &input.next_token {
        object.key("NextToken").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domains_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDomainsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.domain_names {
        let mut array_60 = object.key("DomainNames").start_array();
        for item_61 in var_59 {
             {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inbound_connections_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeInboundConnectionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_62) = &input.filters {
        let mut array_63 = object.key("Filters").start_array();
        for item_64 in var_62 {
             {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_65, item_64)?;
                object_65.finish();
            }
        }
        array_63.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_outbound_connections_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeOutboundConnectionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_67) = &input.filters {
        let mut array_68 = object.key("Filters").start_array();
        for item_69 in var_67 {
             {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_70, item_69)?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_71) = &input.next_token {
        object.key("NextToken").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_packages_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribePackagesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_72) = &input.filters {
        let mut array_73 = object.key("Filters").start_array();
        for item_74 in var_72 {
             {
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_crate_model_describe_packages_filter(&mut object_75, item_74)?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_vpc_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeVpcEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.vpc_endpoint_ids {
        let mut array_78 = object.key("VpcEndpointIds").start_array();
        for item_79 in var_77 {
             {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_purchase_reserved_instance_offering_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PurchaseReservedInstanceOfferingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.instance_count != 0 {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.instance_count).into()));
    }
    if let Some(var_80) = &input.reservation_name {
        object.key("ReservationName").string(var_80.as_str());
    }
    if let Some(var_81) = &input.reserved_instance_offering_id {
        object.key("ReservedInstanceOfferingId").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RemoveTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_82) = &input.arn {
        object.key("ARN").string(var_82.as_str());
    }
    if let Some(var_83) = &input.tag_keys {
        let mut array_84 = object.key("TagKeys").start_array();
        for item_85 in var_83 {
             {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_vpc_endpoint_access_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RevokeVpcEndpointAccessInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.account {
        object.key("Account").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_service_software_update_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartServiceSoftwareUpdateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_87) = &input.domain_name {
        object.key("DomainName").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDomainConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.access_policies {
        object.key("AccessPolicies").string(var_88.as_str());
    }
    if let Some(var_89) = &input.advanced_options {
        let mut object_90 = object.key("AdvancedOptions").start_object();
        for (key_91, value_92) in var_89 {
             {
                object_90.key(key_91.as_str()).string(value_92.as_str());
            }
        }
        object_90.finish();
    }
    if let Some(var_93) = &input.advanced_security_options {
        let mut object_94 = object.key("AdvancedSecurityOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_advanced_security_options_input(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.auto_tune_options {
        let mut object_96 = object.key("AutoTuneOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_tune_options(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.cluster_config {
        let mut object_98 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cluster_config(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.cognito_options {
        let mut object_100 = object.key("CognitoOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_options(&mut object_100, var_99)?;
        object_100.finish();
    }
    if let Some(var_101) = &input.domain_endpoint_options {
        let mut object_102 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_endpoint_options(&mut object_102, var_101)?;
        object_102.finish();
    }
    if let Some(var_103) = &input.dry_run {
        object.key("DryRun").boolean(*var_103);
    }
    if let Some(var_104) = &input.ebs_options {
        let mut object_105 = object.key("EBSOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_options(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.encryption_at_rest_options {
        let mut object_107 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest_options(&mut object_107, var_106)?;
        object_107.finish();
    }
    if let Some(var_108) = &input.log_publishing_options {
        let mut object_109 = object.key("LogPublishingOptions").start_object();
        for (key_110, value_111) in var_108 {
             {
                let mut object_112 = object_109.key(key_110.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_log_publishing_option(&mut object_112, value_111)?;
                object_112.finish();
            }
        }
        object_109.finish();
    }
    if let Some(var_113) = &input.node_to_node_encryption_options {
        let mut object_114 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_node_to_node_encryption_options(&mut object_114, var_113)?;
        object_114.finish();
    }
    if let Some(var_115) = &input.snapshot_options {
        let mut object_116 = object.key("SnapshotOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_snapshot_options(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.vpc_options {
        let mut object_118 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_options(&mut object_118, var_117)?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_package_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePackageInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_119) = &input.commit_message {
        object.key("CommitMessage").string(var_119.as_str());
    }
    if let Some(var_120) = &input.package_description {
        object.key("PackageDescription").string(var_120.as_str());
    }
    if let Some(var_121) = &input.package_id {
        object.key("PackageID").string(var_121.as_str());
    }
    if let Some(var_122) = &input.package_source {
        let mut object_123 = object.key("PackageSource").start_object();
        crate::json_ser::serialize_structure_crate_model_package_source(&mut object_123, var_122)?;
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_vpc_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateVpcEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_124) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_124.as_str());
    }
    if let Some(var_125) = &input.vpc_options {
        let mut object_126 = object.key("VpcOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_options(&mut object_126, var_125)?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_upgrade_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpgradeDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.advanced_options {
        let mut object_128 = object.key("AdvancedOptions").start_object();
        for (key_129, value_130) in var_127 {
             {
                object_128.key(key_129.as_str()).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    if let Some(var_131) = &input.domain_name {
        object.key("DomainName").string(var_131.as_str());
    }
    if let Some(var_132) = &input.perform_check_only {
        object.key("PerformCheckOnly").boolean(*var_132);
    }
    if let Some(var_133) = &input.target_version {
        object.key("TargetVersion").string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_134) = &input.key {
        object.key("Key").string(var_134.as_str());
    }
    if let Some(var_135) = &input.value {
        object.key("Value").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_security_options_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AdvancedSecurityOptionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.enabled {
        object.key("Enabled").boolean(*var_136);
    }
    if let Some(var_137) = &input.internal_user_database_enabled {
        object.key("InternalUserDatabaseEnabled").boolean(*var_137);
    }
    if let Some(var_138) = &input.master_user_options {
        let mut object_139 = object.key("MasterUserOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_master_user_options(&mut object_139, var_138)?;
        object_139.finish();
    }
    if let Some(var_140) = &input.saml_options {
        let mut object_141 = object.key("SAMLOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_saml_options_input(&mut object_141, var_140)?;
        object_141.finish();
    }
    if let Some(var_142) = &input.anonymous_auth_enabled {
        object.key("AnonymousAuthEnabled").boolean(*var_142);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_tune_options_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoTuneOptionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.desired_state {
        object.key("DesiredState").string(var_143.as_str());
    }
    if let Some(var_144) = &input.maintenance_schedules {
        let mut array_145 = object.key("MaintenanceSchedules").start_array();
        for item_146 in var_144 {
             {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_tune_maintenance_schedule(&mut object_147, item_146)?;
                object_147.finish();
            }
        }
        array_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cluster_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ClusterConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_148) = &input.instance_type {
        object.key("InstanceType").string(var_148.as_str());
    }
    if let Some(var_149) = &input.instance_count {
        object.key("InstanceCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_149).into()));
    }
    if let Some(var_150) = &input.dedicated_master_enabled {
        object.key("DedicatedMasterEnabled").boolean(*var_150);
    }
    if let Some(var_151) = &input.zone_awareness_enabled {
        object.key("ZoneAwarenessEnabled").boolean(*var_151);
    }
    if let Some(var_152) = &input.zone_awareness_config {
        let mut object_153 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_zone_awareness_config(&mut object_153, var_152)?;
        object_153.finish();
    }
    if let Some(var_154) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_154.as_str());
    }
    if let Some(var_155) = &input.dedicated_master_count {
        object.key("DedicatedMasterCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_155).into()));
    }
    if let Some(var_156) = &input.warm_enabled {
        object.key("WarmEnabled").boolean(*var_156);
    }
    if let Some(var_157) = &input.warm_type {
        object.key("WarmType").string(var_157.as_str());
    }
    if let Some(var_158) = &input.warm_count {
        object.key("WarmCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_158).into()));
    }
    if let Some(var_159) = &input.cold_storage_options {
        let mut object_160 = object.key("ColdStorageOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_cold_storage_options(&mut object_160, var_159)?;
        object_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CognitoOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_161) = &input.enabled {
        object.key("Enabled").boolean(*var_161);
    }
    if let Some(var_162) = &input.user_pool_id {
        object.key("UserPoolId").string(var_162.as_str());
    }
    if let Some(var_163) = &input.identity_pool_id {
        object.key("IdentityPoolId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.role_arn {
        object.key("RoleArn").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_endpoint_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DomainEndpointOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_165) = &input.enforce_https {
        object.key("EnforceHTTPS").boolean(*var_165);
    }
    if let Some(var_166) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_166.as_str());
    }
    if let Some(var_167) = &input.custom_endpoint_enabled {
        object.key("CustomEndpointEnabled").boolean(*var_167);
    }
    if let Some(var_168) = &input.custom_endpoint {
        object.key("CustomEndpoint").string(var_168.as_str());
    }
    if let Some(var_169) = &input.custom_endpoint_certificate_arn {
        object.key("CustomEndpointCertificateArn").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EbsOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_170) = &input.ebs_enabled {
        object.key("EBSEnabled").boolean(*var_170);
    }
    if let Some(var_171) = &input.volume_type {
        object.key("VolumeType").string(var_171.as_str());
    }
    if let Some(var_172) = &input.volume_size {
        object.key("VolumeSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_172).into()));
    }
    if let Some(var_173) = &input.iops {
        object.key("Iops").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_173).into()));
    }
    if let Some(var_174) = &input.throughput {
        object.key("Throughput").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_174).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionAtRestOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_175) = &input.enabled {
        object.key("Enabled").boolean(*var_175);
    }
    if let Some(var_176) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_176.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_publishing_option(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LogPublishingOption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_177) = &input.cloud_watch_logs_log_group_arn {
        object.key("CloudWatchLogsLogGroupArn").string(var_177.as_str());
    }
    if let Some(var_178) = &input.enabled {
        object.key("Enabled").boolean(*var_178);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_to_node_encryption_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NodeToNodeEncryptionOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_179) = &input.enabled {
        object.key("Enabled").boolean(*var_179);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_snapshot_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SnapshotOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_180) = &input.automated_snapshot_start_hour {
        object.key("AutomatedSnapshotStartHour").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_180).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VpcOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.subnet_ids {
        let mut array_182 = object.key("SubnetIds").start_array();
        for item_183 in var_181 {
             {
                array_182.value().string(item_183.as_str());
            }
        }
        array_182.finish();
    }
    if let Some(var_184) = &input.security_group_ids {
        let mut array_185 = object.key("SecurityGroupIds").start_array();
        for item_186 in var_184 {
             {
                array_185.value().string(item_186.as_str());
            }
        }
        array_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_information_container(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DomainInformationContainer) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_187) = &input.aws_domain_information {
        let mut object_188 = object.key("AWSDomainInformation").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_domain_information(&mut object_188, var_187)?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_package_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PackageSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_189) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.s3_key {
        object.key("S3Key").string(var_190.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_191) = &input.name {
        object.key("Name").string(var_191.as_str());
    }
    if let Some(var_192) = &input.values {
        let mut array_193 = object.key("Values").start_array();
        for item_194 in var_192 {
             {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_packages_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DescribePackagesFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_195) = &input.name {
        object.key("Name").string(var_195.as_str());
    }
    if let Some(var_196) = &input.value {
        let mut array_197 = object.key("Value").start_array();
        for item_198 in var_196 {
             {
                array_197.value().string(item_198.as_str());
            }
        }
        array_197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_tune_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoTuneOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.desired_state {
        object.key("DesiredState").string(var_199.as_str());
    }
    if let Some(var_200) = &input.rollback_on_disable {
        object.key("RollbackOnDisable").string(var_200.as_str());
    }
    if let Some(var_201) = &input.maintenance_schedules {
        let mut array_202 = object.key("MaintenanceSchedules").start_array();
        for item_203 in var_201 {
             {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auto_tune_maintenance_schedule(&mut object_204, item_203)?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_master_user_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MasterUserOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.master_user_arn {
        object.key("MasterUserARN").string(var_205.as_str());
    }
    if let Some(var_206) = &input.master_user_name {
        object.key("MasterUserName").string(var_206.as_str());
    }
    if let Some(var_207) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saml_options_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamlOptionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.enabled {
        object.key("Enabled").boolean(*var_208);
    }
    if let Some(var_209) = &input.idp {
        let mut object_210 = object.key("Idp").start_object();
        crate::json_ser::serialize_structure_crate_model_saml_idp(&mut object_210, var_209)?;
        object_210.finish();
    }
    if let Some(var_211) = &input.master_user_name {
        object.key("MasterUserName").string(var_211.as_str());
    }
    if let Some(var_212) = &input.master_backend_role {
        object.key("MasterBackendRole").string(var_212.as_str());
    }
    if let Some(var_213) = &input.subject_key {
        object.key("SubjectKey").string(var_213.as_str());
    }
    if let Some(var_214) = &input.roles_key {
        object.key("RolesKey").string(var_214.as_str());
    }
    if let Some(var_215) = &input.session_timeout_minutes {
        object.key("SessionTimeoutMinutes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_215).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_tune_maintenance_schedule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AutoTuneMaintenanceSchedule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_216) = &input.start_at {
        object.key("StartAt").date_time(var_216, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_217) = &input.duration {
        let mut object_218 = object.key("Duration").start_object();
        crate::json_ser::serialize_structure_crate_model_duration(&mut object_218, var_217)?;
        object_218.finish();
    }
    if let Some(var_219) = &input.cron_expression_for_recurrence {
        object.key("CronExpressionForRecurrence").string(var_219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_zone_awareness_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ZoneAwarenessConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_220) = &input.availability_zone_count {
        object.key("AvailabilityZoneCount").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_220).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cold_storage_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ColdStorageOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_221) = &input.enabled {
        object.key("Enabled").boolean(*var_221);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_domain_information(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AwsDomainInformation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_222) = &input.owner_id {
        object.key("OwnerId").string(var_222.as_str());
    }
    if let Some(var_223) = &input.domain_name {
        object.key("DomainName").string(var_223.as_str());
    }
    if let Some(var_224) = &input.region {
        object.key("Region").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saml_idp(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SamlIdp) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_225) = &input.metadata_content {
        object.key("MetadataContent").string(var_225.as_str());
    }
    if let Some(var_226) = &input.entity_id {
        object.key("EntityId").string(var_226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_duration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Duration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.value != 0 {
        object.key("Value").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.value).into()));
    }
    if let Some(var_227) = &input.unit {
        object.key("Unit").string(var_227.as_str());
    }
    Ok(())
}

