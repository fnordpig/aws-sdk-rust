// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_key_deletion_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelKeyDeletionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.key_id {
        object.key("KeyId").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_connect_custom_key_store_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ConnectCustomKeyStoreInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_3) = &input.alias_name {
        object.key("AliasName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.target_key_id {
        object.key("TargetKeyId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_key_store_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCustomKeyStoreInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.trust_anchor_certificate {
        object.key("TrustAnchorCertificate").string(var_7.as_str());
    }
    if let Some(var_8) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_grant_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateGrantInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.key_id {
        object.key("KeyId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_10.as_str());
    }
    if let Some(var_11) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_11.as_str());
    }
    if let Some(var_12) = &input.operations {
        let mut array_13 = object.key("Operations").start_array();
        for item_14 in var_12 {
             {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.constraints {
        let mut object_16 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_grant_constraints(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.grant_tokens {
        let mut array_18 = object.key("GrantTokens").start_array();
        for item_19 in var_17 {
             {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.policy {
        object.key("Policy").string(var_21.as_str());
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22.as_str());
    }
    if let Some(var_23) = &input.key_usage {
        object.key("KeyUsage").string(var_23.as_str());
    }
    if let Some(var_24) = &input.customer_master_key_spec {
        object.key("CustomerMasterKeySpec").string(var_24.as_str());
    }
    if let Some(var_25) = &input.key_spec {
        object.key("KeySpec").string(var_25.as_str());
    }
    if let Some(var_26) = &input.origin {
        object.key("Origin").string(var_26.as_str());
    }
    if let Some(var_27) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_27.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object.key("BypassPolicyLockoutSafetyCheck").boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
             {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.multi_region {
        object.key("MultiRegion").boolean(*var_32);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decrypt_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DecryptInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.ciphertext_blob {
        object.key("CiphertextBlob").string_unchecked(&aws_smithy_types::base64::encode(var_33));
    }
    if let Some(var_34) = &input.encryption_context {
        let mut object_35 = object.key("EncryptionContext").start_object();
        for (key_36, value_37) in var_34 {
             {
                object_35.key(key_36.as_str()).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.grant_tokens {
        let mut array_39 = object.key("GrantTokens").start_array();
        for item_40 in var_38 {
             {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.key_id {
        object.key("KeyId").string(var_41.as_str());
    }
    if let Some(var_42) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_43) = &input.alias_name {
        object.key("AliasName").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_key_store_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCustomKeyStoreInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_imported_key_material_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteImportedKeyMaterialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.key_id {
        object.key("KeyId").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_custom_key_stores_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeCustomKeyStoresInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.custom_key_store_name {
        object.key("CustomKeyStoreName").string(var_47.as_str());
    }
    if let Some(var_48) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_48).into()));
    }
    if let Some(var_49) = &input.marker {
        object.key("Marker").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_50) = &input.key_id {
        object.key("KeyId").string(var_50.as_str());
    }
    if let Some(var_51) = &input.grant_tokens {
        let mut array_52 = object.key("GrantTokens").start_array();
        for item_53 in var_51 {
             {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisableKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_54) = &input.key_id {
        object.key("KeyId").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_key_rotation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisableKeyRotationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.key_id {
        object.key("KeyId").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_custom_key_store_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisconnectCustomKeyStoreInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_57) = &input.key_id {
        object.key("KeyId").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_key_rotation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EnableKeyRotationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.key_id {
        object.key("KeyId").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_encrypt_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::EncryptInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.key_id {
        object.key("KeyId").string(var_59.as_str());
    }
    if let Some(var_60) = &input.plaintext {
        object.key("Plaintext").string_unchecked(&aws_smithy_types::base64::encode(var_60));
    }
    if let Some(var_61) = &input.encryption_context {
        let mut object_62 = object.key("EncryptionContext").start_object();
        for (key_63, value_64) in var_61 {
             {
                object_62.key(key_63.as_str()).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.grant_tokens {
        let mut array_66 = object.key("GrantTokens").start_array();
        for item_67 in var_65 {
             {
                array_66.value().string(item_67.as_str());
            }
        }
        array_66.finish();
    }
    if let Some(var_68) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateDataKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.key_id {
        object.key("KeyId").string(var_69.as_str());
    }
    if let Some(var_70) = &input.encryption_context {
        let mut object_71 = object.key("EncryptionContext").start_object();
        for (key_72, value_73) in var_70 {
             {
                object_71.key(key_72.as_str()).string(value_73.as_str());
            }
        }
        object_71.finish();
    }
    if let Some(var_74) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_74).into()));
    }
    if let Some(var_75) = &input.key_spec {
        object.key("KeySpec").string(var_75.as_str());
    }
    if let Some(var_76) = &input.grant_tokens {
        let mut array_77 = object.key("GrantTokens").start_array();
        for item_78 in var_76 {
             {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_pair_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateDataKeyPairInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.encryption_context {
        let mut object_80 = object.key("EncryptionContext").start_object();
        for (key_81, value_82) in var_79 {
             {
                object_80.key(key_81.as_str()).string(value_82.as_str());
            }
        }
        object_80.finish();
    }
    if let Some(var_83) = &input.key_id {
        object.key("KeyId").string(var_83.as_str());
    }
    if let Some(var_84) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_84.as_str());
    }
    if let Some(var_85) = &input.grant_tokens {
        let mut array_86 = object.key("GrantTokens").start_array();
        for item_87 in var_85 {
             {
                array_86.value().string(item_87.as_str());
            }
        }
        array_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_pair_without_plaintext_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateDataKeyPairWithoutPlaintextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.encryption_context {
        let mut object_89 = object.key("EncryptionContext").start_object();
        for (key_90, value_91) in var_88 {
             {
                object_89.key(key_90.as_str()).string(value_91.as_str());
            }
        }
        object_89.finish();
    }
    if let Some(var_92) = &input.key_id {
        object.key("KeyId").string(var_92.as_str());
    }
    if let Some(var_93) = &input.key_pair_spec {
        object.key("KeyPairSpec").string(var_93.as_str());
    }
    if let Some(var_94) = &input.grant_tokens {
        let mut array_95 = object.key("GrantTokens").start_array();
        for item_96 in var_94 {
             {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_data_key_without_plaintext_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateDataKeyWithoutPlaintextInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_97) = &input.key_id {
        object.key("KeyId").string(var_97.as_str());
    }
    if let Some(var_98) = &input.encryption_context {
        let mut object_99 = object.key("EncryptionContext").start_object();
        for (key_100, value_101) in var_98 {
             {
                object_99.key(key_100.as_str()).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    if let Some(var_102) = &input.key_spec {
        object.key("KeySpec").string(var_102.as_str());
    }
    if let Some(var_103) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_103).into()));
    }
    if let Some(var_104) = &input.grant_tokens {
        let mut array_105 = object.key("GrantTokens").start_array();
        for item_106 in var_104 {
             {
                array_105.value().string(item_106.as_str());
            }
        }
        array_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_mac_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateMacInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.message {
        object.key("Message").string_unchecked(&aws_smithy_types::base64::encode(var_107));
    }
    if let Some(var_108) = &input.key_id {
        object.key("KeyId").string(var_108.as_str());
    }
    if let Some(var_109) = &input.mac_algorithm {
        object.key("MacAlgorithm").string(var_109.as_str());
    }
    if let Some(var_110) = &input.grant_tokens {
        let mut array_111 = object.key("GrantTokens").start_array();
        for item_112 in var_110 {
             {
                array_111.value().string(item_112.as_str());
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_generate_random_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GenerateRandomInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_113) = &input.number_of_bytes {
        object.key("NumberOfBytes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_113).into()));
    }
    if let Some(var_114) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetKeyPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_115) = &input.key_id {
        object.key("KeyId").string(var_115.as_str());
    }
    if let Some(var_116) = &input.policy_name {
        object.key("PolicyName").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_key_rotation_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetKeyRotationStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.key_id {
        object.key("KeyId").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_for_import_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetParametersForImportInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_118) = &input.key_id {
        object.key("KeyId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.wrapping_algorithm {
        object.key("WrappingAlgorithm").string(var_119.as_str());
    }
    if let Some(var_120) = &input.wrapping_key_spec {
        object.key("WrappingKeySpec").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_public_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPublicKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_121) = &input.key_id {
        object.key("KeyId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.grant_tokens {
        let mut array_123 = object.key("GrantTokens").start_array();
        for item_124 in var_122 {
             {
                array_123.value().string(item_124.as_str());
            }
        }
        array_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_key_material_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportKeyMaterialInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_125) = &input.key_id {
        object.key("KeyId").string(var_125.as_str());
    }
    if let Some(var_126) = &input.import_token {
        object.key("ImportToken").string_unchecked(&aws_smithy_types::base64::encode(var_126));
    }
    if let Some(var_127) = &input.encrypted_key_material {
        object.key("EncryptedKeyMaterial").string_unchecked(&aws_smithy_types::base64::encode(var_127));
    }
    if let Some(var_128) = &input.valid_to {
        object.key("ValidTo").date_time(var_128, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_129) = &input.expiration_model {
        object.key("ExpirationModel").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aliases_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAliasesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_130) = &input.key_id {
        object.key("KeyId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_131).into()));
    }
    if let Some(var_132) = &input.marker {
        object.key("Marker").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_grants_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListGrantsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_133) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_133).into()));
    }
    if let Some(var_134) = &input.marker {
        object.key("Marker").string(var_134.as_str());
    }
    if let Some(var_135) = &input.key_id {
        object.key("KeyId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.grant_id {
        object.key("GrantId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.grantee_principal {
        object.key("GranteePrincipal").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_key_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListKeyPoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_138) = &input.key_id {
        object.key("KeyId").string(var_138.as_str());
    }
    if let Some(var_139) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_139).into()));
    }
    if let Some(var_140) = &input.marker {
        object.key("Marker").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_keys_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListKeysInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_141) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_141).into()));
    }
    if let Some(var_142) = &input.marker {
        object.key("Marker").string(var_142.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourceTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_143) = &input.key_id {
        object.key("KeyId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_144).into()));
    }
    if let Some(var_145) = &input.marker {
        object.key("Marker").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_retirable_grants_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRetirableGrantsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_146).into()));
    }
    if let Some(var_147) = &input.marker {
        object.key("Marker").string(var_147.as_str());
    }
    if let Some(var_148) = &input.retiring_principal {
        object.key("RetiringPrincipal").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_key_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutKeyPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.key_id {
        object.key("KeyId").string(var_149.as_str());
    }
    if let Some(var_150) = &input.policy_name {
        object.key("PolicyName").string(var_150.as_str());
    }
    if let Some(var_151) = &input.policy {
        object.key("Policy").string(var_151.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object.key("BypassPolicyLockoutSafetyCheck").boolean(input.bypass_policy_lockout_safety_check);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_re_encrypt_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ReEncryptInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_152) = &input.ciphertext_blob {
        object.key("CiphertextBlob").string_unchecked(&aws_smithy_types::base64::encode(var_152));
    }
    if let Some(var_153) = &input.source_encryption_context {
        let mut object_154 = object.key("SourceEncryptionContext").start_object();
        for (key_155, value_156) in var_153 {
             {
                object_154.key(key_155.as_str()).string(value_156.as_str());
            }
        }
        object_154.finish();
    }
    if let Some(var_157) = &input.source_key_id {
        object.key("SourceKeyId").string(var_157.as_str());
    }
    if let Some(var_158) = &input.destination_key_id {
        object.key("DestinationKeyId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.destination_encryption_context {
        let mut object_160 = object.key("DestinationEncryptionContext").start_object();
        for (key_161, value_162) in var_159 {
             {
                object_160.key(key_161.as_str()).string(value_162.as_str());
            }
        }
        object_160.finish();
    }
    if let Some(var_163) = &input.source_encryption_algorithm {
        object.key("SourceEncryptionAlgorithm").string(var_163.as_str());
    }
    if let Some(var_164) = &input.destination_encryption_algorithm {
        object.key("DestinationEncryptionAlgorithm").string(var_164.as_str());
    }
    if let Some(var_165) = &input.grant_tokens {
        let mut array_166 = object.key("GrantTokens").start_array();
        for item_167 in var_165 {
             {
                array_166.value().string(item_167.as_str());
            }
        }
        array_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_replicate_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ReplicateKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_168) = &input.key_id {
        object.key("KeyId").string(var_168.as_str());
    }
    if let Some(var_169) = &input.replica_region {
        object.key("ReplicaRegion").string(var_169.as_str());
    }
    if let Some(var_170) = &input.policy {
        object.key("Policy").string(var_170.as_str());
    }
    if input.bypass_policy_lockout_safety_check {
        object.key("BypassPolicyLockoutSafetyCheck").boolean(input.bypass_policy_lockout_safety_check);
    }
    if let Some(var_171) = &input.description {
        object.key("Description").string(var_171.as_str());
    }
    if let Some(var_172) = &input.tags {
        let mut array_173 = object.key("Tags").start_array();
        for item_174 in var_172 {
             {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_175, item_174)?;
                object_175.finish();
            }
        }
        array_173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retire_grant_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RetireGrantInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_176) = &input.grant_token {
        object.key("GrantToken").string(var_176.as_str());
    }
    if let Some(var_177) = &input.key_id {
        object.key("KeyId").string(var_177.as_str());
    }
    if let Some(var_178) = &input.grant_id {
        object.key("GrantId").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_grant_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RevokeGrantInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_179) = &input.key_id {
        object.key("KeyId").string(var_179.as_str());
    }
    if let Some(var_180) = &input.grant_id {
        object.key("GrantId").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_schedule_key_deletion_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ScheduleKeyDeletionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_181) = &input.key_id {
        object.key("KeyId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.pending_window_in_days {
        object.key("PendingWindowInDays").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_182).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_sign_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SignInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_183) = &input.key_id {
        object.key("KeyId").string(var_183.as_str());
    }
    if let Some(var_184) = &input.message {
        object.key("Message").string_unchecked(&aws_smithy_types::base64::encode(var_184));
    }
    if let Some(var_185) = &input.message_type {
        object.key("MessageType").string(var_185.as_str());
    }
    if let Some(var_186) = &input.grant_tokens {
        let mut array_187 = object.key("GrantTokens").start_array();
        for item_188 in var_186 {
             {
                array_187.value().string(item_188.as_str());
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_190) = &input.key_id {
        object.key("KeyId").string(var_190.as_str());
    }
    if let Some(var_191) = &input.tags {
        let mut array_192 = object.key("Tags").start_array();
        for item_193 in var_191 {
             {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_194, item_193)?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_195) = &input.key_id {
        object.key("KeyId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.tag_keys {
        let mut array_197 = object.key("TagKeys").start_array();
        for item_198 in var_196 {
             {
                array_197.value().string(item_198.as_str());
            }
        }
        array_197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_alias_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAliasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.alias_name {
        object.key("AliasName").string(var_199.as_str());
    }
    if let Some(var_200) = &input.target_key_id {
        object.key("TargetKeyId").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_key_store_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCustomKeyStoreInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_201) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.new_custom_key_store_name {
        object.key("NewCustomKeyStoreName").string(var_202.as_str());
    }
    if let Some(var_203) = &input.key_store_password {
        object.key("KeyStorePassword").string(var_203.as_str());
    }
    if let Some(var_204) = &input.cloud_hsm_cluster_id {
        object.key("CloudHsmClusterId").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_key_description_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateKeyDescriptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_205) = &input.key_id {
        object.key("KeyId").string(var_205.as_str());
    }
    if let Some(var_206) = &input.description {
        object.key("Description").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_primary_region_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePrimaryRegionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_207) = &input.key_id {
        object.key("KeyId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.primary_region {
        object.key("PrimaryRegion").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::VerifyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.key_id {
        object.key("KeyId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.message {
        object.key("Message").string_unchecked(&aws_smithy_types::base64::encode(var_210));
    }
    if let Some(var_211) = &input.message_type {
        object.key("MessageType").string(var_211.as_str());
    }
    if let Some(var_212) = &input.signature {
        object.key("Signature").string_unchecked(&aws_smithy_types::base64::encode(var_212));
    }
    if let Some(var_213) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_213.as_str());
    }
    if let Some(var_214) = &input.grant_tokens {
        let mut array_215 = object.key("GrantTokens").start_array();
        for item_216 in var_214 {
             {
                array_215.value().string(item_216.as_str());
            }
        }
        array_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_mac_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::VerifyMacInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_217) = &input.message {
        object.key("Message").string_unchecked(&aws_smithy_types::base64::encode(var_217));
    }
    if let Some(var_218) = &input.key_id {
        object.key("KeyId").string(var_218.as_str());
    }
    if let Some(var_219) = &input.mac_algorithm {
        object.key("MacAlgorithm").string(var_219.as_str());
    }
    if let Some(var_220) = &input.mac {
        object.key("Mac").string_unchecked(&aws_smithy_types::base64::encode(var_220));
    }
    if let Some(var_221) = &input.grant_tokens {
        let mut array_222 = object.key("GrantTokens").start_array();
        for item_223 in var_221 {
             {
                array_222.value().string(item_223.as_str());
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grant_constraints(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GrantConstraints) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_224) = &input.encryption_context_subset {
        let mut object_225 = object.key("EncryptionContextSubset").start_object();
        for (key_226, value_227) in var_224 {
             {
                object_225.key(key_226.as_str()).string(value_227.as_str());
            }
        }
        object_225.finish();
    }
    if let Some(var_228) = &input.encryption_context_equals {
        let mut object_229 = object.key("EncryptionContextEquals").start_object();
        for (key_230, value_231) in var_228 {
             {
                object_229.key(key_230.as_str()).string(value_231.as_str());
            }
        }
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.tag_key {
        object.key("TagKey").string(var_232.as_str());
    }
    if let Some(var_233) = &input.tag_value {
        object.key("TagValue").string(var_233.as_str());
    }
    Ok(())
}

