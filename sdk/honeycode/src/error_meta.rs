// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p> You do not have sufficient access to perform this action. Check that the workbook is owned by you and your IAM policy allows access to the resource in the request. </p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The automation execution did not end successfully.</p>
    AutomationExecutionException(crate::error::AutomationExecutionException),
    /// <p>The automation execution timed out.</p>
    AutomationExecutionTimeoutException(crate::error::AutomationExecutionTimeoutException),
    /// <p>There were unexpected errors from the server.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The request timed out.</p>
    RequestTimeoutException(crate::error::RequestTimeoutException),
    /// <p>A Workbook, Table, App, Screen or Screen Automation was not found with the given ID.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> The request caused service quota to be breached. </p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Remote service is unreachable.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>Tps(transactions per second) rate reached.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p> Request is invalid. The message in the response contains details on why the request is invalid. </p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AutomationExecutionException(inner) => inner.fmt(f),
            Error::AutomationExecutionTimeoutException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::RequestTimeoutException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchCreateTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchCreateTableRowsError> for Error {
    fn from(err: crate::error::BatchCreateTableRowsError) -> Self {
        match err.kind {
            crate::error::BatchCreateTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchCreateTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchCreateTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::BatchCreateTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchCreateTableRowsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchCreateTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchCreateTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchCreateTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchCreateTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchDeleteTableRowsError> for Error {
    fn from(err: crate::error::BatchDeleteTableRowsError) -> Self {
        match err.kind {
            crate::error::BatchDeleteTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchDeleteTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchUpdateTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchUpdateTableRowsError> for Error {
    fn from(err: crate::error::BatchUpdateTableRowsError) -> Self {
        match err.kind {
            crate::error::BatchUpdateTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchUpdateTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpsertTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchUpsertTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchUpsertTableRowsError> for Error {
    fn from(err: crate::error::BatchUpsertTableRowsError) -> Self {
        match err.kind {
            crate::error::BatchUpsertTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchUpsertTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTableDataImportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTableDataImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeTableDataImportJobError> for Error {
    fn from(err: crate::error::DescribeTableDataImportJobError) -> Self {
        match err.kind {
            crate::error::DescribeTableDataImportJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeTableDataImportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetScreenDataError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetScreenDataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetScreenDataError> for Error {
    fn from(err: crate::error::GetScreenDataError) -> Self {
        match err.kind {
            crate::error::GetScreenDataErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetScreenDataErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetScreenDataErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::GetScreenDataErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetScreenDataErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::GetScreenDataErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetScreenDataErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetScreenDataErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InvokeScreenAutomationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InvokeScreenAutomationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::InvokeScreenAutomationError> for Error {
    fn from(err: crate::error::InvokeScreenAutomationError) -> Self {
        match err.kind {
            crate::error::InvokeScreenAutomationErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::InvokeScreenAutomationErrorKind::AutomationExecutionException(inner) => Error::AutomationExecutionException(inner),
            crate::error::InvokeScreenAutomationErrorKind::AutomationExecutionTimeoutException(inner) => Error::AutomationExecutionTimeoutException(inner),
            crate::error::InvokeScreenAutomationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::InvokeScreenAutomationErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::InvokeScreenAutomationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::InvokeScreenAutomationErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::InvokeScreenAutomationErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::InvokeScreenAutomationErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::InvokeScreenAutomationErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::InvokeScreenAutomationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTableColumnsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTableColumnsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTableColumnsError> for Error {
    fn from(err: crate::error::ListTableColumnsError) -> Self {
        match err.kind {
            crate::error::ListTableColumnsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTableColumnsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTableColumnsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::ListTableColumnsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTableColumnsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListTableColumnsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTableColumnsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTableColumnsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTableRowsError> for Error {
    fn from(err: crate::error::ListTableRowsError) -> Self {
        match err.kind {
            crate::error::ListTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::ListTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTablesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTablesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTablesError> for Error {
    fn from(err: crate::error::ListTablesError) -> Self {
        match err.kind {
            crate::error::ListTablesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTablesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTablesErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::ListTablesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTablesErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListTablesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTablesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTablesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListTagsForResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::QueryTableRowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::QueryTableRowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::QueryTableRowsError> for Error {
    fn from(err: crate::error::QueryTableRowsError) -> Self {
        match err.kind {
            crate::error::QueryTableRowsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::QueryTableRowsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::QueryTableRowsErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::QueryTableRowsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::QueryTableRowsErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::QueryTableRowsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::QueryTableRowsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::QueryTableRowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartTableDataImportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartTableDataImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartTableDataImportJobError> for Error {
    fn from(err: crate::error::StartTableDataImportJobError) -> Self {
        match err.kind {
            crate::error::StartTableDataImportJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartTableDataImportJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartTableDataImportJobErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::StartTableDataImportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartTableDataImportJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartTableDataImportJobErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::StartTableDataImportJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartTableDataImportJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartTableDataImportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::TagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UntagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

