// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>Indicates that an error occurred while processing the request and that the request was not completed.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>This exception occurs when there is an internal failure in the Amazon EMR service.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>This exception occurs when there is something wrong with user input.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddInstanceFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddInstanceFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AddInstanceFleetError> for Error {
    fn from(err: crate::error::AddInstanceFleetError) -> Self {
        match err.kind {
            crate::error::AddInstanceFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AddInstanceFleetErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::AddInstanceFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddInstanceGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddInstanceGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AddInstanceGroupsError> for Error {
    fn from(err: crate::error::AddInstanceGroupsError) -> Self {
        match err.kind {
            crate::error::AddInstanceGroupsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::AddInstanceGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddJobFlowStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddJobFlowStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AddJobFlowStepsError> for Error {
    fn from(err: crate::error::AddJobFlowStepsError) -> Self {
        match err.kind {
            crate::error::AddJobFlowStepsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::AddJobFlowStepsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err.kind {
            crate::error::AddTagsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AddTagsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::AddTagsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CancelStepsError> for Error {
    fn from(err: crate::error::CancelStepsError) -> Self {
        match err.kind {
            crate::error::CancelStepsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::CancelStepsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CancelStepsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSecurityConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSecurityConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateSecurityConfigurationError> for Error {
    fn from(err: crate::error::CreateSecurityConfigurationError) -> Self {
        match err.kind {
            crate::error::CreateSecurityConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSecurityConfigurationErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateSecurityConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStudioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateStudioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateStudioError> for Error {
    fn from(err: crate::error::CreateStudioError) -> Self {
        match err.kind {
            crate::error::CreateStudioErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateStudioErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateStudioErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStudioSessionMappingError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateStudioSessionMappingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateStudioSessionMappingError> for Error {
    fn from(err: crate::error::CreateStudioSessionMappingError) -> Self {
        match err.kind {
            crate::error::CreateStudioSessionMappingErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::CreateStudioSessionMappingErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateStudioSessionMappingErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSecurityConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSecurityConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteSecurityConfigurationError> for Error {
    fn from(err: crate::error::DeleteSecurityConfigurationError) -> Self {
        match err.kind {
            crate::error::DeleteSecurityConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteSecurityConfigurationErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteSecurityConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStudioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteStudioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteStudioError> for Error {
    fn from(err: crate::error::DeleteStudioError) -> Self {
        match err.kind {
            crate::error::DeleteStudioErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteStudioErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteStudioErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStudioSessionMappingError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteStudioSessionMappingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteStudioSessionMappingError> for Error {
    fn from(err: crate::error::DeleteStudioSessionMappingError) -> Self {
        match err.kind {
            crate::error::DeleteStudioSessionMappingErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DeleteStudioSessionMappingErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteStudioSessionMappingErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClusterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeClusterError> for Error {
    fn from(err: crate::error::DescribeClusterError) -> Self {
        match err.kind {
            crate::error::DescribeClusterErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeClusterErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeClusterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeJobFlowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeJobFlowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeJobFlowsError> for Error {
    fn from(err: crate::error::DescribeJobFlowsError) -> Self {
        match err.kind {
            crate::error::DescribeJobFlowsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeJobFlowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeNotebookExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeNotebookExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeNotebookExecutionError> for Error {
    fn from(err: crate::error::DescribeNotebookExecutionError) -> Self {
        match err.kind {
            crate::error::DescribeNotebookExecutionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeNotebookExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeNotebookExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReleaseLabelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeReleaseLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeReleaseLabelError> for Error {
    fn from(err: crate::error::DescribeReleaseLabelError) -> Self {
        match err.kind {
            crate::error::DescribeReleaseLabelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeReleaseLabelErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeReleaseLabelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSecurityConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeSecurityConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeSecurityConfigurationError> for Error {
    fn from(err: crate::error::DescribeSecurityConfigurationError) -> Self {
        match err.kind {
            crate::error::DescribeSecurityConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeSecurityConfigurationErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeSecurityConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStepError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeStepError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeStepError> for Error {
    fn from(err: crate::error::DescribeStepError) -> Self {
        match err.kind {
            crate::error::DescribeStepErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeStepErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeStepErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStudioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeStudioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeStudioError> for Error {
    fn from(err: crate::error::DescribeStudioError) -> Self {
        match err.kind {
            crate::error::DescribeStudioErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeStudioErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeStudioErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAutoTerminationPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAutoTerminationPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetAutoTerminationPolicyError> for Error {
    fn from(err: crate::error::GetAutoTerminationPolicyError) -> Self {
        match err.kind {
            crate::error::GetAutoTerminationPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBlockPublicAccessConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBlockPublicAccessConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetBlockPublicAccessConfigurationError> for Error {
    fn from(err: crate::error::GetBlockPublicAccessConfigurationError) -> Self {
        match err.kind {
            crate::error::GetBlockPublicAccessConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetBlockPublicAccessConfigurationErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetBlockPublicAccessConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetManagedScalingPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetManagedScalingPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetManagedScalingPolicyError> for Error {
    fn from(err: crate::error::GetManagedScalingPolicyError) -> Self {
        match err.kind {
            crate::error::GetManagedScalingPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStudioSessionMappingError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStudioSessionMappingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetStudioSessionMappingError> for Error {
    fn from(err: crate::error::GetStudioSessionMappingError) -> Self {
        match err.kind {
            crate::error::GetStudioSessionMappingErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::GetStudioSessionMappingErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetStudioSessionMappingErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBootstrapActionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBootstrapActionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListBootstrapActionsError> for Error {
    fn from(err: crate::error::ListBootstrapActionsError) -> Self {
        match err.kind {
            crate::error::ListBootstrapActionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListBootstrapActionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListBootstrapActionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListClustersError> for Error {
    fn from(err: crate::error::ListClustersError) -> Self {
        match err.kind {
            crate::error::ListClustersErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListClustersErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListClustersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceFleetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstanceFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInstanceFleetsError> for Error {
    fn from(err: crate::error::ListInstanceFleetsError) -> Self {
        match err.kind {
            crate::error::ListInstanceFleetsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInstanceFleetsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListInstanceFleetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstanceGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInstanceGroupsError> for Error {
    fn from(err: crate::error::ListInstanceGroupsError) -> Self {
        match err.kind {
            crate::error::ListInstanceGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInstanceGroupsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListInstanceGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInstancesError> for Error {
    fn from(err: crate::error::ListInstancesError) -> Self {
        match err.kind {
            crate::error::ListInstancesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInstancesErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListInstancesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNotebookExecutionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListNotebookExecutionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListNotebookExecutionsError> for Error {
    fn from(err: crate::error::ListNotebookExecutionsError) -> Self {
        match err.kind {
            crate::error::ListNotebookExecutionsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ListNotebookExecutionsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListNotebookExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReleaseLabelsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListReleaseLabelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListReleaseLabelsError> for Error {
    fn from(err: crate::error::ListReleaseLabelsError) -> Self {
        match err.kind {
            crate::error::ListReleaseLabelsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListReleaseLabelsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListReleaseLabelsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSecurityConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSecurityConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSecurityConfigurationsError> for Error {
    fn from(err: crate::error::ListSecurityConfigurationsError) -> Self {
        match err.kind {
            crate::error::ListSecurityConfigurationsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSecurityConfigurationsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListSecurityConfigurationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStepsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListStepsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListStepsError> for Error {
    fn from(err: crate::error::ListStepsError) -> Self {
        match err.kind {
            crate::error::ListStepsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListStepsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListStepsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStudiosError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListStudiosError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListStudiosError> for Error {
    fn from(err: crate::error::ListStudiosError) -> Self {
        match err.kind {
            crate::error::ListStudiosErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListStudiosErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListStudiosErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStudioSessionMappingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListStudioSessionMappingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListStudioSessionMappingsError> for Error {
    fn from(err: crate::error::ListStudioSessionMappingsError) -> Self {
        match err.kind {
            crate::error::ListStudioSessionMappingsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ListStudioSessionMappingsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListStudioSessionMappingsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyClusterError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ModifyClusterError> for Error {
    fn from(err: crate::error::ModifyClusterError) -> Self {
        match err.kind {
            crate::error::ModifyClusterErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ModifyClusterErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ModifyClusterErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyInstanceFleetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyInstanceFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ModifyInstanceFleetError> for Error {
    fn from(err: crate::error::ModifyInstanceFleetError) -> Self {
        match err.kind {
            crate::error::ModifyInstanceFleetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ModifyInstanceFleetErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ModifyInstanceFleetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyInstanceGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyInstanceGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ModifyInstanceGroupsError> for Error {
    fn from(err: crate::error::ModifyInstanceGroupsError) -> Self {
        match err.kind {
            crate::error::ModifyInstanceGroupsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ModifyInstanceGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAutoScalingPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutAutoScalingPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutAutoScalingPolicyError> for Error {
    fn from(err: crate::error::PutAutoScalingPolicyError) -> Self {
        match err.kind {
            crate::error::PutAutoScalingPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAutoTerminationPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutAutoTerminationPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutAutoTerminationPolicyError> for Error {
    fn from(err: crate::error::PutAutoTerminationPolicyError) -> Self {
        match err.kind {
            crate::error::PutAutoTerminationPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutBlockPublicAccessConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutBlockPublicAccessConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutBlockPublicAccessConfigurationError> for Error {
    fn from(err: crate::error::PutBlockPublicAccessConfigurationError) -> Self {
        match err.kind {
            crate::error::PutBlockPublicAccessConfigurationErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::PutBlockPublicAccessConfigurationErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::PutBlockPublicAccessConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutManagedScalingPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutManagedScalingPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::PutManagedScalingPolicyError> for Error {
    fn from(err: crate::error::PutManagedScalingPolicyError) -> Self {
        match err.kind {
            crate::error::PutManagedScalingPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveAutoScalingPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveAutoScalingPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RemoveAutoScalingPolicyError> for Error {
    fn from(err: crate::error::RemoveAutoScalingPolicyError) -> Self {
        match err.kind {
            crate::error::RemoveAutoScalingPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveAutoTerminationPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveAutoTerminationPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RemoveAutoTerminationPolicyError> for Error {
    fn from(err: crate::error::RemoveAutoTerminationPolicyError) -> Self {
        match err.kind {
            crate::error::RemoveAutoTerminationPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveManagedScalingPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveManagedScalingPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RemoveManagedScalingPolicyError> for Error {
    fn from(err: crate::error::RemoveManagedScalingPolicyError) -> Self {
        match err.kind {
            crate::error::RemoveManagedScalingPolicyErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err.kind {
            crate::error::RemoveTagsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::RemoveTagsErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::RemoveTagsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RunJobFlowError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RunJobFlowError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::RunJobFlowError> for Error {
    fn from(err: crate::error::RunJobFlowError) -> Self {
        match err.kind {
            crate::error::RunJobFlowErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::RunJobFlowErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetTerminationProtectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetTerminationProtectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::SetTerminationProtectionError> for Error {
    fn from(err: crate::error::SetTerminationProtectionError) -> Self {
        match err.kind {
            crate::error::SetTerminationProtectionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::SetTerminationProtectionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetVisibleToAllUsersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetVisibleToAllUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::SetVisibleToAllUsersError> for Error {
    fn from(err: crate::error::SetVisibleToAllUsersError) -> Self {
        match err.kind {
            crate::error::SetVisibleToAllUsersErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::SetVisibleToAllUsersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartNotebookExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartNotebookExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartNotebookExecutionError> for Error {
    fn from(err: crate::error::StartNotebookExecutionError) -> Self {
        match err.kind {
            crate::error::StartNotebookExecutionErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartNotebookExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StartNotebookExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopNotebookExecutionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopNotebookExecutionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopNotebookExecutionError> for Error {
    fn from(err: crate::error::StopNotebookExecutionError) -> Self {
        match err.kind {
            crate::error::StopNotebookExecutionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::StopNotebookExecutionErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StopNotebookExecutionErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateJobFlowsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TerminateJobFlowsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TerminateJobFlowsError> for Error {
    fn from(err: crate::error::TerminateJobFlowsError) -> Self {
        match err.kind {
            crate::error::TerminateJobFlowsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::TerminateJobFlowsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStudioError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateStudioError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateStudioError> for Error {
    fn from(err: crate::error::UpdateStudioError) -> Self {
        match err.kind {
            crate::error::UpdateStudioErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateStudioErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateStudioErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStudioSessionMappingError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateStudioSessionMappingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateStudioSessionMappingError> for Error {
    fn from(err: crate::error::UpdateStudioSessionMappingError) -> Self {
        match err.kind {
            crate::error::UpdateStudioSessionMappingErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::UpdateStudioSessionMappingErrorKind::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateStudioSessionMappingErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

