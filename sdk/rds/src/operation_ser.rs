// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(input: &crate::input::AddRoleToDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_role_to_db_instance(input: &crate::input::AddRoleToDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_7 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_8) = &input.db_instance_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]let mut scope_9 = writer.prefix("RoleArn");
    if let Some(var_10) = &input.role_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]let mut scope_11 = writer.prefix("FeatureName");
    if let Some(var_12) = &input.feature_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(input: &crate::input::AddSourceIdentifierToSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddSourceIdentifierToSubscription", "2014-10-31");
    #[allow(unused_mut)]let mut scope_13 = writer.prefix("SubscriptionName");
    if let Some(var_14) = &input.subscription_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]let mut scope_15 = writer.prefix("SourceIdentifier");
    if let Some(var_16) = &input.source_identifier {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(input: &crate::input::AddTagsToResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]let mut scope_17 = writer.prefix("ResourceName");
    if let Some(var_18) = &input.resource_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]let mut scope_19 = writer.prefix("Tags");
    if let Some(var_20) = &input.tags {
        let mut list_22 = scope_19.start_list(false, Some("Tag"));
        for item_21 in var_20 {
            #[allow(unused_mut)]let mut entry_23 = list_22.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_23, item_21)?;
        }
        list_22.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(input: &crate::input::ApplyPendingMaintenanceActionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]let mut scope_24 = writer.prefix("ResourceIdentifier");
    if let Some(var_25) = &input.resource_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]let mut scope_26 = writer.prefix("ApplyAction");
    if let Some(var_27) = &input.apply_action {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]let mut scope_28 = writer.prefix("OptInType");
    if let Some(var_29) = &input.opt_in_type {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_db_security_group_ingress(input: &crate::input::AuthorizeDbSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeDBSecurityGroupIngress", "2014-10-31");
    #[allow(unused_mut)]let mut scope_30 = writer.prefix("DBSecurityGroupName");
    if let Some(var_31) = &input.db_security_group_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]let mut scope_32 = writer.prefix("CIDRIP");
    if let Some(var_33) = &input.cidrip {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]let mut scope_34 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_35) = &input.ec2_security_group_name {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]let mut scope_36 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_37) = &input.ec2_security_group_id {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]let mut scope_38 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_39) = &input.ec2_security_group_owner_id {
        scope_38.string(var_39);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_backtrack_db_cluster(input: &crate::input::BacktrackDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BacktrackDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_40 = writer.prefix("DBClusterIdentifier");
    if let Some(var_41) = &input.db_cluster_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]let mut scope_42 = writer.prefix("BacktrackTo");
    if let Some(var_43) = &input.backtrack_to {
        scope_42.date_time(var_43, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_44 = writer.prefix("Force");
    if let Some(var_45) = &input.force {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]let mut scope_46 = writer.prefix("UseEarliestTimeOnPointInTimeUnavailable");
    if let Some(var_47) = &input.use_earliest_time_on_point_in_time_unavailable {
        scope_46.boolean(*var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(input: &crate::input::CancelExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2014-10-31");
    #[allow(unused_mut)]let mut scope_48 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_49) = &input.export_task_identifier {
        scope_48.string(var_49);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(input: &crate::input::CopyDbClusterParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_50 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_cluster_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]let mut scope_52 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_cluster_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]let mut scope_54 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_55) = &input.target_db_cluster_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(input: &crate::input::CopyDbClusterSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_61 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_62) = &input.source_db_cluster_snapshot_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]let mut scope_63 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_64) = &input.target_db_cluster_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]let mut scope_65 = writer.prefix("KmsKeyId");
    if let Some(var_66) = &input.kms_key_id {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]let mut scope_67 = writer.prefix("PreSignedUrl");
    if let Some(var_68) = &input.pre_signed_url {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]let mut scope_69 = writer.prefix("CopyTags");
    if let Some(var_70) = &input.copy_tags {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]let mut scope_71 = writer.prefix("Tags");
    if let Some(var_72) = &input.tags {
        let mut list_74 = scope_71.start_list(false, Some("Tag"));
        for item_73 in var_72 {
            #[allow(unused_mut)]let mut entry_75 = list_74.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_75, item_73)?;
        }
        list_74.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(input: &crate::input::CopyDbParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_76 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_77) = &input.source_db_parameter_group_identifier {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]let mut scope_78 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_79) = &input.target_db_parameter_group_identifier {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]let mut scope_80 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_81) = &input.target_db_parameter_group_description {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]let mut scope_82 = writer.prefix("Tags");
    if let Some(var_83) = &input.tags {
        let mut list_85 = scope_82.start_list(false, Some("Tag"));
        for item_84 in var_83 {
            #[allow(unused_mut)]let mut entry_86 = list_85.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_86, item_84)?;
        }
        list_85.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_snapshot(input: &crate::input::CopyDbSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_87 = writer.prefix("SourceDBSnapshotIdentifier");
    if let Some(var_88) = &input.source_db_snapshot_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]let mut scope_89 = writer.prefix("TargetDBSnapshotIdentifier");
    if let Some(var_90) = &input.target_db_snapshot_identifier {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]let mut scope_91 = writer.prefix("KmsKeyId");
    if let Some(var_92) = &input.kms_key_id {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]let mut scope_93 = writer.prefix("Tags");
    if let Some(var_94) = &input.tags {
        let mut list_96 = scope_93.start_list(false, Some("Tag"));
        for item_95 in var_94 {
            #[allow(unused_mut)]let mut entry_97 = list_96.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_97, item_95)?;
        }
        list_96.finish();
    }
    #[allow(unused_mut)]let mut scope_98 = writer.prefix("CopyTags");
    if let Some(var_99) = &input.copy_tags {
        scope_98.boolean(*var_99);
    }
    #[allow(unused_mut)]let mut scope_100 = writer.prefix("PreSignedUrl");
    if let Some(var_101) = &input.pre_signed_url {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]let mut scope_102 = writer.prefix("OptionGroupName");
    if let Some(var_103) = &input.option_group_name {
        scope_102.string(var_103);
    }
    #[allow(unused_mut)]let mut scope_104 = writer.prefix("TargetCustomAvailabilityZone");
    if let Some(var_105) = &input.target_custom_availability_zone {
        scope_104.string(var_105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_option_group(input: &crate::input::CopyOptionGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_106 = writer.prefix("SourceOptionGroupIdentifier");
    if let Some(var_107) = &input.source_option_group_identifier {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]let mut scope_108 = writer.prefix("TargetOptionGroupIdentifier");
    if let Some(var_109) = &input.target_option_group_identifier {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]let mut scope_110 = writer.prefix("TargetOptionGroupDescription");
    if let Some(var_111) = &input.target_option_group_description {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]let mut scope_112 = writer.prefix("Tags");
    if let Some(var_113) = &input.tags {
        let mut list_115 = scope_112.start_list(false, Some("Tag"));
        for item_114 in var_113 {
            #[allow(unused_mut)]let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_116, item_114)?;
        }
        list_115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_custom_db_engine_version(input: &crate::input::CreateCustomDbEngineVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]let mut scope_117 = writer.prefix("Engine");
    if let Some(var_118) = &input.engine {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]let mut scope_119 = writer.prefix("EngineVersion");
    if let Some(var_120) = &input.engine_version {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]let mut scope_121 = writer.prefix("DatabaseInstallationFilesS3BucketName");
    if let Some(var_122) = &input.database_installation_files_s3_bucket_name {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]let mut scope_123 = writer.prefix("DatabaseInstallationFilesS3Prefix");
    if let Some(var_124) = &input.database_installation_files_s3_prefix {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]let mut scope_125 = writer.prefix("KMSKeyId");
    if let Some(var_126) = &input.kms_key_id {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]let mut scope_127 = writer.prefix("Description");
    if let Some(var_128) = &input.description {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]let mut scope_129 = writer.prefix("Manifest");
    if let Some(var_130) = &input.manifest {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]let mut scope_131 = writer.prefix("Tags");
    if let Some(var_132) = &input.tags {
        let mut list_134 = scope_131.start_list(false, Some("Tag"));
        for item_133 in var_132 {
            #[allow(unused_mut)]let mut entry_135 = list_134.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_135, item_133)?;
        }
        list_134.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(input: &crate::input::CreateDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_136 = writer.prefix("AvailabilityZones");
    if let Some(var_137) = &input.availability_zones {
        let mut list_139 = scope_136.start_list(false, Some("AvailabilityZone"));
        for item_138 in var_137 {
            #[allow(unused_mut)]let mut entry_140 = list_139.entry();
            entry_140.string(item_138);
        }
        list_139.finish();
    }
    #[allow(unused_mut)]let mut scope_141 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_142) = &input.backup_retention_period {
        scope_141.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_142).into()));
    }
    #[allow(unused_mut)]let mut scope_143 = writer.prefix("CharacterSetName");
    if let Some(var_144) = &input.character_set_name {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]let mut scope_145 = writer.prefix("DatabaseName");
    if let Some(var_146) = &input.database_name {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]let mut scope_147 = writer.prefix("DBClusterIdentifier");
    if let Some(var_148) = &input.db_cluster_identifier {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]let mut scope_149 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_150) = &input.db_cluster_parameter_group_name {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]let mut scope_151 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_152) = &input.vpc_security_group_ids {
        let mut list_154 = scope_151.start_list(false, Some("VpcSecurityGroupId"));
        for item_153 in var_152 {
            #[allow(unused_mut)]let mut entry_155 = list_154.entry();
            entry_155.string(item_153);
        }
        list_154.finish();
    }
    #[allow(unused_mut)]let mut scope_156 = writer.prefix("DBSubnetGroupName");
    if let Some(var_157) = &input.db_subnet_group_name {
        scope_156.string(var_157);
    }
    #[allow(unused_mut)]let mut scope_158 = writer.prefix("Engine");
    if let Some(var_159) = &input.engine {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]let mut scope_160 = writer.prefix("EngineVersion");
    if let Some(var_161) = &input.engine_version {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]let mut scope_162 = writer.prefix("Port");
    if let Some(var_163) = &input.port {
        scope_162.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_163).into()));
    }
    #[allow(unused_mut)]let mut scope_164 = writer.prefix("MasterUsername");
    if let Some(var_165) = &input.master_username {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]let mut scope_166 = writer.prefix("MasterUserPassword");
    if let Some(var_167) = &input.master_user_password {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]let mut scope_168 = writer.prefix("OptionGroupName");
    if let Some(var_169) = &input.option_group_name {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]let mut scope_170 = writer.prefix("PreferredBackupWindow");
    if let Some(var_171) = &input.preferred_backup_window {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]let mut scope_172 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_173) = &input.preferred_maintenance_window {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]let mut scope_174 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_175) = &input.replication_source_identifier {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]let mut scope_176 = writer.prefix("Tags");
    if let Some(var_177) = &input.tags {
        let mut list_179 = scope_176.start_list(false, Some("Tag"));
        for item_178 in var_177 {
            #[allow(unused_mut)]let mut entry_180 = list_179.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_180, item_178)?;
        }
        list_179.finish();
    }
    #[allow(unused_mut)]let mut scope_181 = writer.prefix("StorageEncrypted");
    if let Some(var_182) = &input.storage_encrypted {
        scope_181.boolean(*var_182);
    }
    #[allow(unused_mut)]let mut scope_183 = writer.prefix("KmsKeyId");
    if let Some(var_184) = &input.kms_key_id {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]let mut scope_185 = writer.prefix("PreSignedUrl");
    if let Some(var_186) = &input.pre_signed_url {
        scope_185.string(var_186);
    }
    #[allow(unused_mut)]let mut scope_187 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_188) = &input.enable_iam_database_authentication {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]let mut scope_189 = writer.prefix("BacktrackWindow");
    if let Some(var_190) = &input.backtrack_window {
        scope_189.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_190).into()));
    }
    #[allow(unused_mut)]let mut scope_191 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_192) = &input.enable_cloudwatch_logs_exports {
        let mut list_194 = scope_191.start_list(false, None);
        for item_193 in var_192 {
            #[allow(unused_mut)]let mut entry_195 = list_194.entry();
            entry_195.string(item_193);
        }
        list_194.finish();
    }
    #[allow(unused_mut)]let mut scope_196 = writer.prefix("EngineMode");
    if let Some(var_197) = &input.engine_mode {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]let mut scope_198 = writer.prefix("ScalingConfiguration");
    if let Some(var_199) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(scope_198, var_199)?;
    }
    #[allow(unused_mut)]let mut scope_200 = writer.prefix("DeletionProtection");
    if let Some(var_201) = &input.deletion_protection {
        scope_200.boolean(*var_201);
    }
    #[allow(unused_mut)]let mut scope_202 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_203) = &input.global_cluster_identifier {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]let mut scope_204 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_205) = &input.enable_http_endpoint {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]let mut scope_206 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_207) = &input.copy_tags_to_snapshot {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]let mut scope_208 = writer.prefix("Domain");
    if let Some(var_209) = &input.domain {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]let mut scope_210 = writer.prefix("DomainIAMRoleName");
    if let Some(var_211) = &input.domain_iam_role_name {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]let mut scope_212 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_213) = &input.enable_global_write_forwarding {
        scope_212.boolean(*var_213);
    }
    #[allow(unused_mut)]let mut scope_214 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_215) = &input.db_cluster_instance_class {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]let mut scope_216 = writer.prefix("AllocatedStorage");
    if let Some(var_217) = &input.allocated_storage {
        scope_216.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_217).into()));
    }
    #[allow(unused_mut)]let mut scope_218 = writer.prefix("StorageType");
    if let Some(var_219) = &input.storage_type {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]let mut scope_220 = writer.prefix("Iops");
    if let Some(var_221) = &input.iops {
        scope_220.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_221).into()));
    }
    #[allow(unused_mut)]let mut scope_222 = writer.prefix("PubliclyAccessible");
    if let Some(var_223) = &input.publicly_accessible {
        scope_222.boolean(*var_223);
    }
    #[allow(unused_mut)]let mut scope_224 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_225) = &input.auto_minor_version_upgrade {
        scope_224.boolean(*var_225);
    }
    #[allow(unused_mut)]let mut scope_226 = writer.prefix("MonitoringInterval");
    if let Some(var_227) = &input.monitoring_interval {
        scope_226.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_227).into()));
    }
    #[allow(unused_mut)]let mut scope_228 = writer.prefix("MonitoringRoleArn");
    if let Some(var_229) = &input.monitoring_role_arn {
        scope_228.string(var_229);
    }
    #[allow(unused_mut)]let mut scope_230 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_231) = &input.enable_performance_insights {
        scope_230.boolean(*var_231);
    }
    #[allow(unused_mut)]let mut scope_232 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_233) = &input.performance_insights_kms_key_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]let mut scope_234 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_235) = &input.performance_insights_retention_period {
        scope_234.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_235).into()));
    }
    #[allow(unused_mut)]let mut scope_236 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_237) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(scope_236, var_237)?;
    }
    #[allow(unused_mut)]let mut scope_238 = writer.prefix("NetworkType");
    if let Some(var_239) = &input.network_type {
        scope_238.string(var_239);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(input: &crate::input::CreateDbClusterEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_240 = writer.prefix("DBClusterIdentifier");
    if let Some(var_241) = &input.db_cluster_identifier {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]let mut scope_242 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_243) = &input.db_cluster_endpoint_identifier {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]let mut scope_244 = writer.prefix("EndpointType");
    if let Some(var_245) = &input.endpoint_type {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]let mut scope_246 = writer.prefix("StaticMembers");
    if let Some(var_247) = &input.static_members {
        let mut list_249 = scope_246.start_list(false, None);
        for item_248 in var_247 {
            #[allow(unused_mut)]let mut entry_250 = list_249.entry();
            entry_250.string(item_248);
        }
        list_249.finish();
    }
    #[allow(unused_mut)]let mut scope_251 = writer.prefix("ExcludedMembers");
    if let Some(var_252) = &input.excluded_members {
        let mut list_254 = scope_251.start_list(false, None);
        for item_253 in var_252 {
            #[allow(unused_mut)]let mut entry_255 = list_254.entry();
            entry_255.string(item_253);
        }
        list_254.finish();
    }
    #[allow(unused_mut)]let mut scope_256 = writer.prefix("Tags");
    if let Some(var_257) = &input.tags {
        let mut list_259 = scope_256.start_list(false, Some("Tag"));
        for item_258 in var_257 {
            #[allow(unused_mut)]let mut entry_260 = list_259.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_260, item_258)?;
        }
        list_259.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(input: &crate::input::CreateDbClusterParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_261 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_262) = &input.db_cluster_parameter_group_name {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]let mut scope_263 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_264) = &input.db_parameter_group_family {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]let mut scope_265 = writer.prefix("Description");
    if let Some(var_266) = &input.description {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]let mut scope_267 = writer.prefix("Tags");
    if let Some(var_268) = &input.tags {
        let mut list_270 = scope_267.start_list(false, Some("Tag"));
        for item_269 in var_268 {
            #[allow(unused_mut)]let mut entry_271 = list_270.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_271, item_269)?;
        }
        list_270.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(input: &crate::input::CreateDbClusterSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_272 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_273) = &input.db_cluster_snapshot_identifier {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]let mut scope_274 = writer.prefix("DBClusterIdentifier");
    if let Some(var_275) = &input.db_cluster_identifier {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]let mut scope_276 = writer.prefix("Tags");
    if let Some(var_277) = &input.tags {
        let mut list_279 = scope_276.start_list(false, Some("Tag"));
        for item_278 in var_277 {
            #[allow(unused_mut)]let mut entry_280 = list_279.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_280, item_278)?;
        }
        list_279.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(input: &crate::input::CreateDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_281 = writer.prefix("DBName");
    if let Some(var_282) = &input.db_name {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]let mut scope_283 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_284) = &input.db_instance_identifier {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]let mut scope_285 = writer.prefix("AllocatedStorage");
    if let Some(var_286) = &input.allocated_storage {
        scope_285.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_286).into()));
    }
    #[allow(unused_mut)]let mut scope_287 = writer.prefix("DBInstanceClass");
    if let Some(var_288) = &input.db_instance_class {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]let mut scope_289 = writer.prefix("Engine");
    if let Some(var_290) = &input.engine {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]let mut scope_291 = writer.prefix("MasterUsername");
    if let Some(var_292) = &input.master_username {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]let mut scope_293 = writer.prefix("MasterUserPassword");
    if let Some(var_294) = &input.master_user_password {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]let mut scope_295 = writer.prefix("DBSecurityGroups");
    if let Some(var_296) = &input.db_security_groups {
        let mut list_298 = scope_295.start_list(false, Some("DBSecurityGroupName"));
        for item_297 in var_296 {
            #[allow(unused_mut)]let mut entry_299 = list_298.entry();
            entry_299.string(item_297);
        }
        list_298.finish();
    }
    #[allow(unused_mut)]let mut scope_300 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_301) = &input.vpc_security_group_ids {
        let mut list_303 = scope_300.start_list(false, Some("VpcSecurityGroupId"));
        for item_302 in var_301 {
            #[allow(unused_mut)]let mut entry_304 = list_303.entry();
            entry_304.string(item_302);
        }
        list_303.finish();
    }
    #[allow(unused_mut)]let mut scope_305 = writer.prefix("AvailabilityZone");
    if let Some(var_306) = &input.availability_zone {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]let mut scope_307 = writer.prefix("DBSubnetGroupName");
    if let Some(var_308) = &input.db_subnet_group_name {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]let mut scope_309 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_310) = &input.preferred_maintenance_window {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]let mut scope_311 = writer.prefix("DBParameterGroupName");
    if let Some(var_312) = &input.db_parameter_group_name {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]let mut scope_313 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_314) = &input.backup_retention_period {
        scope_313.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_314).into()));
    }
    #[allow(unused_mut)]let mut scope_315 = writer.prefix("PreferredBackupWindow");
    if let Some(var_316) = &input.preferred_backup_window {
        scope_315.string(var_316);
    }
    #[allow(unused_mut)]let mut scope_317 = writer.prefix("Port");
    if let Some(var_318) = &input.port {
        scope_317.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_318).into()));
    }
    #[allow(unused_mut)]let mut scope_319 = writer.prefix("MultiAZ");
    if let Some(var_320) = &input.multi_az {
        scope_319.boolean(*var_320);
    }
    #[allow(unused_mut)]let mut scope_321 = writer.prefix("EngineVersion");
    if let Some(var_322) = &input.engine_version {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]let mut scope_323 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_324) = &input.auto_minor_version_upgrade {
        scope_323.boolean(*var_324);
    }
    #[allow(unused_mut)]let mut scope_325 = writer.prefix("LicenseModel");
    if let Some(var_326) = &input.license_model {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]let mut scope_327 = writer.prefix("Iops");
    if let Some(var_328) = &input.iops {
        scope_327.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_328).into()));
    }
    #[allow(unused_mut)]let mut scope_329 = writer.prefix("OptionGroupName");
    if let Some(var_330) = &input.option_group_name {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]let mut scope_331 = writer.prefix("CharacterSetName");
    if let Some(var_332) = &input.character_set_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]let mut scope_333 = writer.prefix("NcharCharacterSetName");
    if let Some(var_334) = &input.nchar_character_set_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]let mut scope_335 = writer.prefix("PubliclyAccessible");
    if let Some(var_336) = &input.publicly_accessible {
        scope_335.boolean(*var_336);
    }
    #[allow(unused_mut)]let mut scope_337 = writer.prefix("Tags");
    if let Some(var_338) = &input.tags {
        let mut list_340 = scope_337.start_list(false, Some("Tag"));
        for item_339 in var_338 {
            #[allow(unused_mut)]let mut entry_341 = list_340.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_341, item_339)?;
        }
        list_340.finish();
    }
    #[allow(unused_mut)]let mut scope_342 = writer.prefix("DBClusterIdentifier");
    if let Some(var_343) = &input.db_cluster_identifier {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]let mut scope_344 = writer.prefix("StorageType");
    if let Some(var_345) = &input.storage_type {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]let mut scope_346 = writer.prefix("TdeCredentialArn");
    if let Some(var_347) = &input.tde_credential_arn {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]let mut scope_348 = writer.prefix("TdeCredentialPassword");
    if let Some(var_349) = &input.tde_credential_password {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]let mut scope_350 = writer.prefix("StorageEncrypted");
    if let Some(var_351) = &input.storage_encrypted {
        scope_350.boolean(*var_351);
    }
    #[allow(unused_mut)]let mut scope_352 = writer.prefix("KmsKeyId");
    if let Some(var_353) = &input.kms_key_id {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]let mut scope_354 = writer.prefix("Domain");
    if let Some(var_355) = &input.domain {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]let mut scope_356 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_357) = &input.copy_tags_to_snapshot {
        scope_356.boolean(*var_357);
    }
    #[allow(unused_mut)]let mut scope_358 = writer.prefix("MonitoringInterval");
    if let Some(var_359) = &input.monitoring_interval {
        scope_358.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_359).into()));
    }
    #[allow(unused_mut)]let mut scope_360 = writer.prefix("MonitoringRoleArn");
    if let Some(var_361) = &input.monitoring_role_arn {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]let mut scope_362 = writer.prefix("DomainIAMRoleName");
    if let Some(var_363) = &input.domain_iam_role_name {
        scope_362.string(var_363);
    }
    #[allow(unused_mut)]let mut scope_364 = writer.prefix("PromotionTier");
    if let Some(var_365) = &input.promotion_tier {
        scope_364.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_365).into()));
    }
    #[allow(unused_mut)]let mut scope_366 = writer.prefix("Timezone");
    if let Some(var_367) = &input.timezone {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]let mut scope_368 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_369) = &input.enable_iam_database_authentication {
        scope_368.boolean(*var_369);
    }
    #[allow(unused_mut)]let mut scope_370 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_371) = &input.enable_performance_insights {
        scope_370.boolean(*var_371);
    }
    #[allow(unused_mut)]let mut scope_372 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_373) = &input.performance_insights_kms_key_id {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]let mut scope_374 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_375) = &input.performance_insights_retention_period {
        scope_374.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_375).into()));
    }
    #[allow(unused_mut)]let mut scope_376 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_377) = &input.enable_cloudwatch_logs_exports {
        let mut list_379 = scope_376.start_list(false, None);
        for item_378 in var_377 {
            #[allow(unused_mut)]let mut entry_380 = list_379.entry();
            entry_380.string(item_378);
        }
        list_379.finish();
    }
    #[allow(unused_mut)]let mut scope_381 = writer.prefix("ProcessorFeatures");
    if let Some(var_382) = &input.processor_features {
        let mut list_384 = scope_381.start_list(false, Some("ProcessorFeature"));
        for item_383 in var_382 {
            #[allow(unused_mut)]let mut entry_385 = list_384.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_385, item_383)?;
        }
        list_384.finish();
    }
    #[allow(unused_mut)]let mut scope_386 = writer.prefix("DeletionProtection");
    if let Some(var_387) = &input.deletion_protection {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]let mut scope_388 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_389) = &input.max_allocated_storage {
        scope_388.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_389).into()));
    }
    #[allow(unused_mut)]let mut scope_390 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_391) = &input.enable_customer_owned_ip {
        scope_390.boolean(*var_391);
    }
    #[allow(unused_mut)]let mut scope_392 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_393) = &input.custom_iam_instance_profile {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]let mut scope_394 = writer.prefix("BackupTarget");
    if let Some(var_395) = &input.backup_target {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]let mut scope_396 = writer.prefix("NetworkType");
    if let Some(var_397) = &input.network_type {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]let mut scope_398 = writer.prefix("StorageThroughput");
    if let Some(var_399) = &input.storage_throughput {
        scope_398.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_399).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance_read_replica(input: &crate::input::CreateDbInstanceReadReplicaInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstanceReadReplica", "2014-10-31");
    #[allow(unused_mut)]let mut scope_400 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_401) = &input.db_instance_identifier {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]let mut scope_402 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_403) = &input.source_db_instance_identifier {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]let mut scope_404 = writer.prefix("DBInstanceClass");
    if let Some(var_405) = &input.db_instance_class {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]let mut scope_406 = writer.prefix("AvailabilityZone");
    if let Some(var_407) = &input.availability_zone {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]let mut scope_408 = writer.prefix("Port");
    if let Some(var_409) = &input.port {
        scope_408.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_409).into()));
    }
    #[allow(unused_mut)]let mut scope_410 = writer.prefix("MultiAZ");
    if let Some(var_411) = &input.multi_az {
        scope_410.boolean(*var_411);
    }
    #[allow(unused_mut)]let mut scope_412 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_413) = &input.auto_minor_version_upgrade {
        scope_412.boolean(*var_413);
    }
    #[allow(unused_mut)]let mut scope_414 = writer.prefix("Iops");
    if let Some(var_415) = &input.iops {
        scope_414.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_415).into()));
    }
    #[allow(unused_mut)]let mut scope_416 = writer.prefix("OptionGroupName");
    if let Some(var_417) = &input.option_group_name {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]let mut scope_418 = writer.prefix("DBParameterGroupName");
    if let Some(var_419) = &input.db_parameter_group_name {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]let mut scope_420 = writer.prefix("PubliclyAccessible");
    if let Some(var_421) = &input.publicly_accessible {
        scope_420.boolean(*var_421);
    }
    #[allow(unused_mut)]let mut scope_422 = writer.prefix("Tags");
    if let Some(var_423) = &input.tags {
        let mut list_425 = scope_422.start_list(false, Some("Tag"));
        for item_424 in var_423 {
            #[allow(unused_mut)]let mut entry_426 = list_425.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_426, item_424)?;
        }
        list_425.finish();
    }
    #[allow(unused_mut)]let mut scope_427 = writer.prefix("DBSubnetGroupName");
    if let Some(var_428) = &input.db_subnet_group_name {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]let mut scope_429 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_430) = &input.vpc_security_group_ids {
        let mut list_432 = scope_429.start_list(false, Some("VpcSecurityGroupId"));
        for item_431 in var_430 {
            #[allow(unused_mut)]let mut entry_433 = list_432.entry();
            entry_433.string(item_431);
        }
        list_432.finish();
    }
    #[allow(unused_mut)]let mut scope_434 = writer.prefix("StorageType");
    if let Some(var_435) = &input.storage_type {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]let mut scope_436 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_437) = &input.copy_tags_to_snapshot {
        scope_436.boolean(*var_437);
    }
    #[allow(unused_mut)]let mut scope_438 = writer.prefix("MonitoringInterval");
    if let Some(var_439) = &input.monitoring_interval {
        scope_438.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_439).into()));
    }
    #[allow(unused_mut)]let mut scope_440 = writer.prefix("MonitoringRoleArn");
    if let Some(var_441) = &input.monitoring_role_arn {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]let mut scope_444 = writer.prefix("PreSignedUrl");
    if let Some(var_445) = &input.pre_signed_url {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]let mut scope_446 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_447) = &input.enable_iam_database_authentication {
        scope_446.boolean(*var_447);
    }
    #[allow(unused_mut)]let mut scope_448 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_449) = &input.enable_performance_insights {
        scope_448.boolean(*var_449);
    }
    #[allow(unused_mut)]let mut scope_450 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_451) = &input.performance_insights_kms_key_id {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]let mut scope_452 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_453) = &input.performance_insights_retention_period {
        scope_452.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_453).into()));
    }
    #[allow(unused_mut)]let mut scope_454 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_455) = &input.enable_cloudwatch_logs_exports {
        let mut list_457 = scope_454.start_list(false, None);
        for item_456 in var_455 {
            #[allow(unused_mut)]let mut entry_458 = list_457.entry();
            entry_458.string(item_456);
        }
        list_457.finish();
    }
    #[allow(unused_mut)]let mut scope_459 = writer.prefix("ProcessorFeatures");
    if let Some(var_460) = &input.processor_features {
        let mut list_462 = scope_459.start_list(false, Some("ProcessorFeature"));
        for item_461 in var_460 {
            #[allow(unused_mut)]let mut entry_463 = list_462.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_463, item_461)?;
        }
        list_462.finish();
    }
    #[allow(unused_mut)]let mut scope_464 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_465) = &input.use_default_processor_features {
        scope_464.boolean(*var_465);
    }
    #[allow(unused_mut)]let mut scope_466 = writer.prefix("DeletionProtection");
    if let Some(var_467) = &input.deletion_protection {
        scope_466.boolean(*var_467);
    }
    #[allow(unused_mut)]let mut scope_468 = writer.prefix("Domain");
    if let Some(var_469) = &input.domain {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]let mut scope_470 = writer.prefix("DomainIAMRoleName");
    if let Some(var_471) = &input.domain_iam_role_name {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]let mut scope_472 = writer.prefix("ReplicaMode");
    if let Some(var_473) = &input.replica_mode {
        scope_472.string(var_473.as_str());
    }
    #[allow(unused_mut)]let mut scope_474 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_475) = &input.max_allocated_storage {
        scope_474.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_475).into()));
    }
    #[allow(unused_mut)]let mut scope_476 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_477) = &input.custom_iam_instance_profile {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]let mut scope_478 = writer.prefix("NetworkType");
    if let Some(var_479) = &input.network_type {
        scope_478.string(var_479);
    }
    #[allow(unused_mut)]let mut scope_480 = writer.prefix("StorageThroughput");
    if let Some(var_481) = &input.storage_throughput {
        scope_480.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_481).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(input: &crate::input::CreateDbParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_482 = writer.prefix("DBParameterGroupName");
    if let Some(var_483) = &input.db_parameter_group_name {
        scope_482.string(var_483);
    }
    #[allow(unused_mut)]let mut scope_484 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_485) = &input.db_parameter_group_family {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]let mut scope_486 = writer.prefix("Description");
    if let Some(var_487) = &input.description {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]let mut scope_488 = writer.prefix("Tags");
    if let Some(var_489) = &input.tags {
        let mut list_491 = scope_488.start_list(false, Some("Tag"));
        for item_490 in var_489 {
            #[allow(unused_mut)]let mut entry_492 = list_491.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_492, item_490)?;
        }
        list_491.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy(input: &crate::input::CreateDbProxyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxy", "2014-10-31");
    #[allow(unused_mut)]let mut scope_493 = writer.prefix("DBProxyName");
    if let Some(var_494) = &input.db_proxy_name {
        scope_493.string(var_494);
    }
    #[allow(unused_mut)]let mut scope_495 = writer.prefix("EngineFamily");
    if let Some(var_496) = &input.engine_family {
        scope_495.string(var_496.as_str());
    }
    #[allow(unused_mut)]let mut scope_497 = writer.prefix("Auth");
    if let Some(var_498) = &input.auth {
        let mut list_500 = scope_497.start_list(false, None);
        for item_499 in var_498 {
            #[allow(unused_mut)]let mut entry_501 = list_500.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(entry_501, item_499)?;
        }
        list_500.finish();
    }
    #[allow(unused_mut)]let mut scope_502 = writer.prefix("RoleArn");
    if let Some(var_503) = &input.role_arn {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]let mut scope_504 = writer.prefix("VpcSubnetIds");
    if let Some(var_505) = &input.vpc_subnet_ids {
        let mut list_507 = scope_504.start_list(false, None);
        for item_506 in var_505 {
            #[allow(unused_mut)]let mut entry_508 = list_507.entry();
            entry_508.string(item_506);
        }
        list_507.finish();
    }
    #[allow(unused_mut)]let mut scope_509 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_510) = &input.vpc_security_group_ids {
        let mut list_512 = scope_509.start_list(false, None);
        for item_511 in var_510 {
            #[allow(unused_mut)]let mut entry_513 = list_512.entry();
            entry_513.string(item_511);
        }
        list_512.finish();
    }
    #[allow(unused_mut)]let mut scope_514 = writer.prefix("RequireTLS");
    if input.require_tls {
        scope_514.boolean(input.require_tls);
    }
    #[allow(unused_mut)]let mut scope_515 = writer.prefix("IdleClientTimeout");
    if let Some(var_516) = &input.idle_client_timeout {
        scope_515.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_516).into()));
    }
    #[allow(unused_mut)]let mut scope_517 = writer.prefix("DebugLogging");
    if input.debug_logging {
        scope_517.boolean(input.debug_logging);
    }
    #[allow(unused_mut)]let mut scope_518 = writer.prefix("Tags");
    if let Some(var_519) = &input.tags {
        let mut list_521 = scope_518.start_list(false, Some("Tag"));
        for item_520 in var_519 {
            #[allow(unused_mut)]let mut entry_522 = list_521.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_522, item_520)?;
        }
        list_521.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy_endpoint(input: &crate::input::CreateDbProxyEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_523 = writer.prefix("DBProxyName");
    if let Some(var_524) = &input.db_proxy_name {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]let mut scope_525 = writer.prefix("DBProxyEndpointName");
    if let Some(var_526) = &input.db_proxy_endpoint_name {
        scope_525.string(var_526);
    }
    #[allow(unused_mut)]let mut scope_527 = writer.prefix("VpcSubnetIds");
    if let Some(var_528) = &input.vpc_subnet_ids {
        let mut list_530 = scope_527.start_list(false, None);
        for item_529 in var_528 {
            #[allow(unused_mut)]let mut entry_531 = list_530.entry();
            entry_531.string(item_529);
        }
        list_530.finish();
    }
    #[allow(unused_mut)]let mut scope_532 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_533) = &input.vpc_security_group_ids {
        let mut list_535 = scope_532.start_list(false, None);
        for item_534 in var_533 {
            #[allow(unused_mut)]let mut entry_536 = list_535.entry();
            entry_536.string(item_534);
        }
        list_535.finish();
    }
    #[allow(unused_mut)]let mut scope_537 = writer.prefix("TargetRole");
    if let Some(var_538) = &input.target_role {
        scope_537.string(var_538.as_str());
    }
    #[allow(unused_mut)]let mut scope_539 = writer.prefix("Tags");
    if let Some(var_540) = &input.tags {
        let mut list_542 = scope_539.start_list(false, Some("Tag"));
        for item_541 in var_540 {
            #[allow(unused_mut)]let mut entry_543 = list_542.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_543, item_541)?;
        }
        list_542.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_security_group(input: &crate::input::CreateDbSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_544 = writer.prefix("DBSecurityGroupName");
    if let Some(var_545) = &input.db_security_group_name {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]let mut scope_546 = writer.prefix("DBSecurityGroupDescription");
    if let Some(var_547) = &input.db_security_group_description {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]let mut scope_548 = writer.prefix("Tags");
    if let Some(var_549) = &input.tags {
        let mut list_551 = scope_548.start_list(false, Some("Tag"));
        for item_550 in var_549 {
            #[allow(unused_mut)]let mut entry_552 = list_551.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_552, item_550)?;
        }
        list_551.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_snapshot(input: &crate::input::CreateDbSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_553 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_554) = &input.db_snapshot_identifier {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]let mut scope_555 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_556) = &input.db_instance_identifier {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]let mut scope_557 = writer.prefix("Tags");
    if let Some(var_558) = &input.tags {
        let mut list_560 = scope_557.start_list(false, Some("Tag"));
        for item_559 in var_558 {
            #[allow(unused_mut)]let mut entry_561 = list_560.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_561, item_559)?;
        }
        list_560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(input: &crate::input::CreateDbSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_562 = writer.prefix("DBSubnetGroupName");
    if let Some(var_563) = &input.db_subnet_group_name {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]let mut scope_564 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_565) = &input.db_subnet_group_description {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]let mut scope_566 = writer.prefix("SubnetIds");
    if let Some(var_567) = &input.subnet_ids {
        let mut list_569 = scope_566.start_list(false, Some("SubnetIdentifier"));
        for item_568 in var_567 {
            #[allow(unused_mut)]let mut entry_570 = list_569.entry();
            entry_570.string(item_568);
        }
        list_569.finish();
    }
    #[allow(unused_mut)]let mut scope_571 = writer.prefix("Tags");
    if let Some(var_572) = &input.tags {
        let mut list_574 = scope_571.start_list(false, Some("Tag"));
        for item_573 in var_572 {
            #[allow(unused_mut)]let mut entry_575 = list_574.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_575, item_573)?;
        }
        list_574.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(input: &crate::input::CreateEventSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]let mut scope_576 = writer.prefix("SubscriptionName");
    if let Some(var_577) = &input.subscription_name {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]let mut scope_578 = writer.prefix("SnsTopicArn");
    if let Some(var_579) = &input.sns_topic_arn {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]let mut scope_580 = writer.prefix("SourceType");
    if let Some(var_581) = &input.source_type {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]let mut scope_582 = writer.prefix("EventCategories");
    if let Some(var_583) = &input.event_categories {
        let mut list_585 = scope_582.start_list(false, Some("EventCategory"));
        for item_584 in var_583 {
            #[allow(unused_mut)]let mut entry_586 = list_585.entry();
            entry_586.string(item_584);
        }
        list_585.finish();
    }
    #[allow(unused_mut)]let mut scope_587 = writer.prefix("SourceIds");
    if let Some(var_588) = &input.source_ids {
        let mut list_590 = scope_587.start_list(false, Some("SourceId"));
        for item_589 in var_588 {
            #[allow(unused_mut)]let mut entry_591 = list_590.entry();
            entry_591.string(item_589);
        }
        list_590.finish();
    }
    #[allow(unused_mut)]let mut scope_592 = writer.prefix("Enabled");
    if let Some(var_593) = &input.enabled {
        scope_592.boolean(*var_593);
    }
    #[allow(unused_mut)]let mut scope_594 = writer.prefix("Tags");
    if let Some(var_595) = &input.tags {
        let mut list_597 = scope_594.start_list(false, Some("Tag"));
        for item_596 in var_595 {
            #[allow(unused_mut)]let mut entry_598 = list_597.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_598, item_596)?;
        }
        list_597.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(input: &crate::input::CreateGlobalClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_599 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_600) = &input.global_cluster_identifier {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]let mut scope_601 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_602) = &input.source_db_cluster_identifier {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]let mut scope_603 = writer.prefix("Engine");
    if let Some(var_604) = &input.engine {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]let mut scope_605 = writer.prefix("EngineVersion");
    if let Some(var_606) = &input.engine_version {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]let mut scope_607 = writer.prefix("DeletionProtection");
    if let Some(var_608) = &input.deletion_protection {
        scope_607.boolean(*var_608);
    }
    #[allow(unused_mut)]let mut scope_609 = writer.prefix("DatabaseName");
    if let Some(var_610) = &input.database_name {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]let mut scope_611 = writer.prefix("StorageEncrypted");
    if let Some(var_612) = &input.storage_encrypted {
        scope_611.boolean(*var_612);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_option_group(input: &crate::input::CreateOptionGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateOptionGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_613 = writer.prefix("OptionGroupName");
    if let Some(var_614) = &input.option_group_name {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]let mut scope_615 = writer.prefix("EngineName");
    if let Some(var_616) = &input.engine_name {
        scope_615.string(var_616);
    }
    #[allow(unused_mut)]let mut scope_617 = writer.prefix("MajorEngineVersion");
    if let Some(var_618) = &input.major_engine_version {
        scope_617.string(var_618);
    }
    #[allow(unused_mut)]let mut scope_619 = writer.prefix("OptionGroupDescription");
    if let Some(var_620) = &input.option_group_description {
        scope_619.string(var_620);
    }
    #[allow(unused_mut)]let mut scope_621 = writer.prefix("Tags");
    if let Some(var_622) = &input.tags {
        let mut list_624 = scope_621.start_list(false, Some("Tag"));
        for item_623 in var_622 {
            #[allow(unused_mut)]let mut entry_625 = list_624.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_625, item_623)?;
        }
        list_624.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_custom_db_engine_version(input: &crate::input::DeleteCustomDbEngineVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]let mut scope_626 = writer.prefix("Engine");
    if let Some(var_627) = &input.engine {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]let mut scope_628 = writer.prefix("EngineVersion");
    if let Some(var_629) = &input.engine_version {
        scope_628.string(var_629);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(input: &crate::input::DeleteDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_630 = writer.prefix("DBClusterIdentifier");
    if let Some(var_631) = &input.db_cluster_identifier {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]let mut scope_632 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_632.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]let mut scope_633 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_634) = &input.final_db_snapshot_identifier {
        scope_633.string(var_634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(input: &crate::input::DeleteDbClusterEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_635 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_636) = &input.db_cluster_endpoint_identifier {
        scope_635.string(var_636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(input: &crate::input::DeleteDbClusterParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_637 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_638) = &input.db_cluster_parameter_group_name {
        scope_637.string(var_638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(input: &crate::input::DeleteDbClusterSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_639 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_640) = &input.db_cluster_snapshot_identifier {
        scope_639.string(var_640);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(input: &crate::input::DeleteDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_641 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_642) = &input.db_instance_identifier {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]let mut scope_643 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_643.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]let mut scope_644 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_645) = &input.final_db_snapshot_identifier {
        scope_644.string(var_645);
    }
    #[allow(unused_mut)]let mut scope_646 = writer.prefix("DeleteAutomatedBackups");
    if let Some(var_647) = &input.delete_automated_backups {
        scope_646.boolean(*var_647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance_automated_backup(input: &crate::input::DeleteDbInstanceAutomatedBackupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstanceAutomatedBackup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_648 = writer.prefix("DbiResourceId");
    if let Some(var_649) = &input.dbi_resource_id {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]let mut scope_650 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_651) = &input.db_instance_automated_backups_arn {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(input: &crate::input::DeleteDbParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_652 = writer.prefix("DBParameterGroupName");
    if let Some(var_653) = &input.db_parameter_group_name {
        scope_652.string(var_653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy(input: &crate::input::DeleteDbProxyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxy", "2014-10-31");
    #[allow(unused_mut)]let mut scope_654 = writer.prefix("DBProxyName");
    if let Some(var_655) = &input.db_proxy_name {
        scope_654.string(var_655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy_endpoint(input: &crate::input::DeleteDbProxyEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_656 = writer.prefix("DBProxyEndpointName");
    if let Some(var_657) = &input.db_proxy_endpoint_name {
        scope_656.string(var_657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_security_group(input: &crate::input::DeleteDbSecurityGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_658 = writer.prefix("DBSecurityGroupName");
    if let Some(var_659) = &input.db_security_group_name {
        scope_658.string(var_659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_snapshot(input: &crate::input::DeleteDbSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_660 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_661) = &input.db_snapshot_identifier {
        scope_660.string(var_661);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(input: &crate::input::DeleteDbSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_662 = writer.prefix("DBSubnetGroupName");
    if let Some(var_663) = &input.db_subnet_group_name {
        scope_662.string(var_663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(input: &crate::input::DeleteEventSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]let mut scope_664 = writer.prefix("SubscriptionName");
    if let Some(var_665) = &input.subscription_name {
        scope_664.string(var_665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(input: &crate::input::DeleteGlobalClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_666 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_667) = &input.global_cluster_identifier {
        scope_666.string(var_667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_option_group(input: &crate::input::DeleteOptionGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteOptionGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_668 = writer.prefix("OptionGroupName");
    if let Some(var_669) = &input.option_group_name {
        scope_668.string(var_669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_db_proxy_targets(input: &crate::input::DeregisterDbProxyTargetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]let mut scope_670 = writer.prefix("DBProxyName");
    if let Some(var_671) = &input.db_proxy_name {
        scope_670.string(var_671);
    }
    #[allow(unused_mut)]let mut scope_672 = writer.prefix("TargetGroupName");
    if let Some(var_673) = &input.target_group_name {
        scope_672.string(var_673);
    }
    #[allow(unused_mut)]let mut scope_674 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_675) = &input.db_instance_identifiers {
        let mut list_677 = scope_674.start_list(false, None);
        for item_676 in var_675 {
            #[allow(unused_mut)]let mut entry_678 = list_677.entry();
            entry_678.string(item_676);
        }
        list_677.finish();
    }
    #[allow(unused_mut)]let mut scope_679 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_680) = &input.db_cluster_identifiers {
        let mut list_682 = scope_679.start_list(false, None);
        for item_681 in var_680 {
            #[allow(unused_mut)]let mut entry_683 = list_682.entry();
            entry_683.string(item_681);
        }
        list_682.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(input: &crate::input::DescribeAccountAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2014-10-31");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_certificates(input: &crate::input::DescribeCertificatesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeCertificates", "2014-10-31");
    #[allow(unused_mut)]let mut scope_684 = writer.prefix("CertificateIdentifier");
    if let Some(var_685) = &input.certificate_identifier {
        scope_684.string(var_685);
    }
    #[allow(unused_mut)]let mut scope_686 = writer.prefix("Filters");
    if let Some(var_687) = &input.filters {
        let mut list_689 = scope_686.start_list(false, Some("Filter"));
        for item_688 in var_687 {
            #[allow(unused_mut)]let mut entry_690 = list_689.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_690, item_688)?;
        }
        list_689.finish();
    }
    #[allow(unused_mut)]let mut scope_691 = writer.prefix("MaxRecords");
    if let Some(var_692) = &input.max_records {
        scope_691.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_692).into()));
    }
    #[allow(unused_mut)]let mut scope_693 = writer.prefix("Marker");
    if let Some(var_694) = &input.marker {
        scope_693.string(var_694);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_backtracks(input: &crate::input::DescribeDbClusterBacktracksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterBacktracks", "2014-10-31");
    #[allow(unused_mut)]let mut scope_695 = writer.prefix("DBClusterIdentifier");
    if let Some(var_696) = &input.db_cluster_identifier {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]let mut scope_697 = writer.prefix("BacktrackIdentifier");
    if let Some(var_698) = &input.backtrack_identifier {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]let mut scope_699 = writer.prefix("Filters");
    if let Some(var_700) = &input.filters {
        let mut list_702 = scope_699.start_list(false, Some("Filter"));
        for item_701 in var_700 {
            #[allow(unused_mut)]let mut entry_703 = list_702.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_703, item_701)?;
        }
        list_702.finish();
    }
    #[allow(unused_mut)]let mut scope_704 = writer.prefix("MaxRecords");
    if let Some(var_705) = &input.max_records {
        scope_704.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_705).into()));
    }
    #[allow(unused_mut)]let mut scope_706 = writer.prefix("Marker");
    if let Some(var_707) = &input.marker {
        scope_706.string(var_707);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(input: &crate::input::DescribeDbClusterEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]let mut scope_708 = writer.prefix("DBClusterIdentifier");
    if let Some(var_709) = &input.db_cluster_identifier {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]let mut scope_710 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_711) = &input.db_cluster_endpoint_identifier {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]let mut scope_712 = writer.prefix("Filters");
    if let Some(var_713) = &input.filters {
        let mut list_715 = scope_712.start_list(false, Some("Filter"));
        for item_714 in var_713 {
            #[allow(unused_mut)]let mut entry_716 = list_715.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_716, item_714)?;
        }
        list_715.finish();
    }
    #[allow(unused_mut)]let mut scope_717 = writer.prefix("MaxRecords");
    if let Some(var_718) = &input.max_records {
        scope_717.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_718).into()));
    }
    #[allow(unused_mut)]let mut scope_719 = writer.prefix("Marker");
    if let Some(var_720) = &input.marker {
        scope_719.string(var_720);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(input: &crate::input::DescribeDbClusterParameterGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameterGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_721 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_722) = &input.db_cluster_parameter_group_name {
        scope_721.string(var_722);
    }
    #[allow(unused_mut)]let mut scope_723 = writer.prefix("Filters");
    if let Some(var_724) = &input.filters {
        let mut list_726 = scope_723.start_list(false, Some("Filter"));
        for item_725 in var_724 {
            #[allow(unused_mut)]let mut entry_727 = list_726.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_727, item_725)?;
        }
        list_726.finish();
    }
    #[allow(unused_mut)]let mut scope_728 = writer.prefix("MaxRecords");
    if let Some(var_729) = &input.max_records {
        scope_728.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_729).into()));
    }
    #[allow(unused_mut)]let mut scope_730 = writer.prefix("Marker");
    if let Some(var_731) = &input.marker {
        scope_730.string(var_731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(input: &crate::input::DescribeDbClusterParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_732 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_733) = &input.db_cluster_parameter_group_name {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]let mut scope_734 = writer.prefix("Source");
    if let Some(var_735) = &input.source {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]let mut scope_736 = writer.prefix("Filters");
    if let Some(var_737) = &input.filters {
        let mut list_739 = scope_736.start_list(false, Some("Filter"));
        for item_738 in var_737 {
            #[allow(unused_mut)]let mut entry_740 = list_739.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_740, item_738)?;
        }
        list_739.finish();
    }
    #[allow(unused_mut)]let mut scope_741 = writer.prefix("MaxRecords");
    if let Some(var_742) = &input.max_records {
        scope_741.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_742).into()));
    }
    #[allow(unused_mut)]let mut scope_743 = writer.prefix("Marker");
    if let Some(var_744) = &input.marker {
        scope_743.string(var_744);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(input: &crate::input::DescribeDbClustersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_745 = writer.prefix("DBClusterIdentifier");
    if let Some(var_746) = &input.db_cluster_identifier {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]let mut scope_747 = writer.prefix("Filters");
    if let Some(var_748) = &input.filters {
        let mut list_750 = scope_747.start_list(false, Some("Filter"));
        for item_749 in var_748 {
            #[allow(unused_mut)]let mut entry_751 = list_750.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_751, item_749)?;
        }
        list_750.finish();
    }
    #[allow(unused_mut)]let mut scope_752 = writer.prefix("MaxRecords");
    if let Some(var_753) = &input.max_records {
        scope_752.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_753).into()));
    }
    #[allow(unused_mut)]let mut scope_754 = writer.prefix("Marker");
    if let Some(var_755) = &input.marker {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]let mut scope_756 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_756.boolean(input.include_shared);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(input: &crate::input::DescribeDbClusterSnapshotAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshotAttributes", "2014-10-31");
    #[allow(unused_mut)]let mut scope_757 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_758) = &input.db_cluster_snapshot_identifier {
        scope_757.string(var_758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(input: &crate::input::DescribeDbClusterSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]let mut scope_759 = writer.prefix("DBClusterIdentifier");
    if let Some(var_760) = &input.db_cluster_identifier {
        scope_759.string(var_760);
    }
    #[allow(unused_mut)]let mut scope_761 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_762) = &input.db_cluster_snapshot_identifier {
        scope_761.string(var_762);
    }
    #[allow(unused_mut)]let mut scope_763 = writer.prefix("SnapshotType");
    if let Some(var_764) = &input.snapshot_type {
        scope_763.string(var_764);
    }
    #[allow(unused_mut)]let mut scope_765 = writer.prefix("Filters");
    if let Some(var_766) = &input.filters {
        let mut list_768 = scope_765.start_list(false, Some("Filter"));
        for item_767 in var_766 {
            #[allow(unused_mut)]let mut entry_769 = list_768.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_769, item_767)?;
        }
        list_768.finish();
    }
    #[allow(unused_mut)]let mut scope_770 = writer.prefix("MaxRecords");
    if let Some(var_771) = &input.max_records {
        scope_770.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_771).into()));
    }
    #[allow(unused_mut)]let mut scope_772 = writer.prefix("Marker");
    if let Some(var_773) = &input.marker {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]let mut scope_774 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_774.boolean(input.include_shared);
    }
    #[allow(unused_mut)]let mut scope_775 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_775.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(input: &crate::input::DescribeDbEngineVersionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_776 = writer.prefix("Engine");
    if let Some(var_777) = &input.engine {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]let mut scope_778 = writer.prefix("EngineVersion");
    if let Some(var_779) = &input.engine_version {
        scope_778.string(var_779);
    }
    #[allow(unused_mut)]let mut scope_780 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_781) = &input.db_parameter_group_family {
        scope_780.string(var_781);
    }
    #[allow(unused_mut)]let mut scope_782 = writer.prefix("Filters");
    if let Some(var_783) = &input.filters {
        let mut list_785 = scope_782.start_list(false, Some("Filter"));
        for item_784 in var_783 {
            #[allow(unused_mut)]let mut entry_786 = list_785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_786, item_784)?;
        }
        list_785.finish();
    }
    #[allow(unused_mut)]let mut scope_787 = writer.prefix("MaxRecords");
    if let Some(var_788) = &input.max_records {
        scope_787.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_788).into()));
    }
    #[allow(unused_mut)]let mut scope_789 = writer.prefix("Marker");
    if let Some(var_790) = &input.marker {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]let mut scope_791 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_791.boolean(input.default_only);
    }
    #[allow(unused_mut)]let mut scope_792 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_793) = &input.list_supported_character_sets {
        scope_792.boolean(*var_793);
    }
    #[allow(unused_mut)]let mut scope_794 = writer.prefix("ListSupportedTimezones");
    if let Some(var_795) = &input.list_supported_timezones {
        scope_794.boolean(*var_795);
    }
    #[allow(unused_mut)]let mut scope_796 = writer.prefix("IncludeAll");
    if let Some(var_797) = &input.include_all {
        scope_796.boolean(*var_797);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instance_automated_backups(input: &crate::input::DescribeDbInstanceAutomatedBackupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstanceAutomatedBackups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_798 = writer.prefix("DbiResourceId");
    if let Some(var_799) = &input.dbi_resource_id {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]let mut scope_800 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_801) = &input.db_instance_identifier {
        scope_800.string(var_801);
    }
    #[allow(unused_mut)]let mut scope_802 = writer.prefix("Filters");
    if let Some(var_803) = &input.filters {
        let mut list_805 = scope_802.start_list(false, Some("Filter"));
        for item_804 in var_803 {
            #[allow(unused_mut)]let mut entry_806 = list_805.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_806, item_804)?;
        }
        list_805.finish();
    }
    #[allow(unused_mut)]let mut scope_807 = writer.prefix("MaxRecords");
    if let Some(var_808) = &input.max_records {
        scope_807.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_808).into()));
    }
    #[allow(unused_mut)]let mut scope_809 = writer.prefix("Marker");
    if let Some(var_810) = &input.marker {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]let mut scope_811 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_812) = &input.db_instance_automated_backups_arn {
        scope_811.string(var_812);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(input: &crate::input::DescribeDbInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]let mut scope_813 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_814) = &input.db_instance_identifier {
        scope_813.string(var_814);
    }
    #[allow(unused_mut)]let mut scope_815 = writer.prefix("Filters");
    if let Some(var_816) = &input.filters {
        let mut list_818 = scope_815.start_list(false, Some("Filter"));
        for item_817 in var_816 {
            #[allow(unused_mut)]let mut entry_819 = list_818.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_819, item_817)?;
        }
        list_818.finish();
    }
    #[allow(unused_mut)]let mut scope_820 = writer.prefix("MaxRecords");
    if let Some(var_821) = &input.max_records {
        scope_820.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_821).into()));
    }
    #[allow(unused_mut)]let mut scope_822 = writer.prefix("Marker");
    if let Some(var_823) = &input.marker {
        scope_822.string(var_823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_log_files(input: &crate::input::DescribeDbLogFilesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBLogFiles", "2014-10-31");
    #[allow(unused_mut)]let mut scope_824 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_825) = &input.db_instance_identifier {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]let mut scope_826 = writer.prefix("FilenameContains");
    if let Some(var_827) = &input.filename_contains {
        scope_826.string(var_827);
    }
    #[allow(unused_mut)]let mut scope_828 = writer.prefix("FileLastWritten");
    if input.file_last_written != 0 {
        scope_828.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.file_last_written).into()));
    }
    #[allow(unused_mut)]let mut scope_829 = writer.prefix("FileSize");
    if input.file_size != 0 {
        scope_829.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.file_size).into()));
    }
    #[allow(unused_mut)]let mut scope_830 = writer.prefix("Filters");
    if let Some(var_831) = &input.filters {
        let mut list_833 = scope_830.start_list(false, Some("Filter"));
        for item_832 in var_831 {
            #[allow(unused_mut)]let mut entry_834 = list_833.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_834, item_832)?;
        }
        list_833.finish();
    }
    #[allow(unused_mut)]let mut scope_835 = writer.prefix("MaxRecords");
    if let Some(var_836) = &input.max_records {
        scope_835.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_836).into()));
    }
    #[allow(unused_mut)]let mut scope_837 = writer.prefix("Marker");
    if let Some(var_838) = &input.marker {
        scope_837.string(var_838);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(input: &crate::input::DescribeDbParameterGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_839 = writer.prefix("DBParameterGroupName");
    if let Some(var_840) = &input.db_parameter_group_name {
        scope_839.string(var_840);
    }
    #[allow(unused_mut)]let mut scope_841 = writer.prefix("Filters");
    if let Some(var_842) = &input.filters {
        let mut list_844 = scope_841.start_list(false, Some("Filter"));
        for item_843 in var_842 {
            #[allow(unused_mut)]let mut entry_845 = list_844.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_845, item_843)?;
        }
        list_844.finish();
    }
    #[allow(unused_mut)]let mut scope_846 = writer.prefix("MaxRecords");
    if let Some(var_847) = &input.max_records {
        scope_846.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_847).into()));
    }
    #[allow(unused_mut)]let mut scope_848 = writer.prefix("Marker");
    if let Some(var_849) = &input.marker {
        scope_848.string(var_849);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(input: &crate::input::DescribeDbParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_850 = writer.prefix("DBParameterGroupName");
    if let Some(var_851) = &input.db_parameter_group_name {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]let mut scope_852 = writer.prefix("Source");
    if let Some(var_853) = &input.source {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]let mut scope_854 = writer.prefix("Filters");
    if let Some(var_855) = &input.filters {
        let mut list_857 = scope_854.start_list(false, Some("Filter"));
        for item_856 in var_855 {
            #[allow(unused_mut)]let mut entry_858 = list_857.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_858, item_856)?;
        }
        list_857.finish();
    }
    #[allow(unused_mut)]let mut scope_859 = writer.prefix("MaxRecords");
    if let Some(var_860) = &input.max_records {
        scope_859.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_860).into()));
    }
    #[allow(unused_mut)]let mut scope_861 = writer.prefix("Marker");
    if let Some(var_862) = &input.marker {
        scope_861.string(var_862);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxies(input: &crate::input::DescribeDbProxiesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxies", "2014-10-31");
    #[allow(unused_mut)]let mut scope_863 = writer.prefix("DBProxyName");
    if let Some(var_864) = &input.db_proxy_name {
        scope_863.string(var_864);
    }
    #[allow(unused_mut)]let mut scope_865 = writer.prefix("Filters");
    if let Some(var_866) = &input.filters {
        let mut list_868 = scope_865.start_list(false, Some("Filter"));
        for item_867 in var_866 {
            #[allow(unused_mut)]let mut entry_869 = list_868.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_869, item_867)?;
        }
        list_868.finish();
    }
    #[allow(unused_mut)]let mut scope_870 = writer.prefix("Marker");
    if let Some(var_871) = &input.marker {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]let mut scope_872 = writer.prefix("MaxRecords");
    if let Some(var_873) = &input.max_records {
        scope_872.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_873).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_endpoints(input: &crate::input::DescribeDbProxyEndpointsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyEndpoints", "2014-10-31");
    #[allow(unused_mut)]let mut scope_874 = writer.prefix("DBProxyName");
    if let Some(var_875) = &input.db_proxy_name {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]let mut scope_876 = writer.prefix("DBProxyEndpointName");
    if let Some(var_877) = &input.db_proxy_endpoint_name {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]let mut scope_878 = writer.prefix("Filters");
    if let Some(var_879) = &input.filters {
        let mut list_881 = scope_878.start_list(false, Some("Filter"));
        for item_880 in var_879 {
            #[allow(unused_mut)]let mut entry_882 = list_881.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_882, item_880)?;
        }
        list_881.finish();
    }
    #[allow(unused_mut)]let mut scope_883 = writer.prefix("Marker");
    if let Some(var_884) = &input.marker {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]let mut scope_885 = writer.prefix("MaxRecords");
    if let Some(var_886) = &input.max_records {
        scope_885.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_886).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_target_groups(input: &crate::input::DescribeDbProxyTargetGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargetGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_887 = writer.prefix("DBProxyName");
    if let Some(var_888) = &input.db_proxy_name {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]let mut scope_889 = writer.prefix("TargetGroupName");
    if let Some(var_890) = &input.target_group_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]let mut scope_891 = writer.prefix("Filters");
    if let Some(var_892) = &input.filters {
        let mut list_894 = scope_891.start_list(false, Some("Filter"));
        for item_893 in var_892 {
            #[allow(unused_mut)]let mut entry_895 = list_894.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_895, item_893)?;
        }
        list_894.finish();
    }
    #[allow(unused_mut)]let mut scope_896 = writer.prefix("Marker");
    if let Some(var_897) = &input.marker {
        scope_896.string(var_897);
    }
    #[allow(unused_mut)]let mut scope_898 = writer.prefix("MaxRecords");
    if let Some(var_899) = &input.max_records {
        scope_898.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_899).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_targets(input: &crate::input::DescribeDbProxyTargetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]let mut scope_900 = writer.prefix("DBProxyName");
    if let Some(var_901) = &input.db_proxy_name {
        scope_900.string(var_901);
    }
    #[allow(unused_mut)]let mut scope_902 = writer.prefix("TargetGroupName");
    if let Some(var_903) = &input.target_group_name {
        scope_902.string(var_903);
    }
    #[allow(unused_mut)]let mut scope_904 = writer.prefix("Filters");
    if let Some(var_905) = &input.filters {
        let mut list_907 = scope_904.start_list(false, Some("Filter"));
        for item_906 in var_905 {
            #[allow(unused_mut)]let mut entry_908 = list_907.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_908, item_906)?;
        }
        list_907.finish();
    }
    #[allow(unused_mut)]let mut scope_909 = writer.prefix("Marker");
    if let Some(var_910) = &input.marker {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]let mut scope_911 = writer.prefix("MaxRecords");
    if let Some(var_912) = &input.max_records {
        scope_911.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_912).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_security_groups(input: &crate::input::DescribeDbSecurityGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSecurityGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_913 = writer.prefix("DBSecurityGroupName");
    if let Some(var_914) = &input.db_security_group_name {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]let mut scope_915 = writer.prefix("Filters");
    if let Some(var_916) = &input.filters {
        let mut list_918 = scope_915.start_list(false, Some("Filter"));
        for item_917 in var_916 {
            #[allow(unused_mut)]let mut entry_919 = list_918.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_919, item_917)?;
        }
        list_918.finish();
    }
    #[allow(unused_mut)]let mut scope_920 = writer.prefix("MaxRecords");
    if let Some(var_921) = &input.max_records {
        scope_920.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_921).into()));
    }
    #[allow(unused_mut)]let mut scope_922 = writer.prefix("Marker");
    if let Some(var_923) = &input.marker {
        scope_922.string(var_923);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshot_attributes(input: &crate::input::DescribeDbSnapshotAttributesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshotAttributes", "2014-10-31");
    #[allow(unused_mut)]let mut scope_924 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_925) = &input.db_snapshot_identifier {
        scope_924.string(var_925);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshots(input: &crate::input::DescribeDbSnapshotsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshots", "2014-10-31");
    #[allow(unused_mut)]let mut scope_926 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_927) = &input.db_instance_identifier {
        scope_926.string(var_927);
    }
    #[allow(unused_mut)]let mut scope_928 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_929) = &input.db_snapshot_identifier {
        scope_928.string(var_929);
    }
    #[allow(unused_mut)]let mut scope_930 = writer.prefix("SnapshotType");
    if let Some(var_931) = &input.snapshot_type {
        scope_930.string(var_931);
    }
    #[allow(unused_mut)]let mut scope_932 = writer.prefix("Filters");
    if let Some(var_933) = &input.filters {
        let mut list_935 = scope_932.start_list(false, Some("Filter"));
        for item_934 in var_933 {
            #[allow(unused_mut)]let mut entry_936 = list_935.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_936, item_934)?;
        }
        list_935.finish();
    }
    #[allow(unused_mut)]let mut scope_937 = writer.prefix("MaxRecords");
    if let Some(var_938) = &input.max_records {
        scope_937.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_938).into()));
    }
    #[allow(unused_mut)]let mut scope_939 = writer.prefix("Marker");
    if let Some(var_940) = &input.marker {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]let mut scope_941 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_941.boolean(input.include_shared);
    }
    #[allow(unused_mut)]let mut scope_942 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_942.boolean(input.include_public);
    }
    #[allow(unused_mut)]let mut scope_943 = writer.prefix("DbiResourceId");
    if let Some(var_944) = &input.dbi_resource_id {
        scope_943.string(var_944);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(input: &crate::input::DescribeDbSubnetGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_945 = writer.prefix("DBSubnetGroupName");
    if let Some(var_946) = &input.db_subnet_group_name {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]let mut scope_947 = writer.prefix("Filters");
    if let Some(var_948) = &input.filters {
        let mut list_950 = scope_947.start_list(false, Some("Filter"));
        for item_949 in var_948 {
            #[allow(unused_mut)]let mut entry_951 = list_950.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_951, item_949)?;
        }
        list_950.finish();
    }
    #[allow(unused_mut)]let mut scope_952 = writer.prefix("MaxRecords");
    if let Some(var_953) = &input.max_records {
        scope_952.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_953).into()));
    }
    #[allow(unused_mut)]let mut scope_954 = writer.prefix("Marker");
    if let Some(var_955) = &input.marker {
        scope_954.string(var_955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(input: &crate::input::DescribeEngineDefaultClusterParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEngineDefaultClusterParameters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_956 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_957) = &input.db_parameter_group_family {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]let mut scope_958 = writer.prefix("Filters");
    if let Some(var_959) = &input.filters {
        let mut list_961 = scope_958.start_list(false, Some("Filter"));
        for item_960 in var_959 {
            #[allow(unused_mut)]let mut entry_962 = list_961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_962, item_960)?;
        }
        list_961.finish();
    }
    #[allow(unused_mut)]let mut scope_963 = writer.prefix("MaxRecords");
    if let Some(var_964) = &input.max_records {
        scope_963.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_964).into()));
    }
    #[allow(unused_mut)]let mut scope_965 = writer.prefix("Marker");
    if let Some(var_966) = &input.marker {
        scope_965.string(var_966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(input: &crate::input::DescribeEngineDefaultParametersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEngineDefaultParameters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_967 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_968) = &input.db_parameter_group_family {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]let mut scope_969 = writer.prefix("Filters");
    if let Some(var_970) = &input.filters {
        let mut list_972 = scope_969.start_list(false, Some("Filter"));
        for item_971 in var_970 {
            #[allow(unused_mut)]let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_973, item_971)?;
        }
        list_972.finish();
    }
    #[allow(unused_mut)]let mut scope_974 = writer.prefix("MaxRecords");
    if let Some(var_975) = &input.max_records {
        scope_974.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_975).into()));
    }
    #[allow(unused_mut)]let mut scope_976 = writer.prefix("Marker");
    if let Some(var_977) = &input.marker {
        scope_976.string(var_977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(input: &crate::input::DescribeEventCategoriesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]let mut scope_978 = writer.prefix("SourceType");
    if let Some(var_979) = &input.source_type {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]let mut scope_980 = writer.prefix("Filters");
    if let Some(var_981) = &input.filters {
        let mut list_983 = scope_980.start_list(false, Some("Filter"));
        for item_982 in var_981 {
            #[allow(unused_mut)]let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_984, item_982)?;
        }
        list_983.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(input: &crate::input::DescribeEventsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]let mut scope_985 = writer.prefix("SourceIdentifier");
    if let Some(var_986) = &input.source_identifier {
        scope_985.string(var_986);
    }
    #[allow(unused_mut)]let mut scope_987 = writer.prefix("SourceType");
    if let Some(var_988) = &input.source_type {
        scope_987.string(var_988.as_str());
    }
    #[allow(unused_mut)]let mut scope_989 = writer.prefix("StartTime");
    if let Some(var_990) = &input.start_time {
        scope_989.date_time(var_990, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_991 = writer.prefix("EndTime");
    if let Some(var_992) = &input.end_time {
        scope_991.date_time(var_992, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_993 = writer.prefix("Duration");
    if let Some(var_994) = &input.duration {
        scope_993.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_994).into()));
    }
    #[allow(unused_mut)]let mut scope_995 = writer.prefix("EventCategories");
    if let Some(var_996) = &input.event_categories {
        let mut list_998 = scope_995.start_list(false, Some("EventCategory"));
        for item_997 in var_996 {
            #[allow(unused_mut)]let mut entry_999 = list_998.entry();
            entry_999.string(item_997);
        }
        list_998.finish();
    }
    #[allow(unused_mut)]let mut scope_1000 = writer.prefix("Filters");
    if let Some(var_1001) = &input.filters {
        let mut list_1003 = scope_1000.start_list(false, Some("Filter"));
        for item_1002 in var_1001 {
            #[allow(unused_mut)]let mut entry_1004 = list_1003.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1004, item_1002)?;
        }
        list_1003.finish();
    }
    #[allow(unused_mut)]let mut scope_1005 = writer.prefix("MaxRecords");
    if let Some(var_1006) = &input.max_records {
        scope_1005.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1006).into()));
    }
    #[allow(unused_mut)]let mut scope_1007 = writer.prefix("Marker");
    if let Some(var_1008) = &input.marker {
        scope_1007.string(var_1008);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(input: &crate::input::DescribeEventSubscriptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1009 = writer.prefix("SubscriptionName");
    if let Some(var_1010) = &input.subscription_name {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]let mut scope_1011 = writer.prefix("Filters");
    if let Some(var_1012) = &input.filters {
        let mut list_1014 = scope_1011.start_list(false, Some("Filter"));
        for item_1013 in var_1012 {
            #[allow(unused_mut)]let mut entry_1015 = list_1014.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1015, item_1013)?;
        }
        list_1014.finish();
    }
    #[allow(unused_mut)]let mut scope_1016 = writer.prefix("MaxRecords");
    if let Some(var_1017) = &input.max_records {
        scope_1016.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1017).into()));
    }
    #[allow(unused_mut)]let mut scope_1018 = writer.prefix("Marker");
    if let Some(var_1019) = &input.marker {
        scope_1018.string(var_1019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(input: &crate::input::DescribeExportTasksInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1020 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_1021) = &input.export_task_identifier {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]let mut scope_1022 = writer.prefix("SourceArn");
    if let Some(var_1023) = &input.source_arn {
        scope_1022.string(var_1023);
    }
    #[allow(unused_mut)]let mut scope_1024 = writer.prefix("Filters");
    if let Some(var_1025) = &input.filters {
        let mut list_1027 = scope_1024.start_list(false, Some("Filter"));
        for item_1026 in var_1025 {
            #[allow(unused_mut)]let mut entry_1028 = list_1027.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1028, item_1026)?;
        }
        list_1027.finish();
    }
    #[allow(unused_mut)]let mut scope_1029 = writer.prefix("Marker");
    if let Some(var_1030) = &input.marker {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]let mut scope_1031 = writer.prefix("MaxRecords");
    if let Some(var_1032) = &input.max_records {
        scope_1031.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1032).into()));
    }
    #[allow(unused_mut)]let mut scope_1033 = writer.prefix("SourceType");
    if let Some(var_1034) = &input.source_type {
        scope_1033.string(var_1034.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(input: &crate::input::DescribeGlobalClustersInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1035 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1036) = &input.global_cluster_identifier {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]let mut scope_1037 = writer.prefix("Filters");
    if let Some(var_1038) = &input.filters {
        let mut list_1040 = scope_1037.start_list(false, Some("Filter"));
        for item_1039 in var_1038 {
            #[allow(unused_mut)]let mut entry_1041 = list_1040.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1041, item_1039)?;
        }
        list_1040.finish();
    }
    #[allow(unused_mut)]let mut scope_1042 = writer.prefix("MaxRecords");
    if let Some(var_1043) = &input.max_records {
        scope_1042.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1043).into()));
    }
    #[allow(unused_mut)]let mut scope_1044 = writer.prefix("Marker");
    if let Some(var_1045) = &input.marker {
        scope_1044.string(var_1045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_group_options(input: &crate::input::DescribeOptionGroupOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroupOptions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1046 = writer.prefix("EngineName");
    if let Some(var_1047) = &input.engine_name {
        scope_1046.string(var_1047);
    }
    #[allow(unused_mut)]let mut scope_1048 = writer.prefix("MajorEngineVersion");
    if let Some(var_1049) = &input.major_engine_version {
        scope_1048.string(var_1049);
    }
    #[allow(unused_mut)]let mut scope_1050 = writer.prefix("Filters");
    if let Some(var_1051) = &input.filters {
        let mut list_1053 = scope_1050.start_list(false, Some("Filter"));
        for item_1052 in var_1051 {
            #[allow(unused_mut)]let mut entry_1054 = list_1053.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1054, item_1052)?;
        }
        list_1053.finish();
    }
    #[allow(unused_mut)]let mut scope_1055 = writer.prefix("MaxRecords");
    if let Some(var_1056) = &input.max_records {
        scope_1055.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1056).into()));
    }
    #[allow(unused_mut)]let mut scope_1057 = writer.prefix("Marker");
    if let Some(var_1058) = &input.marker {
        scope_1057.string(var_1058);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_groups(input: &crate::input::DescribeOptionGroupsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroups", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1059 = writer.prefix("OptionGroupName");
    if let Some(var_1060) = &input.option_group_name {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]let mut scope_1061 = writer.prefix("Filters");
    if let Some(var_1062) = &input.filters {
        let mut list_1064 = scope_1061.start_list(false, Some("Filter"));
        for item_1063 in var_1062 {
            #[allow(unused_mut)]let mut entry_1065 = list_1064.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1065, item_1063)?;
        }
        list_1064.finish();
    }
    #[allow(unused_mut)]let mut scope_1066 = writer.prefix("Marker");
    if let Some(var_1067) = &input.marker {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]let mut scope_1068 = writer.prefix("MaxRecords");
    if let Some(var_1069) = &input.max_records {
        scope_1068.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1069).into()));
    }
    #[allow(unused_mut)]let mut scope_1070 = writer.prefix("EngineName");
    if let Some(var_1071) = &input.engine_name {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]let mut scope_1072 = writer.prefix("MajorEngineVersion");
    if let Some(var_1073) = &input.major_engine_version {
        scope_1072.string(var_1073);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(input: &crate::input::DescribeOrderableDbInstanceOptionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeOrderableDBInstanceOptions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1074 = writer.prefix("Engine");
    if let Some(var_1075) = &input.engine {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]let mut scope_1076 = writer.prefix("EngineVersion");
    if let Some(var_1077) = &input.engine_version {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]let mut scope_1078 = writer.prefix("DBInstanceClass");
    if let Some(var_1079) = &input.db_instance_class {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]let mut scope_1080 = writer.prefix("LicenseModel");
    if let Some(var_1081) = &input.license_model {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]let mut scope_1082 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_1083) = &input.availability_zone_group {
        scope_1082.string(var_1083);
    }
    #[allow(unused_mut)]let mut scope_1084 = writer.prefix("Vpc");
    if let Some(var_1085) = &input.vpc {
        scope_1084.boolean(*var_1085);
    }
    #[allow(unused_mut)]let mut scope_1086 = writer.prefix("Filters");
    if let Some(var_1087) = &input.filters {
        let mut list_1089 = scope_1086.start_list(false, Some("Filter"));
        for item_1088 in var_1087 {
            #[allow(unused_mut)]let mut entry_1090 = list_1089.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1090, item_1088)?;
        }
        list_1089.finish();
    }
    #[allow(unused_mut)]let mut scope_1091 = writer.prefix("MaxRecords");
    if let Some(var_1092) = &input.max_records {
        scope_1091.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1092).into()));
    }
    #[allow(unused_mut)]let mut scope_1093 = writer.prefix("Marker");
    if let Some(var_1094) = &input.marker {
        scope_1093.string(var_1094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(input: &crate::input::DescribePendingMaintenanceActionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePendingMaintenanceActions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1095 = writer.prefix("ResourceIdentifier");
    if let Some(var_1096) = &input.resource_identifier {
        scope_1095.string(var_1096);
    }
    #[allow(unused_mut)]let mut scope_1097 = writer.prefix("Filters");
    if let Some(var_1098) = &input.filters {
        let mut list_1100 = scope_1097.start_list(false, Some("Filter"));
        for item_1099 in var_1098 {
            #[allow(unused_mut)]let mut entry_1101 = list_1100.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1101, item_1099)?;
        }
        list_1100.finish();
    }
    #[allow(unused_mut)]let mut scope_1102 = writer.prefix("Marker");
    if let Some(var_1103) = &input.marker {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]let mut scope_1104 = writer.prefix("MaxRecords");
    if let Some(var_1105) = &input.max_records {
        scope_1104.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1105).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances(input: &crate::input::DescribeReservedDbInstancesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedDBInstances", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1106 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1107) = &input.reserved_db_instance_id {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]let mut scope_1108 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1109) = &input.reserved_db_instances_offering_id {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]let mut scope_1110 = writer.prefix("DBInstanceClass");
    if let Some(var_1111) = &input.db_instance_class {
        scope_1110.string(var_1111);
    }
    #[allow(unused_mut)]let mut scope_1112 = writer.prefix("Duration");
    if let Some(var_1113) = &input.duration {
        scope_1112.string(var_1113);
    }
    #[allow(unused_mut)]let mut scope_1114 = writer.prefix("ProductDescription");
    if let Some(var_1115) = &input.product_description {
        scope_1114.string(var_1115);
    }
    #[allow(unused_mut)]let mut scope_1116 = writer.prefix("OfferingType");
    if let Some(var_1117) = &input.offering_type {
        scope_1116.string(var_1117);
    }
    #[allow(unused_mut)]let mut scope_1118 = writer.prefix("MultiAZ");
    if let Some(var_1119) = &input.multi_az {
        scope_1118.boolean(*var_1119);
    }
    #[allow(unused_mut)]let mut scope_1120 = writer.prefix("LeaseId");
    if let Some(var_1121) = &input.lease_id {
        scope_1120.string(var_1121);
    }
    #[allow(unused_mut)]let mut scope_1122 = writer.prefix("Filters");
    if let Some(var_1123) = &input.filters {
        let mut list_1125 = scope_1122.start_list(false, Some("Filter"));
        for item_1124 in var_1123 {
            #[allow(unused_mut)]let mut entry_1126 = list_1125.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1126, item_1124)?;
        }
        list_1125.finish();
    }
    #[allow(unused_mut)]let mut scope_1127 = writer.prefix("MaxRecords");
    if let Some(var_1128) = &input.max_records {
        scope_1127.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1128).into()));
    }
    #[allow(unused_mut)]let mut scope_1129 = writer.prefix("Marker");
    if let Some(var_1130) = &input.marker {
        scope_1129.string(var_1130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances_offerings(input: &crate::input::DescribeReservedDbInstancesOfferingsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedDBInstancesOfferings", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1131 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1132) = &input.reserved_db_instances_offering_id {
        scope_1131.string(var_1132);
    }
    #[allow(unused_mut)]let mut scope_1133 = writer.prefix("DBInstanceClass");
    if let Some(var_1134) = &input.db_instance_class {
        scope_1133.string(var_1134);
    }
    #[allow(unused_mut)]let mut scope_1135 = writer.prefix("Duration");
    if let Some(var_1136) = &input.duration {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]let mut scope_1137 = writer.prefix("ProductDescription");
    if let Some(var_1138) = &input.product_description {
        scope_1137.string(var_1138);
    }
    #[allow(unused_mut)]let mut scope_1139 = writer.prefix("OfferingType");
    if let Some(var_1140) = &input.offering_type {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]let mut scope_1141 = writer.prefix("MultiAZ");
    if let Some(var_1142) = &input.multi_az {
        scope_1141.boolean(*var_1142);
    }
    #[allow(unused_mut)]let mut scope_1143 = writer.prefix("Filters");
    if let Some(var_1144) = &input.filters {
        let mut list_1146 = scope_1143.start_list(false, Some("Filter"));
        for item_1145 in var_1144 {
            #[allow(unused_mut)]let mut entry_1147 = list_1146.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1147, item_1145)?;
        }
        list_1146.finish();
    }
    #[allow(unused_mut)]let mut scope_1148 = writer.prefix("MaxRecords");
    if let Some(var_1149) = &input.max_records {
        scope_1148.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1149).into()));
    }
    #[allow(unused_mut)]let mut scope_1150 = writer.prefix("Marker");
    if let Some(var_1151) = &input.marker {
        scope_1150.string(var_1151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_source_regions(input: &crate::input::DescribeSourceRegionsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSourceRegions", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1152 = writer.prefix("RegionName");
    if let Some(var_1153) = &input.region_name {
        scope_1152.string(var_1153);
    }
    #[allow(unused_mut)]let mut scope_1154 = writer.prefix("MaxRecords");
    if let Some(var_1155) = &input.max_records {
        scope_1154.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1155).into()));
    }
    #[allow(unused_mut)]let mut scope_1156 = writer.prefix("Marker");
    if let Some(var_1157) = &input.marker {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]let mut scope_1158 = writer.prefix("Filters");
    if let Some(var_1159) = &input.filters {
        let mut list_1161 = scope_1158.start_list(false, Some("Filter"));
        for item_1160 in var_1159 {
            #[allow(unused_mut)]let mut entry_1162 = list_1161.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1162, item_1160)?;
        }
        list_1161.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(input: &crate::input::DescribeValidDbInstanceModificationsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeValidDBInstanceModifications", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1163 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1164) = &input.db_instance_identifier {
        scope_1163.string(var_1164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_download_db_log_file_portion(input: &crate::input::DownloadDbLogFilePortionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DownloadDBLogFilePortion", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1165 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1166) = &input.db_instance_identifier {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]let mut scope_1167 = writer.prefix("LogFileName");
    if let Some(var_1168) = &input.log_file_name {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]let mut scope_1169 = writer.prefix("Marker");
    if let Some(var_1170) = &input.marker {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]let mut scope_1171 = writer.prefix("NumberOfLines");
    if input.number_of_lines != 0 {
        scope_1171.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_lines).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(input: &crate::input::FailoverDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1172 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1173) = &input.db_cluster_identifier {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]let mut scope_1174 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1175) = &input.target_db_instance_identifier {
        scope_1174.string(var_1175);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_cluster(input: &crate::input::FailoverGlobalClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1176 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1177) = &input.global_cluster_identifier {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]let mut scope_1178 = writer.prefix("TargetDbClusterIdentifier");
    if let Some(var_1179) = &input.target_db_cluster_identifier {
        scope_1178.string(var_1179);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(input: &crate::input::ListTagsForResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1180 = writer.prefix("ResourceName");
    if let Some(var_1181) = &input.resource_name {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]let mut scope_1182 = writer.prefix("Filters");
    if let Some(var_1183) = &input.filters {
        let mut list_1185 = scope_1182.start_list(false, Some("Filter"));
        for item_1184 in var_1183 {
            #[allow(unused_mut)]let mut entry_1186 = list_1185.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1186, item_1184)?;
        }
        list_1185.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_activity_stream(input: &crate::input::ModifyActivityStreamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyActivityStream", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1187 = writer.prefix("ResourceArn");
    if let Some(var_1188) = &input.resource_arn {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]let mut scope_1189 = writer.prefix("AuditPolicyState");
    if let Some(var_1190) = &input.audit_policy_state {
        scope_1189.string(var_1190.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_certificates(input: &crate::input::ModifyCertificatesInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCertificates", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1191 = writer.prefix("CertificateIdentifier");
    if let Some(var_1192) = &input.certificate_identifier {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]let mut scope_1193 = writer.prefix("RemoveCustomerOverride");
    if let Some(var_1194) = &input.remove_customer_override {
        scope_1193.boolean(*var_1194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_current_db_cluster_capacity(input: &crate::input::ModifyCurrentDbClusterCapacityInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCurrentDBClusterCapacity", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1195 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1196) = &input.db_cluster_identifier {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]let mut scope_1197 = writer.prefix("Capacity");
    if let Some(var_1198) = &input.capacity {
        scope_1197.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1198).into()));
    }
    #[allow(unused_mut)]let mut scope_1199 = writer.prefix("SecondsBeforeTimeout");
    if let Some(var_1200) = &input.seconds_before_timeout {
        scope_1199.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1200).into()));
    }
    #[allow(unused_mut)]let mut scope_1201 = writer.prefix("TimeoutAction");
    if let Some(var_1202) = &input.timeout_action {
        scope_1201.string(var_1202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_custom_db_engine_version(input: &crate::input::ModifyCustomDbEngineVersionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1203 = writer.prefix("Engine");
    if let Some(var_1204) = &input.engine {
        scope_1203.string(var_1204);
    }
    #[allow(unused_mut)]let mut scope_1205 = writer.prefix("EngineVersion");
    if let Some(var_1206) = &input.engine_version {
        scope_1205.string(var_1206);
    }
    #[allow(unused_mut)]let mut scope_1207 = writer.prefix("Description");
    if let Some(var_1208) = &input.description {
        scope_1207.string(var_1208);
    }
    #[allow(unused_mut)]let mut scope_1209 = writer.prefix("Status");
    if let Some(var_1210) = &input.status {
        scope_1209.string(var_1210.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(input: &crate::input::ModifyDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1211 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1212) = &input.db_cluster_identifier {
        scope_1211.string(var_1212);
    }
    #[allow(unused_mut)]let mut scope_1213 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_1214) = &input.new_db_cluster_identifier {
        scope_1213.string(var_1214);
    }
    #[allow(unused_mut)]let mut scope_1215 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1215.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_1216 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1217) = &input.backup_retention_period {
        scope_1216.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1217).into()));
    }
    #[allow(unused_mut)]let mut scope_1218 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1219) = &input.db_cluster_parameter_group_name {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]let mut scope_1220 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1221) = &input.vpc_security_group_ids {
        let mut list_1223 = scope_1220.start_list(false, Some("VpcSecurityGroupId"));
        for item_1222 in var_1221 {
            #[allow(unused_mut)]let mut entry_1224 = list_1223.entry();
            entry_1224.string(item_1222);
        }
        list_1223.finish();
    }
    #[allow(unused_mut)]let mut scope_1225 = writer.prefix("Port");
    if let Some(var_1226) = &input.port {
        scope_1225.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1226).into()));
    }
    #[allow(unused_mut)]let mut scope_1227 = writer.prefix("MasterUserPassword");
    if let Some(var_1228) = &input.master_user_password {
        scope_1227.string(var_1228);
    }
    #[allow(unused_mut)]let mut scope_1229 = writer.prefix("OptionGroupName");
    if let Some(var_1230) = &input.option_group_name {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]let mut scope_1231 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1232) = &input.preferred_backup_window {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]let mut scope_1233 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1234) = &input.preferred_maintenance_window {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]let mut scope_1235 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1236) = &input.enable_iam_database_authentication {
        scope_1235.boolean(*var_1236);
    }
    #[allow(unused_mut)]let mut scope_1237 = writer.prefix("BacktrackWindow");
    if let Some(var_1238) = &input.backtrack_window {
        scope_1237.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1238).into()));
    }
    #[allow(unused_mut)]let mut scope_1239 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1240) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(scope_1239, var_1240)?;
    }
    #[allow(unused_mut)]let mut scope_1241 = writer.prefix("EngineVersion");
    if let Some(var_1242) = &input.engine_version {
        scope_1241.string(var_1242);
    }
    #[allow(unused_mut)]let mut scope_1243 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1243.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]let mut scope_1244 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_1245) = &input.db_instance_parameter_group_name {
        scope_1244.string(var_1245);
    }
    #[allow(unused_mut)]let mut scope_1246 = writer.prefix("Domain");
    if let Some(var_1247) = &input.domain {
        scope_1246.string(var_1247);
    }
    #[allow(unused_mut)]let mut scope_1248 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1249) = &input.domain_iam_role_name {
        scope_1248.string(var_1249);
    }
    #[allow(unused_mut)]let mut scope_1250 = writer.prefix("ScalingConfiguration");
    if let Some(var_1251) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(scope_1250, var_1251)?;
    }
    #[allow(unused_mut)]let mut scope_1252 = writer.prefix("DeletionProtection");
    if let Some(var_1253) = &input.deletion_protection {
        scope_1252.boolean(*var_1253);
    }
    #[allow(unused_mut)]let mut scope_1254 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_1255) = &input.enable_http_endpoint {
        scope_1254.boolean(*var_1255);
    }
    #[allow(unused_mut)]let mut scope_1256 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1257) = &input.copy_tags_to_snapshot {
        scope_1256.boolean(*var_1257);
    }
    #[allow(unused_mut)]let mut scope_1258 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_1259) = &input.enable_global_write_forwarding {
        scope_1258.boolean(*var_1259);
    }
    #[allow(unused_mut)]let mut scope_1260 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1261) = &input.db_cluster_instance_class {
        scope_1260.string(var_1261);
    }
    #[allow(unused_mut)]let mut scope_1262 = writer.prefix("AllocatedStorage");
    if let Some(var_1263) = &input.allocated_storage {
        scope_1262.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1263).into()));
    }
    #[allow(unused_mut)]let mut scope_1264 = writer.prefix("StorageType");
    if let Some(var_1265) = &input.storage_type {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]let mut scope_1266 = writer.prefix("Iops");
    if let Some(var_1267) = &input.iops {
        scope_1266.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1267).into()));
    }
    #[allow(unused_mut)]let mut scope_1268 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1269) = &input.auto_minor_version_upgrade {
        scope_1268.boolean(*var_1269);
    }
    #[allow(unused_mut)]let mut scope_1270 = writer.prefix("MonitoringInterval");
    if let Some(var_1271) = &input.monitoring_interval {
        scope_1270.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1271).into()));
    }
    #[allow(unused_mut)]let mut scope_1272 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1273) = &input.monitoring_role_arn {
        scope_1272.string(var_1273);
    }
    #[allow(unused_mut)]let mut scope_1274 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1275) = &input.enable_performance_insights {
        scope_1274.boolean(*var_1275);
    }
    #[allow(unused_mut)]let mut scope_1276 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1277) = &input.performance_insights_kms_key_id {
        scope_1276.string(var_1277);
    }
    #[allow(unused_mut)]let mut scope_1278 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1279) = &input.performance_insights_retention_period {
        scope_1278.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1279).into()));
    }
    #[allow(unused_mut)]let mut scope_1280 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1281) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(scope_1280, var_1281)?;
    }
    #[allow(unused_mut)]let mut scope_1282 = writer.prefix("NetworkType");
    if let Some(var_1283) = &input.network_type {
        scope_1282.string(var_1283);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(input: &crate::input::ModifyDbClusterEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1284 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_1285) = &input.db_cluster_endpoint_identifier {
        scope_1284.string(var_1285);
    }
    #[allow(unused_mut)]let mut scope_1286 = writer.prefix("EndpointType");
    if let Some(var_1287) = &input.endpoint_type {
        scope_1286.string(var_1287);
    }
    #[allow(unused_mut)]let mut scope_1288 = writer.prefix("StaticMembers");
    if let Some(var_1289) = &input.static_members {
        let mut list_1291 = scope_1288.start_list(false, None);
        for item_1290 in var_1289 {
            #[allow(unused_mut)]let mut entry_1292 = list_1291.entry();
            entry_1292.string(item_1290);
        }
        list_1291.finish();
    }
    #[allow(unused_mut)]let mut scope_1293 = writer.prefix("ExcludedMembers");
    if let Some(var_1294) = &input.excluded_members {
        let mut list_1296 = scope_1293.start_list(false, None);
        for item_1295 in var_1294 {
            #[allow(unused_mut)]let mut entry_1297 = list_1296.entry();
            entry_1297.string(item_1295);
        }
        list_1296.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(input: &crate::input::ModifyDbClusterParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1298 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1299) = &input.db_cluster_parameter_group_name {
        scope_1298.string(var_1299);
    }
    #[allow(unused_mut)]let mut scope_1300 = writer.prefix("Parameters");
    if let Some(var_1301) = &input.parameters {
        let mut list_1303 = scope_1300.start_list(false, Some("Parameter"));
        for item_1302 in var_1301 {
            #[allow(unused_mut)]let mut entry_1304 = list_1303.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1304, item_1302)?;
        }
        list_1303.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(input: &crate::input::ModifyDbClusterSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1305 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_1306) = &input.db_cluster_snapshot_identifier {
        scope_1305.string(var_1306);
    }
    #[allow(unused_mut)]let mut scope_1307 = writer.prefix("AttributeName");
    if let Some(var_1308) = &input.attribute_name {
        scope_1307.string(var_1308);
    }
    #[allow(unused_mut)]let mut scope_1309 = writer.prefix("ValuesToAdd");
    if let Some(var_1310) = &input.values_to_add {
        let mut list_1312 = scope_1309.start_list(false, Some("AttributeValue"));
        for item_1311 in var_1310 {
            #[allow(unused_mut)]let mut entry_1313 = list_1312.entry();
            entry_1313.string(item_1311);
        }
        list_1312.finish();
    }
    #[allow(unused_mut)]let mut scope_1314 = writer.prefix("ValuesToRemove");
    if let Some(var_1315) = &input.values_to_remove {
        let mut list_1317 = scope_1314.start_list(false, Some("AttributeValue"));
        for item_1316 in var_1315 {
            #[allow(unused_mut)]let mut entry_1318 = list_1317.entry();
            entry_1318.string(item_1316);
        }
        list_1317.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(input: &crate::input::ModifyDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1319 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1320) = &input.db_instance_identifier {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]let mut scope_1321 = writer.prefix("AllocatedStorage");
    if let Some(var_1322) = &input.allocated_storage {
        scope_1321.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1322).into()));
    }
    #[allow(unused_mut)]let mut scope_1323 = writer.prefix("DBInstanceClass");
    if let Some(var_1324) = &input.db_instance_class {
        scope_1323.string(var_1324);
    }
    #[allow(unused_mut)]let mut scope_1325 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1326) = &input.db_subnet_group_name {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]let mut scope_1327 = writer.prefix("DBSecurityGroups");
    if let Some(var_1328) = &input.db_security_groups {
        let mut list_1330 = scope_1327.start_list(false, Some("DBSecurityGroupName"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]let mut entry_1331 = list_1330.entry();
            entry_1331.string(item_1329);
        }
        list_1330.finish();
    }
    #[allow(unused_mut)]let mut scope_1332 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1333) = &input.vpc_security_group_ids {
        let mut list_1335 = scope_1332.start_list(false, Some("VpcSecurityGroupId"));
        for item_1334 in var_1333 {
            #[allow(unused_mut)]let mut entry_1336 = list_1335.entry();
            entry_1336.string(item_1334);
        }
        list_1335.finish();
    }
    #[allow(unused_mut)]let mut scope_1337 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1337.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]let mut scope_1338 = writer.prefix("MasterUserPassword");
    if let Some(var_1339) = &input.master_user_password {
        scope_1338.string(var_1339);
    }
    #[allow(unused_mut)]let mut scope_1340 = writer.prefix("DBParameterGroupName");
    if let Some(var_1341) = &input.db_parameter_group_name {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]let mut scope_1342 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1343) = &input.backup_retention_period {
        scope_1342.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1343).into()));
    }
    #[allow(unused_mut)]let mut scope_1344 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1345) = &input.preferred_backup_window {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]let mut scope_1346 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1347) = &input.preferred_maintenance_window {
        scope_1346.string(var_1347);
    }
    #[allow(unused_mut)]let mut scope_1348 = writer.prefix("MultiAZ");
    if let Some(var_1349) = &input.multi_az {
        scope_1348.boolean(*var_1349);
    }
    #[allow(unused_mut)]let mut scope_1350 = writer.prefix("EngineVersion");
    if let Some(var_1351) = &input.engine_version {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]let mut scope_1352 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1352.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]let mut scope_1353 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1354) = &input.auto_minor_version_upgrade {
        scope_1353.boolean(*var_1354);
    }
    #[allow(unused_mut)]let mut scope_1355 = writer.prefix("LicenseModel");
    if let Some(var_1356) = &input.license_model {
        scope_1355.string(var_1356);
    }
    #[allow(unused_mut)]let mut scope_1357 = writer.prefix("Iops");
    if let Some(var_1358) = &input.iops {
        scope_1357.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1358).into()));
    }
    #[allow(unused_mut)]let mut scope_1359 = writer.prefix("OptionGroupName");
    if let Some(var_1360) = &input.option_group_name {
        scope_1359.string(var_1360);
    }
    #[allow(unused_mut)]let mut scope_1361 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_1362) = &input.new_db_instance_identifier {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]let mut scope_1363 = writer.prefix("StorageType");
    if let Some(var_1364) = &input.storage_type {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]let mut scope_1365 = writer.prefix("TdeCredentialArn");
    if let Some(var_1366) = &input.tde_credential_arn {
        scope_1365.string(var_1366);
    }
    #[allow(unused_mut)]let mut scope_1367 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1368) = &input.tde_credential_password {
        scope_1367.string(var_1368);
    }
    #[allow(unused_mut)]let mut scope_1369 = writer.prefix("CACertificateIdentifier");
    if let Some(var_1370) = &input.ca_certificate_identifier {
        scope_1369.string(var_1370);
    }
    #[allow(unused_mut)]let mut scope_1371 = writer.prefix("Domain");
    if let Some(var_1372) = &input.domain {
        scope_1371.string(var_1372);
    }
    #[allow(unused_mut)]let mut scope_1373 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1374) = &input.copy_tags_to_snapshot {
        scope_1373.boolean(*var_1374);
    }
    #[allow(unused_mut)]let mut scope_1375 = writer.prefix("MonitoringInterval");
    if let Some(var_1376) = &input.monitoring_interval {
        scope_1375.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1376).into()));
    }
    #[allow(unused_mut)]let mut scope_1377 = writer.prefix("DBPortNumber");
    if let Some(var_1378) = &input.db_port_number {
        scope_1377.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1378).into()));
    }
    #[allow(unused_mut)]let mut scope_1379 = writer.prefix("PubliclyAccessible");
    if let Some(var_1380) = &input.publicly_accessible {
        scope_1379.boolean(*var_1380);
    }
    #[allow(unused_mut)]let mut scope_1381 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1382) = &input.monitoring_role_arn {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]let mut scope_1383 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1384) = &input.domain_iam_role_name {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]let mut scope_1385 = writer.prefix("PromotionTier");
    if let Some(var_1386) = &input.promotion_tier {
        scope_1385.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1386).into()));
    }
    #[allow(unused_mut)]let mut scope_1387 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1388) = &input.enable_iam_database_authentication {
        scope_1387.boolean(*var_1388);
    }
    #[allow(unused_mut)]let mut scope_1389 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1390) = &input.enable_performance_insights {
        scope_1389.boolean(*var_1390);
    }
    #[allow(unused_mut)]let mut scope_1391 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1392) = &input.performance_insights_kms_key_id {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]let mut scope_1393 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1394) = &input.performance_insights_retention_period {
        scope_1393.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1394).into()));
    }
    #[allow(unused_mut)]let mut scope_1395 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1396) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(scope_1395, var_1396)?;
    }
    #[allow(unused_mut)]let mut scope_1397 = writer.prefix("ProcessorFeatures");
    if let Some(var_1398) = &input.processor_features {
        let mut list_1400 = scope_1397.start_list(false, Some("ProcessorFeature"));
        for item_1399 in var_1398 {
            #[allow(unused_mut)]let mut entry_1401 = list_1400.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_1401, item_1399)?;
        }
        list_1400.finish();
    }
    #[allow(unused_mut)]let mut scope_1402 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1403) = &input.use_default_processor_features {
        scope_1402.boolean(*var_1403);
    }
    #[allow(unused_mut)]let mut scope_1404 = writer.prefix("DeletionProtection");
    if let Some(var_1405) = &input.deletion_protection {
        scope_1404.boolean(*var_1405);
    }
    #[allow(unused_mut)]let mut scope_1406 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1407) = &input.max_allocated_storage {
        scope_1406.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1407).into()));
    }
    #[allow(unused_mut)]let mut scope_1408 = writer.prefix("CertificateRotationRestart");
    if let Some(var_1409) = &input.certificate_rotation_restart {
        scope_1408.boolean(*var_1409);
    }
    #[allow(unused_mut)]let mut scope_1410 = writer.prefix("ReplicaMode");
    if let Some(var_1411) = &input.replica_mode {
        scope_1410.string(var_1411.as_str());
    }
    #[allow(unused_mut)]let mut scope_1412 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1413) = &input.enable_customer_owned_ip {
        scope_1412.boolean(*var_1413);
    }
    #[allow(unused_mut)]let mut scope_1414 = writer.prefix("AwsBackupRecoveryPointArn");
    if let Some(var_1415) = &input.aws_backup_recovery_point_arn {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]let mut scope_1416 = writer.prefix("AutomationMode");
    if let Some(var_1417) = &input.automation_mode {
        scope_1416.string(var_1417.as_str());
    }
    #[allow(unused_mut)]let mut scope_1418 = writer.prefix("ResumeFullAutomationModeMinutes");
    if let Some(var_1419) = &input.resume_full_automation_mode_minutes {
        scope_1418.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1419).into()));
    }
    #[allow(unused_mut)]let mut scope_1420 = writer.prefix("NetworkType");
    if let Some(var_1421) = &input.network_type {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]let mut scope_1422 = writer.prefix("StorageThroughput");
    if let Some(var_1423) = &input.storage_throughput {
        scope_1422.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1423).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(input: &crate::input::ModifyDbParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1424 = writer.prefix("DBParameterGroupName");
    if let Some(var_1425) = &input.db_parameter_group_name {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]let mut scope_1426 = writer.prefix("Parameters");
    if let Some(var_1427) = &input.parameters {
        let mut list_1429 = scope_1426.start_list(false, Some("Parameter"));
        for item_1428 in var_1427 {
            #[allow(unused_mut)]let mut entry_1430 = list_1429.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1430, item_1428)?;
        }
        list_1429.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy(input: &crate::input::ModifyDbProxyInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxy", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1431 = writer.prefix("DBProxyName");
    if let Some(var_1432) = &input.db_proxy_name {
        scope_1431.string(var_1432);
    }
    #[allow(unused_mut)]let mut scope_1433 = writer.prefix("NewDBProxyName");
    if let Some(var_1434) = &input.new_db_proxy_name {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]let mut scope_1435 = writer.prefix("Auth");
    if let Some(var_1436) = &input.auth {
        let mut list_1438 = scope_1435.start_list(false, None);
        for item_1437 in var_1436 {
            #[allow(unused_mut)]let mut entry_1439 = list_1438.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(entry_1439, item_1437)?;
        }
        list_1438.finish();
    }
    #[allow(unused_mut)]let mut scope_1440 = writer.prefix("RequireTLS");
    if let Some(var_1441) = &input.require_tls {
        scope_1440.boolean(*var_1441);
    }
    #[allow(unused_mut)]let mut scope_1442 = writer.prefix("IdleClientTimeout");
    if let Some(var_1443) = &input.idle_client_timeout {
        scope_1442.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1443).into()));
    }
    #[allow(unused_mut)]let mut scope_1444 = writer.prefix("DebugLogging");
    if let Some(var_1445) = &input.debug_logging {
        scope_1444.boolean(*var_1445);
    }
    #[allow(unused_mut)]let mut scope_1446 = writer.prefix("RoleArn");
    if let Some(var_1447) = &input.role_arn {
        scope_1446.string(var_1447);
    }
    #[allow(unused_mut)]let mut scope_1448 = writer.prefix("SecurityGroups");
    if let Some(var_1449) = &input.security_groups {
        let mut list_1451 = scope_1448.start_list(false, None);
        for item_1450 in var_1449 {
            #[allow(unused_mut)]let mut entry_1452 = list_1451.entry();
            entry_1452.string(item_1450);
        }
        list_1451.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_endpoint(input: &crate::input::ModifyDbProxyEndpointInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1453 = writer.prefix("DBProxyEndpointName");
    if let Some(var_1454) = &input.db_proxy_endpoint_name {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]let mut scope_1455 = writer.prefix("NewDBProxyEndpointName");
    if let Some(var_1456) = &input.new_db_proxy_endpoint_name {
        scope_1455.string(var_1456);
    }
    #[allow(unused_mut)]let mut scope_1457 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1458) = &input.vpc_security_group_ids {
        let mut list_1460 = scope_1457.start_list(false, None);
        for item_1459 in var_1458 {
            #[allow(unused_mut)]let mut entry_1461 = list_1460.entry();
            entry_1461.string(item_1459);
        }
        list_1460.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_target_group(input: &crate::input::ModifyDbProxyTargetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyTargetGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1462 = writer.prefix("TargetGroupName");
    if let Some(var_1463) = &input.target_group_name {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]let mut scope_1464 = writer.prefix("DBProxyName");
    if let Some(var_1465) = &input.db_proxy_name {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]let mut scope_1466 = writer.prefix("ConnectionPoolConfig");
    if let Some(var_1467) = &input.connection_pool_config {
        crate::query_ser::serialize_structure_crate_model_connection_pool_configuration(scope_1466, var_1467)?;
    }
    #[allow(unused_mut)]let mut scope_1468 = writer.prefix("NewName");
    if let Some(var_1469) = &input.new_name {
        scope_1468.string(var_1469);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot(input: &crate::input::ModifyDbSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1470 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1471) = &input.db_snapshot_identifier {
        scope_1470.string(var_1471);
    }
    #[allow(unused_mut)]let mut scope_1472 = writer.prefix("EngineVersion");
    if let Some(var_1473) = &input.engine_version {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]let mut scope_1474 = writer.prefix("OptionGroupName");
    if let Some(var_1475) = &input.option_group_name {
        scope_1474.string(var_1475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot_attribute(input: &crate::input::ModifyDbSnapshotAttributeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1476 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1477) = &input.db_snapshot_identifier {
        scope_1476.string(var_1477);
    }
    #[allow(unused_mut)]let mut scope_1478 = writer.prefix("AttributeName");
    if let Some(var_1479) = &input.attribute_name {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]let mut scope_1480 = writer.prefix("ValuesToAdd");
    if let Some(var_1481) = &input.values_to_add {
        let mut list_1483 = scope_1480.start_list(false, Some("AttributeValue"));
        for item_1482 in var_1481 {
            #[allow(unused_mut)]let mut entry_1484 = list_1483.entry();
            entry_1484.string(item_1482);
        }
        list_1483.finish();
    }
    #[allow(unused_mut)]let mut scope_1485 = writer.prefix("ValuesToRemove");
    if let Some(var_1486) = &input.values_to_remove {
        let mut list_1488 = scope_1485.start_list(false, Some("AttributeValue"));
        for item_1487 in var_1486 {
            #[allow(unused_mut)]let mut entry_1489 = list_1488.entry();
            entry_1489.string(item_1487);
        }
        list_1488.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(input: &crate::input::ModifyDbSubnetGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1490 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1491) = &input.db_subnet_group_name {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]let mut scope_1492 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_1493) = &input.db_subnet_group_description {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]let mut scope_1494 = writer.prefix("SubnetIds");
    if let Some(var_1495) = &input.subnet_ids {
        let mut list_1497 = scope_1494.start_list(false, Some("SubnetIdentifier"));
        for item_1496 in var_1495 {
            #[allow(unused_mut)]let mut entry_1498 = list_1497.entry();
            entry_1498.string(item_1496);
        }
        list_1497.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(input: &crate::input::ModifyEventSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1499 = writer.prefix("SubscriptionName");
    if let Some(var_1500) = &input.subscription_name {
        scope_1499.string(var_1500);
    }
    #[allow(unused_mut)]let mut scope_1501 = writer.prefix("SnsTopicArn");
    if let Some(var_1502) = &input.sns_topic_arn {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]let mut scope_1503 = writer.prefix("SourceType");
    if let Some(var_1504) = &input.source_type {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]let mut scope_1505 = writer.prefix("EventCategories");
    if let Some(var_1506) = &input.event_categories {
        let mut list_1508 = scope_1505.start_list(false, Some("EventCategory"));
        for item_1507 in var_1506 {
            #[allow(unused_mut)]let mut entry_1509 = list_1508.entry();
            entry_1509.string(item_1507);
        }
        list_1508.finish();
    }
    #[allow(unused_mut)]let mut scope_1510 = writer.prefix("Enabled");
    if let Some(var_1511) = &input.enabled {
        scope_1510.boolean(*var_1511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(input: &crate::input::ModifyGlobalClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1512 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1513) = &input.global_cluster_identifier {
        scope_1512.string(var_1513);
    }
    #[allow(unused_mut)]let mut scope_1514 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_1515) = &input.new_global_cluster_identifier {
        scope_1514.string(var_1515);
    }
    #[allow(unused_mut)]let mut scope_1516 = writer.prefix("DeletionProtection");
    if let Some(var_1517) = &input.deletion_protection {
        scope_1516.boolean(*var_1517);
    }
    #[allow(unused_mut)]let mut scope_1518 = writer.prefix("EngineVersion");
    if let Some(var_1519) = &input.engine_version {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]let mut scope_1520 = writer.prefix("AllowMajorVersionUpgrade");
    if let Some(var_1521) = &input.allow_major_version_upgrade {
        scope_1520.boolean(*var_1521);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_option_group(input: &crate::input::ModifyOptionGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1522 = writer.prefix("OptionGroupName");
    if let Some(var_1523) = &input.option_group_name {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]let mut scope_1524 = writer.prefix("OptionsToInclude");
    if let Some(var_1525) = &input.options_to_include {
        let mut list_1527 = scope_1524.start_list(false, Some("OptionConfiguration"));
        for item_1526 in var_1525 {
            #[allow(unused_mut)]let mut entry_1528 = list_1527.entry();
            crate::query_ser::serialize_structure_crate_model_option_configuration(entry_1528, item_1526)?;
        }
        list_1527.finish();
    }
    #[allow(unused_mut)]let mut scope_1529 = writer.prefix("OptionsToRemove");
    if let Some(var_1530) = &input.options_to_remove {
        let mut list_1532 = scope_1529.start_list(false, None);
        for item_1531 in var_1530 {
            #[allow(unused_mut)]let mut entry_1533 = list_1532.entry();
            entry_1533.string(item_1531);
        }
        list_1532.finish();
    }
    #[allow(unused_mut)]let mut scope_1534 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1534.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica(input: &crate::input::PromoteReadReplicaInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplica", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1535 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1536) = &input.db_instance_identifier {
        scope_1535.string(var_1536);
    }
    #[allow(unused_mut)]let mut scope_1537 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1538) = &input.backup_retention_period {
        scope_1537.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1538).into()));
    }
    #[allow(unused_mut)]let mut scope_1539 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1540) = &input.preferred_backup_window {
        scope_1539.string(var_1540);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(input: &crate::input::PromoteReadReplicaDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1541 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1542) = &input.db_cluster_identifier {
        scope_1541.string(var_1542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_db_instances_offering(input: &crate::input::PurchaseReservedDbInstancesOfferingInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedDBInstancesOffering", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1543 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1544) = &input.reserved_db_instances_offering_id {
        scope_1543.string(var_1544);
    }
    #[allow(unused_mut)]let mut scope_1545 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1546) = &input.reserved_db_instance_id {
        scope_1545.string(var_1546);
    }
    #[allow(unused_mut)]let mut scope_1547 = writer.prefix("DBInstanceCount");
    if let Some(var_1548) = &input.db_instance_count {
        scope_1547.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1548).into()));
    }
    #[allow(unused_mut)]let mut scope_1549 = writer.prefix("Tags");
    if let Some(var_1550) = &input.tags {
        let mut list_1552 = scope_1549.start_list(false, Some("Tag"));
        for item_1551 in var_1550 {
            #[allow(unused_mut)]let mut entry_1553 = list_1552.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1553, item_1551)?;
        }
        list_1552.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_cluster(input: &crate::input::RebootDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1554 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1555) = &input.db_cluster_identifier {
        scope_1554.string(var_1555);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(input: &crate::input::RebootDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1556 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1557) = &input.db_instance_identifier {
        scope_1556.string(var_1557);
    }
    #[allow(unused_mut)]let mut scope_1558 = writer.prefix("ForceFailover");
    if let Some(var_1559) = &input.force_failover {
        scope_1558.boolean(*var_1559);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_db_proxy_targets(input: &crate::input::RegisterDbProxyTargetsInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1560 = writer.prefix("DBProxyName");
    if let Some(var_1561) = &input.db_proxy_name {
        scope_1560.string(var_1561);
    }
    #[allow(unused_mut)]let mut scope_1562 = writer.prefix("TargetGroupName");
    if let Some(var_1563) = &input.target_group_name {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]let mut scope_1564 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_1565) = &input.db_instance_identifiers {
        let mut list_1567 = scope_1564.start_list(false, None);
        for item_1566 in var_1565 {
            #[allow(unused_mut)]let mut entry_1568 = list_1567.entry();
            entry_1568.string(item_1566);
        }
        list_1567.finish();
    }
    #[allow(unused_mut)]let mut scope_1569 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_1570) = &input.db_cluster_identifiers {
        let mut list_1572 = scope_1569.start_list(false, None);
        for item_1571 in var_1570 {
            #[allow(unused_mut)]let mut entry_1573 = list_1572.entry();
            entry_1573.string(item_1571);
        }
        list_1572.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(input: &crate::input::RemoveFromGlobalClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1574 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1575) = &input.global_cluster_identifier {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]let mut scope_1576 = writer.prefix("DbClusterIdentifier");
    if let Some(var_1577) = &input.db_cluster_identifier {
        scope_1576.string(var_1577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(input: &crate::input::RemoveRoleFromDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1578 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1579) = &input.db_cluster_identifier {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]let mut scope_1580 = writer.prefix("RoleArn");
    if let Some(var_1581) = &input.role_arn {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]let mut scope_1582 = writer.prefix("FeatureName");
    if let Some(var_1583) = &input.feature_name {
        scope_1582.string(var_1583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_instance(input: &crate::input::RemoveRoleFromDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1584 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1585) = &input.db_instance_identifier {
        scope_1584.string(var_1585);
    }
    #[allow(unused_mut)]let mut scope_1586 = writer.prefix("RoleArn");
    if let Some(var_1587) = &input.role_arn {
        scope_1586.string(var_1587);
    }
    #[allow(unused_mut)]let mut scope_1588 = writer.prefix("FeatureName");
    if let Some(var_1589) = &input.feature_name {
        scope_1588.string(var_1589);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveSourceIdentifierFromSubscription", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1590 = writer.prefix("SubscriptionName");
    if let Some(var_1591) = &input.subscription_name {
        scope_1590.string(var_1591);
    }
    #[allow(unused_mut)]let mut scope_1592 = writer.prefix("SourceIdentifier");
    if let Some(var_1593) = &input.source_identifier {
        scope_1592.string(var_1593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(input: &crate::input::RemoveTagsFromResourceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1594 = writer.prefix("ResourceName");
    if let Some(var_1595) = &input.resource_name {
        scope_1594.string(var_1595);
    }
    #[allow(unused_mut)]let mut scope_1596 = writer.prefix("TagKeys");
    if let Some(var_1597) = &input.tag_keys {
        let mut list_1599 = scope_1596.start_list(false, None);
        for item_1598 in var_1597 {
            #[allow(unused_mut)]let mut entry_1600 = list_1599.entry();
            entry_1600.string(item_1598);
        }
        list_1599.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(input: &crate::input::ResetDbClusterParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1601 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1602) = &input.db_cluster_parameter_group_name {
        scope_1601.string(var_1602);
    }
    #[allow(unused_mut)]let mut scope_1603 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1603.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]let mut scope_1604 = writer.prefix("Parameters");
    if let Some(var_1605) = &input.parameters {
        let mut list_1607 = scope_1604.start_list(false, Some("Parameter"));
        for item_1606 in var_1605 {
            #[allow(unused_mut)]let mut entry_1608 = list_1607.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1608, item_1606)?;
        }
        list_1607.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(input: &crate::input::ResetDbParameterGroupInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1609 = writer.prefix("DBParameterGroupName");
    if let Some(var_1610) = &input.db_parameter_group_name {
        scope_1609.string(var_1610);
    }
    #[allow(unused_mut)]let mut scope_1611 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1611.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]let mut scope_1612 = writer.prefix("Parameters");
    if let Some(var_1613) = &input.parameters {
        let mut list_1615 = scope_1612.start_list(false, Some("Parameter"));
        for item_1614 in var_1613 {
            #[allow(unused_mut)]let mut entry_1616 = list_1615.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1616, item_1614)?;
        }
        list_1615.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_s3(input: &crate::input::RestoreDbClusterFromS3Input) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromS3", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1617 = writer.prefix("AvailabilityZones");
    if let Some(var_1618) = &input.availability_zones {
        let mut list_1620 = scope_1617.start_list(false, Some("AvailabilityZone"));
        for item_1619 in var_1618 {
            #[allow(unused_mut)]let mut entry_1621 = list_1620.entry();
            entry_1621.string(item_1619);
        }
        list_1620.finish();
    }
    #[allow(unused_mut)]let mut scope_1622 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1623) = &input.backup_retention_period {
        scope_1622.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1623).into()));
    }
    #[allow(unused_mut)]let mut scope_1624 = writer.prefix("CharacterSetName");
    if let Some(var_1625) = &input.character_set_name {
        scope_1624.string(var_1625);
    }
    #[allow(unused_mut)]let mut scope_1626 = writer.prefix("DatabaseName");
    if let Some(var_1627) = &input.database_name {
        scope_1626.string(var_1627);
    }
    #[allow(unused_mut)]let mut scope_1628 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1629) = &input.db_cluster_identifier {
        scope_1628.string(var_1629);
    }
    #[allow(unused_mut)]let mut scope_1630 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1631) = &input.db_cluster_parameter_group_name {
        scope_1630.string(var_1631);
    }
    #[allow(unused_mut)]let mut scope_1632 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1633) = &input.vpc_security_group_ids {
        let mut list_1635 = scope_1632.start_list(false, Some("VpcSecurityGroupId"));
        for item_1634 in var_1633 {
            #[allow(unused_mut)]let mut entry_1636 = list_1635.entry();
            entry_1636.string(item_1634);
        }
        list_1635.finish();
    }
    #[allow(unused_mut)]let mut scope_1637 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1638) = &input.db_subnet_group_name {
        scope_1637.string(var_1638);
    }
    #[allow(unused_mut)]let mut scope_1639 = writer.prefix("Engine");
    if let Some(var_1640) = &input.engine {
        scope_1639.string(var_1640);
    }
    #[allow(unused_mut)]let mut scope_1641 = writer.prefix("EngineVersion");
    if let Some(var_1642) = &input.engine_version {
        scope_1641.string(var_1642);
    }
    #[allow(unused_mut)]let mut scope_1643 = writer.prefix("Port");
    if let Some(var_1644) = &input.port {
        scope_1643.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1644).into()));
    }
    #[allow(unused_mut)]let mut scope_1645 = writer.prefix("MasterUsername");
    if let Some(var_1646) = &input.master_username {
        scope_1645.string(var_1646);
    }
    #[allow(unused_mut)]let mut scope_1647 = writer.prefix("MasterUserPassword");
    if let Some(var_1648) = &input.master_user_password {
        scope_1647.string(var_1648);
    }
    #[allow(unused_mut)]let mut scope_1649 = writer.prefix("OptionGroupName");
    if let Some(var_1650) = &input.option_group_name {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]let mut scope_1651 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1652) = &input.preferred_backup_window {
        scope_1651.string(var_1652);
    }
    #[allow(unused_mut)]let mut scope_1653 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1654) = &input.preferred_maintenance_window {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]let mut scope_1655 = writer.prefix("Tags");
    if let Some(var_1656) = &input.tags {
        let mut list_1658 = scope_1655.start_list(false, Some("Tag"));
        for item_1657 in var_1656 {
            #[allow(unused_mut)]let mut entry_1659 = list_1658.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1659, item_1657)?;
        }
        list_1658.finish();
    }
    #[allow(unused_mut)]let mut scope_1660 = writer.prefix("StorageEncrypted");
    if let Some(var_1661) = &input.storage_encrypted {
        scope_1660.boolean(*var_1661);
    }
    #[allow(unused_mut)]let mut scope_1662 = writer.prefix("KmsKeyId");
    if let Some(var_1663) = &input.kms_key_id {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]let mut scope_1664 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1665) = &input.enable_iam_database_authentication {
        scope_1664.boolean(*var_1665);
    }
    #[allow(unused_mut)]let mut scope_1666 = writer.prefix("SourceEngine");
    if let Some(var_1667) = &input.source_engine {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]let mut scope_1668 = writer.prefix("SourceEngineVersion");
    if let Some(var_1669) = &input.source_engine_version {
        scope_1668.string(var_1669);
    }
    #[allow(unused_mut)]let mut scope_1670 = writer.prefix("S3BucketName");
    if let Some(var_1671) = &input.s3_bucket_name {
        scope_1670.string(var_1671);
    }
    #[allow(unused_mut)]let mut scope_1672 = writer.prefix("S3Prefix");
    if let Some(var_1673) = &input.s3_prefix {
        scope_1672.string(var_1673);
    }
    #[allow(unused_mut)]let mut scope_1674 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1675) = &input.s3_ingestion_role_arn {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]let mut scope_1676 = writer.prefix("BacktrackWindow");
    if let Some(var_1677) = &input.backtrack_window {
        scope_1676.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1677).into()));
    }
    #[allow(unused_mut)]let mut scope_1678 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1679) = &input.enable_cloudwatch_logs_exports {
        let mut list_1681 = scope_1678.start_list(false, None);
        for item_1680 in var_1679 {
            #[allow(unused_mut)]let mut entry_1682 = list_1681.entry();
            entry_1682.string(item_1680);
        }
        list_1681.finish();
    }
    #[allow(unused_mut)]let mut scope_1683 = writer.prefix("DeletionProtection");
    if let Some(var_1684) = &input.deletion_protection {
        scope_1683.boolean(*var_1684);
    }
    #[allow(unused_mut)]let mut scope_1685 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1686) = &input.copy_tags_to_snapshot {
        scope_1685.boolean(*var_1686);
    }
    #[allow(unused_mut)]let mut scope_1687 = writer.prefix("Domain");
    if let Some(var_1688) = &input.domain {
        scope_1687.string(var_1688);
    }
    #[allow(unused_mut)]let mut scope_1689 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1690) = &input.domain_iam_role_name {
        scope_1689.string(var_1690);
    }
    #[allow(unused_mut)]let mut scope_1691 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1692) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(scope_1691, var_1692)?;
    }
    #[allow(unused_mut)]let mut scope_1693 = writer.prefix("NetworkType");
    if let Some(var_1694) = &input.network_type {
        scope_1693.string(var_1694);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(input: &crate::input::RestoreDbClusterFromSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1695 = writer.prefix("AvailabilityZones");
    if let Some(var_1696) = &input.availability_zones {
        let mut list_1698 = scope_1695.start_list(false, Some("AvailabilityZone"));
        for item_1697 in var_1696 {
            #[allow(unused_mut)]let mut entry_1699 = list_1698.entry();
            entry_1699.string(item_1697);
        }
        list_1698.finish();
    }
    #[allow(unused_mut)]let mut scope_1700 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1701) = &input.db_cluster_identifier {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]let mut scope_1702 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1703) = &input.snapshot_identifier {
        scope_1702.string(var_1703);
    }
    #[allow(unused_mut)]let mut scope_1704 = writer.prefix("Engine");
    if let Some(var_1705) = &input.engine {
        scope_1704.string(var_1705);
    }
    #[allow(unused_mut)]let mut scope_1706 = writer.prefix("EngineVersion");
    if let Some(var_1707) = &input.engine_version {
        scope_1706.string(var_1707);
    }
    #[allow(unused_mut)]let mut scope_1708 = writer.prefix("Port");
    if let Some(var_1709) = &input.port {
        scope_1708.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1709).into()));
    }
    #[allow(unused_mut)]let mut scope_1710 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1711) = &input.db_subnet_group_name {
        scope_1710.string(var_1711);
    }
    #[allow(unused_mut)]let mut scope_1712 = writer.prefix("DatabaseName");
    if let Some(var_1713) = &input.database_name {
        scope_1712.string(var_1713);
    }
    #[allow(unused_mut)]let mut scope_1714 = writer.prefix("OptionGroupName");
    if let Some(var_1715) = &input.option_group_name {
        scope_1714.string(var_1715);
    }
    #[allow(unused_mut)]let mut scope_1716 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1717) = &input.vpc_security_group_ids {
        let mut list_1719 = scope_1716.start_list(false, Some("VpcSecurityGroupId"));
        for item_1718 in var_1717 {
            #[allow(unused_mut)]let mut entry_1720 = list_1719.entry();
            entry_1720.string(item_1718);
        }
        list_1719.finish();
    }
    #[allow(unused_mut)]let mut scope_1721 = writer.prefix("Tags");
    if let Some(var_1722) = &input.tags {
        let mut list_1724 = scope_1721.start_list(false, Some("Tag"));
        for item_1723 in var_1722 {
            #[allow(unused_mut)]let mut entry_1725 = list_1724.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1725, item_1723)?;
        }
        list_1724.finish();
    }
    #[allow(unused_mut)]let mut scope_1726 = writer.prefix("KmsKeyId");
    if let Some(var_1727) = &input.kms_key_id {
        scope_1726.string(var_1727);
    }
    #[allow(unused_mut)]let mut scope_1728 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1729) = &input.enable_iam_database_authentication {
        scope_1728.boolean(*var_1729);
    }
    #[allow(unused_mut)]let mut scope_1730 = writer.prefix("BacktrackWindow");
    if let Some(var_1731) = &input.backtrack_window {
        scope_1730.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1731).into()));
    }
    #[allow(unused_mut)]let mut scope_1732 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1733) = &input.enable_cloudwatch_logs_exports {
        let mut list_1735 = scope_1732.start_list(false, None);
        for item_1734 in var_1733 {
            #[allow(unused_mut)]let mut entry_1736 = list_1735.entry();
            entry_1736.string(item_1734);
        }
        list_1735.finish();
    }
    #[allow(unused_mut)]let mut scope_1737 = writer.prefix("EngineMode");
    if let Some(var_1738) = &input.engine_mode {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]let mut scope_1739 = writer.prefix("ScalingConfiguration");
    if let Some(var_1740) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(scope_1739, var_1740)?;
    }
    #[allow(unused_mut)]let mut scope_1741 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1742) = &input.db_cluster_parameter_group_name {
        scope_1741.string(var_1742);
    }
    #[allow(unused_mut)]let mut scope_1743 = writer.prefix("DeletionProtection");
    if let Some(var_1744) = &input.deletion_protection {
        scope_1743.boolean(*var_1744);
    }
    #[allow(unused_mut)]let mut scope_1745 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1746) = &input.copy_tags_to_snapshot {
        scope_1745.boolean(*var_1746);
    }
    #[allow(unused_mut)]let mut scope_1747 = writer.prefix("Domain");
    if let Some(var_1748) = &input.domain {
        scope_1747.string(var_1748);
    }
    #[allow(unused_mut)]let mut scope_1749 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1750) = &input.domain_iam_role_name {
        scope_1749.string(var_1750);
    }
    #[allow(unused_mut)]let mut scope_1751 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1752) = &input.db_cluster_instance_class {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]let mut scope_1753 = writer.prefix("StorageType");
    if let Some(var_1754) = &input.storage_type {
        scope_1753.string(var_1754);
    }
    #[allow(unused_mut)]let mut scope_1755 = writer.prefix("Iops");
    if let Some(var_1756) = &input.iops {
        scope_1755.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1756).into()));
    }
    #[allow(unused_mut)]let mut scope_1757 = writer.prefix("PubliclyAccessible");
    if let Some(var_1758) = &input.publicly_accessible {
        scope_1757.boolean(*var_1758);
    }
    #[allow(unused_mut)]let mut scope_1759 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1760) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(scope_1759, var_1760)?;
    }
    #[allow(unused_mut)]let mut scope_1761 = writer.prefix("NetworkType");
    if let Some(var_1762) = &input.network_type {
        scope_1761.string(var_1762);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(input: &crate::input::RestoreDbClusterToPointInTimeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1763 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1764) = &input.db_cluster_identifier {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]let mut scope_1765 = writer.prefix("RestoreType");
    if let Some(var_1766) = &input.restore_type {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]let mut scope_1767 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_1768) = &input.source_db_cluster_identifier {
        scope_1767.string(var_1768);
    }
    #[allow(unused_mut)]let mut scope_1769 = writer.prefix("RestoreToTime");
    if let Some(var_1770) = &input.restore_to_time {
        scope_1769.date_time(var_1770, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_1771 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1771.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]let mut scope_1772 = writer.prefix("Port");
    if let Some(var_1773) = &input.port {
        scope_1772.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1773).into()));
    }
    #[allow(unused_mut)]let mut scope_1774 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1775) = &input.db_subnet_group_name {
        scope_1774.string(var_1775);
    }
    #[allow(unused_mut)]let mut scope_1776 = writer.prefix("OptionGroupName");
    if let Some(var_1777) = &input.option_group_name {
        scope_1776.string(var_1777);
    }
    #[allow(unused_mut)]let mut scope_1778 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1779) = &input.vpc_security_group_ids {
        let mut list_1781 = scope_1778.start_list(false, Some("VpcSecurityGroupId"));
        for item_1780 in var_1779 {
            #[allow(unused_mut)]let mut entry_1782 = list_1781.entry();
            entry_1782.string(item_1780);
        }
        list_1781.finish();
    }
    #[allow(unused_mut)]let mut scope_1783 = writer.prefix("Tags");
    if let Some(var_1784) = &input.tags {
        let mut list_1786 = scope_1783.start_list(false, Some("Tag"));
        for item_1785 in var_1784 {
            #[allow(unused_mut)]let mut entry_1787 = list_1786.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1787, item_1785)?;
        }
        list_1786.finish();
    }
    #[allow(unused_mut)]let mut scope_1788 = writer.prefix("KmsKeyId");
    if let Some(var_1789) = &input.kms_key_id {
        scope_1788.string(var_1789);
    }
    #[allow(unused_mut)]let mut scope_1790 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1791) = &input.enable_iam_database_authentication {
        scope_1790.boolean(*var_1791);
    }
    #[allow(unused_mut)]let mut scope_1792 = writer.prefix("BacktrackWindow");
    if let Some(var_1793) = &input.backtrack_window {
        scope_1792.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1793).into()));
    }
    #[allow(unused_mut)]let mut scope_1794 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1795) = &input.enable_cloudwatch_logs_exports {
        let mut list_1797 = scope_1794.start_list(false, None);
        for item_1796 in var_1795 {
            #[allow(unused_mut)]let mut entry_1798 = list_1797.entry();
            entry_1798.string(item_1796);
        }
        list_1797.finish();
    }
    #[allow(unused_mut)]let mut scope_1799 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1800) = &input.db_cluster_parameter_group_name {
        scope_1799.string(var_1800);
    }
    #[allow(unused_mut)]let mut scope_1801 = writer.prefix("DeletionProtection");
    if let Some(var_1802) = &input.deletion_protection {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]let mut scope_1803 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1804) = &input.copy_tags_to_snapshot {
        scope_1803.boolean(*var_1804);
    }
    #[allow(unused_mut)]let mut scope_1805 = writer.prefix("Domain");
    if let Some(var_1806) = &input.domain {
        scope_1805.string(var_1806);
    }
    #[allow(unused_mut)]let mut scope_1807 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1808) = &input.domain_iam_role_name {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]let mut scope_1809 = writer.prefix("ScalingConfiguration");
    if let Some(var_1810) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(scope_1809, var_1810)?;
    }
    #[allow(unused_mut)]let mut scope_1811 = writer.prefix("EngineMode");
    if let Some(var_1812) = &input.engine_mode {
        scope_1811.string(var_1812);
    }
    #[allow(unused_mut)]let mut scope_1813 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1814) = &input.db_cluster_instance_class {
        scope_1813.string(var_1814);
    }
    #[allow(unused_mut)]let mut scope_1815 = writer.prefix("StorageType");
    if let Some(var_1816) = &input.storage_type {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]let mut scope_1817 = writer.prefix("PubliclyAccessible");
    if let Some(var_1818) = &input.publicly_accessible {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]let mut scope_1819 = writer.prefix("Iops");
    if let Some(var_1820) = &input.iops {
        scope_1819.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1820).into()));
    }
    #[allow(unused_mut)]let mut scope_1821 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1822) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(scope_1821, var_1822)?;
    }
    #[allow(unused_mut)]let mut scope_1823 = writer.prefix("NetworkType");
    if let Some(var_1824) = &input.network_type {
        scope_1823.string(var_1824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_db_snapshot(input: &crate::input::RestoreDbInstanceFromDbSnapshotInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1825 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1826) = &input.db_instance_identifier {
        scope_1825.string(var_1826);
    }
    #[allow(unused_mut)]let mut scope_1827 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1828) = &input.db_snapshot_identifier {
        scope_1827.string(var_1828);
    }
    #[allow(unused_mut)]let mut scope_1829 = writer.prefix("DBInstanceClass");
    if let Some(var_1830) = &input.db_instance_class {
        scope_1829.string(var_1830);
    }
    #[allow(unused_mut)]let mut scope_1831 = writer.prefix("Port");
    if let Some(var_1832) = &input.port {
        scope_1831.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1832).into()));
    }
    #[allow(unused_mut)]let mut scope_1833 = writer.prefix("AvailabilityZone");
    if let Some(var_1834) = &input.availability_zone {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]let mut scope_1835 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1836) = &input.db_subnet_group_name {
        scope_1835.string(var_1836);
    }
    #[allow(unused_mut)]let mut scope_1837 = writer.prefix("MultiAZ");
    if let Some(var_1838) = &input.multi_az {
        scope_1837.boolean(*var_1838);
    }
    #[allow(unused_mut)]let mut scope_1839 = writer.prefix("PubliclyAccessible");
    if let Some(var_1840) = &input.publicly_accessible {
        scope_1839.boolean(*var_1840);
    }
    #[allow(unused_mut)]let mut scope_1841 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1842) = &input.auto_minor_version_upgrade {
        scope_1841.boolean(*var_1842);
    }
    #[allow(unused_mut)]let mut scope_1843 = writer.prefix("LicenseModel");
    if let Some(var_1844) = &input.license_model {
        scope_1843.string(var_1844);
    }
    #[allow(unused_mut)]let mut scope_1845 = writer.prefix("DBName");
    if let Some(var_1846) = &input.db_name {
        scope_1845.string(var_1846);
    }
    #[allow(unused_mut)]let mut scope_1847 = writer.prefix("Engine");
    if let Some(var_1848) = &input.engine {
        scope_1847.string(var_1848);
    }
    #[allow(unused_mut)]let mut scope_1849 = writer.prefix("Iops");
    if let Some(var_1850) = &input.iops {
        scope_1849.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1850).into()));
    }
    #[allow(unused_mut)]let mut scope_1851 = writer.prefix("OptionGroupName");
    if let Some(var_1852) = &input.option_group_name {
        scope_1851.string(var_1852);
    }
    #[allow(unused_mut)]let mut scope_1853 = writer.prefix("Tags");
    if let Some(var_1854) = &input.tags {
        let mut list_1856 = scope_1853.start_list(false, Some("Tag"));
        for item_1855 in var_1854 {
            #[allow(unused_mut)]let mut entry_1857 = list_1856.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1857, item_1855)?;
        }
        list_1856.finish();
    }
    #[allow(unused_mut)]let mut scope_1858 = writer.prefix("StorageType");
    if let Some(var_1859) = &input.storage_type {
        scope_1858.string(var_1859);
    }
    #[allow(unused_mut)]let mut scope_1860 = writer.prefix("TdeCredentialArn");
    if let Some(var_1861) = &input.tde_credential_arn {
        scope_1860.string(var_1861);
    }
    #[allow(unused_mut)]let mut scope_1862 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1863) = &input.tde_credential_password {
        scope_1862.string(var_1863);
    }
    #[allow(unused_mut)]let mut scope_1864 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1865) = &input.vpc_security_group_ids {
        let mut list_1867 = scope_1864.start_list(false, Some("VpcSecurityGroupId"));
        for item_1866 in var_1865 {
            #[allow(unused_mut)]let mut entry_1868 = list_1867.entry();
            entry_1868.string(item_1866);
        }
        list_1867.finish();
    }
    #[allow(unused_mut)]let mut scope_1869 = writer.prefix("Domain");
    if let Some(var_1870) = &input.domain {
        scope_1869.string(var_1870);
    }
    #[allow(unused_mut)]let mut scope_1871 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1872) = &input.copy_tags_to_snapshot {
        scope_1871.boolean(*var_1872);
    }
    #[allow(unused_mut)]let mut scope_1873 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1874) = &input.domain_iam_role_name {
        scope_1873.string(var_1874);
    }
    #[allow(unused_mut)]let mut scope_1875 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1876) = &input.enable_iam_database_authentication {
        scope_1875.boolean(*var_1876);
    }
    #[allow(unused_mut)]let mut scope_1877 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1878) = &input.enable_cloudwatch_logs_exports {
        let mut list_1880 = scope_1877.start_list(false, None);
        for item_1879 in var_1878 {
            #[allow(unused_mut)]let mut entry_1881 = list_1880.entry();
            entry_1881.string(item_1879);
        }
        list_1880.finish();
    }
    #[allow(unused_mut)]let mut scope_1882 = writer.prefix("ProcessorFeatures");
    if let Some(var_1883) = &input.processor_features {
        let mut list_1885 = scope_1882.start_list(false, Some("ProcessorFeature"));
        for item_1884 in var_1883 {
            #[allow(unused_mut)]let mut entry_1886 = list_1885.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_1886, item_1884)?;
        }
        list_1885.finish();
    }
    #[allow(unused_mut)]let mut scope_1887 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1888) = &input.use_default_processor_features {
        scope_1887.boolean(*var_1888);
    }
    #[allow(unused_mut)]let mut scope_1889 = writer.prefix("DBParameterGroupName");
    if let Some(var_1890) = &input.db_parameter_group_name {
        scope_1889.string(var_1890);
    }
    #[allow(unused_mut)]let mut scope_1891 = writer.prefix("DeletionProtection");
    if let Some(var_1892) = &input.deletion_protection {
        scope_1891.boolean(*var_1892);
    }
    #[allow(unused_mut)]let mut scope_1893 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1894) = &input.enable_customer_owned_ip {
        scope_1893.boolean(*var_1894);
    }
    #[allow(unused_mut)]let mut scope_1895 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_1896) = &input.custom_iam_instance_profile {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]let mut scope_1897 = writer.prefix("BackupTarget");
    if let Some(var_1898) = &input.backup_target {
        scope_1897.string(var_1898);
    }
    #[allow(unused_mut)]let mut scope_1899 = writer.prefix("NetworkType");
    if let Some(var_1900) = &input.network_type {
        scope_1899.string(var_1900);
    }
    #[allow(unused_mut)]let mut scope_1901 = writer.prefix("StorageThroughput");
    if let Some(var_1902) = &input.storage_throughput {
        scope_1901.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1902).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_s3(input: &crate::input::RestoreDbInstanceFromS3Input) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromS3", "2014-10-31");
    #[allow(unused_mut)]let mut scope_1903 = writer.prefix("DBName");
    if let Some(var_1904) = &input.db_name {
        scope_1903.string(var_1904);
    }
    #[allow(unused_mut)]let mut scope_1905 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1906) = &input.db_instance_identifier {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]let mut scope_1907 = writer.prefix("AllocatedStorage");
    if let Some(var_1908) = &input.allocated_storage {
        scope_1907.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1908).into()));
    }
    #[allow(unused_mut)]let mut scope_1909 = writer.prefix("DBInstanceClass");
    if let Some(var_1910) = &input.db_instance_class {
        scope_1909.string(var_1910);
    }
    #[allow(unused_mut)]let mut scope_1911 = writer.prefix("Engine");
    if let Some(var_1912) = &input.engine {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]let mut scope_1913 = writer.prefix("MasterUsername");
    if let Some(var_1914) = &input.master_username {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]let mut scope_1915 = writer.prefix("MasterUserPassword");
    if let Some(var_1916) = &input.master_user_password {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]let mut scope_1917 = writer.prefix("DBSecurityGroups");
    if let Some(var_1918) = &input.db_security_groups {
        let mut list_1920 = scope_1917.start_list(false, Some("DBSecurityGroupName"));
        for item_1919 in var_1918 {
            #[allow(unused_mut)]let mut entry_1921 = list_1920.entry();
            entry_1921.string(item_1919);
        }
        list_1920.finish();
    }
    #[allow(unused_mut)]let mut scope_1922 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1923) = &input.vpc_security_group_ids {
        let mut list_1925 = scope_1922.start_list(false, Some("VpcSecurityGroupId"));
        for item_1924 in var_1923 {
            #[allow(unused_mut)]let mut entry_1926 = list_1925.entry();
            entry_1926.string(item_1924);
        }
        list_1925.finish();
    }
    #[allow(unused_mut)]let mut scope_1927 = writer.prefix("AvailabilityZone");
    if let Some(var_1928) = &input.availability_zone {
        scope_1927.string(var_1928);
    }
    #[allow(unused_mut)]let mut scope_1929 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1930) = &input.db_subnet_group_name {
        scope_1929.string(var_1930);
    }
    #[allow(unused_mut)]let mut scope_1931 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1932) = &input.preferred_maintenance_window {
        scope_1931.string(var_1932);
    }
    #[allow(unused_mut)]let mut scope_1933 = writer.prefix("DBParameterGroupName");
    if let Some(var_1934) = &input.db_parameter_group_name {
        scope_1933.string(var_1934);
    }
    #[allow(unused_mut)]let mut scope_1935 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1936) = &input.backup_retention_period {
        scope_1935.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1936).into()));
    }
    #[allow(unused_mut)]let mut scope_1937 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1938) = &input.preferred_backup_window {
        scope_1937.string(var_1938);
    }
    #[allow(unused_mut)]let mut scope_1939 = writer.prefix("Port");
    if let Some(var_1940) = &input.port {
        scope_1939.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1940).into()));
    }
    #[allow(unused_mut)]let mut scope_1941 = writer.prefix("MultiAZ");
    if let Some(var_1942) = &input.multi_az {
        scope_1941.boolean(*var_1942);
    }
    #[allow(unused_mut)]let mut scope_1943 = writer.prefix("EngineVersion");
    if let Some(var_1944) = &input.engine_version {
        scope_1943.string(var_1944);
    }
    #[allow(unused_mut)]let mut scope_1945 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1946) = &input.auto_minor_version_upgrade {
        scope_1945.boolean(*var_1946);
    }
    #[allow(unused_mut)]let mut scope_1947 = writer.prefix("LicenseModel");
    if let Some(var_1948) = &input.license_model {
        scope_1947.string(var_1948);
    }
    #[allow(unused_mut)]let mut scope_1949 = writer.prefix("Iops");
    if let Some(var_1950) = &input.iops {
        scope_1949.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1950).into()));
    }
    #[allow(unused_mut)]let mut scope_1951 = writer.prefix("OptionGroupName");
    if let Some(var_1952) = &input.option_group_name {
        scope_1951.string(var_1952);
    }
    #[allow(unused_mut)]let mut scope_1953 = writer.prefix("PubliclyAccessible");
    if let Some(var_1954) = &input.publicly_accessible {
        scope_1953.boolean(*var_1954);
    }
    #[allow(unused_mut)]let mut scope_1955 = writer.prefix("Tags");
    if let Some(var_1956) = &input.tags {
        let mut list_1958 = scope_1955.start_list(false, Some("Tag"));
        for item_1957 in var_1956 {
            #[allow(unused_mut)]let mut entry_1959 = list_1958.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1959, item_1957)?;
        }
        list_1958.finish();
    }
    #[allow(unused_mut)]let mut scope_1960 = writer.prefix("StorageType");
    if let Some(var_1961) = &input.storage_type {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]let mut scope_1962 = writer.prefix("StorageEncrypted");
    if let Some(var_1963) = &input.storage_encrypted {
        scope_1962.boolean(*var_1963);
    }
    #[allow(unused_mut)]let mut scope_1964 = writer.prefix("KmsKeyId");
    if let Some(var_1965) = &input.kms_key_id {
        scope_1964.string(var_1965);
    }
    #[allow(unused_mut)]let mut scope_1966 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1967) = &input.copy_tags_to_snapshot {
        scope_1966.boolean(*var_1967);
    }
    #[allow(unused_mut)]let mut scope_1968 = writer.prefix("MonitoringInterval");
    if let Some(var_1969) = &input.monitoring_interval {
        scope_1968.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1969).into()));
    }
    #[allow(unused_mut)]let mut scope_1970 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1971) = &input.monitoring_role_arn {
        scope_1970.string(var_1971);
    }
    #[allow(unused_mut)]let mut scope_1972 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1973) = &input.enable_iam_database_authentication {
        scope_1972.boolean(*var_1973);
    }
    #[allow(unused_mut)]let mut scope_1974 = writer.prefix("SourceEngine");
    if let Some(var_1975) = &input.source_engine {
        scope_1974.string(var_1975);
    }
    #[allow(unused_mut)]let mut scope_1976 = writer.prefix("SourceEngineVersion");
    if let Some(var_1977) = &input.source_engine_version {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]let mut scope_1978 = writer.prefix("S3BucketName");
    if let Some(var_1979) = &input.s3_bucket_name {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]let mut scope_1980 = writer.prefix("S3Prefix");
    if let Some(var_1981) = &input.s3_prefix {
        scope_1980.string(var_1981);
    }
    #[allow(unused_mut)]let mut scope_1982 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1983) = &input.s3_ingestion_role_arn {
        scope_1982.string(var_1983);
    }
    #[allow(unused_mut)]let mut scope_1984 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1985) = &input.enable_performance_insights {
        scope_1984.boolean(*var_1985);
    }
    #[allow(unused_mut)]let mut scope_1986 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1987) = &input.performance_insights_kms_key_id {
        scope_1986.string(var_1987);
    }
    #[allow(unused_mut)]let mut scope_1988 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1989) = &input.performance_insights_retention_period {
        scope_1988.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1989).into()));
    }
    #[allow(unused_mut)]let mut scope_1990 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1991) = &input.enable_cloudwatch_logs_exports {
        let mut list_1993 = scope_1990.start_list(false, None);
        for item_1992 in var_1991 {
            #[allow(unused_mut)]let mut entry_1994 = list_1993.entry();
            entry_1994.string(item_1992);
        }
        list_1993.finish();
    }
    #[allow(unused_mut)]let mut scope_1995 = writer.prefix("ProcessorFeatures");
    if let Some(var_1996) = &input.processor_features {
        let mut list_1998 = scope_1995.start_list(false, Some("ProcessorFeature"));
        for item_1997 in var_1996 {
            #[allow(unused_mut)]let mut entry_1999 = list_1998.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_1999, item_1997)?;
        }
        list_1998.finish();
    }
    #[allow(unused_mut)]let mut scope_2000 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2001) = &input.use_default_processor_features {
        scope_2000.boolean(*var_2001);
    }
    #[allow(unused_mut)]let mut scope_2002 = writer.prefix("DeletionProtection");
    if let Some(var_2003) = &input.deletion_protection {
        scope_2002.boolean(*var_2003);
    }
    #[allow(unused_mut)]let mut scope_2004 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2005) = &input.max_allocated_storage {
        scope_2004.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2005).into()));
    }
    #[allow(unused_mut)]let mut scope_2006 = writer.prefix("NetworkType");
    if let Some(var_2007) = &input.network_type {
        scope_2006.string(var_2007);
    }
    #[allow(unused_mut)]let mut scope_2008 = writer.prefix("StorageThroughput");
    if let Some(var_2009) = &input.storage_throughput {
        scope_2008.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2009).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_to_point_in_time(input: &crate::input::RestoreDbInstanceToPointInTimeInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceToPointInTime", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2010 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_2011) = &input.source_db_instance_identifier {
        scope_2010.string(var_2011);
    }
    #[allow(unused_mut)]let mut scope_2012 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_2013) = &input.target_db_instance_identifier {
        scope_2012.string(var_2013);
    }
    #[allow(unused_mut)]let mut scope_2014 = writer.prefix("RestoreTime");
    if let Some(var_2015) = &input.restore_time {
        scope_2014.date_time(var_2015, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]let mut scope_2016 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_2016.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]let mut scope_2017 = writer.prefix("DBInstanceClass");
    if let Some(var_2018) = &input.db_instance_class {
        scope_2017.string(var_2018);
    }
    #[allow(unused_mut)]let mut scope_2019 = writer.prefix("Port");
    if let Some(var_2020) = &input.port {
        scope_2019.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2020).into()));
    }
    #[allow(unused_mut)]let mut scope_2021 = writer.prefix("AvailabilityZone");
    if let Some(var_2022) = &input.availability_zone {
        scope_2021.string(var_2022);
    }
    #[allow(unused_mut)]let mut scope_2023 = writer.prefix("DBSubnetGroupName");
    if let Some(var_2024) = &input.db_subnet_group_name {
        scope_2023.string(var_2024);
    }
    #[allow(unused_mut)]let mut scope_2025 = writer.prefix("MultiAZ");
    if let Some(var_2026) = &input.multi_az {
        scope_2025.boolean(*var_2026);
    }
    #[allow(unused_mut)]let mut scope_2027 = writer.prefix("PubliclyAccessible");
    if let Some(var_2028) = &input.publicly_accessible {
        scope_2027.boolean(*var_2028);
    }
    #[allow(unused_mut)]let mut scope_2029 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_2030) = &input.auto_minor_version_upgrade {
        scope_2029.boolean(*var_2030);
    }
    #[allow(unused_mut)]let mut scope_2031 = writer.prefix("LicenseModel");
    if let Some(var_2032) = &input.license_model {
        scope_2031.string(var_2032);
    }
    #[allow(unused_mut)]let mut scope_2033 = writer.prefix("DBName");
    if let Some(var_2034) = &input.db_name {
        scope_2033.string(var_2034);
    }
    #[allow(unused_mut)]let mut scope_2035 = writer.prefix("Engine");
    if let Some(var_2036) = &input.engine {
        scope_2035.string(var_2036);
    }
    #[allow(unused_mut)]let mut scope_2037 = writer.prefix("Iops");
    if let Some(var_2038) = &input.iops {
        scope_2037.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2038).into()));
    }
    #[allow(unused_mut)]let mut scope_2039 = writer.prefix("OptionGroupName");
    if let Some(var_2040) = &input.option_group_name {
        scope_2039.string(var_2040);
    }
    #[allow(unused_mut)]let mut scope_2041 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_2042) = &input.copy_tags_to_snapshot {
        scope_2041.boolean(*var_2042);
    }
    #[allow(unused_mut)]let mut scope_2043 = writer.prefix("Tags");
    if let Some(var_2044) = &input.tags {
        let mut list_2046 = scope_2043.start_list(false, Some("Tag"));
        for item_2045 in var_2044 {
            #[allow(unused_mut)]let mut entry_2047 = list_2046.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_2047, item_2045)?;
        }
        list_2046.finish();
    }
    #[allow(unused_mut)]let mut scope_2048 = writer.prefix("StorageType");
    if let Some(var_2049) = &input.storage_type {
        scope_2048.string(var_2049);
    }
    #[allow(unused_mut)]let mut scope_2050 = writer.prefix("TdeCredentialArn");
    if let Some(var_2051) = &input.tde_credential_arn {
        scope_2050.string(var_2051);
    }
    #[allow(unused_mut)]let mut scope_2052 = writer.prefix("TdeCredentialPassword");
    if let Some(var_2053) = &input.tde_credential_password {
        scope_2052.string(var_2053);
    }
    #[allow(unused_mut)]let mut scope_2054 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_2055) = &input.vpc_security_group_ids {
        let mut list_2057 = scope_2054.start_list(false, Some("VpcSecurityGroupId"));
        for item_2056 in var_2055 {
            #[allow(unused_mut)]let mut entry_2058 = list_2057.entry();
            entry_2058.string(item_2056);
        }
        list_2057.finish();
    }
    #[allow(unused_mut)]let mut scope_2059 = writer.prefix("Domain");
    if let Some(var_2060) = &input.domain {
        scope_2059.string(var_2060);
    }
    #[allow(unused_mut)]let mut scope_2061 = writer.prefix("DomainIAMRoleName");
    if let Some(var_2062) = &input.domain_iam_role_name {
        scope_2061.string(var_2062);
    }
    #[allow(unused_mut)]let mut scope_2063 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_2064) = &input.enable_iam_database_authentication {
        scope_2063.boolean(*var_2064);
    }
    #[allow(unused_mut)]let mut scope_2065 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_2066) = &input.enable_cloudwatch_logs_exports {
        let mut list_2068 = scope_2065.start_list(false, None);
        for item_2067 in var_2066 {
            #[allow(unused_mut)]let mut entry_2069 = list_2068.entry();
            entry_2069.string(item_2067);
        }
        list_2068.finish();
    }
    #[allow(unused_mut)]let mut scope_2070 = writer.prefix("ProcessorFeatures");
    if let Some(var_2071) = &input.processor_features {
        let mut list_2073 = scope_2070.start_list(false, Some("ProcessorFeature"));
        for item_2072 in var_2071 {
            #[allow(unused_mut)]let mut entry_2074 = list_2073.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(entry_2074, item_2072)?;
        }
        list_2073.finish();
    }
    #[allow(unused_mut)]let mut scope_2075 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2076) = &input.use_default_processor_features {
        scope_2075.boolean(*var_2076);
    }
    #[allow(unused_mut)]let mut scope_2077 = writer.prefix("DBParameterGroupName");
    if let Some(var_2078) = &input.db_parameter_group_name {
        scope_2077.string(var_2078);
    }
    #[allow(unused_mut)]let mut scope_2079 = writer.prefix("DeletionProtection");
    if let Some(var_2080) = &input.deletion_protection {
        scope_2079.boolean(*var_2080);
    }
    #[allow(unused_mut)]let mut scope_2081 = writer.prefix("SourceDbiResourceId");
    if let Some(var_2082) = &input.source_dbi_resource_id {
        scope_2081.string(var_2082);
    }
    #[allow(unused_mut)]let mut scope_2083 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2084) = &input.max_allocated_storage {
        scope_2083.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2084).into()));
    }
    #[allow(unused_mut)]let mut scope_2085 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_2086) = &input.source_db_instance_automated_backups_arn {
        scope_2085.string(var_2086);
    }
    #[allow(unused_mut)]let mut scope_2087 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_2088) = &input.enable_customer_owned_ip {
        scope_2087.boolean(*var_2088);
    }
    #[allow(unused_mut)]let mut scope_2089 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_2090) = &input.custom_iam_instance_profile {
        scope_2089.string(var_2090);
    }
    #[allow(unused_mut)]let mut scope_2091 = writer.prefix("BackupTarget");
    if let Some(var_2092) = &input.backup_target {
        scope_2091.string(var_2092);
    }
    #[allow(unused_mut)]let mut scope_2093 = writer.prefix("NetworkType");
    if let Some(var_2094) = &input.network_type {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]let mut scope_2095 = writer.prefix("StorageThroughput");
    if let Some(var_2096) = &input.storage_throughput {
        scope_2095.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2096).into()));
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_db_security_group_ingress(input: &crate::input::RevokeDbSecurityGroupIngressInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RevokeDBSecurityGroupIngress", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2097 = writer.prefix("DBSecurityGroupName");
    if let Some(var_2098) = &input.db_security_group_name {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]let mut scope_2099 = writer.prefix("CIDRIP");
    if let Some(var_2100) = &input.cidrip {
        scope_2099.string(var_2100);
    }
    #[allow(unused_mut)]let mut scope_2101 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_2102) = &input.ec2_security_group_name {
        scope_2101.string(var_2102);
    }
    #[allow(unused_mut)]let mut scope_2103 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_2104) = &input.ec2_security_group_id {
        scope_2103.string(var_2104);
    }
    #[allow(unused_mut)]let mut scope_2105 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_2106) = &input.ec2_security_group_owner_id {
        scope_2105.string(var_2106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_activity_stream(input: &crate::input::StartActivityStreamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartActivityStream", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2107 = writer.prefix("ResourceArn");
    if let Some(var_2108) = &input.resource_arn {
        scope_2107.string(var_2108);
    }
    #[allow(unused_mut)]let mut scope_2109 = writer.prefix("Mode");
    if let Some(var_2110) = &input.mode {
        scope_2109.string(var_2110.as_str());
    }
    #[allow(unused_mut)]let mut scope_2111 = writer.prefix("KmsKeyId");
    if let Some(var_2112) = &input.kms_key_id {
        scope_2111.string(var_2112);
    }
    #[allow(unused_mut)]let mut scope_2113 = writer.prefix("ApplyImmediately");
    if let Some(var_2114) = &input.apply_immediately {
        scope_2113.boolean(*var_2114);
    }
    #[allow(unused_mut)]let mut scope_2115 = writer.prefix("EngineNativeAuditFieldsIncluded");
    if let Some(var_2116) = &input.engine_native_audit_fields_included {
        scope_2115.boolean(*var_2116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(input: &crate::input::StartDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2117 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2118) = &input.db_cluster_identifier {
        scope_2117.string(var_2118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance(input: &crate::input::StartDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2119 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2120) = &input.db_instance_identifier {
        scope_2119.string(var_2120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance_automated_backups_replication(input: &crate::input::StartDbInstanceAutomatedBackupsReplicationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBInstanceAutomatedBackupsReplication", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2121 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2122) = &input.source_db_instance_arn {
        scope_2121.string(var_2122);
    }
    #[allow(unused_mut)]let mut scope_2123 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_2124) = &input.backup_retention_period {
        scope_2123.number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2124).into()));
    }
    #[allow(unused_mut)]let mut scope_2125 = writer.prefix("KmsKeyId");
    if let Some(var_2126) = &input.kms_key_id {
        scope_2125.string(var_2126);
    }
    #[allow(unused_mut)]let mut scope_2127 = writer.prefix("PreSignedUrl");
    if let Some(var_2128) = &input.pre_signed_url {
        scope_2127.string(var_2128);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_export_task(input: &crate::input::StartExportTaskInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartExportTask", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2129 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_2130) = &input.export_task_identifier {
        scope_2129.string(var_2130);
    }
    #[allow(unused_mut)]let mut scope_2131 = writer.prefix("SourceArn");
    if let Some(var_2132) = &input.source_arn {
        scope_2131.string(var_2132);
    }
    #[allow(unused_mut)]let mut scope_2133 = writer.prefix("S3BucketName");
    if let Some(var_2134) = &input.s3_bucket_name {
        scope_2133.string(var_2134);
    }
    #[allow(unused_mut)]let mut scope_2135 = writer.prefix("IamRoleArn");
    if let Some(var_2136) = &input.iam_role_arn {
        scope_2135.string(var_2136);
    }
    #[allow(unused_mut)]let mut scope_2137 = writer.prefix("KmsKeyId");
    if let Some(var_2138) = &input.kms_key_id {
        scope_2137.string(var_2138);
    }
    #[allow(unused_mut)]let mut scope_2139 = writer.prefix("S3Prefix");
    if let Some(var_2140) = &input.s3_prefix {
        scope_2139.string(var_2140);
    }
    #[allow(unused_mut)]let mut scope_2141 = writer.prefix("ExportOnly");
    if let Some(var_2142) = &input.export_only {
        let mut list_2144 = scope_2141.start_list(false, None);
        for item_2143 in var_2142 {
            #[allow(unused_mut)]let mut entry_2145 = list_2144.entry();
            entry_2145.string(item_2143);
        }
        list_2144.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_activity_stream(input: &crate::input::StopActivityStreamInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopActivityStream", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2146 = writer.prefix("ResourceArn");
    if let Some(var_2147) = &input.resource_arn {
        scope_2146.string(var_2147);
    }
    #[allow(unused_mut)]let mut scope_2148 = writer.prefix("ApplyImmediately");
    if let Some(var_2149) = &input.apply_immediately {
        scope_2148.boolean(*var_2149);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(input: &crate::input::StopDbClusterInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2150 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2151) = &input.db_cluster_identifier {
        scope_2150.string(var_2151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance(input: &crate::input::StopDbInstanceInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBInstance", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2152 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2153) = &input.db_instance_identifier {
        scope_2152.string(var_2153);
    }
    #[allow(unused_mut)]let mut scope_2154 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_2155) = &input.db_snapshot_identifier {
        scope_2154.string(var_2155);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance_automated_backups_replication(input: &crate::input::StopDbInstanceAutomatedBackupsReplicationInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBInstanceAutomatedBackupsReplication", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2156 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2157) = &input.source_db_instance_arn {
        scope_2156.string(var_2157);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_switchover_read_replica(input: &crate::input::SwitchoverReadReplicaInput) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SwitchoverReadReplica", "2014-10-31");
    #[allow(unused_mut)]let mut scope_2158 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2159) = &input.db_instance_identifier {
        scope_2158.string(var_2159);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

