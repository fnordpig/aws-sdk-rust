// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.update_token {
        object.key("UpdateToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.firewall_arn {
        object.key("FirewallArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.firewall_name {
        object.key("FirewallName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_subnets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateSubnetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_5) = &input.update_token {
        object.key("UpdateToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.firewall_arn {
        object.key("FirewallArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.firewall_name {
        object.key("FirewallName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.subnet_mappings {
        let mut array_9 = object.key("SubnetMappings").start_array();
        for item_10 in var_8 {
             {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.firewall_name {
        object.key("FirewallName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.vpc_id {
        object.key("VpcId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.subnet_mappings {
        let mut array_16 = object.key("SubnetMappings").start_array();
        for item_17 in var_15 {
             {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subnet_mapping(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.delete_protection {
        object.key("DeleteProtection").boolean(*var_19);
    }
    if let Some(var_20) = &input.subnet_change_protection {
        object.key("SubnetChangeProtection").boolean(*var_20);
    }
    if let Some(var_21) = &input.firewall_policy_change_protection {
        object.key("FirewallPolicyChangeProtection").boolean(*var_21);
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22.as_str());
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
             {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.encryption_configuration {
        let mut object_28 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_29.as_str());
    }
    if let Some(var_30) = &input.firewall_policy {
        let mut object_31 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.description {
        object.key("Description").string(var_32.as_str());
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("Tags").start_array();
        for item_35 in var_33 {
             {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.dry_run {
        object.key("DryRun").boolean(*var_37);
    }
    if let Some(var_38) = &input.encryption_configuration {
        let mut object_39 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_39, var_38)?;
        object_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_40) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_40.as_str());
    }
    if let Some(var_41) = &input.rule_group {
        let mut object_42 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.rules {
        object.key("Rules").string(var_43.as_str());
    }
    if let Some(var_44) = &input.r#type {
        object.key("Type").string(var_44.as_str());
    }
    if let Some(var_45) = &input.description {
        object.key("Description").string(var_45.as_str());
    }
    if let Some(var_46) = &input.capacity {
        object.key("Capacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_46).into()));
    }
    if let Some(var_47) = &input.tags {
        let mut array_48 = object.key("Tags").start_array();
        for item_49 in var_47 {
             {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if let Some(var_51) = &input.dry_run {
        object.key("DryRun").boolean(*var_51);
    }
    if let Some(var_52) = &input.encryption_configuration {
        let mut object_53 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.source_metadata {
        let mut object_55 = object.key("SourceMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_source_metadata(&mut object_55, var_54)?;
        object_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.firewall_name {
        object.key("FirewallName").string(var_56.as_str());
    }
    if let Some(var_57) = &input.firewall_arn {
        object.key("FirewallArn").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_58.as_str());
    }
    if let Some(var_59) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_60) = &input.resource_arn {
        object.key("ResourceArn").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_62.as_str());
    }
    if let Some(var_63) = &input.r#type {
        object.key("Type").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFirewallInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_64) = &input.firewall_name {
        object.key("FirewallName").string(var_64.as_str());
    }
    if let Some(var_65) = &input.firewall_arn {
        object.key("FirewallArn").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_66.as_str());
    }
    if let Some(var_67) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_67.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_logging_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLoggingConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_68) = &input.firewall_arn {
        object.key("FirewallArn").string(var_68.as_str());
    }
    if let Some(var_69) = &input.firewall_name {
        object.key("FirewallName").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_70) = &input.resource_arn {
        object.key("ResourceArn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_71) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_71.as_str());
    }
    if let Some(var_72) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.r#type {
        object.key("Type").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_rule_group_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRuleGroupMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_74) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_75.as_str());
    }
    if let Some(var_76) = &input.r#type {
        object.key("Type").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_subnets_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateSubnetsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.update_token {
        object.key("UpdateToken").string(var_77.as_str());
    }
    if let Some(var_78) = &input.firewall_arn {
        object.key("FirewallArn").string(var_78.as_str());
    }
    if let Some(var_79) = &input.firewall_name {
        object.key("FirewallName").string(var_79.as_str());
    }
    if let Some(var_80) = &input.subnet_ids {
        let mut array_81 = object.key("SubnetIds").start_array();
        for item_82 in var_80 {
             {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewall_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFirewallPoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_83) = &input.next_token {
        object.key("NextToken").string(var_83.as_str());
    }
    if let Some(var_84) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_84).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_firewalls_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFirewallsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85.as_str());
    }
    if let Some(var_86) = &input.vpc_ids {
        let mut array_87 = object.key("VpcIds").start_array();
        for item_88 in var_86 {
             {
                array_87.value().string(item_88.as_str());
            }
        }
        array_87.finish();
    }
    if let Some(var_89) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_89).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_rule_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRuleGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    if let Some(var_91) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_91).into()));
    }
    if let Some(var_92) = &input.scope {
        object.key("Scope").string(var_92.as_str());
    }
    if let Some(var_93) = &input.managed_type {
        object.key("ManagedType").string(var_93.as_str());
    }
    if let Some(var_94) = &input.r#type {
        object.key("Type").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_95) = &input.next_token {
        object.key("NextToken").string(var_95.as_str());
    }
    if let Some(var_96) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_96).into()));
    }
    if let Some(var_97) = &input.resource_arn {
        object.key("ResourceArn").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_98) = &input.resource_arn {
        object.key("ResourceArn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.policy {
        object.key("Policy").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_100) = &input.resource_arn {
        object.key("ResourceArn").string(var_100.as_str());
    }
    if let Some(var_101) = &input.tags {
        let mut array_102 = object.key("Tags").start_array();
        for item_103 in var_101 {
             {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_105) = &input.resource_arn {
        object.key("ResourceArn").string(var_105.as_str());
    }
    if let Some(var_106) = &input.tag_keys {
        let mut array_107 = object.key("TagKeys").start_array();
        for item_108 in var_106 {
             {
                array_107.value().string(item_108.as_str());
            }
        }
        array_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_delete_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallDeleteProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_109) = &input.update_token {
        object.key("UpdateToken").string(var_109.as_str());
    }
    if let Some(var_110) = &input.firewall_arn {
        object.key("FirewallArn").string(var_110.as_str());
    }
    if let Some(var_111) = &input.firewall_name {
        object.key("FirewallName").string(var_111.as_str());
    }
    if let Some(var_112) = &input.delete_protection {
        object.key("DeleteProtection").boolean(*var_112);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_description_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallDescriptionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_113) = &input.update_token {
        object.key("UpdateToken").string(var_113.as_str());
    }
    if let Some(var_114) = &input.firewall_arn {
        object.key("FirewallArn").string(var_114.as_str());
    }
    if let Some(var_115) = &input.firewall_name {
        object.key("FirewallName").string(var_115.as_str());
    }
    if let Some(var_116) = &input.description {
        object.key("Description").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_encryption_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallEncryptionConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.update_token {
        object.key("UpdateToken").string(var_117.as_str());
    }
    if let Some(var_118) = &input.firewall_arn {
        object.key("FirewallArn").string(var_118.as_str());
    }
    if let Some(var_119) = &input.firewall_name {
        object.key("FirewallName").string(var_119.as_str());
    }
    if let Some(var_120) = &input.encryption_configuration {
        let mut object_121 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_121, var_120)?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.update_token {
        object.key("UpdateToken").string(var_122.as_str());
    }
    if let Some(var_123) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_123.as_str());
    }
    if let Some(var_124) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_124.as_str());
    }
    if let Some(var_125) = &input.firewall_policy {
        let mut object_126 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy(&mut object_126, var_125)?;
        object_126.finish();
    }
    if let Some(var_127) = &input.description {
        object.key("Description").string(var_127.as_str());
    }
    if let Some(var_128) = &input.dry_run {
        object.key("DryRun").boolean(*var_128);
    }
    if let Some(var_129) = &input.encryption_configuration {
        let mut object_130 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_130, var_129)?;
        object_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_firewall_policy_change_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFirewallPolicyChangeProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.update_token {
        object.key("UpdateToken").string(var_131.as_str());
    }
    if let Some(var_132) = &input.firewall_arn {
        object.key("FirewallArn").string(var_132.as_str());
    }
    if let Some(var_133) = &input.firewall_name {
        object.key("FirewallName").string(var_133.as_str());
    }
    if let Some(var_134) = &input.firewall_policy_change_protection {
        object.key("FirewallPolicyChangeProtection").boolean(*var_134);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_logging_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateLoggingConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_135) = &input.firewall_arn {
        object.key("FirewallArn").string(var_135.as_str());
    }
    if let Some(var_136) = &input.firewall_name {
        object.key("FirewallName").string(var_136.as_str());
    }
    if let Some(var_137) = &input.logging_configuration {
        let mut object_138 = object.key("LoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_configuration(&mut object_138, var_137)?;
        object_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_rule_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRuleGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.update_token {
        object.key("UpdateToken").string(var_139.as_str());
    }
    if let Some(var_140) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_140.as_str());
    }
    if let Some(var_141) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_141.as_str());
    }
    if let Some(var_142) = &input.rule_group {
        let mut object_143 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group(&mut object_143, var_142)?;
        object_143.finish();
    }
    if let Some(var_144) = &input.rules {
        object.key("Rules").string(var_144.as_str());
    }
    if let Some(var_145) = &input.r#type {
        object.key("Type").string(var_145.as_str());
    }
    if let Some(var_146) = &input.description {
        object.key("Description").string(var_146.as_str());
    }
    if let Some(var_147) = &input.dry_run {
        object.key("DryRun").boolean(*var_147);
    }
    if let Some(var_148) = &input.encryption_configuration {
        let mut object_149 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_149, var_148)?;
        object_149.finish();
    }
    if let Some(var_150) = &input.source_metadata {
        let mut object_151 = object.key("SourceMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_source_metadata(&mut object_151, var_150)?;
        object_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_subnet_change_protection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSubnetChangeProtectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_152) = &input.update_token {
        object.key("UpdateToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.firewall_arn {
        object.key("FirewallArn").string(var_153.as_str());
    }
    if let Some(var_154) = &input.firewall_name {
        object.key("FirewallName").string(var_154.as_str());
    }
    if let Some(var_155) = &input.subnet_change_protection {
        object.key("SubnetChangeProtection").boolean(*var_155);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subnet_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SubnetMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_156) = &input.subnet_id {
        object.key("SubnetId").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Tag) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_157) = &input.key {
        object.key("Key").string(var_157.as_str());
    }
    if let Some(var_158) = &input.value {
        object.key("Value").string(var_158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_159) = &input.key_id {
        object.key("KeyId").string(var_159.as_str());
    }
    if let Some(var_160) = &input.r#type {
        object.key("Type").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FirewallPolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_161) = &input.stateless_rule_group_references {
        let mut array_162 = object.key("StatelessRuleGroupReferences").start_array();
        for item_163 in var_161 {
             {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule_group_reference(&mut object_164, item_163)?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.stateless_default_actions {
        let mut array_166 = object.key("StatelessDefaultActions").start_array();
        for item_167 in var_165 {
             {
                array_166.value().string(item_167.as_str());
            }
        }
        array_166.finish();
    }
    if let Some(var_168) = &input.stateless_fragment_default_actions {
        let mut array_169 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_170 in var_168 {
             {
                array_169.value().string(item_170.as_str());
            }
        }
        array_169.finish();
    }
    if let Some(var_171) = &input.stateless_custom_actions {
        let mut array_172 = object.key("StatelessCustomActions").start_array();
        for item_173 in var_171 {
             {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(&mut object_174, item_173)?;
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.stateful_rule_group_references {
        let mut array_176 = object.key("StatefulRuleGroupReferences").start_array();
        for item_177 in var_175 {
             {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule_group_reference(&mut object_178, item_177)?;
                object_178.finish();
            }
        }
        array_176.finish();
    }
    if let Some(var_179) = &input.stateful_default_actions {
        let mut array_180 = object.key("StatefulDefaultActions").start_array();
        for item_181 in var_179 {
             {
                array_180.value().string(item_181.as_str());
            }
        }
        array_180.finish();
    }
    if let Some(var_182) = &input.stateful_engine_options {
        let mut object_183 = object.key("StatefulEngineOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_engine_options(&mut object_183, var_182)?;
        object_183.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleGroup) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_184) = &input.rule_variables {
        let mut object_185 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_variables(&mut object_185, var_184)?;
        object_185.finish();
    }
    if let Some(var_186) = &input.reference_sets {
        let mut object_187 = object.key("ReferenceSets").start_object();
        crate::json_ser::serialize_structure_crate_model_reference_sets(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.rules_source {
        let mut object_189 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source(&mut object_189, var_188)?;
        object_189.finish();
    }
    if let Some(var_190) = &input.stateful_rule_options {
        let mut object_191 = object.key("StatefulRuleOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_options(&mut object_191, var_190)?;
        object_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_metadata(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceMetadata) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_192) = &input.source_arn {
        object.key("SourceArn").string(var_192.as_str());
    }
    if let Some(var_193) = &input.source_update_token {
        object.key("SourceUpdateToken").string(var_193.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LoggingConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_194) = &input.log_destination_configs {
        let mut array_195 = object.key("LogDestinationConfigs").start_array();
        for item_196 in var_194 {
             {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_crate_model_log_destination_config(&mut object_197, item_196)?;
                object_197.finish();
            }
        }
        array_195.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule_group_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRuleGroupReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_198) = &input.resource_arn {
        object.key("ResourceArn").string(var_198.as_str());
    }
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_199) = &input.action_name {
        object.key("ActionName").string(var_199.as_str());
    }
    if let Some(var_200) = &input.action_definition {
        let mut object_201 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_action_definition(&mut object_201, var_200)?;
        object_201.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleGroupReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_202) = &input.resource_arn {
        object.key("ResourceArn").string(var_202.as_str());
    }
    if let Some(var_203) = &input.priority {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_203).into()));
    }
    if let Some(var_204) = &input.r#override {
        let mut object_205 = object.key("Override").start_object();
        crate::json_ser::serialize_structure_crate_model_stateful_rule_group_override(&mut object_205, var_204)?;
        object_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_engine_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulEngineOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_206) = &input.rule_order {
        object.key("RuleOrder").string(var_206.as_str());
    }
    if let Some(var_207) = &input.stream_exception_policy {
        object.key("StreamExceptionPolicy").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_variables(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleVariables) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_208) = &input.ip_sets {
        let mut object_209 = object.key("IPSets").start_object();
        for (key_210, value_211) in var_208 {
             {
                let mut object_212 = object_209.key(key_210.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ip_set(&mut object_212, value_211)?;
                object_212.finish();
            }
        }
        object_209.finish();
    }
    if let Some(var_213) = &input.port_sets {
        let mut object_214 = object.key("PortSets").start_object();
        for (key_215, value_216) in var_213 {
             {
                let mut object_217 = object_214.key(key_215.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_port_set(&mut object_217, value_216)?;
                object_217.finish();
            }
        }
        object_214.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference_sets(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ReferenceSets) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_218) = &input.ip_set_references {
        let mut object_219 = object.key("IPSetReferences").start_object();
        for (key_220, value_221) in var_218 {
             {
                let mut object_222 = object_219.key(key_220.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_ip_set_reference(&mut object_222, value_221)?;
                object_222.finish();
            }
        }
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RulesSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_223) = &input.rules_string {
        object.key("RulesString").string(var_223.as_str());
    }
    if let Some(var_224) = &input.rules_source_list {
        let mut object_225 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rules_source_list(&mut object_225, var_224)?;
        object_225.finish();
    }
    if let Some(var_226) = &input.stateful_rules {
        let mut array_227 = object.key("StatefulRules").start_array();
        for item_228 in var_226 {
             {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateful_rule(&mut object_229, item_228)?;
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.stateless_rules_and_custom_actions {
        let mut object_231 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_rules_and_custom_actions(&mut object_231, var_230)?;
        object_231.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_232) = &input.rule_order {
        object.key("RuleOrder").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_destination_config(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LogDestinationConfig) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_233) = &input.log_type {
        object.key("LogType").string(var_233.as_str());
    }
    if let Some(var_234) = &input.log_destination_type {
        object.key("LogDestinationType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.log_destination {
        let mut object_236 = object.key("LogDestination").start_object();
        for (key_237, value_238) in var_235 {
             {
                object_236.key(key_237.as_str()).string(value_238.as_str());
            }
        }
        object_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ActionDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_239) = &input.publish_metric_action {
        let mut object_240 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_publish_metric_action(&mut object_240, var_239)?;
        object_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule_group_override(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRuleGroupOverride) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_241) = &input.action {
        object.key("Action").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IpSet) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_242) = &input.definition {
        let mut array_243 = object.key("Definition").start_array();
        for item_244 in var_242 {
             {
                array_243.value().string(item_244.as_str());
            }
        }
        array_243.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_set(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PortSet) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_245) = &input.definition {
        let mut array_246 = object.key("Definition").start_array();
        for item_247 in var_245 {
             {
                array_246.value().string(item_247.as_str());
            }
        }
        array_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_set_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IpSetReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_248) = &input.reference_arn {
        object.key("ReferenceArn").string(var_248.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rules_source_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RulesSourceList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_249) = &input.targets {
        let mut array_250 = object.key("Targets").start_array();
        for item_251 in var_249 {
             {
                array_250.value().string(item_251.as_str());
            }
        }
        array_250.finish();
    }
    if let Some(var_252) = &input.target_types {
        let mut array_253 = object.key("TargetTypes").start_array();
        for item_254 in var_252 {
             {
                array_253.value().string(item_254.as_str());
            }
        }
        array_253.finish();
    }
    if let Some(var_255) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_255.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateful_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatefulRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_256) = &input.action {
        object.key("Action").string(var_256.as_str());
    }
    if let Some(var_257) = &input.header {
        let mut object_258 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_header(&mut object_258, var_257)?;
        object_258.finish();
    }
    if let Some(var_259) = &input.rule_options {
        let mut array_260 = object.key("RuleOptions").start_array();
        for item_261 in var_259 {
             {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_option(&mut object_262, item_261)?;
                object_262.finish();
            }
        }
        array_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rules_and_custom_actions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRulesAndCustomActions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_263) = &input.stateless_rules {
        let mut array_264 = object.key("StatelessRules").start_array();
        for item_265 in var_263 {
             {
                let mut object_266 = array_264.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_rule(&mut object_266, item_265)?;
                object_266.finish();
            }
        }
        array_264.finish();
    }
    if let Some(var_267) = &input.custom_actions {
        let mut array_268 = object.key("CustomActions").start_array();
        for item_269 in var_267 {
             {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_action(&mut object_270, item_269)?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_publish_metric_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PublishMetricAction) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_271) = &input.dimensions {
        let mut array_272 = object.key("Dimensions").start_array();
        for item_273 in var_271 {
             {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dimension(&mut object_274, item_273)?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_header(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Header) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_275) = &input.protocol {
        object.key("Protocol").string(var_275.as_str());
    }
    if let Some(var_276) = &input.source {
        object.key("Source").string(var_276.as_str());
    }
    if let Some(var_277) = &input.source_port {
        object.key("SourcePort").string(var_277.as_str());
    }
    if let Some(var_278) = &input.direction {
        object.key("Direction").string(var_278.as_str());
    }
    if let Some(var_279) = &input.destination {
        object.key("Destination").string(var_279.as_str());
    }
    if let Some(var_280) = &input.destination_port {
        object.key("DestinationPort").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_option(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleOption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_281) = &input.keyword {
        object.key("Keyword").string(var_281.as_str());
    }
    if let Some(var_282) = &input.settings {
        let mut array_283 = object.key("Settings").start_array();
        for item_284 in var_282 {
             {
                array_283.value().string(item_284.as_str());
            }
        }
        array_283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StatelessRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_285) = &input.rule_definition {
        let mut object_286 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_definition(&mut object_286, var_285)?;
        object_286.finish();
    }
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dimension(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Dimension) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_287) = &input.value {
        object.key("Value").string(var_287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_definition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RuleDefinition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_288) = &input.match_attributes {
        let mut object_289 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_match_attributes(&mut object_289, var_288)?;
        object_289.finish();
    }
    if let Some(var_290) = &input.actions {
        let mut array_291 = object.key("Actions").start_array();
        for item_292 in var_290 {
             {
                array_291.value().string(item_292.as_str());
            }
        }
        array_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_match_attributes(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MatchAttributes) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_293) = &input.sources {
        let mut array_294 = object.key("Sources").start_array();
        for item_295 in var_293 {
             {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(&mut object_296, item_295)?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.destinations {
        let mut array_298 = object.key("Destinations").start_array();
        for item_299 in var_297 {
             {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_address(&mut object_300, item_299)?;
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.source_ports {
        let mut array_302 = object.key("SourcePorts").start_array();
        for item_303 in var_301 {
             {
                let mut object_304 = array_302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(&mut object_304, item_303)?;
                object_304.finish();
            }
        }
        array_302.finish();
    }
    if let Some(var_305) = &input.destination_ports {
        let mut array_306 = object.key("DestinationPorts").start_array();
        for item_307 in var_305 {
             {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(&mut object_308, item_307)?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.protocols {
        let mut array_310 = object.key("Protocols").start_array();
        for item_311 in var_309 {
             {
                array_310.value().number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*item_311).into()));
            }
        }
        array_310.finish();
    }
    if let Some(var_312) = &input.tcp_flags {
        let mut array_313 = object.key("TCPFlags").start_array();
        for item_314 in var_312 {
             {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tcp_flag_field(&mut object_315, item_314)?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_address(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Address) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_316) = &input.address_definition {
        object.key("AddressDefinition").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PortRange) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("FromPort").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.from_port).into()));
    }
     {
        object.key("ToPort").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.to_port).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tcp_flag_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TcpFlagField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_317) = &input.flags {
        let mut array_318 = object.key("Flags").start_array();
        for item_319 in var_317 {
             {
                array_318.value().string(item_319.as_str());
            }
        }
        array_318.finish();
    }
    if let Some(var_320) = &input.masks {
        let mut array_321 = object.key("Masks").start_array();
        for item_322 in var_320 {
             {
                array_321.value().string(item_322.as_str());
            }
        }
        array_321.finish();
    }
    Ok(())
}

