// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_custom_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AddCustomAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.custom_attributes {
        let mut array_3 = object.key("CustomAttributes").start_array();
        for item_4 in var_2 {
             {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_attribute_type(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_add_user_to_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminAddUserToGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_6) = &input.user_pool_id {
        object.key("UserPoolId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.username {
        object.key("Username").string(var_7.as_str());
    }
    if let Some(var_8) = &input.group_name {
        object.key("GroupName").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_confirm_sign_up_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminConfirmSignUpInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_9) = &input.user_pool_id {
        object.key("UserPoolId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.username {
        object.key("Username").string(var_10.as_str());
    }
    if let Some(var_11) = &input.client_metadata {
        let mut object_12 = object.key("ClientMetadata").start_object();
        for (key_13, value_14) in var_11 {
             {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_create_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminCreateUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_15) = &input.user_pool_id {
        object.key("UserPoolId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.username {
        object.key("Username").string(var_16.as_str());
    }
    if let Some(var_17) = &input.user_attributes {
        let mut array_18 = object.key("UserAttributes").start_array();
        for item_19 in var_17 {
             {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.validation_data {
        let mut array_22 = object.key("ValidationData").start_array();
        for item_23 in var_21 {
             {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.temporary_password {
        object.key("TemporaryPassword").string(var_25.as_str());
    }
    if input.force_alias_creation {
        object.key("ForceAliasCreation").boolean(input.force_alias_creation);
    }
    if let Some(var_26) = &input.message_action {
        object.key("MessageAction").string(var_26.as_str());
    }
    if let Some(var_27) = &input.desired_delivery_mediums {
        let mut array_28 = object.key("DesiredDeliveryMediums").start_array();
        for item_29 in var_27 {
             {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.client_metadata {
        let mut object_31 = object.key("ClientMetadata").start_object();
        for (key_32, value_33) in var_30 {
             {
                object_31.key(key_32.as_str()).string(value_33.as_str());
            }
        }
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_delete_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminDeleteUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_34) = &input.user_pool_id {
        object.key("UserPoolId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.username {
        object.key("Username").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_delete_user_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminDeleteUserAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.user_pool_id {
        object.key("UserPoolId").string(var_36.as_str());
    }
    if let Some(var_37) = &input.username {
        object.key("Username").string(var_37.as_str());
    }
    if let Some(var_38) = &input.user_attribute_names {
        let mut array_39 = object.key("UserAttributeNames").start_array();
        for item_40 in var_38 {
             {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_disable_provider_for_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminDisableProviderForUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_41) = &input.user_pool_id {
        object.key("UserPoolId").string(var_41.as_str());
    }
    if let Some(var_42) = &input.user {
        let mut object_43 = object.key("User").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(&mut object_43, var_42)?;
        object_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_disable_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminDisableUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_44) = &input.user_pool_id {
        object.key("UserPoolId").string(var_44.as_str());
    }
    if let Some(var_45) = &input.username {
        object.key("Username").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_enable_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminEnableUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.user_pool_id {
        object.key("UserPoolId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.username {
        object.key("Username").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_forget_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminForgetDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.user_pool_id {
        object.key("UserPoolId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.username {
        object.key("Username").string(var_49.as_str());
    }
    if let Some(var_50) = &input.device_key {
        object.key("DeviceKey").string(var_50.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_get_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminGetDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.device_key {
        object.key("DeviceKey").string(var_51.as_str());
    }
    if let Some(var_52) = &input.user_pool_id {
        object.key("UserPoolId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.username {
        object.key("Username").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_get_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminGetUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_54) = &input.user_pool_id {
        object.key("UserPoolId").string(var_54.as_str());
    }
    if let Some(var_55) = &input.username {
        object.key("Username").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_initiate_auth_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminInitiateAuthInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.user_pool_id {
        object.key("UserPoolId").string(var_56.as_str());
    }
    if let Some(var_57) = &input.client_id {
        object.key("ClientId").string(var_57.as_str());
    }
    if let Some(var_58) = &input.auth_flow {
        object.key("AuthFlow").string(var_58.as_str());
    }
    if let Some(var_59) = &input.auth_parameters {
        let mut object_60 = object.key("AuthParameters").start_object();
        for (key_61, value_62) in var_59 {
             {
                object_60.key(key_61.as_str()).string(value_62.as_str());
            }
        }
        object_60.finish();
    }
    if let Some(var_63) = &input.client_metadata {
        let mut object_64 = object.key("ClientMetadata").start_object();
        for (key_65, value_66) in var_63 {
             {
                object_64.key(key_65.as_str()).string(value_66.as_str());
            }
        }
        object_64.finish();
    }
    if let Some(var_67) = &input.analytics_metadata {
        let mut object_68 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.context_data {
        let mut object_70 = object.key("ContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_context_data_type(&mut object_70, var_69)?;
        object_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_link_provider_for_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminLinkProviderForUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_71) = &input.user_pool_id {
        object.key("UserPoolId").string(var_71.as_str());
    }
    if let Some(var_72) = &input.destination_user {
        let mut object_73 = object.key("DestinationUser").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(&mut object_73, var_72)?;
        object_73.finish();
    }
    if let Some(var_74) = &input.source_user {
        let mut object_75 = object.key("SourceUser").start_object();
        crate::json_ser::serialize_structure_crate_model_provider_user_identifier_type(&mut object_75, var_74)?;
        object_75.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminListDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.user_pool_id {
        object.key("UserPoolId").string(var_76.as_str());
    }
    if let Some(var_77) = &input.username {
        object.key("Username").string(var_77.as_str());
    }
    if let Some(var_78) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_78).into()));
    }
    if let Some(var_79) = &input.pagination_token {
        object.key("PaginationToken").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_groups_for_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminListGroupsForUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_80) = &input.username {
        object.key("Username").string(var_80.as_str());
    }
    if let Some(var_81) = &input.user_pool_id {
        object.key("UserPoolId").string(var_81.as_str());
    }
    if let Some(var_82) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_82).into()));
    }
    if let Some(var_83) = &input.next_token {
        object.key("NextToken").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_list_user_auth_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminListUserAuthEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.user_pool_id {
        object.key("UserPoolId").string(var_84.as_str());
    }
    if let Some(var_85) = &input.username {
        object.key("Username").string(var_85.as_str());
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_86).into()));
    }
    if let Some(var_87) = &input.next_token {
        object.key("NextToken").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_remove_user_from_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminRemoveUserFromGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.user_pool_id {
        object.key("UserPoolId").string(var_88.as_str());
    }
    if let Some(var_89) = &input.username {
        object.key("Username").string(var_89.as_str());
    }
    if let Some(var_90) = &input.group_name {
        object.key("GroupName").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_reset_user_password_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminResetUserPasswordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_91) = &input.user_pool_id {
        object.key("UserPoolId").string(var_91.as_str());
    }
    if let Some(var_92) = &input.username {
        object.key("Username").string(var_92.as_str());
    }
    if let Some(var_93) = &input.client_metadata {
        let mut object_94 = object.key("ClientMetadata").start_object();
        for (key_95, value_96) in var_93 {
             {
                object_94.key(key_95.as_str()).string(value_96.as_str());
            }
        }
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_respond_to_auth_challenge_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminRespondToAuthChallengeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_97) = &input.user_pool_id {
        object.key("UserPoolId").string(var_97.as_str());
    }
    if let Some(var_98) = &input.client_id {
        object.key("ClientId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.challenge_name {
        object.key("ChallengeName").string(var_99.as_str());
    }
    if let Some(var_100) = &input.challenge_responses {
        let mut object_101 = object.key("ChallengeResponses").start_object();
        for (key_102, value_103) in var_100 {
             {
                object_101.key(key_102.as_str()).string(value_103.as_str());
            }
        }
        object_101.finish();
    }
    if let Some(var_104) = &input.session {
        object.key("Session").string(var_104.as_str());
    }
    if let Some(var_105) = &input.analytics_metadata {
        let mut object_106 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.context_data {
        let mut object_108 = object.key("ContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_context_data_type(&mut object_108, var_107)?;
        object_108.finish();
    }
    if let Some(var_109) = &input.client_metadata {
        let mut object_110 = object.key("ClientMetadata").start_object();
        for (key_111, value_112) in var_109 {
             {
                object_110.key(key_111.as_str()).string(value_112.as_str());
            }
        }
        object_110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_mfa_preference_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminSetUserMfaPreferenceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_113) = &input.sms_mfa_settings {
        let mut object_114 = object.key("SMSMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_settings_type(&mut object_114, var_113)?;
        object_114.finish();
    }
    if let Some(var_115) = &input.software_token_mfa_settings {
        let mut object_116 = object.key("SoftwareTokenMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_settings_type(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.username {
        object.key("Username").string(var_117.as_str());
    }
    if let Some(var_118) = &input.user_pool_id {
        object.key("UserPoolId").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_password_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminSetUserPasswordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_119) = &input.user_pool_id {
        object.key("UserPoolId").string(var_119.as_str());
    }
    if let Some(var_120) = &input.username {
        object.key("Username").string(var_120.as_str());
    }
    if let Some(var_121) = &input.password {
        object.key("Password").string(var_121.as_str());
    }
    if input.permanent {
        object.key("Permanent").boolean(input.permanent);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_set_user_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminSetUserSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.user_pool_id {
        object.key("UserPoolId").string(var_122.as_str());
    }
    if let Some(var_123) = &input.username {
        object.key("Username").string(var_123.as_str());
    }
    if let Some(var_124) = &input.mfa_options {
        let mut array_125 = object.key("MFAOptions").start_array();
        for item_126 in var_124 {
             {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mfa_option_type(&mut object_127, item_126)?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_auth_event_feedback_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminUpdateAuthEventFeedbackInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_128) = &input.user_pool_id {
        object.key("UserPoolId").string(var_128.as_str());
    }
    if let Some(var_129) = &input.username {
        object.key("Username").string(var_129.as_str());
    }
    if let Some(var_130) = &input.event_id {
        object.key("EventId").string(var_130.as_str());
    }
    if let Some(var_131) = &input.feedback_value {
        object.key("FeedbackValue").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_device_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminUpdateDeviceStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_132) = &input.user_pool_id {
        object.key("UserPoolId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.username {
        object.key("Username").string(var_133.as_str());
    }
    if let Some(var_134) = &input.device_key {
        object.key("DeviceKey").string(var_134.as_str());
    }
    if let Some(var_135) = &input.device_remembered_status {
        object.key("DeviceRememberedStatus").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_update_user_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminUpdateUserAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_136) = &input.user_pool_id {
        object.key("UserPoolId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.username {
        object.key("Username").string(var_137.as_str());
    }
    if let Some(var_138) = &input.user_attributes {
        let mut array_139 = object.key("UserAttributes").start_array();
        for item_140 in var_138 {
             {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_141, item_140)?;
                object_141.finish();
            }
        }
        array_139.finish();
    }
    if let Some(var_142) = &input.client_metadata {
        let mut object_143 = object.key("ClientMetadata").start_object();
        for (key_144, value_145) in var_142 {
             {
                object_143.key(key_144.as_str()).string(value_145.as_str());
            }
        }
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_admin_user_global_sign_out_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AdminUserGlobalSignOutInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_146) = &input.user_pool_id {
        object.key("UserPoolId").string(var_146.as_str());
    }
    if let Some(var_147) = &input.username {
        object.key("Username").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_software_token_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateSoftwareTokenInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_148) = &input.access_token {
        object.key("AccessToken").string(var_148.as_str());
    }
    if let Some(var_149) = &input.session {
        object.key("Session").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_change_password_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ChangePasswordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_150) = &input.previous_password {
        object.key("PreviousPassword").string(var_150.as_str());
    }
    if let Some(var_151) = &input.proposed_password {
        object.key("ProposedPassword").string(var_151.as_str());
    }
    if let Some(var_152) = &input.access_token {
        object.key("AccessToken").string(var_152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ConfirmDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_153) = &input.access_token {
        object.key("AccessToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.device_key {
        object.key("DeviceKey").string(var_154.as_str());
    }
    if let Some(var_155) = &input.device_secret_verifier_config {
        let mut object_156 = object.key("DeviceSecretVerifierConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_device_secret_verifier_config_type(&mut object_156, var_155)?;
        object_156.finish();
    }
    if let Some(var_157) = &input.device_name {
        object.key("DeviceName").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_forgot_password_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ConfirmForgotPasswordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_158) = &input.client_id {
        object.key("ClientId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.secret_hash {
        object.key("SecretHash").string(var_159.as_str());
    }
    if let Some(var_160) = &input.username {
        object.key("Username").string(var_160.as_str());
    }
    if let Some(var_161) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_161.as_str());
    }
    if let Some(var_162) = &input.password {
        object.key("Password").string(var_162.as_str());
    }
    if let Some(var_163) = &input.analytics_metadata {
        let mut object_164 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_164, var_163)?;
        object_164.finish();
    }
    if let Some(var_165) = &input.user_context_data {
        let mut object_166 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.client_metadata {
        let mut object_168 = object.key("ClientMetadata").start_object();
        for (key_169, value_170) in var_167 {
             {
                object_168.key(key_169.as_str()).string(value_170.as_str());
            }
        }
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_confirm_sign_up_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ConfirmSignUpInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_171) = &input.client_id {
        object.key("ClientId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.secret_hash {
        object.key("SecretHash").string(var_172.as_str());
    }
    if let Some(var_173) = &input.username {
        object.key("Username").string(var_173.as_str());
    }
    if let Some(var_174) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_174.as_str());
    }
    if input.force_alias_creation {
        object.key("ForceAliasCreation").boolean(input.force_alias_creation);
    }
    if let Some(var_175) = &input.analytics_metadata {
        let mut object_176 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_176, var_175)?;
        object_176.finish();
    }
    if let Some(var_177) = &input.user_context_data {
        let mut object_178 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_178, var_177)?;
        object_178.finish();
    }
    if let Some(var_179) = &input.client_metadata {
        let mut object_180 = object.key("ClientMetadata").start_object();
        for (key_181, value_182) in var_179 {
             {
                object_180.key(key_181.as_str()).string(value_182.as_str());
            }
        }
        object_180.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_183) = &input.group_name {
        object.key("GroupName").string(var_183.as_str());
    }
    if let Some(var_184) = &input.user_pool_id {
        object.key("UserPoolId").string(var_184.as_str());
    }
    if let Some(var_185) = &input.description {
        object.key("Description").string(var_185.as_str());
    }
    if let Some(var_186) = &input.role_arn {
        object.key("RoleArn").string(var_186.as_str());
    }
    if let Some(var_187) = &input.precedence {
        object.key("Precedence").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_187).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_identity_provider_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateIdentityProviderInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_188) = &input.user_pool_id {
        object.key("UserPoolId").string(var_188.as_str());
    }
    if let Some(var_189) = &input.provider_name {
        object.key("ProviderName").string(var_189.as_str());
    }
    if let Some(var_190) = &input.provider_type {
        object.key("ProviderType").string(var_190.as_str());
    }
    if let Some(var_191) = &input.provider_details {
        let mut object_192 = object.key("ProviderDetails").start_object();
        for (key_193, value_194) in var_191 {
             {
                object_192.key(key_193.as_str()).string(value_194.as_str());
            }
        }
        object_192.finish();
    }
    if let Some(var_195) = &input.attribute_mapping {
        let mut object_196 = object.key("AttributeMapping").start_object();
        for (key_197, value_198) in var_195 {
             {
                object_196.key(key_197.as_str()).string(value_198.as_str());
            }
        }
        object_196.finish();
    }
    if let Some(var_199) = &input.idp_identifiers {
        let mut array_200 = object.key("IdpIdentifiers").start_array();
        for item_201 in var_199 {
             {
                array_200.value().string(item_201.as_str());
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_server_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateResourceServerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_202) = &input.user_pool_id {
        object.key("UserPoolId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.identifier {
        object.key("Identifier").string(var_203.as_str());
    }
    if let Some(var_204) = &input.name {
        object.key("Name").string(var_204.as_str());
    }
    if let Some(var_205) = &input.scopes {
        let mut array_206 = object.key("Scopes").start_array();
        for item_207 in var_205 {
             {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_server_scope_type(&mut object_208, item_207)?;
                object_208.finish();
            }
        }
        array_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_import_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserImportJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_209) = &input.job_name {
        object.key("JobName").string(var_209.as_str());
    }
    if let Some(var_210) = &input.user_pool_id {
        object.key("UserPoolId").string(var_210.as_str());
    }
    if let Some(var_211) = &input.cloud_watch_logs_role_arn {
        object.key("CloudWatchLogsRoleArn").string(var_211.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserPoolInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_212) = &input.pool_name {
        object.key("PoolName").string(var_212.as_str());
    }
    if let Some(var_213) = &input.policies {
        let mut object_214 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_policy_type(&mut object_214, var_213)?;
        object_214.finish();
    }
    if let Some(var_215) = &input.deletion_protection {
        object.key("DeletionProtection").string(var_215.as_str());
    }
    if let Some(var_216) = &input.lambda_config {
        let mut object_217 = object.key("LambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_config_type(&mut object_217, var_216)?;
        object_217.finish();
    }
    if let Some(var_218) = &input.auto_verified_attributes {
        let mut array_219 = object.key("AutoVerifiedAttributes").start_array();
        for item_220 in var_218 {
             {
                array_219.value().string(item_220.as_str());
            }
        }
        array_219.finish();
    }
    if let Some(var_221) = &input.alias_attributes {
        let mut array_222 = object.key("AliasAttributes").start_array();
        for item_223 in var_221 {
             {
                array_222.value().string(item_223.as_str());
            }
        }
        array_222.finish();
    }
    if let Some(var_224) = &input.username_attributes {
        let mut array_225 = object.key("UsernameAttributes").start_array();
        for item_226 in var_224 {
             {
                array_225.value().string(item_226.as_str());
            }
        }
        array_225.finish();
    }
    if let Some(var_227) = &input.sms_verification_message {
        object.key("SmsVerificationMessage").string(var_227.as_str());
    }
    if let Some(var_228) = &input.email_verification_message {
        object.key("EmailVerificationMessage").string(var_228.as_str());
    }
    if let Some(var_229) = &input.email_verification_subject {
        object.key("EmailVerificationSubject").string(var_229.as_str());
    }
    if let Some(var_230) = &input.verification_message_template {
        let mut object_231 = object.key("VerificationMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_verification_message_template_type(&mut object_231, var_230)?;
        object_231.finish();
    }
    if let Some(var_232) = &input.sms_authentication_message {
        object.key("SmsAuthenticationMessage").string(var_232.as_str());
    }
    if let Some(var_233) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_233.as_str());
    }
    if let Some(var_234) = &input.user_attribute_update_settings {
        let mut object_235 = object.key("UserAttributeUpdateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_attribute_update_settings_type(&mut object_235, var_234)?;
        object_235.finish();
    }
    if let Some(var_236) = &input.device_configuration {
        let mut object_237 = object.key("DeviceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_device_configuration_type(&mut object_237, var_236)?;
        object_237.finish();
    }
    if let Some(var_238) = &input.email_configuration {
        let mut object_239 = object.key("EmailConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_email_configuration_type(&mut object_239, var_238)?;
        object_239.finish();
    }
    if let Some(var_240) = &input.sms_configuration {
        let mut object_241 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(&mut object_241, var_240)?;
        object_241.finish();
    }
    if let Some(var_242) = &input.user_pool_tags {
        let mut object_243 = object.key("UserPoolTags").start_object();
        for (key_244, value_245) in var_242 {
             {
                object_243.key(key_244.as_str()).string(value_245.as_str());
            }
        }
        object_243.finish();
    }
    if let Some(var_246) = &input.admin_create_user_config {
        let mut object_247 = object.key("AdminCreateUserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_admin_create_user_config_type(&mut object_247, var_246)?;
        object_247.finish();
    }
    if let Some(var_248) = &input.schema {
        let mut array_249 = object.key("Schema").start_array();
        for item_250 in var_248 {
             {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_attribute_type(&mut object_251, item_250)?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.user_pool_add_ons {
        let mut object_253 = object.key("UserPoolAddOns").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_add_ons_type(&mut object_253, var_252)?;
        object_253.finish();
    }
    if let Some(var_254) = &input.username_configuration {
        let mut object_255 = object.key("UsernameConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_username_configuration_type(&mut object_255, var_254)?;
        object_255.finish();
    }
    if let Some(var_256) = &input.account_recovery_setting {
        let mut object_257 = object.key("AccountRecoverySetting").start_object();
        crate::json_ser::serialize_structure_crate_model_account_recovery_setting_type(&mut object_257, var_256)?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_client_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserPoolClientInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_258) = &input.user_pool_id {
        object.key("UserPoolId").string(var_258.as_str());
    }
    if let Some(var_259) = &input.client_name {
        object.key("ClientName").string(var_259.as_str());
    }
    if input.generate_secret {
        object.key("GenerateSecret").boolean(input.generate_secret);
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()));
    }
    if let Some(var_260) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_260).into()));
    }
    if let Some(var_261) = &input.id_token_validity {
        object.key("IdTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_261).into()));
    }
    if let Some(var_262) = &input.token_validity_units {
        let mut object_263 = object.key("TokenValidityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_token_validity_units_type(&mut object_263, var_262)?;
        object_263.finish();
    }
    if let Some(var_264) = &input.read_attributes {
        let mut array_265 = object.key("ReadAttributes").start_array();
        for item_266 in var_264 {
             {
                array_265.value().string(item_266.as_str());
            }
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.write_attributes {
        let mut array_268 = object.key("WriteAttributes").start_array();
        for item_269 in var_267 {
             {
                array_268.value().string(item_269.as_str());
            }
        }
        array_268.finish();
    }
    if let Some(var_270) = &input.explicit_auth_flows {
        let mut array_271 = object.key("ExplicitAuthFlows").start_array();
        for item_272 in var_270 {
             {
                array_271.value().string(item_272.as_str());
            }
        }
        array_271.finish();
    }
    if let Some(var_273) = &input.supported_identity_providers {
        let mut array_274 = object.key("SupportedIdentityProviders").start_array();
        for item_275 in var_273 {
             {
                array_274.value().string(item_275.as_str());
            }
        }
        array_274.finish();
    }
    if let Some(var_276) = &input.callback_ur_ls {
        let mut array_277 = object.key("CallbackURLs").start_array();
        for item_278 in var_276 {
             {
                array_277.value().string(item_278.as_str());
            }
        }
        array_277.finish();
    }
    if let Some(var_279) = &input.logout_ur_ls {
        let mut array_280 = object.key("LogoutURLs").start_array();
        for item_281 in var_279 {
             {
                array_280.value().string(item_281.as_str());
            }
        }
        array_280.finish();
    }
    if let Some(var_282) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_282.as_str());
    }
    if let Some(var_283) = &input.allowed_o_auth_flows {
        let mut array_284 = object.key("AllowedOAuthFlows").start_array();
        for item_285 in var_283 {
             {
                array_284.value().string(item_285.as_str());
            }
        }
        array_284.finish();
    }
    if let Some(var_286) = &input.allowed_o_auth_scopes {
        let mut array_287 = object.key("AllowedOAuthScopes").start_array();
        for item_288 in var_286 {
             {
                array_287.value().string(item_288.as_str());
            }
        }
        array_287.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object.key("AllowedOAuthFlowsUserPoolClient").boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_289) = &input.analytics_configuration {
        let mut object_290 = object.key("AnalyticsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_configuration_type(&mut object_290, var_289)?;
        object_290.finish();
    }
    if let Some(var_291) = &input.prevent_user_existence_errors {
        object.key("PreventUserExistenceErrors").string(var_291.as_str());
    }
    if let Some(var_292) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_292);
    }
    if let Some(var_293) = &input.enable_propagate_additional_user_context_data {
        object.key("EnablePropagateAdditionalUserContextData").boolean(*var_293);
    }
    if let Some(var_294) = &input.auth_session_validity {
        object.key("AuthSessionValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_294).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_pool_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserPoolDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_295) = &input.domain {
        object.key("Domain").string(var_295.as_str());
    }
    if let Some(var_296) = &input.user_pool_id {
        object.key("UserPoolId").string(var_296.as_str());
    }
    if let Some(var_297) = &input.custom_domain_config {
        let mut object_298 = object.key("CustomDomainConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_domain_config_type(&mut object_298, var_297)?;
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_299) = &input.group_name {
        object.key("GroupName").string(var_299.as_str());
    }
    if let Some(var_300) = &input.user_pool_id {
        object.key("UserPoolId").string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_identity_provider_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteIdentityProviderInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_301) = &input.user_pool_id {
        object.key("UserPoolId").string(var_301.as_str());
    }
    if let Some(var_302) = &input.provider_name {
        object.key("ProviderName").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_server_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourceServerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_303) = &input.user_pool_id {
        object.key("UserPoolId").string(var_303.as_str());
    }
    if let Some(var_304) = &input.identifier {
        object.key("Identifier").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_305) = &input.access_token {
        object.key("AccessToken").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_306) = &input.user_attribute_names {
        let mut array_307 = object.key("UserAttributeNames").start_array();
        for item_308 in var_306 {
             {
                array_307.value().string(item_308.as_str());
            }
        }
        array_307.finish();
    }
    if let Some(var_309) = &input.access_token {
        object.key("AccessToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserPoolInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_310) = &input.user_pool_id {
        object.key("UserPoolId").string(var_310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_client_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserPoolClientInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_311) = &input.user_pool_id {
        object.key("UserPoolId").string(var_311.as_str());
    }
    if let Some(var_312) = &input.client_id {
        object.key("ClientId").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_pool_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserPoolDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_313) = &input.domain {
        object.key("Domain").string(var_313.as_str());
    }
    if let Some(var_314) = &input.user_pool_id {
        object.key("UserPoolId").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_identity_provider_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeIdentityProviderInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_315) = &input.user_pool_id {
        object.key("UserPoolId").string(var_315.as_str());
    }
    if let Some(var_316) = &input.provider_name {
        object.key("ProviderName").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_server_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeResourceServerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_317) = &input.user_pool_id {
        object.key("UserPoolId").string(var_317.as_str());
    }
    if let Some(var_318) = &input.identifier {
        object.key("Identifier").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_risk_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeRiskConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_319) = &input.user_pool_id {
        object.key("UserPoolId").string(var_319.as_str());
    }
    if let Some(var_320) = &input.client_id {
        object.key("ClientId").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_import_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeUserImportJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_321) = &input.user_pool_id {
        object.key("UserPoolId").string(var_321.as_str());
    }
    if let Some(var_322) = &input.job_id {
        object.key("JobId").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeUserPoolInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_323) = &input.user_pool_id {
        object.key("UserPoolId").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_client_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeUserPoolClientInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_324) = &input.user_pool_id {
        object.key("UserPoolId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.client_id {
        object.key("ClientId").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_pool_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeUserPoolDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_326) = &input.domain {
        object.key("Domain").string(var_326.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_forget_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ForgetDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_327) = &input.access_token {
        object.key("AccessToken").string(var_327.as_str());
    }
    if let Some(var_328) = &input.device_key {
        object.key("DeviceKey").string(var_328.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_forgot_password_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ForgotPasswordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_329) = &input.client_id {
        object.key("ClientId").string(var_329.as_str());
    }
    if let Some(var_330) = &input.secret_hash {
        object.key("SecretHash").string(var_330.as_str());
    }
    if let Some(var_331) = &input.user_context_data {
        let mut object_332 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_332, var_331)?;
        object_332.finish();
    }
    if let Some(var_333) = &input.username {
        object.key("Username").string(var_333.as_str());
    }
    if let Some(var_334) = &input.analytics_metadata {
        let mut object_335 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_335, var_334)?;
        object_335.finish();
    }
    if let Some(var_336) = &input.client_metadata {
        let mut object_337 = object.key("ClientMetadata").start_object();
        for (key_338, value_339) in var_336 {
             {
                object_337.key(key_338.as_str()).string(value_339.as_str());
            }
        }
        object_337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_csv_header_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCsvHeaderInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_340) = &input.user_pool_id {
        object.key("UserPoolId").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_device_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDeviceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_341) = &input.device_key {
        object.key("DeviceKey").string(var_341.as_str());
    }
    if let Some(var_342) = &input.access_token {
        object.key("AccessToken").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_343) = &input.group_name {
        object.key("GroupName").string(var_343.as_str());
    }
    if let Some(var_344) = &input.user_pool_id {
        object.key("UserPoolId").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_identity_provider_by_identifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetIdentityProviderByIdentifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_345) = &input.user_pool_id {
        object.key("UserPoolId").string(var_345.as_str());
    }
    if let Some(var_346) = &input.idp_identifier {
        object.key("IdpIdentifier").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_signing_certificate_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSigningCertificateInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_347) = &input.user_pool_id {
        object.key("UserPoolId").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ui_customization_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUiCustomizationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_348) = &input.user_pool_id {
        object.key("UserPoolId").string(var_348.as_str());
    }
    if let Some(var_349) = &input.client_id {
        object.key("ClientId").string(var_349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_350) = &input.access_token {
        object.key("AccessToken").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_attribute_verification_code_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserAttributeVerificationCodeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_351) = &input.access_token {
        object.key("AccessToken").string(var_351.as_str());
    }
    if let Some(var_352) = &input.attribute_name {
        object.key("AttributeName").string(var_352.as_str());
    }
    if let Some(var_353) = &input.client_metadata {
        let mut object_354 = object.key("ClientMetadata").start_object();
        for (key_355, value_356) in var_353 {
             {
                object_354.key(key_355.as_str()).string(value_356.as_str());
            }
        }
        object_354.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_pool_mfa_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserPoolMfaConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_357) = &input.user_pool_id {
        object.key("UserPoolId").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_global_sign_out_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GlobalSignOutInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_358) = &input.access_token {
        object.key("AccessToken").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_initiate_auth_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::InitiateAuthInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_359) = &input.auth_flow {
        object.key("AuthFlow").string(var_359.as_str());
    }
    if let Some(var_360) = &input.auth_parameters {
        let mut object_361 = object.key("AuthParameters").start_object();
        for (key_362, value_363) in var_360 {
             {
                object_361.key(key_362.as_str()).string(value_363.as_str());
            }
        }
        object_361.finish();
    }
    if let Some(var_364) = &input.client_metadata {
        let mut object_365 = object.key("ClientMetadata").start_object();
        for (key_366, value_367) in var_364 {
             {
                object_365.key(key_366.as_str()).string(value_367.as_str());
            }
        }
        object_365.finish();
    }
    if let Some(var_368) = &input.client_id {
        object.key("ClientId").string(var_368.as_str());
    }
    if let Some(var_369) = &input.analytics_metadata {
        let mut object_370 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_370, var_369)?;
        object_370.finish();
    }
    if let Some(var_371) = &input.user_context_data {
        let mut object_372 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_372, var_371)?;
        object_372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDevicesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_373) = &input.access_token {
        object.key("AccessToken").string(var_373.as_str());
    }
    if let Some(var_374) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_374).into()));
    }
    if let Some(var_375) = &input.pagination_token {
        object.key("PaginationToken").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_376) = &input.user_pool_id {
        object.key("UserPoolId").string(var_376.as_str());
    }
    if let Some(var_377) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_377).into()));
    }
    if let Some(var_378) = &input.next_token {
        object.key("NextToken").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_identity_providers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListIdentityProvidersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_379) = &input.user_pool_id {
        object.key("UserPoolId").string(var_379.as_str());
    }
    if let Some(var_380) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_380).into()));
    }
    if let Some(var_381) = &input.next_token {
        object.key("NextToken").string(var_381.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_servers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListResourceServersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_382) = &input.user_pool_id {
        object.key("UserPoolId").string(var_382.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_383) = &input.next_token {
        object.key("NextToken").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_384) = &input.resource_arn {
        object.key("ResourceArn").string(var_384.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_import_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUserImportJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_385) = &input.user_pool_id {
        object.key("UserPoolId").string(var_385.as_str());
    }
     {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_386) = &input.pagination_token {
        object.key("PaginationToken").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_pool_clients_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUserPoolClientsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_387) = &input.user_pool_id {
        object.key("UserPoolId").string(var_387.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_388) = &input.next_token {
        object.key("NextToken").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_user_pools_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUserPoolsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_389) = &input.next_token {
        object.key("NextToken").string(var_389.as_str());
    }
     {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUsersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_390) = &input.user_pool_id {
        object.key("UserPoolId").string(var_390.as_str());
    }
    if let Some(var_391) = &input.attributes_to_get {
        let mut array_392 = object.key("AttributesToGet").start_array();
        for item_393 in var_391 {
             {
                array_392.value().string(item_393.as_str());
            }
        }
        array_392.finish();
    }
    if let Some(var_394) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_394).into()));
    }
    if let Some(var_395) = &input.pagination_token {
        object.key("PaginationToken").string(var_395.as_str());
    }
    if let Some(var_396) = &input.filter {
        object.key("Filter").string(var_396.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_in_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListUsersInGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_397) = &input.user_pool_id {
        object.key("UserPoolId").string(var_397.as_str());
    }
    if let Some(var_398) = &input.group_name {
        object.key("GroupName").string(var_398.as_str());
    }
    if let Some(var_399) = &input.limit {
        object.key("Limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_399).into()));
    }
    if let Some(var_400) = &input.next_token {
        object.key("NextToken").string(var_400.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resend_confirmation_code_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResendConfirmationCodeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_401) = &input.client_id {
        object.key("ClientId").string(var_401.as_str());
    }
    if let Some(var_402) = &input.secret_hash {
        object.key("SecretHash").string(var_402.as_str());
    }
    if let Some(var_403) = &input.user_context_data {
        let mut object_404 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_404, var_403)?;
        object_404.finish();
    }
    if let Some(var_405) = &input.username {
        object.key("Username").string(var_405.as_str());
    }
    if let Some(var_406) = &input.analytics_metadata {
        let mut object_407 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_407, var_406)?;
        object_407.finish();
    }
    if let Some(var_408) = &input.client_metadata {
        let mut object_409 = object.key("ClientMetadata").start_object();
        for (key_410, value_411) in var_408 {
             {
                object_409.key(key_410.as_str()).string(value_411.as_str());
            }
        }
        object_409.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_respond_to_auth_challenge_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RespondToAuthChallengeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_412) = &input.client_id {
        object.key("ClientId").string(var_412.as_str());
    }
    if let Some(var_413) = &input.challenge_name {
        object.key("ChallengeName").string(var_413.as_str());
    }
    if let Some(var_414) = &input.session {
        object.key("Session").string(var_414.as_str());
    }
    if let Some(var_415) = &input.challenge_responses {
        let mut object_416 = object.key("ChallengeResponses").start_object();
        for (key_417, value_418) in var_415 {
             {
                object_416.key(key_417.as_str()).string(value_418.as_str());
            }
        }
        object_416.finish();
    }
    if let Some(var_419) = &input.analytics_metadata {
        let mut object_420 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_420, var_419)?;
        object_420.finish();
    }
    if let Some(var_421) = &input.user_context_data {
        let mut object_422 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_422, var_421)?;
        object_422.finish();
    }
    if let Some(var_423) = &input.client_metadata {
        let mut object_424 = object.key("ClientMetadata").start_object();
        for (key_425, value_426) in var_423 {
             {
                object_424.key(key_425.as_str()).string(value_426.as_str());
            }
        }
        object_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_token_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RevokeTokenInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_427) = &input.token {
        object.key("Token").string(var_427.as_str());
    }
    if let Some(var_428) = &input.client_id {
        object.key("ClientId").string(var_428.as_str());
    }
    if let Some(var_429) = &input.client_secret {
        object.key("ClientSecret").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_risk_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SetRiskConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_430) = &input.user_pool_id {
        object.key("UserPoolId").string(var_430.as_str());
    }
    if let Some(var_431) = &input.client_id {
        object.key("ClientId").string(var_431.as_str());
    }
    if let Some(var_432) = &input.compromised_credentials_risk_configuration {
        let mut object_433 = object.key("CompromisedCredentialsRiskConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_compromised_credentials_risk_configuration_type(&mut object_433, var_432)?;
        object_433.finish();
    }
    if let Some(var_434) = &input.account_takeover_risk_configuration {
        let mut object_435 = object.key("AccountTakeoverRiskConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_risk_configuration_type(&mut object_435, var_434)?;
        object_435.finish();
    }
    if let Some(var_436) = &input.risk_exception_configuration {
        let mut object_437 = object.key("RiskExceptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_risk_exception_configuration_type(&mut object_437, var_436)?;
        object_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_ui_customization_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SetUiCustomizationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_438) = &input.user_pool_id {
        object.key("UserPoolId").string(var_438.as_str());
    }
    if let Some(var_439) = &input.client_id {
        object.key("ClientId").string(var_439.as_str());
    }
    if let Some(var_440) = &input.css {
        object.key("CSS").string(var_440.as_str());
    }
    if let Some(var_441) = &input.image_file {
        object.key("ImageFile").string_unchecked(&aws_smithy_types::base64::encode(var_441));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_mfa_preference_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SetUserMfaPreferenceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_442) = &input.sms_mfa_settings {
        let mut object_443 = object.key("SMSMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_settings_type(&mut object_443, var_442)?;
        object_443.finish();
    }
    if let Some(var_444) = &input.software_token_mfa_settings {
        let mut object_445 = object.key("SoftwareTokenMfaSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_settings_type(&mut object_445, var_444)?;
        object_445.finish();
    }
    if let Some(var_446) = &input.access_token {
        object.key("AccessToken").string(var_446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_pool_mfa_config_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SetUserPoolMfaConfigInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_447) = &input.user_pool_id {
        object.key("UserPoolId").string(var_447.as_str());
    }
    if let Some(var_448) = &input.sms_mfa_configuration {
        let mut object_449 = object.key("SmsMfaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_mfa_config_type(&mut object_449, var_448)?;
        object_449.finish();
    }
    if let Some(var_450) = &input.software_token_mfa_configuration {
        let mut object_451 = object.key("SoftwareTokenMfaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_software_token_mfa_config_type(&mut object_451, var_450)?;
        object_451.finish();
    }
    if let Some(var_452) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_user_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SetUserSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_453) = &input.access_token {
        object.key("AccessToken").string(var_453.as_str());
    }
    if let Some(var_454) = &input.mfa_options {
        let mut array_455 = object.key("MFAOptions").start_array();
        for item_456 in var_454 {
             {
                let mut object_457 = array_455.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mfa_option_type(&mut object_457, item_456)?;
                object_457.finish();
            }
        }
        array_455.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_sign_up_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SignUpInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_458) = &input.client_id {
        object.key("ClientId").string(var_458.as_str());
    }
    if let Some(var_459) = &input.secret_hash {
        object.key("SecretHash").string(var_459.as_str());
    }
    if let Some(var_460) = &input.username {
        object.key("Username").string(var_460.as_str());
    }
    if let Some(var_461) = &input.password {
        object.key("Password").string(var_461.as_str());
    }
    if let Some(var_462) = &input.user_attributes {
        let mut array_463 = object.key("UserAttributes").start_array();
        for item_464 in var_462 {
             {
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_465, item_464)?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.validation_data {
        let mut array_467 = object.key("ValidationData").start_array();
        for item_468 in var_466 {
             {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_469, item_468)?;
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.analytics_metadata {
        let mut object_471 = object.key("AnalyticsMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_metadata_type(&mut object_471, var_470)?;
        object_471.finish();
    }
    if let Some(var_472) = &input.user_context_data {
        let mut object_473 = object.key("UserContextData").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context_data_type(&mut object_473, var_472)?;
        object_473.finish();
    }
    if let Some(var_474) = &input.client_metadata {
        let mut object_475 = object.key("ClientMetadata").start_object();
        for (key_476, value_477) in var_474 {
             {
                object_475.key(key_476.as_str()).string(value_477.as_str());
            }
        }
        object_475.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_user_import_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartUserImportJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_478) = &input.user_pool_id {
        object.key("UserPoolId").string(var_478.as_str());
    }
    if let Some(var_479) = &input.job_id {
        object.key("JobId").string(var_479.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_user_import_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopUserImportJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_480) = &input.user_pool_id {
        object.key("UserPoolId").string(var_480.as_str());
    }
    if let Some(var_481) = &input.job_id {
        object.key("JobId").string(var_481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_482) = &input.resource_arn {
        object.key("ResourceArn").string(var_482.as_str());
    }
    if let Some(var_483) = &input.tags {
        let mut object_484 = object.key("Tags").start_object();
        for (key_485, value_486) in var_483 {
             {
                object_484.key(key_485.as_str()).string(value_486.as_str());
            }
        }
        object_484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_487) = &input.resource_arn {
        object.key("ResourceArn").string(var_487.as_str());
    }
    if let Some(var_488) = &input.tag_keys {
        let mut array_489 = object.key("TagKeys").start_array();
        for item_490 in var_488 {
             {
                array_489.value().string(item_490.as_str());
            }
        }
        array_489.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_auth_event_feedback_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateAuthEventFeedbackInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_491) = &input.user_pool_id {
        object.key("UserPoolId").string(var_491.as_str());
    }
    if let Some(var_492) = &input.username {
        object.key("Username").string(var_492.as_str());
    }
    if let Some(var_493) = &input.event_id {
        object.key("EventId").string(var_493.as_str());
    }
    if let Some(var_494) = &input.feedback_token {
        object.key("FeedbackToken").string(var_494.as_str());
    }
    if let Some(var_495) = &input.feedback_value {
        object.key("FeedbackValue").string(var_495.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDeviceStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_496) = &input.access_token {
        object.key("AccessToken").string(var_496.as_str());
    }
    if let Some(var_497) = &input.device_key {
        object.key("DeviceKey").string(var_497.as_str());
    }
    if let Some(var_498) = &input.device_remembered_status {
        object.key("DeviceRememberedStatus").string(var_498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_499) = &input.group_name {
        object.key("GroupName").string(var_499.as_str());
    }
    if let Some(var_500) = &input.user_pool_id {
        object.key("UserPoolId").string(var_500.as_str());
    }
    if let Some(var_501) = &input.description {
        object.key("Description").string(var_501.as_str());
    }
    if let Some(var_502) = &input.role_arn {
        object.key("RoleArn").string(var_502.as_str());
    }
    if let Some(var_503) = &input.precedence {
        object.key("Precedence").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_503).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_identity_provider_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateIdentityProviderInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_504) = &input.user_pool_id {
        object.key("UserPoolId").string(var_504.as_str());
    }
    if let Some(var_505) = &input.provider_name {
        object.key("ProviderName").string(var_505.as_str());
    }
    if let Some(var_506) = &input.provider_details {
        let mut object_507 = object.key("ProviderDetails").start_object();
        for (key_508, value_509) in var_506 {
             {
                object_507.key(key_508.as_str()).string(value_509.as_str());
            }
        }
        object_507.finish();
    }
    if let Some(var_510) = &input.attribute_mapping {
        let mut object_511 = object.key("AttributeMapping").start_object();
        for (key_512, value_513) in var_510 {
             {
                object_511.key(key_512.as_str()).string(value_513.as_str());
            }
        }
        object_511.finish();
    }
    if let Some(var_514) = &input.idp_identifiers {
        let mut array_515 = object.key("IdpIdentifiers").start_array();
        for item_516 in var_514 {
             {
                array_515.value().string(item_516.as_str());
            }
        }
        array_515.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_server_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateResourceServerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_517) = &input.user_pool_id {
        object.key("UserPoolId").string(var_517.as_str());
    }
    if let Some(var_518) = &input.identifier {
        object.key("Identifier").string(var_518.as_str());
    }
    if let Some(var_519) = &input.name {
        object.key("Name").string(var_519.as_str());
    }
    if let Some(var_520) = &input.scopes {
        let mut array_521 = object.key("Scopes").start_array();
        for item_522 in var_520 {
             {
                let mut object_523 = array_521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_server_scope_type(&mut object_523, item_522)?;
                object_523.finish();
            }
        }
        array_521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_attributes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserAttributesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_524) = &input.user_attributes {
        let mut array_525 = object.key("UserAttributes").start_array();
        for item_526 in var_524 {
             {
                let mut object_527 = array_525.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_type(&mut object_527, item_526)?;
                object_527.finish();
            }
        }
        array_525.finish();
    }
    if let Some(var_528) = &input.access_token {
        object.key("AccessToken").string(var_528.as_str());
    }
    if let Some(var_529) = &input.client_metadata {
        let mut object_530 = object.key("ClientMetadata").start_object();
        for (key_531, value_532) in var_529 {
             {
                object_530.key(key_531.as_str()).string(value_532.as_str());
            }
        }
        object_530.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserPoolInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_533) = &input.user_pool_id {
        object.key("UserPoolId").string(var_533.as_str());
    }
    if let Some(var_534) = &input.policies {
        let mut object_535 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_policy_type(&mut object_535, var_534)?;
        object_535.finish();
    }
    if let Some(var_536) = &input.deletion_protection {
        object.key("DeletionProtection").string(var_536.as_str());
    }
    if let Some(var_537) = &input.lambda_config {
        let mut object_538 = object.key("LambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_config_type(&mut object_538, var_537)?;
        object_538.finish();
    }
    if let Some(var_539) = &input.auto_verified_attributes {
        let mut array_540 = object.key("AutoVerifiedAttributes").start_array();
        for item_541 in var_539 {
             {
                array_540.value().string(item_541.as_str());
            }
        }
        array_540.finish();
    }
    if let Some(var_542) = &input.sms_verification_message {
        object.key("SmsVerificationMessage").string(var_542.as_str());
    }
    if let Some(var_543) = &input.email_verification_message {
        object.key("EmailVerificationMessage").string(var_543.as_str());
    }
    if let Some(var_544) = &input.email_verification_subject {
        object.key("EmailVerificationSubject").string(var_544.as_str());
    }
    if let Some(var_545) = &input.verification_message_template {
        let mut object_546 = object.key("VerificationMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_verification_message_template_type(&mut object_546, var_545)?;
        object_546.finish();
    }
    if let Some(var_547) = &input.sms_authentication_message {
        object.key("SmsAuthenticationMessage").string(var_547.as_str());
    }
    if let Some(var_548) = &input.user_attribute_update_settings {
        let mut object_549 = object.key("UserAttributeUpdateSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_user_attribute_update_settings_type(&mut object_549, var_548)?;
        object_549.finish();
    }
    if let Some(var_550) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_550.as_str());
    }
    if let Some(var_551) = &input.device_configuration {
        let mut object_552 = object.key("DeviceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_device_configuration_type(&mut object_552, var_551)?;
        object_552.finish();
    }
    if let Some(var_553) = &input.email_configuration {
        let mut object_554 = object.key("EmailConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_email_configuration_type(&mut object_554, var_553)?;
        object_554.finish();
    }
    if let Some(var_555) = &input.sms_configuration {
        let mut object_556 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(&mut object_556, var_555)?;
        object_556.finish();
    }
    if let Some(var_557) = &input.user_pool_tags {
        let mut object_558 = object.key("UserPoolTags").start_object();
        for (key_559, value_560) in var_557 {
             {
                object_558.key(key_559.as_str()).string(value_560.as_str());
            }
        }
        object_558.finish();
    }
    if let Some(var_561) = &input.admin_create_user_config {
        let mut object_562 = object.key("AdminCreateUserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_admin_create_user_config_type(&mut object_562, var_561)?;
        object_562.finish();
    }
    if let Some(var_563) = &input.user_pool_add_ons {
        let mut object_564 = object.key("UserPoolAddOns").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_add_ons_type(&mut object_564, var_563)?;
        object_564.finish();
    }
    if let Some(var_565) = &input.account_recovery_setting {
        let mut object_566 = object.key("AccountRecoverySetting").start_object();
        crate::json_ser::serialize_structure_crate_model_account_recovery_setting_type(&mut object_566, var_565)?;
        object_566.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_client_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserPoolClientInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_567) = &input.user_pool_id {
        object.key("UserPoolId").string(var_567.as_str());
    }
    if let Some(var_568) = &input.client_id {
        object.key("ClientId").string(var_568.as_str());
    }
    if let Some(var_569) = &input.client_name {
        object.key("ClientName").string(var_569.as_str());
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()));
    }
    if let Some(var_570) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_570).into()));
    }
    if let Some(var_571) = &input.id_token_validity {
        object.key("IdTokenValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_571).into()));
    }
    if let Some(var_572) = &input.token_validity_units {
        let mut object_573 = object.key("TokenValidityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_token_validity_units_type(&mut object_573, var_572)?;
        object_573.finish();
    }
    if let Some(var_574) = &input.read_attributes {
        let mut array_575 = object.key("ReadAttributes").start_array();
        for item_576 in var_574 {
             {
                array_575.value().string(item_576.as_str());
            }
        }
        array_575.finish();
    }
    if let Some(var_577) = &input.write_attributes {
        let mut array_578 = object.key("WriteAttributes").start_array();
        for item_579 in var_577 {
             {
                array_578.value().string(item_579.as_str());
            }
        }
        array_578.finish();
    }
    if let Some(var_580) = &input.explicit_auth_flows {
        let mut array_581 = object.key("ExplicitAuthFlows").start_array();
        for item_582 in var_580 {
             {
                array_581.value().string(item_582.as_str());
            }
        }
        array_581.finish();
    }
    if let Some(var_583) = &input.supported_identity_providers {
        let mut array_584 = object.key("SupportedIdentityProviders").start_array();
        for item_585 in var_583 {
             {
                array_584.value().string(item_585.as_str());
            }
        }
        array_584.finish();
    }
    if let Some(var_586) = &input.callback_ur_ls {
        let mut array_587 = object.key("CallbackURLs").start_array();
        for item_588 in var_586 {
             {
                array_587.value().string(item_588.as_str());
            }
        }
        array_587.finish();
    }
    if let Some(var_589) = &input.logout_ur_ls {
        let mut array_590 = object.key("LogoutURLs").start_array();
        for item_591 in var_589 {
             {
                array_590.value().string(item_591.as_str());
            }
        }
        array_590.finish();
    }
    if let Some(var_592) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_592.as_str());
    }
    if let Some(var_593) = &input.allowed_o_auth_flows {
        let mut array_594 = object.key("AllowedOAuthFlows").start_array();
        for item_595 in var_593 {
             {
                array_594.value().string(item_595.as_str());
            }
        }
        array_594.finish();
    }
    if let Some(var_596) = &input.allowed_o_auth_scopes {
        let mut array_597 = object.key("AllowedOAuthScopes").start_array();
        for item_598 in var_596 {
             {
                array_597.value().string(item_598.as_str());
            }
        }
        array_597.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object.key("AllowedOAuthFlowsUserPoolClient").boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_599) = &input.analytics_configuration {
        let mut object_600 = object.key("AnalyticsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_analytics_configuration_type(&mut object_600, var_599)?;
        object_600.finish();
    }
    if let Some(var_601) = &input.prevent_user_existence_errors {
        object.key("PreventUserExistenceErrors").string(var_601.as_str());
    }
    if let Some(var_602) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_602);
    }
    if let Some(var_603) = &input.enable_propagate_additional_user_context_data {
        object.key("EnablePropagateAdditionalUserContextData").boolean(*var_603);
    }
    if let Some(var_604) = &input.auth_session_validity {
        object.key("AuthSessionValidity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_604).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_pool_domain_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserPoolDomainInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_605) = &input.domain {
        object.key("Domain").string(var_605.as_str());
    }
    if let Some(var_606) = &input.user_pool_id {
        object.key("UserPoolId").string(var_606.as_str());
    }
    if let Some(var_607) = &input.custom_domain_config {
        let mut object_608 = object.key("CustomDomainConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_domain_config_type(&mut object_608, var_607)?;
        object_608.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_software_token_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::VerifySoftwareTokenInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_609) = &input.access_token {
        object.key("AccessToken").string(var_609.as_str());
    }
    if let Some(var_610) = &input.session {
        object.key("Session").string(var_610.as_str());
    }
    if let Some(var_611) = &input.user_code {
        object.key("UserCode").string(var_611.as_str());
    }
    if let Some(var_612) = &input.friendly_device_name {
        object.key("FriendlyDeviceName").string(var_612.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_verify_user_attribute_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::VerifyUserAttributeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_613) = &input.access_token {
        object.key("AccessToken").string(var_613.as_str());
    }
    if let Some(var_614) = &input.attribute_name {
        object.key("AttributeName").string(var_614.as_str());
    }
    if let Some(var_615) = &input.code {
        object.key("Code").string(var_615.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_attribute_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaAttributeType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_616) = &input.name {
        object.key("Name").string(var_616.as_str());
    }
    if let Some(var_617) = &input.attribute_data_type {
        object.key("AttributeDataType").string(var_617.as_str());
    }
    if let Some(var_618) = &input.developer_only_attribute {
        object.key("DeveloperOnlyAttribute").boolean(*var_618);
    }
    if let Some(var_619) = &input.mutable {
        object.key("Mutable").boolean(*var_619);
    }
    if let Some(var_620) = &input.required {
        object.key("Required").boolean(*var_620);
    }
    if let Some(var_621) = &input.number_attribute_constraints {
        let mut object_622 = object.key("NumberAttributeConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_number_attribute_constraints_type(&mut object_622, var_621)?;
        object_622.finish();
    }
    if let Some(var_623) = &input.string_attribute_constraints {
        let mut object_624 = object.key("StringAttributeConstraints").start_object();
        crate::json_ser::serialize_structure_crate_model_string_attribute_constraints_type(&mut object_624, var_623)?;
        object_624.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AttributeType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_625) = &input.name {
        object.key("Name").string(var_625.as_str());
    }
    if let Some(var_626) = &input.value {
        object.key("Value").string(var_626.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provider_user_identifier_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ProviderUserIdentifierType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_627) = &input.provider_name {
        object.key("ProviderName").string(var_627.as_str());
    }
    if let Some(var_628) = &input.provider_attribute_name {
        object.key("ProviderAttributeName").string(var_628.as_str());
    }
    if let Some(var_629) = &input.provider_attribute_value {
        object.key("ProviderAttributeValue").string(var_629.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_metadata_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AnalyticsMetadataType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_630) = &input.analytics_endpoint_id {
        object.key("AnalyticsEndpointId").string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_context_data_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ContextDataType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_631) = &input.ip_address {
        object.key("IpAddress").string(var_631.as_str());
    }
    if let Some(var_632) = &input.server_name {
        object.key("ServerName").string(var_632.as_str());
    }
    if let Some(var_633) = &input.server_path {
        object.key("ServerPath").string(var_633.as_str());
    }
    if let Some(var_634) = &input.http_headers {
        let mut array_635 = object.key("HttpHeaders").start_array();
        for item_636 in var_634 {
             {
                let mut object_637 = array_635.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_header(&mut object_637, item_636)?;
                object_637.finish();
            }
        }
        array_635.finish();
    }
    if let Some(var_638) = &input.encoded_data {
        object.key("EncodedData").string(var_638.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_mfa_settings_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SmsMfaSettingsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.preferred_mfa {
        object.key("PreferredMfa").boolean(input.preferred_mfa);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_token_mfa_settings_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SoftwareTokenMfaSettingsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.preferred_mfa {
        object.key("PreferredMfa").boolean(input.preferred_mfa);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mfa_option_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MfaOptionType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_639) = &input.delivery_medium {
        object.key("DeliveryMedium").string(var_639.as_str());
    }
    if let Some(var_640) = &input.attribute_name {
        object.key("AttributeName").string(var_640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_secret_verifier_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeviceSecretVerifierConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_641) = &input.password_verifier {
        object.key("PasswordVerifier").string(var_641.as_str());
    }
    if let Some(var_642) = &input.salt {
        object.key("Salt").string(var_642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context_data_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserContextDataType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_643) = &input.ip_address {
        object.key("IpAddress").string(var_643.as_str());
    }
    if let Some(var_644) = &input.encoded_data {
        object.key("EncodedData").string(var_644.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_server_scope_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceServerScopeType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_645) = &input.scope_name {
        object.key("ScopeName").string(var_645.as_str());
    }
    if let Some(var_646) = &input.scope_description {
        object.key("ScopeDescription").string(var_646.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_policy_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserPoolPolicyType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_647) = &input.password_policy {
        let mut object_648 = object.key("PasswordPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_password_policy_type(&mut object_648, var_647)?;
        object_648.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LambdaConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_649) = &input.pre_sign_up {
        object.key("PreSignUp").string(var_649.as_str());
    }
    if let Some(var_650) = &input.custom_message {
        object.key("CustomMessage").string(var_650.as_str());
    }
    if let Some(var_651) = &input.post_confirmation {
        object.key("PostConfirmation").string(var_651.as_str());
    }
    if let Some(var_652) = &input.pre_authentication {
        object.key("PreAuthentication").string(var_652.as_str());
    }
    if let Some(var_653) = &input.post_authentication {
        object.key("PostAuthentication").string(var_653.as_str());
    }
    if let Some(var_654) = &input.define_auth_challenge {
        object.key("DefineAuthChallenge").string(var_654.as_str());
    }
    if let Some(var_655) = &input.create_auth_challenge {
        object.key("CreateAuthChallenge").string(var_655.as_str());
    }
    if let Some(var_656) = &input.verify_auth_challenge_response {
        object.key("VerifyAuthChallengeResponse").string(var_656.as_str());
    }
    if let Some(var_657) = &input.pre_token_generation {
        object.key("PreTokenGeneration").string(var_657.as_str());
    }
    if let Some(var_658) = &input.user_migration {
        object.key("UserMigration").string(var_658.as_str());
    }
    if let Some(var_659) = &input.custom_sms_sender {
        let mut object_660 = object.key("CustomSMSSender").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_sms_lambda_version_config_type(&mut object_660, var_659)?;
        object_660.finish();
    }
    if let Some(var_661) = &input.custom_email_sender {
        let mut object_662 = object.key("CustomEmailSender").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_email_lambda_version_config_type(&mut object_662, var_661)?;
        object_662.finish();
    }
    if let Some(var_663) = &input.kms_key_id {
        object.key("KMSKeyID").string(var_663.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_verification_message_template_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VerificationMessageTemplateType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_664) = &input.sms_message {
        object.key("SmsMessage").string(var_664.as_str());
    }
    if let Some(var_665) = &input.email_message {
        object.key("EmailMessage").string(var_665.as_str());
    }
    if let Some(var_666) = &input.email_subject {
        object.key("EmailSubject").string(var_666.as_str());
    }
    if let Some(var_667) = &input.email_message_by_link {
        object.key("EmailMessageByLink").string(var_667.as_str());
    }
    if let Some(var_668) = &input.email_subject_by_link {
        object.key("EmailSubjectByLink").string(var_668.as_str());
    }
    if let Some(var_669) = &input.default_email_option {
        object.key("DefaultEmailOption").string(var_669.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_attribute_update_settings_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserAttributeUpdateSettingsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_670) = &input.attributes_require_verification_before_update {
        let mut array_671 = object.key("AttributesRequireVerificationBeforeUpdate").start_array();
        for item_672 in var_670 {
             {
                array_671.value().string(item_672.as_str());
            }
        }
        array_671.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeviceConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.challenge_required_on_new_device {
        object.key("ChallengeRequiredOnNewDevice").boolean(input.challenge_required_on_new_device);
    }
    if input.device_only_remembered_on_user_prompt {
        object.key("DeviceOnlyRememberedOnUserPrompt").boolean(input.device_only_remembered_on_user_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_email_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EmailConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_673) = &input.source_arn {
        object.key("SourceArn").string(var_673.as_str());
    }
    if let Some(var_674) = &input.reply_to_email_address {
        object.key("ReplyToEmailAddress").string(var_674.as_str());
    }
    if let Some(var_675) = &input.email_sending_account {
        object.key("EmailSendingAccount").string(var_675.as_str());
    }
    if let Some(var_676) = &input.from {
        object.key("From").string(var_676.as_str());
    }
    if let Some(var_677) = &input.configuration_set {
        object.key("ConfigurationSet").string(var_677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SmsConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_678) = &input.sns_caller_arn {
        object.key("SnsCallerArn").string(var_678.as_str());
    }
    if let Some(var_679) = &input.external_id {
        object.key("ExternalId").string(var_679.as_str());
    }
    if let Some(var_680) = &input.sns_region {
        object.key("SnsRegion").string(var_680.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_admin_create_user_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AdminCreateUserConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.allow_admin_create_user_only {
        object.key("AllowAdminCreateUserOnly").boolean(input.allow_admin_create_user_only);
    }
    if input.unused_account_validity_days != 0 {
        object.key("UnusedAccountValidityDays").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.unused_account_validity_days).into()));
    }
    if let Some(var_681) = &input.invite_message_template {
        let mut object_682 = object.key("InviteMessageTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_message_template_type(&mut object_682, var_681)?;
        object_682.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_add_ons_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserPoolAddOnsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_683) = &input.advanced_security_mode {
        object.key("AdvancedSecurityMode").string(var_683.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_username_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UsernameConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_684) = &input.case_sensitive {
        object.key("CaseSensitive").boolean(*var_684);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_recovery_setting_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountRecoverySettingType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_685) = &input.recovery_mechanisms {
        let mut array_686 = object.key("RecoveryMechanisms").start_array();
        for item_687 in var_685 {
             {
                let mut object_688 = array_686.value().start_object();
                crate::json_ser::serialize_structure_crate_model_recovery_option_type(&mut object_688, item_687)?;
                object_688.finish();
            }
        }
        array_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_token_validity_units_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TokenValidityUnitsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_689) = &input.access_token {
        object.key("AccessToken").string(var_689.as_str());
    }
    if let Some(var_690) = &input.id_token {
        object.key("IdToken").string(var_690.as_str());
    }
    if let Some(var_691) = &input.refresh_token {
        object.key("RefreshToken").string(var_691.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_analytics_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AnalyticsConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_692) = &input.application_id {
        object.key("ApplicationId").string(var_692.as_str());
    }
    if let Some(var_693) = &input.application_arn {
        object.key("ApplicationArn").string(var_693.as_str());
    }
    if let Some(var_694) = &input.role_arn {
        object.key("RoleArn").string(var_694.as_str());
    }
    if let Some(var_695) = &input.external_id {
        object.key("ExternalId").string(var_695.as_str());
    }
    if input.user_data_shared {
        object.key("UserDataShared").boolean(input.user_data_shared);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_domain_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomDomainConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_696) = &input.certificate_arn {
        object.key("CertificateArn").string(var_696.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compromised_credentials_risk_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CompromisedCredentialsRiskConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_697) = &input.event_filter {
        let mut array_698 = object.key("EventFilter").start_array();
        for item_699 in var_697 {
             {
                array_698.value().string(item_699.as_str());
            }
        }
        array_698.finish();
    }
    if let Some(var_700) = &input.actions {
        let mut object_701 = object.key("Actions").start_object();
        crate::json_ser::serialize_structure_crate_model_compromised_credentials_actions_type(&mut object_701, var_700)?;
        object_701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_risk_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountTakeoverRiskConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_702) = &input.notify_configuration {
        let mut object_703 = object.key("NotifyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_configuration_type(&mut object_703, var_702)?;
        object_703.finish();
    }
    if let Some(var_704) = &input.actions {
        let mut object_705 = object.key("Actions").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_actions_type(&mut object_705, var_704)?;
        object_705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_risk_exception_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RiskExceptionConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_706) = &input.blocked_ip_range_list {
        let mut array_707 = object.key("BlockedIPRangeList").start_array();
        for item_708 in var_706 {
             {
                array_707.value().string(item_708.as_str());
            }
        }
        array_707.finish();
    }
    if let Some(var_709) = &input.skipped_ip_range_list {
        let mut array_710 = object.key("SkippedIPRangeList").start_array();
        for item_711 in var_709 {
             {
                array_710.value().string(item_711.as_str());
            }
        }
        array_710.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sms_mfa_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SmsMfaConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_712) = &input.sms_authentication_message {
        object.key("SmsAuthenticationMessage").string(var_712.as_str());
    }
    if let Some(var_713) = &input.sms_configuration {
        let mut object_714 = object.key("SmsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_configuration_type(&mut object_714, var_713)?;
        object_714.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_token_mfa_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SoftwareTokenMfaConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_attribute_constraints_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NumberAttributeConstraintsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_715) = &input.min_value {
        object.key("MinValue").string(var_715.as_str());
    }
    if let Some(var_716) = &input.max_value {
        object.key("MaxValue").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_attribute_constraints_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringAttributeConstraintsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.min_length {
        object.key("MinLength").string(var_717.as_str());
    }
    if let Some(var_718) = &input.max_length {
        object.key("MaxLength").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_header(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::HttpHeader) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_719) = &input.header_name {
        object.key("headerName").string(var_719.as_str());
    }
    if let Some(var_720) = &input.header_value {
        object.key("headerValue").string(var_720.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_password_policy_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PasswordPolicyType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.minimum_length != 0 {
        object.key("MinimumLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.minimum_length).into()));
    }
    if input.require_uppercase {
        object.key("RequireUppercase").boolean(input.require_uppercase);
    }
    if input.require_lowercase {
        object.key("RequireLowercase").boolean(input.require_lowercase);
    }
    if input.require_numbers {
        object.key("RequireNumbers").boolean(input.require_numbers);
    }
    if input.require_symbols {
        object.key("RequireSymbols").boolean(input.require_symbols);
    }
    if input.temporary_password_validity_days != 0 {
        object.key("TemporaryPasswordValidityDays").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.temporary_password_validity_days).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_sms_lambda_version_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomSmsLambdaVersionConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_721) = &input.lambda_version {
        object.key("LambdaVersion").string(var_721.as_str());
    }
    if let Some(var_722) = &input.lambda_arn {
        object.key("LambdaArn").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_email_lambda_version_config_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomEmailLambdaVersionConfigType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_723) = &input.lambda_version {
        object.key("LambdaVersion").string(var_723.as_str());
    }
    if let Some(var_724) = &input.lambda_arn {
        object.key("LambdaArn").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_template_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MessageTemplateType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_725) = &input.sms_message {
        object.key("SMSMessage").string(var_725.as_str());
    }
    if let Some(var_726) = &input.email_message {
        object.key("EmailMessage").string(var_726.as_str());
    }
    if let Some(var_727) = &input.email_subject {
        object.key("EmailSubject").string(var_727.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recovery_option_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecoveryOptionType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("Priority").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.priority).into()));
    }
    if let Some(var_728) = &input.name {
        object.key("Name").string(var_728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compromised_credentials_actions_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CompromisedCredentialsActionsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_729) = &input.event_action {
        object.key("EventAction").string(var_729.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notify_configuration_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotifyConfigurationType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_730) = &input.from {
        object.key("From").string(var_730.as_str());
    }
    if let Some(var_731) = &input.reply_to {
        object.key("ReplyTo").string(var_731.as_str());
    }
    if let Some(var_732) = &input.source_arn {
        object.key("SourceArn").string(var_732.as_str());
    }
    if let Some(var_733) = &input.block_email {
        let mut object_734 = object.key("BlockEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(&mut object_734, var_733)?;
        object_734.finish();
    }
    if let Some(var_735) = &input.no_action_email {
        let mut object_736 = object.key("NoActionEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(&mut object_736, var_735)?;
        object_736.finish();
    }
    if let Some(var_737) = &input.mfa_email {
        let mut object_738 = object.key("MfaEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_notify_email_type(&mut object_738, var_737)?;
        object_738.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_actions_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountTakeoverActionsType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_739) = &input.low_action {
        let mut object_740 = object.key("LowAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(&mut object_740, var_739)?;
        object_740.finish();
    }
    if let Some(var_741) = &input.medium_action {
        let mut object_742 = object.key("MediumAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(&mut object_742, var_741)?;
        object_742.finish();
    }
    if let Some(var_743) = &input.high_action {
        let mut object_744 = object.key("HighAction").start_object();
        crate::json_ser::serialize_structure_crate_model_account_takeover_action_type(&mut object_744, var_743)?;
        object_744.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notify_email_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotifyEmailType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_745) = &input.subject {
        object.key("Subject").string(var_745.as_str());
    }
    if let Some(var_746) = &input.html_body {
        object.key("HtmlBody").string(var_746.as_str());
    }
    if let Some(var_747) = &input.text_body {
        object.key("TextBody").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_takeover_action_type(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AccountTakeoverActionType) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("Notify").boolean(input.notify);
    }
    if let Some(var_748) = &input.event_action {
        object.key("EventAction").string(var_748.as_str());
    }
    Ok(())
}

