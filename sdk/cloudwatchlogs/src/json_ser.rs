// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_kms_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::AssociateKmsKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.log_group_name {
        object.key("logGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_export_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelExportTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_3) = &input.task_id {
        object.key("taskId").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_export_task_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateExportTaskInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.task_name {
        object.key("taskName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.log_group_name {
        object.key("logGroupName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.log_stream_name_prefix {
        object.key("logStreamNamePrefix").string(var_6.as_str());
    }
    if let Some(var_7) = &input.from {
        object.key("from").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_7).into()));
    }
    if let Some(var_8) = &input.to {
        object.key("to").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_8).into()));
    }
    if let Some(var_9) = &input.destination {
        object.key("destination").string(var_9.as_str());
    }
    if let Some(var_10) = &input.destination_prefix {
        object.key("destinationPrefix").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_log_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateLogGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.log_group_name {
        object.key("logGroupName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.tags {
        let mut object_14 = object.key("tags").start_object();
        for (key_15, value_16) in var_13 {
             {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_log_stream_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateLogStreamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_17) = &input.log_group_name {
        object.key("logGroupName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.log_stream_name {
        object.key("logStreamName").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.destination_name {
        object.key("destinationName").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_log_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteLogGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_20) = &input.log_group_name {
        object.key("logGroupName").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_log_stream_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteLogStreamInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_21) = &input.log_group_name {
        object.key("logGroupName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.log_stream_name {
        object.key("logStreamName").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_metric_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMetricFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_23) = &input.log_group_name {
        object.key("logGroupName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.filter_name {
        object.key("filterName").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteQueryDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.query_definition_id {
        object.key("queryDefinitionId").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_26) = &input.policy_name {
        object.key("policyName").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_retention_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteRetentionPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_27) = &input.log_group_name {
        object.key("logGroupName").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_subscription_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSubscriptionFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_28) = &input.log_group_name {
        object.key("logGroupName").string(var_28.as_str());
    }
    if let Some(var_29) = &input.filter_name {
        object.key("filterName").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_destinations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeDestinationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_30) = &input.destination_name_prefix {
        object.key("DestinationNamePrefix").string(var_30.as_str());
    }
    if let Some(var_31) = &input.next_token {
        object.key("nextToken").string(var_31.as_str());
    }
    if let Some(var_32) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_32).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_export_tasks_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeExportTasksInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_33) = &input.task_id {
        object.key("taskId").string(var_33.as_str());
    }
    if let Some(var_34) = &input.status_code {
        object.key("statusCode").string(var_34.as_str());
    }
    if let Some(var_35) = &input.next_token {
        object.key("nextToken").string(var_35.as_str());
    }
    if let Some(var_36) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_36).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_log_groups_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLogGroupsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_37) = &input.log_group_name_prefix {
        object.key("logGroupNamePrefix").string(var_37.as_str());
    }
    if let Some(var_38) = &input.next_token {
        object.key("nextToken").string(var_38.as_str());
    }
    if let Some(var_39) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_39).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_log_streams_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeLogStreamsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_40) = &input.log_group_name {
        object.key("logGroupName").string(var_40.as_str());
    }
    if let Some(var_41) = &input.log_stream_name_prefix {
        object.key("logStreamNamePrefix").string(var_41.as_str());
    }
    if let Some(var_42) = &input.order_by {
        object.key("orderBy").string(var_42.as_str());
    }
    if let Some(var_43) = &input.descending {
        object.key("descending").boolean(*var_43);
    }
    if let Some(var_44) = &input.next_token {
        object.key("nextToken").string(var_44.as_str());
    }
    if let Some(var_45) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_45).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_metric_filters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeMetricFiltersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_46) = &input.log_group_name {
        object.key("logGroupName").string(var_46.as_str());
    }
    if let Some(var_47) = &input.filter_name_prefix {
        object.key("filterNamePrefix").string(var_47.as_str());
    }
    if let Some(var_48) = &input.next_token {
        object.key("nextToken").string(var_48.as_str());
    }
    if let Some(var_49) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_49).into()));
    }
    if let Some(var_50) = &input.metric_name {
        object.key("metricName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.metric_namespace {
        object.key("metricNamespace").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_queries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeQueriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_52) = &input.log_group_name {
        object.key("logGroupName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.status {
        object.key("status").string(var_53.as_str());
    }
    if let Some(var_54) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_54).into()));
    }
    if let Some(var_55) = &input.next_token {
        object.key("nextToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_definitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeQueryDefinitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.query_definition_name_prefix {
        object.key("queryDefinitionNamePrefix").string(var_56.as_str());
    }
    if let Some(var_57) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_57).into()));
    }
    if let Some(var_58) = &input.next_token {
        object.key("nextToken").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeResourcePoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.next_token {
        object.key("nextToken").string(var_59.as_str());
    }
    if let Some(var_60) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_60).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_subscription_filters_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DescribeSubscriptionFiltersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_61) = &input.log_group_name {
        object.key("logGroupName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.filter_name_prefix {
        object.key("filterNamePrefix").string(var_62.as_str());
    }
    if let Some(var_63) = &input.next_token {
        object.key("nextToken").string(var_63.as_str());
    }
    if let Some(var_64) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_64).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_kms_key_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DisassociateKmsKeyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_65) = &input.log_group_name {
        object.key("logGroupName").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_filter_log_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::FilterLogEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.log_group_name {
        object.key("logGroupName").string(var_66.as_str());
    }
    if let Some(var_67) = &input.log_stream_names {
        let mut array_68 = object.key("logStreamNames").start_array();
        for item_69 in var_67 {
             {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    if let Some(var_70) = &input.log_stream_name_prefix {
        object.key("logStreamNamePrefix").string(var_70.as_str());
    }
    if let Some(var_71) = &input.start_time {
        object.key("startTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_71).into()));
    }
    if let Some(var_72) = &input.end_time {
        object.key("endTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_72).into()));
    }
    if let Some(var_73) = &input.filter_pattern {
        object.key("filterPattern").string(var_73.as_str());
    }
    if let Some(var_74) = &input.next_token {
        object.key("nextToken").string(var_74.as_str());
    }
    if let Some(var_75) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_75).into()));
    }
    if let Some(var_76) = &input.interleaved {
        object.key("interleaved").boolean(*var_76);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_log_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetLogEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.log_group_name {
        object.key("logGroupName").string(var_77.as_str());
    }
    if let Some(var_78) = &input.log_stream_name {
        object.key("logStreamName").string(var_78.as_str());
    }
    if let Some(var_79) = &input.start_time {
        object.key("startTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_79).into()));
    }
    if let Some(var_80) = &input.end_time {
        object.key("endTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_80).into()));
    }
    if let Some(var_81) = &input.next_token {
        object.key("nextToken").string(var_81.as_str());
    }
    if let Some(var_82) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_82).into()));
    }
    if let Some(var_83) = &input.start_from_head {
        object.key("startFromHead").boolean(*var_83);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_log_group_fields_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetLogGroupFieldsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_84) = &input.log_group_name {
        object.key("logGroupName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.time {
        object.key("time").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_85).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_log_record_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetLogRecordInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.log_record_pointer {
        object.key("logRecordPointer").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_results_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetQueryResultsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_87) = &input.query_id {
        object.key("queryId").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsForResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_88) = &input.resource_arn {
        object.key("resourceArn").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_log_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTagsLogGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_89) = &input.log_group_name {
        object.key("logGroupName").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_destination_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutDestinationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_90) = &input.destination_name {
        object.key("destinationName").string(var_90.as_str());
    }
    if let Some(var_91) = &input.target_arn {
        object.key("targetArn").string(var_91.as_str());
    }
    if let Some(var_92) = &input.role_arn {
        object.key("roleArn").string(var_92.as_str());
    }
    if let Some(var_93) = &input.tags {
        let mut object_94 = object.key("tags").start_object();
        for (key_95, value_96) in var_93 {
             {
                object_94.key(key_95.as_str()).string(value_96.as_str());
            }
        }
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_destination_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutDestinationPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_97) = &input.destination_name {
        object.key("destinationName").string(var_97.as_str());
    }
    if let Some(var_98) = &input.access_policy {
        object.key("accessPolicy").string(var_98.as_str());
    }
    if let Some(var_99) = &input.force_update {
        object.key("forceUpdate").boolean(*var_99);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_log_events_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutLogEventsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_100) = &input.log_group_name {
        object.key("logGroupName").string(var_100.as_str());
    }
    if let Some(var_101) = &input.log_stream_name {
        object.key("logStreamName").string(var_101.as_str());
    }
    if let Some(var_102) = &input.log_events {
        let mut array_103 = object.key("logEvents").start_array();
        for item_104 in var_102 {
             {
                let mut object_105 = array_103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_log_event(&mut object_105, item_104)?;
                object_105.finish();
            }
        }
        array_103.finish();
    }
    if let Some(var_106) = &input.sequence_token {
        object.key("sequenceToken").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_metric_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutMetricFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.log_group_name {
        object.key("logGroupName").string(var_107.as_str());
    }
    if let Some(var_108) = &input.filter_name {
        object.key("filterName").string(var_108.as_str());
    }
    if let Some(var_109) = &input.filter_pattern {
        object.key("filterPattern").string(var_109.as_str());
    }
    if let Some(var_110) = &input.metric_transformations {
        let mut array_111 = object.key("metricTransformations").start_array();
        for item_112 in var_110 {
             {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_transformation(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_query_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutQueryDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_114) = &input.name {
        object.key("name").string(var_114.as_str());
    }
    if let Some(var_115) = &input.query_definition_id {
        object.key("queryDefinitionId").string(var_115.as_str());
    }
    if let Some(var_116) = &input.log_group_names {
        let mut array_117 = object.key("logGroupNames").start_array();
        for item_118 in var_116 {
             {
                array_117.value().string(item_118.as_str());
            }
        }
        array_117.finish();
    }
    if let Some(var_119) = &input.query_string {
        object.key("queryString").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_120) = &input.policy_name {
        object.key("policyName").string(var_120.as_str());
    }
    if let Some(var_121) = &input.policy_document {
        object.key("policyDocument").string(var_121.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_retention_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutRetentionPolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_122) = &input.log_group_name {
        object.key("logGroupName").string(var_122.as_str());
    }
    if let Some(var_123) = &input.retention_in_days {
        object.key("retentionInDays").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_123).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_subscription_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutSubscriptionFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_124) = &input.log_group_name {
        object.key("logGroupName").string(var_124.as_str());
    }
    if let Some(var_125) = &input.filter_name {
        object.key("filterName").string(var_125.as_str());
    }
    if let Some(var_126) = &input.filter_pattern {
        object.key("filterPattern").string(var_126.as_str());
    }
    if let Some(var_127) = &input.destination_arn {
        object.key("destinationArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.role_arn {
        object.key("roleArn").string(var_128.as_str());
    }
    if let Some(var_129) = &input.distribution {
        object.key("distribution").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_query_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartQueryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_130) = &input.log_group_name {
        object.key("logGroupName").string(var_130.as_str());
    }
    if let Some(var_131) = &input.log_group_names {
        let mut array_132 = object.key("logGroupNames").start_array();
        for item_133 in var_131 {
             {
                array_132.value().string(item_133.as_str());
            }
        }
        array_132.finish();
    }
    if let Some(var_134) = &input.start_time {
        object.key("startTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_134).into()));
    }
    if let Some(var_135) = &input.end_time {
        object.key("endTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_135).into()));
    }
    if let Some(var_136) = &input.query_string {
        object.key("queryString").string(var_136.as_str());
    }
    if let Some(var_137) = &input.limit {
        object.key("limit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_137).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_query_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopQueryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_138) = &input.query_id {
        object.key("queryId").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_log_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagLogGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_139) = &input.log_group_name {
        object.key("logGroupName").string(var_139.as_str());
    }
    if let Some(var_140) = &input.tags {
        let mut object_141 = object.key("tags").start_object();
        for (key_142, value_143) in var_140 {
             {
                object_141.key(key_142.as_str()).string(value_143.as_str());
            }
        }
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_144) = &input.resource_arn {
        object.key("resourceArn").string(var_144.as_str());
    }
    if let Some(var_145) = &input.tags {
        let mut object_146 = object.key("tags").start_object();
        for (key_147, value_148) in var_145 {
             {
                object_146.key(key_147.as_str()).string(value_148.as_str());
            }
        }
        object_146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_metric_filter_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TestMetricFilterInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.filter_pattern {
        object.key("filterPattern").string(var_149.as_str());
    }
    if let Some(var_150) = &input.log_event_messages {
        let mut array_151 = object.key("logEventMessages").start_array();
        for item_152 in var_150 {
             {
                array_151.value().string(item_152.as_str());
            }
        }
        array_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_log_group_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagLogGroupInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_153) = &input.log_group_name {
        object.key("logGroupName").string(var_153.as_str());
    }
    if let Some(var_154) = &input.tags {
        let mut array_155 = object.key("tags").start_array();
        for item_156 in var_154 {
             {
                array_155.value().string(item_156.as_str());
            }
        }
        array_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_157) = &input.resource_arn {
        object.key("resourceArn").string(var_157.as_str());
    }
    if let Some(var_158) = &input.tag_keys {
        let mut array_159 = object.key("tagKeys").start_array();
        for item_160 in var_158 {
             {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_log_event(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InputLogEvent) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_161) = &input.timestamp {
        object.key("timestamp").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_161).into()));
    }
    if let Some(var_162) = &input.message {
        object.key("message").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_transformation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetricTransformation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_163) = &input.metric_name {
        object.key("metricName").string(var_163.as_str());
    }
    if let Some(var_164) = &input.metric_namespace {
        object.key("metricNamespace").string(var_164.as_str());
    }
    if let Some(var_165) = &input.metric_value {
        object.key("metricValue").string(var_165.as_str());
    }
    if let Some(var_166) = &input.default_value {
        object.key("defaultValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_166).into()));
    }
    if let Some(var_167) = &input.dimensions {
        let mut object_168 = object.key("dimensions").start_object();
        for (key_169, value_170) in var_167 {
             {
                object_168.key(key_169.as_str()).string(value_170.as_str());
            }
        }
        object_168.finish();
    }
    if let Some(var_171) = &input.unit {
        object.key("unit").string(var_171.as_str());
    }
    Ok(())
}

