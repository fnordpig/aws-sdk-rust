// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>We can't process the request because it includes an invalid value or a value that exceeds the valid range.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The token is not valid. Tokens expire after 24 hours.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>The limit on the number of resources per account has been exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>There is already a resource with this name. Try again with a different name.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>The specified resource is in use.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>We can't find a resource with that Amazon Resource Name (ARN). Check the ARN and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAutoPredictorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAutoPredictorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateAutoPredictorError> for Error {
    fn from(err: crate::error::CreateAutoPredictorError) -> Self {
        match err.kind {
            crate::error::CreateAutoPredictorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateAutoPredictorErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateAutoPredictorErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateAutoPredictorErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateAutoPredictorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateAutoPredictorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatasetError> for Error {
    fn from(err: crate::error::CreateDatasetError) -> Self {
        match err.kind {
            crate::error::CreateDatasetErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateDatasetErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateDatasetErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatasetGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatasetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatasetGroupError> for Error {
    fn from(err: crate::error::CreateDatasetGroupError) -> Self {
        match err.kind {
            crate::error::CreateDatasetGroupErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateDatasetGroupErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateDatasetGroupErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateDatasetGroupErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateDatasetGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateDatasetGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatasetImportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatasetImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatasetImportJobError> for Error {
    fn from(err: crate::error::CreateDatasetImportJobError) -> Self {
        match err.kind {
            crate::error::CreateDatasetImportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateDatasetImportJobErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateDatasetImportJobErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateDatasetImportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateDatasetImportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateDatasetImportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateExplainabilityError> for Error {
    fn from(err: crate::error::CreateExplainabilityError) -> Self {
        match err.kind {
            crate::error::CreateExplainabilityErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateExplainabilityErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateExplainabilityErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateExplainabilityErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateExplainabilityErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateExplainabilityErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateExplainabilityExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateExplainabilityExportError> for Error {
    fn from(err: crate::error::CreateExplainabilityExportError) -> Self {
        match err.kind {
            crate::error::CreateExplainabilityExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateExplainabilityExportErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateExplainabilityExportErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateExplainabilityExportErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateExplainabilityExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateExplainabilityExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateForecastError> for Error {
    fn from(err: crate::error::CreateForecastError) -> Self {
        match err.kind {
            crate::error::CreateForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateForecastErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateForecastErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateForecastErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateForecastExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateForecastExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateForecastExportJobError> for Error {
    fn from(err: crate::error::CreateForecastExportJobError) -> Self {
        match err.kind {
            crate::error::CreateForecastExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateForecastExportJobErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateForecastExportJobErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateForecastExportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateForecastExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateForecastExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateMonitorError> for Error {
    fn from(err: crate::error::CreateMonitorError) -> Self {
        match err.kind {
            crate::error::CreateMonitorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateMonitorErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateMonitorErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateMonitorErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePredictorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePredictorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePredictorError> for Error {
    fn from(err: crate::error::CreatePredictorError) -> Self {
        match err.kind {
            crate::error::CreatePredictorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreatePredictorErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreatePredictorErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreatePredictorErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreatePredictorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreatePredictorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreatePredictorBacktestExportJobError> for Error {
    fn from(err: crate::error::CreatePredictorBacktestExportJobError) -> Self {
        match err.kind {
            crate::error::CreatePredictorBacktestExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreatePredictorBacktestExportJobErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreatePredictorBacktestExportJobErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreatePredictorBacktestExportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreatePredictorBacktestExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreatePredictorBacktestExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWhatIfAnalysisError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWhatIfAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWhatIfAnalysisError> for Error {
    fn from(err: crate::error::CreateWhatIfAnalysisError) -> Self {
        match err.kind {
            crate::error::CreateWhatIfAnalysisErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateWhatIfAnalysisErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateWhatIfAnalysisErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateWhatIfAnalysisErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateWhatIfAnalysisErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateWhatIfAnalysisErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWhatIfForecastError> for Error {
    fn from(err: crate::error::CreateWhatIfForecastError) -> Self {
        match err.kind {
            crate::error::CreateWhatIfForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateWhatIfForecastErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateWhatIfForecastErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateWhatIfForecastErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateWhatIfForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateWhatIfForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateWhatIfForecastExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateWhatIfForecastExportError> for Error {
    fn from(err: crate::error::CreateWhatIfForecastExportError) -> Self {
        match err.kind {
            crate::error::CreateWhatIfForecastExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateWhatIfForecastExportErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateWhatIfForecastExportErrorKind::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateWhatIfForecastExportErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateWhatIfForecastExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateWhatIfForecastExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatasetError> for Error {
    fn from(err: crate::error::DeleteDatasetError) -> Self {
        match err.kind {
            crate::error::DeleteDatasetErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteDatasetErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteDatasetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatasetGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatasetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatasetGroupError> for Error {
    fn from(err: crate::error::DeleteDatasetGroupError) -> Self {
        match err.kind {
            crate::error::DeleteDatasetGroupErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteDatasetGroupErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteDatasetGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDatasetGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatasetImportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatasetImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatasetImportJobError> for Error {
    fn from(err: crate::error::DeleteDatasetImportJobError) -> Self {
        match err.kind {
            crate::error::DeleteDatasetImportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteDatasetImportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteDatasetImportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDatasetImportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteExplainabilityError> for Error {
    fn from(err: crate::error::DeleteExplainabilityError) -> Self {
        match err.kind {
            crate::error::DeleteExplainabilityErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteExplainabilityErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteExplainabilityErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteExplainabilityErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteExplainabilityExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteExplainabilityExportError> for Error {
    fn from(err: crate::error::DeleteExplainabilityExportError) -> Self {
        match err.kind {
            crate::error::DeleteExplainabilityExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteExplainabilityExportErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteExplainabilityExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteExplainabilityExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteForecastError> for Error {
    fn from(err: crate::error::DeleteForecastError) -> Self {
        match err.kind {
            crate::error::DeleteForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteForecastErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteForecastExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteForecastExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteForecastExportJobError> for Error {
    fn from(err: crate::error::DeleteForecastExportJobError) -> Self {
        match err.kind {
            crate::error::DeleteForecastExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteForecastExportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteForecastExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteForecastExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteMonitorError> for Error {
    fn from(err: crate::error::DeleteMonitorError) -> Self {
        match err.kind {
            crate::error::DeleteMonitorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteMonitorErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePredictorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePredictorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeletePredictorError> for Error {
    fn from(err: crate::error::DeletePredictorError) -> Self {
        match err.kind {
            crate::error::DeletePredictorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeletePredictorErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeletePredictorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeletePredictorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeletePredictorBacktestExportJobError> for Error {
    fn from(err: crate::error::DeletePredictorBacktestExportJobError) -> Self {
        match err.kind {
            crate::error::DeletePredictorBacktestExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeletePredictorBacktestExportJobErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeletePredictorBacktestExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeletePredictorBacktestExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceTreeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceTreeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteResourceTreeError> for Error {
    fn from(err: crate::error::DeleteResourceTreeError) -> Self {
        match err.kind {
            crate::error::DeleteResourceTreeErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteResourceTreeErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteResourceTreeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteResourceTreeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfAnalysisError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWhatIfAnalysisError> for Error {
    fn from(err: crate::error::DeleteWhatIfAnalysisError) -> Self {
        match err.kind {
            crate::error::DeleteWhatIfAnalysisErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteWhatIfAnalysisErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteWhatIfAnalysisErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWhatIfAnalysisErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWhatIfForecastError> for Error {
    fn from(err: crate::error::DeleteWhatIfForecastError) -> Self {
        match err.kind {
            crate::error::DeleteWhatIfForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteWhatIfForecastErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteWhatIfForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWhatIfForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWhatIfForecastExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteWhatIfForecastExportError> for Error {
    fn from(err: crate::error::DeleteWhatIfForecastExportError) -> Self {
        match err.kind {
            crate::error::DeleteWhatIfForecastExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DeleteWhatIfForecastExportErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteWhatIfForecastExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteWhatIfForecastExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAutoPredictorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeAutoPredictorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeAutoPredictorError> for Error {
    fn from(err: crate::error::DescribeAutoPredictorError) -> Self {
        match err.kind {
            crate::error::DescribeAutoPredictorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeAutoPredictorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAutoPredictorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeDatasetError> for Error {
    fn from(err: crate::error::DescribeDatasetError) -> Self {
        match err.kind {
            crate::error::DescribeDatasetErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeDatasetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDatasetGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDatasetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeDatasetGroupError> for Error {
    fn from(err: crate::error::DescribeDatasetGroupError) -> Self {
        match err.kind {
            crate::error::DescribeDatasetGroupErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeDatasetGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDatasetGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDatasetImportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDatasetImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeDatasetImportJobError> for Error {
    fn from(err: crate::error::DescribeDatasetImportJobError) -> Self {
        match err.kind {
            crate::error::DescribeDatasetImportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeDatasetImportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDatasetImportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeExplainabilityError> for Error {
    fn from(err: crate::error::DescribeExplainabilityError) -> Self {
        match err.kind {
            crate::error::DescribeExplainabilityErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeExplainabilityErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeExplainabilityErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeExplainabilityExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeExplainabilityExportError> for Error {
    fn from(err: crate::error::DescribeExplainabilityExportError) -> Self {
        match err.kind {
            crate::error::DescribeExplainabilityExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeExplainabilityExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeExplainabilityExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeForecastError> for Error {
    fn from(err: crate::error::DescribeForecastError) -> Self {
        match err.kind {
            crate::error::DescribeForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeForecastExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeForecastExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeForecastExportJobError> for Error {
    fn from(err: crate::error::DescribeForecastExportJobError) -> Self {
        match err.kind {
            crate::error::DescribeForecastExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeForecastExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeForecastExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMonitorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeMonitorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeMonitorError> for Error {
    fn from(err: crate::error::DescribeMonitorError) -> Self {
        match err.kind {
            crate::error::DescribeMonitorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeMonitorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeMonitorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePredictorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePredictorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribePredictorError> for Error {
    fn from(err: crate::error::DescribePredictorError) -> Self {
        match err.kind {
            crate::error::DescribePredictorErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribePredictorErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribePredictorErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribePredictorBacktestExportJobError> for Error {
    fn from(err: crate::error::DescribePredictorBacktestExportJobError) -> Self {
        match err.kind {
            crate::error::DescribePredictorBacktestExportJobErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribePredictorBacktestExportJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribePredictorBacktestExportJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfAnalysisError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfAnalysisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeWhatIfAnalysisError> for Error {
    fn from(err: crate::error::DescribeWhatIfAnalysisError) -> Self {
        match err.kind {
            crate::error::DescribeWhatIfAnalysisErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeWhatIfAnalysisErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeWhatIfAnalysisErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeWhatIfForecastError> for Error {
    fn from(err: crate::error::DescribeWhatIfForecastError) -> Self {
        match err.kind {
            crate::error::DescribeWhatIfForecastErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeWhatIfForecastErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeWhatIfForecastErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastExportError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeWhatIfForecastExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeWhatIfForecastExportError> for Error {
    fn from(err: crate::error::DescribeWhatIfForecastExportError) -> Self {
        match err.kind {
            crate::error::DescribeWhatIfForecastExportErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::DescribeWhatIfForecastExportErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeWhatIfForecastExportErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccuracyMetricsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAccuracyMetricsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetAccuracyMetricsError> for Error {
    fn from(err: crate::error::GetAccuracyMetricsError) -> Self {
        match err.kind {
            crate::error::GetAccuracyMetricsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetAccuracyMetricsErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::GetAccuracyMetricsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetAccuracyMetricsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatasetGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatasetGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatasetGroupsError> for Error {
    fn from(err: crate::error::ListDatasetGroupsError) -> Self {
        match err.kind {
            crate::error::ListDatasetGroupsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListDatasetGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatasetImportJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatasetImportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatasetImportJobsError> for Error {
    fn from(err: crate::error::ListDatasetImportJobsError) -> Self {
        match err.kind {
            crate::error::ListDatasetImportJobsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListDatasetImportJobsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListDatasetImportJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatasetsError> for Error {
    fn from(err: crate::error::ListDatasetsError) -> Self {
        match err.kind {
            crate::error::ListDatasetsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListDatasetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExplainabilitiesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExplainabilitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListExplainabilitiesError> for Error {
    fn from(err: crate::error::ListExplainabilitiesError) -> Self {
        match err.kind {
            crate::error::ListExplainabilitiesErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListExplainabilitiesErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListExplainabilitiesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExplainabilityExportsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListExplainabilityExportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListExplainabilityExportsError> for Error {
    fn from(err: crate::error::ListExplainabilityExportsError) -> Self {
        match err.kind {
            crate::error::ListExplainabilityExportsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListExplainabilityExportsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListExplainabilityExportsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListForecastExportJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListForecastExportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListForecastExportJobsError> for Error {
    fn from(err: crate::error::ListForecastExportJobsError) -> Self {
        match err.kind {
            crate::error::ListForecastExportJobsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListForecastExportJobsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListForecastExportJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListForecastsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListForecastsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListForecastsError> for Error {
    fn from(err: crate::error::ListForecastsError) -> Self {
        match err.kind {
            crate::error::ListForecastsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListForecastsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListForecastsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMonitorEvaluationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMonitorEvaluationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListMonitorEvaluationsError> for Error {
    fn from(err: crate::error::ListMonitorEvaluationsError) -> Self {
        match err.kind {
            crate::error::ListMonitorEvaluationsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListMonitorEvaluationsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListMonitorEvaluationsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListMonitorEvaluationsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMonitorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMonitorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListMonitorsError> for Error {
    fn from(err: crate::error::ListMonitorsError) -> Self {
        match err.kind {
            crate::error::ListMonitorsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListMonitorsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListMonitorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPredictorBacktestExportJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPredictorBacktestExportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPredictorBacktestExportJobsError> for Error {
    fn from(err: crate::error::ListPredictorBacktestExportJobsError) -> Self {
        match err.kind {
            crate::error::ListPredictorBacktestExportJobsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListPredictorBacktestExportJobsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListPredictorBacktestExportJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPredictorsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPredictorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListPredictorsError> for Error {
    fn from(err: crate::error::ListPredictorsError) -> Self {
        match err.kind {
            crate::error::ListPredictorsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListPredictorsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListPredictorsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWhatIfAnalysesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWhatIfAnalysesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWhatIfAnalysesError> for Error {
    fn from(err: crate::error::ListWhatIfAnalysesError) -> Self {
        match err.kind {
            crate::error::ListWhatIfAnalysesErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListWhatIfAnalysesErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListWhatIfAnalysesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastExportsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastExportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWhatIfForecastExportsError> for Error {
    fn from(err: crate::error::ListWhatIfForecastExportsError) -> Self {
        match err.kind {
            crate::error::ListWhatIfForecastExportsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListWhatIfForecastExportsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListWhatIfForecastExportsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWhatIfForecastsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListWhatIfForecastsError> for Error {
    fn from(err: crate::error::ListWhatIfForecastsError) -> Self {
        match err.kind {
            crate::error::ListWhatIfForecastsErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListWhatIfForecastsErrorKind::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListWhatIfForecastsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResumeResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResumeResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ResumeResourceError> for Error {
    fn from(err: crate::error::ResumeResourceError) -> Self {
        match err.kind {
            crate::error::ResumeResourceErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ResumeResourceErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::ResumeResourceErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::ResumeResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ResumeResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopResourceError> for Error {
    fn from(err: crate::error::StopResourceError) -> Self {
        match err.kind {
            crate::error::StopResourceErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::StopResourceErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::StopResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::TagResourceErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDatasetGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDatasetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateDatasetGroupError> for Error {
    fn from(err: crate::error::UpdateDatasetGroupError) -> Self {
        match err.kind {
            crate::error::UpdateDatasetGroupErrorKind::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::UpdateDatasetGroupErrorKind::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::UpdateDatasetGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDatasetGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

