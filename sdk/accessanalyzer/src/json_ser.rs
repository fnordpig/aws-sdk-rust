// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_apply_archive_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ApplyArchiveRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.rule_name {
        object.key("ruleName").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_preview_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAccessPreviewInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_4) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.configurations {
        let mut object_7 = object.key("configurations").start_object();
        for (key_8, value_9) in var_6 {
             {
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_configuration(&mut object_10, value_9)?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_analyzer_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateAnalyzerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_11) = &input.analyzer_name {
        object.key("analyzerName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.archive_rules {
        let mut array_13 = object.key("archiveRules").start_array();
        for item_14 in var_12 {
             {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_archive_rule(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.client_token {
        object.key("clientToken").string(var_16.as_str());
    }
    if let Some(var_17) = &input.tags {
        let mut object_18 = object.key("tags").start_object();
        for (key_19, value_20) in var_17 {
             {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.r#type {
        object.key("type").string(var_21.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_archive_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateArchiveRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_22) = &input.client_token {
        object.key("clientToken").string(var_22.as_str());
    }
    if let Some(var_23) = &input.filter {
        let mut object_24 = object.key("filter").start_object();
        for (key_25, value_26) in var_23 {
             {
                let mut object_27 = object_24.key(key_25.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion(&mut object_27, value_26)?;
                object_27.finish();
            }
        }
        object_24.finish();
    }
    if let Some(var_28) = &input.rule_name {
        object.key("ruleName").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_preview_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAccessPreviewFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_29) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_29.as_str());
    }
    if let Some(var_30) = &input.filter {
        let mut object_31 = object.key("filter").start_object();
        for (key_32, value_33) in var_30 {
             {
                let mut object_34 = object_31.key(key_32.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion(&mut object_34, value_33)?;
                object_34.finish();
            }
        }
        object_31.finish();
    }
    if let Some(var_35) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_35).into()));
    }
    if let Some(var_36) = &input.next_token {
        object.key("nextToken").string(var_36.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_analyzed_resources_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListAnalyzedResourcesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_37) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_37.as_str());
    }
    if let Some(var_38) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_38).into()));
    }
    if let Some(var_39) = &input.next_token {
        object.key("nextToken").string(var_39.as_str());
    }
    if let Some(var_40) = &input.resource_type {
        object.key("resourceType").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_41) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_41.as_str());
    }
    if let Some(var_42) = &input.filter {
        let mut object_43 = object.key("filter").start_object();
        for (key_44, value_45) in var_42 {
             {
                let mut object_46 = object_43.key(key_44.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion(&mut object_46, value_45)?;
                object_46.finish();
            }
        }
        object_43.finish();
    }
    if let Some(var_47) = &input.max_results {
        object.key("maxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_47).into()));
    }
    if let Some(var_48) = &input.next_token {
        object.key("nextToken").string(var_48.as_str());
    }
    if let Some(var_49) = &input.sort {
        let mut object_50 = object.key("sort").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_50, var_49)?;
        object_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_policy_generation_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartPolicyGenerationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_51) = &input.client_token {
        object.key("clientToken").string(var_51.as_str());
    }
    if let Some(var_52) = &input.cloud_trail_details {
        let mut object_53 = object.key("cloudTrailDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_trail_details(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.policy_generation_details {
        let mut object_55 = object.key("policyGenerationDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_policy_generation_details(&mut object_55, var_54)?;
        object_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_resource_scan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartResourceScanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_56) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_56.as_str());
    }
    if let Some(var_57) = &input.resource_arn {
        object.key("resourceArn").string(var_57.as_str());
    }
    if let Some(var_58) = &input.resource_owner_account {
        object.key("resourceOwnerAccount").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_59) = &input.tags {
        let mut object_60 = object.key("tags").start_object();
        for (key_61, value_62) in var_59 {
             {
                object_60.key(key_61.as_str()).string(value_62.as_str());
            }
        }
        object_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_archive_rule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateArchiveRuleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_63) = &input.client_token {
        object.key("clientToken").string(var_63.as_str());
    }
    if let Some(var_64) = &input.filter {
        let mut object_65 = object.key("filter").start_object();
        for (key_66, value_67) in var_64 {
             {
                let mut object_68 = object_65.key(key_66.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion(&mut object_68, value_67)?;
                object_68.finish();
            }
        }
        object_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateFindingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_69) = &input.analyzer_arn {
        object.key("analyzerArn").string(var_69.as_str());
    }
    if let Some(var_70) = &input.client_token {
        object.key("clientToken").string(var_70.as_str());
    }
    if let Some(var_71) = &input.ids {
        let mut array_72 = object.key("ids").start_array();
        for item_73 in var_71 {
             {
                array_72.value().string(item_73.as_str());
            }
        }
        array_72.finish();
    }
    if let Some(var_74) = &input.resource_arn {
        object.key("resourceArn").string(var_74.as_str());
    }
    if let Some(var_75) = &input.status {
        object.key("status").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_validate_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ValidatePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_76) = &input.locale {
        object.key("locale").string(var_76.as_str());
    }
    if let Some(var_77) = &input.policy_document {
        object.key("policyDocument").string(var_77.as_str());
    }
    if let Some(var_78) = &input.policy_type {
        object.key("policyType").string(var_78.as_str());
    }
    if let Some(var_79) = &input.validate_policy_resource_type {
        object.key("validatePolicyResourceType").string(var_79.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_configuration(object_10: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Configuration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::Configuration::EbsSnapshot(inner) => {
             {
                let mut object_80 = object_10.key("ebsSnapshot").start_object();
                crate::json_ser::serialize_structure_crate_model_ebs_snapshot_configuration(&mut object_80, inner)?;
                object_80.finish();
            }
        },
        crate::model::Configuration::EcrRepository(inner) => {
             {
                let mut object_81 = object_10.key("ecrRepository").start_object();
                crate::json_ser::serialize_structure_crate_model_ecr_repository_configuration(&mut object_81, inner)?;
                object_81.finish();
            }
        },
        crate::model::Configuration::IamRole(inner) => {
             {
                let mut object_82 = object_10.key("iamRole").start_object();
                crate::json_ser::serialize_structure_crate_model_iam_role_configuration(&mut object_82, inner)?;
                object_82.finish();
            }
        },
        crate::model::Configuration::EfsFileSystem(inner) => {
             {
                let mut object_83 = object_10.key("efsFileSystem").start_object();
                crate::json_ser::serialize_structure_crate_model_efs_file_system_configuration(&mut object_83, inner)?;
                object_83.finish();
            }
        },
        crate::model::Configuration::KmsKey(inner) => {
             {
                let mut object_84 = object_10.key("kmsKey").start_object();
                crate::json_ser::serialize_structure_crate_model_kms_key_configuration(&mut object_84, inner)?;
                object_84.finish();
            }
        },
        crate::model::Configuration::RdsDbClusterSnapshot(inner) => {
             {
                let mut object_85 = object_10.key("rdsDbClusterSnapshot").start_object();
                crate::json_ser::serialize_structure_crate_model_rds_db_cluster_snapshot_configuration(&mut object_85, inner)?;
                object_85.finish();
            }
        },
        crate::model::Configuration::RdsDbSnapshot(inner) => {
             {
                let mut object_86 = object_10.key("rdsDbSnapshot").start_object();
                crate::json_ser::serialize_structure_crate_model_rds_db_snapshot_configuration(&mut object_86, inner)?;
                object_86.finish();
            }
        },
        crate::model::Configuration::SecretsManagerSecret(inner) => {
             {
                let mut object_87 = object_10.key("secretsManagerSecret").start_object();
                crate::json_ser::serialize_structure_crate_model_secrets_manager_secret_configuration(&mut object_87, inner)?;
                object_87.finish();
            }
        },
        crate::model::Configuration::S3Bucket(inner) => {
             {
                let mut object_88 = object_10.key("s3Bucket").start_object();
                crate::json_ser::serialize_structure_crate_model_s3_bucket_configuration(&mut object_88, inner)?;
                object_88.finish();
            }
        },
        crate::model::Configuration::SnsTopic(inner) => {
             {
                let mut object_89 = object_10.key("snsTopic").start_object();
                crate::json_ser::serialize_structure_crate_model_sns_topic_configuration(&mut object_89, inner)?;
                object_89.finish();
            }
        },
        crate::model::Configuration::SqsQueue(inner) => {
             {
                let mut object_90 = object_10.key("sqsQueue").start_object();
                crate::json_ser::serialize_structure_crate_model_sqs_queue_configuration(&mut object_90, inner)?;
                object_90.finish();
            }
        },
        crate::model::Configuration::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("Configuration"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_archive_rule(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InlineArchiveRule) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_91) = &input.rule_name {
        object.key("ruleName").string(var_91.as_str());
    }
    if let Some(var_92) = &input.filter {
        let mut object_93 = object.key("filter").start_object();
        for (key_94, value_95) in var_92 {
             {
                let mut object_96 = object_93.key(key_94.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion(&mut object_96, value_95)?;
                object_96.finish();
            }
        }
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criterion(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Criterion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_97) = &input.eq {
        let mut array_98 = object.key("eq").start_array();
        for item_99 in var_97 {
             {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.neq {
        let mut array_101 = object.key("neq").start_array();
        for item_102 in var_100 {
             {
                array_101.value().string(item_102.as_str());
            }
        }
        array_101.finish();
    }
    if let Some(var_103) = &input.contains {
        let mut array_104 = object.key("contains").start_array();
        for item_105 in var_103 {
             {
                array_104.value().string(item_105.as_str());
            }
        }
        array_104.finish();
    }
    if let Some(var_106) = &input.exists {
        object.key("exists").boolean(*var_106);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_107) = &input.attribute_name {
        object.key("attributeName").string(var_107.as_str());
    }
    if let Some(var_108) = &input.order_by {
        object.key("orderBy").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_trail_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CloudTrailDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_109) = &input.trails {
        let mut array_110 = object.key("trails").start_array();
        for item_111 in var_109 {
             {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_trail(&mut object_112, item_111)?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.access_role {
        object.key("accessRole").string(var_113.as_str());
    }
    if let Some(var_114) = &input.start_time {
        object.key("startTime").date_time(var_114, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_115) = &input.end_time {
        object.key("endTime").date_time(var_115, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_policy_generation_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PolicyGenerationDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_116) = &input.principal_arn {
        object.key("principalArn").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_snapshot_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EbsSnapshotConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_117) = &input.user_ids {
        let mut array_118 = object.key("userIds").start_array();
        for item_119 in var_117 {
             {
                array_118.value().string(item_119.as_str());
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.groups {
        let mut array_121 = object.key("groups").start_array();
        for item_122 in var_120 {
             {
                array_121.value().string(item_122.as_str());
            }
        }
        array_121.finish();
    }
    if let Some(var_123) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ecr_repository_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EcrRepositoryConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_124) = &input.repository_policy {
        object.key("repositoryPolicy").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iam_role_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::IamRoleConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_125) = &input.trust_policy {
        object.key("trustPolicy").string(var_125.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_file_system_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EfsFileSystemConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_126) = &input.file_system_policy {
        object.key("fileSystemPolicy").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kms_key_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KmsKeyConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_127) = &input.key_policies {
        let mut object_128 = object.key("keyPolicies").start_object();
        for (key_129, value_130) in var_127 {
             {
                object_128.key(key_129.as_str()).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    if let Some(var_131) = &input.grants {
        let mut array_132 = object.key("grants").start_array();
        for item_133 in var_131 {
             {
                let mut object_134 = array_132.value().start_object();
                crate::json_ser::serialize_structure_crate_model_kms_grant_configuration(&mut object_134, item_133)?;
                object_134.finish();
            }
        }
        array_132.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_db_cluster_snapshot_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RdsDbClusterSnapshotConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_135) = &input.attributes {
        let mut object_136 = object.key("attributes").start_object();
        for (key_137, value_138) in var_135 {
             {
                let mut object_139 = object_136.key(key_137.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_rds_db_cluster_snapshot_attribute_value(&mut object_139, value_138)?;
                object_139.finish();
            }
        }
        object_136.finish();
    }
    if let Some(var_140) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_db_snapshot_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RdsDbSnapshotConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_141) = &input.attributes {
        let mut object_142 = object.key("attributes").start_object();
        for (key_143, value_144) in var_141 {
             {
                let mut object_145 = object_142.key(key_143.as_str()).start_object();
                crate::json_ser::serialize_union_crate_model_rds_db_snapshot_attribute_value(&mut object_145, value_144)?;
                object_145.finish();
            }
        }
        object_142.finish();
    }
    if let Some(var_146) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_secrets_manager_secret_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SecretsManagerSecretConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_147) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_147.as_str());
    }
    if let Some(var_148) = &input.secret_policy {
        object.key("secretPolicy").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3BucketConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_149) = &input.bucket_policy {
        object.key("bucketPolicy").string(var_149.as_str());
    }
    if let Some(var_150) = &input.bucket_acl_grants {
        let mut array_151 = object.key("bucketAclGrants").start_array();
        for item_152 in var_150 {
             {
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_bucket_acl_grant_configuration(&mut object_153, item_152)?;
                object_153.finish();
            }
        }
        array_151.finish();
    }
    if let Some(var_154) = &input.bucket_public_access_block {
        let mut object_155 = object.key("bucketPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_public_access_block_configuration(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.access_points {
        let mut object_157 = object.key("accessPoints").start_object();
        for (key_158, value_159) in var_156 {
             {
                let mut object_160 = object_157.key(key_158.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_s3_access_point_configuration(&mut object_160, value_159)?;
                object_160.finish();
            }
        }
        object_157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_topic_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SnsTopicConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_161) = &input.topic_policy {
        object.key("topicPolicy").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqs_queue_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SqsQueueConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_162) = &input.queue_policy {
        object.key("queuePolicy").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trail(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Trail) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_163) = &input.cloud_trail_arn {
        object.key("cloudTrailArn").string(var_163.as_str());
    }
    if let Some(var_164) = &input.regions {
        let mut array_165 = object.key("regions").start_array();
        for item_166 in var_164 {
             {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    if let Some(var_167) = &input.all_regions {
        object.key("allRegions").boolean(*var_167);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kms_grant_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KmsGrantConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_168) = &input.operations {
        let mut array_169 = object.key("operations").start_array();
        for item_170 in var_168 {
             {
                array_169.value().string(item_170.as_str());
            }
        }
        array_169.finish();
    }
    if let Some(var_171) = &input.grantee_principal {
        object.key("granteePrincipal").string(var_171.as_str());
    }
    if let Some(var_172) = &input.retiring_principal {
        object.key("retiringPrincipal").string(var_172.as_str());
    }
    if let Some(var_173) = &input.constraints {
        let mut object_174 = object.key("constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_kms_grant_constraints(&mut object_174, var_173)?;
        object_174.finish();
    }
    if let Some(var_175) = &input.issuing_account {
        object.key("issuingAccount").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_rds_db_cluster_snapshot_attribute_value(object_139: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RdsDbClusterSnapshotAttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::RdsDbClusterSnapshotAttributeValue::AccountIds(inner) => {
             {
                let mut array_176 = object_139.key("accountIds").start_array();
                for item_177 in inner {
                     {
                        array_176.value().string(item_177.as_str());
                    }
                }
                array_176.finish();
            }
        },
        crate::model::RdsDbClusterSnapshotAttributeValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("RdsDbClusterSnapshotAttributeValue"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_rds_db_snapshot_attribute_value(object_145: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RdsDbSnapshotAttributeValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::RdsDbSnapshotAttributeValue::AccountIds(inner) => {
             {
                let mut array_178 = object_145.key("accountIds").start_array();
                for item_179 in inner {
                     {
                        array_178.value().string(item_179.as_str());
                    }
                }
                array_178.finish();
            }
        },
        crate::model::RdsDbSnapshotAttributeValue::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("RdsDbSnapshotAttributeValue"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_acl_grant_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3BucketAclGrantConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_180) = &input.permission {
        object.key("permission").string(var_180.as_str());
    }
    if let Some(var_181) = &input.grantee {
        let mut object_182 = object.key("grantee").start_object();
        crate::json_ser::serialize_union_crate_model_acl_grantee(&mut object_182, var_181)?;
        object_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_public_access_block_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3PublicAccessBlockConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_183) = &input.ignore_public_acls {
        object.key("ignorePublicAcls").boolean(*var_183);
    }
    if let Some(var_184) = &input.restrict_public_buckets {
        object.key("restrictPublicBuckets").boolean(*var_184);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_access_point_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3AccessPointConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_185) = &input.access_point_policy {
        object.key("accessPointPolicy").string(var_185.as_str());
    }
    if let Some(var_186) = &input.public_access_block {
        let mut object_187 = object.key("publicAccessBlock").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_public_access_block_configuration(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.network_origin {
        let mut object_189 = object.key("networkOrigin").start_object();
        crate::json_ser::serialize_union_crate_model_network_origin_configuration(&mut object_189, var_188)?;
        object_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kms_grant_constraints(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KmsGrantConstraints) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_190) = &input.encryption_context_equals {
        let mut object_191 = object.key("encryptionContextEquals").start_object();
        for (key_192, value_193) in var_190 {
             {
                object_191.key(key_192.as_str()).string(value_193.as_str());
            }
        }
        object_191.finish();
    }
    if let Some(var_194) = &input.encryption_context_subset {
        let mut object_195 = object.key("encryptionContextSubset").start_object();
        for (key_196, value_197) in var_194 {
             {
                object_195.key(key_196.as_str()).string(value_197.as_str());
            }
        }
        object_195.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_acl_grantee(object_182: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AclGrantee) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::AclGrantee::Id(inner) => {
             {
                object_182.key("id").string(inner.as_str());
            }
        },
        crate::model::AclGrantee::Uri(inner) => {
             {
                object_182.key("uri").string(inner.as_str());
            }
        },
        crate::model::AclGrantee::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("AclGrantee"))
    }
    Ok(())
}

pub fn serialize_union_crate_model_network_origin_configuration(object_189: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NetworkOriginConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::NetworkOriginConfiguration::VpcConfiguration(inner) => {
             {
                let mut object_198 = object_189.key("vpcConfiguration").start_object();
                crate::json_ser::serialize_structure_crate_model_vpc_configuration(&mut object_198, inner)?;
                object_198.finish();
            }
        },
        crate::model::NetworkOriginConfiguration::InternetConfiguration(inner) => {
             {
                let mut object_199 = object_189.key("internetConfiguration").start_object();
                crate::json_ser::serialize_structure_crate_model_internet_configuration(&mut object_199, inner)?;
                object_199.finish();
            }
        },
        crate::model::NetworkOriginConfiguration::Unknown => return Err(aws_smithy_http::operation::error::SerializationError::unknown_variant("NetworkOriginConfiguration"))
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::VpcConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.vpc_id {
        object.key("vpcId").string(var_200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_internet_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::InternetConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

