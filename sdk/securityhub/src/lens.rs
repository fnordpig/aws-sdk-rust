// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_action_targets_output_next_token(input: &crate::output::DescribeActionTargetsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_describe_products_output_next_token(input: &crate::output::DescribeProductsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_describe_standards_output_next_token(input: &crate::output::DescribeStandardsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_describe_standards_controls_output_next_token(input: &crate::output::DescribeStandardsControlsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_get_enabled_standards_output_next_token(input: &crate::output::GetEnabledStandardsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_get_findings_output_next_token(input: &crate::output::GetFindingsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_get_insights_output_next_token(input: &crate::output::GetInsightsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_list_enabled_products_for_import_output_next_token(input: &crate::output::ListEnabledProductsForImportOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_list_finding_aggregators_output_next_token(input: &crate::output::ListFindingAggregatorsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_list_invitations_output_next_token(input: &crate::output::ListInvitationsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_list_members_output_next_token(input: &crate::output::ListMembersOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn reflens_structure_crate_output_list_organization_admin_accounts_output_next_token(input: &crate::output::ListOrganizationAdminAccountsOutput) -> std::option::Option<& std::string::String> {
                    let input = match &input.next_token {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_describe_action_targets_output_action_targets(input: crate::output::DescribeActionTargetsOutput) -> std::option::Option<std::vec::Vec<crate::model::ActionTarget>> {
                    let input = match input.action_targets {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_describe_products_output_products(input: crate::output::DescribeProductsOutput) -> std::option::Option<std::vec::Vec<crate::model::Product>> {
                    let input = match input.products {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_describe_standards_output_standards(input: crate::output::DescribeStandardsOutput) -> std::option::Option<std::vec::Vec<crate::model::Standard>> {
                    let input = match input.standards {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_describe_standards_controls_output_controls(input: crate::output::DescribeStandardsControlsOutput) -> std::option::Option<std::vec::Vec<crate::model::StandardsControl>> {
                    let input = match input.controls {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_get_enabled_standards_output_standards_subscriptions(input: crate::output::GetEnabledStandardsOutput) -> std::option::Option<std::vec::Vec<crate::model::StandardsSubscription>> {
                    let input = match input.standards_subscriptions {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_get_findings_output_findings(input: crate::output::GetFindingsOutput) -> std::option::Option<std::vec::Vec<crate::model::AwsSecurityFinding>> {
                    let input = match input.findings {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_get_insights_output_insights(input: crate::output::GetInsightsOutput) -> std::option::Option<std::vec::Vec<crate::model::Insight>> {
                    let input = match input.insights {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_list_enabled_products_for_import_output_product_subscriptions(input: crate::output::ListEnabledProductsForImportOutput) -> std::option::Option<std::vec::Vec<std::string::String>> {
                    let input = match input.product_subscriptions {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_list_finding_aggregators_output_finding_aggregators(input: crate::output::ListFindingAggregatorsOutput) -> std::option::Option<std::vec::Vec<crate::model::FindingAggregator>> {
                    let input = match input.finding_aggregators {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_list_invitations_output_invitations(input: crate::output::ListInvitationsOutput) -> std::option::Option<std::vec::Vec<crate::model::Invitation>> {
                    let input = match input.invitations {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_list_members_output_members(input: crate::output::ListMembersOutput) -> std::option::Option<std::vec::Vec<crate::model::Member>> {
                    let input = match input.members {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

pub(crate) fn lens_structure_crate_output_list_organization_admin_accounts_output_admin_accounts(input: crate::output::ListOrganizationAdminAccountsOutput) -> std::option::Option<std::vec::Vec<crate::model::AdminAccount>> {
                    let input = match input.admin_accounts {
                            None => return None,
                            Some(t) => t
                        };
Some(input)
                }

