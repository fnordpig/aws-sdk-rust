// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>The credentials that you used to call this operation don't have the minimum required permissions.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You tried to create a new view or index when one already exists, and you either didn't specify or specified a different idempotency token as the original request.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request failed because of internal service error. Try your request again later.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>You specified a resource that doesn't exist. Check the ID or ARN that you used to identity the resource, and try again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request failed because it exceeds a service quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request failed because you exceeded a rate limit for this operation. For more information, see <a href="https://docs.aws.amazon.com/arexug/mainline/quotas.html">Quotas for Resource Explorer</a>.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The principal making the request isn't permitted to perform the operation.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// <p>You provided an invalid value for one of the operation's parameters. Check the syntax for the operation, and try again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateDefaultViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateDefaultViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::AssociateDefaultViewError> for Error {
    fn from(err: crate::error::AssociateDefaultViewError) -> Self {
        match err.kind {
            crate::error::AssociateDefaultViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociateDefaultViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AssociateDefaultViewErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateDefaultViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::AssociateDefaultViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::AssociateDefaultViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::BatchGetViewError> for Error {
    fn from(err: crate::error::BatchGetViewError) -> Self {
        match err.kind {
            crate::error::BatchGetViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchGetViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchGetViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::BatchGetViewErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::BatchGetViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchGetViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIndexError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateIndexError> for Error {
    fn from(err: crate::error::CreateIndexError) -> Self {
        match err.kind {
            crate::error::CreateIndexErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateIndexErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateIndexErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateIndexErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateIndexErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateIndexErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateViewError> for Error {
    fn from(err: crate::error::CreateViewError) -> Self {
        match err.kind {
            crate::error::CreateViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateViewErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateViewErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateViewErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::CreateViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIndexError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteIndexError> for Error {
    fn from(err: crate::error::DeleteIndexError) -> Self {
        match err.kind {
            crate::error::DeleteIndexErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteIndexErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteIndexErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteIndexErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteIndexErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteIndexErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteViewError> for Error {
    fn from(err: crate::error::DeleteViewError) -> Self {
        match err.kind {
            crate::error::DeleteViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteViewErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteViewErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DeleteViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateDefaultViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateDefaultViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DisassociateDefaultViewError> for Error {
    fn from(err: crate::error::DisassociateDefaultViewError) -> Self {
        match err.kind {
            crate::error::DisassociateDefaultViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DisassociateDefaultViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DisassociateDefaultViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DisassociateDefaultViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DisassociateDefaultViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDefaultViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDefaultViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetDefaultViewError> for Error {
    fn from(err: crate::error::GetDefaultViewError) -> Self {
        match err.kind {
            crate::error::GetDefaultViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetDefaultViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetDefaultViewErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetDefaultViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetDefaultViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetDefaultViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIndexError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIndexError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetIndexError> for Error {
    fn from(err: crate::error::GetIndexError) -> Self {
        match err.kind {
            crate::error::GetIndexErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetIndexErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetIndexErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetIndexErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetIndexErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetIndexErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::GetViewError> for Error {
    fn from(err: crate::error::GetViewError) -> Self {
        match err.kind {
            crate::error::GetViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetViewErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetViewErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::GetViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIndexesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListIndexesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListIndexesError> for Error {
    fn from(err: crate::error::ListIndexesError) -> Self {
        match err.kind {
            crate::error::ListIndexesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListIndexesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListIndexesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListIndexesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListIndexesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSupportedResourceTypesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSupportedResourceTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSupportedResourceTypesError> for Error {
    fn from(err: crate::error::ListSupportedResourceTypesError) -> Self {
        match err.kind {
            crate::error::ListSupportedResourceTypesErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSupportedResourceTypesErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSupportedResourceTypesErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSupportedResourceTypesErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSupportedResourceTypesErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTagsForResourceErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListViewsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListViewsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListViewsError> for Error {
    fn from(err: crate::error::ListViewsError) -> Self {
        match err.kind {
            crate::error::ListViewsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListViewsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListViewsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListViewsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListViewsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::SearchError> for Error {
    fn from(err: crate::error::SearchError) -> Self {
        match err.kind {
            crate::error::SearchErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::SearchErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::SearchErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::SearchErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::SearchErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::SearchErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::SearchErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::TagResourceErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::TagResourceErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UntagResourceErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIndexTypeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateIndexTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateIndexTypeError> for Error {
    fn from(err: crate::error::UpdateIndexTypeError) -> Self {
        match err.kind {
            crate::error::UpdateIndexTypeErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateIndexTypeErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateIndexTypeErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateIndexTypeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateIndexTypeErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateIndexTypeErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateIndexTypeErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateIndexTypeErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateViewError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateViewError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateViewError> for Error {
    fn from(err: crate::error::UpdateViewError) -> Self {
        match err.kind {
            crate::error::UpdateViewErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateViewErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateViewErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateViewErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateViewErrorKind::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::UpdateViewErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateViewErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

