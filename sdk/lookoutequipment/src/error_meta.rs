// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]#[derive(std::fmt::Debug, )]
pub enum Error {
    /// <p>The request could not be completed because you do not have access to the resource. </p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p> The request could not be completed due to a conflict with the current state of the target resource. </p>
    ConflictException(crate::error::ConflictException),
    /// <p> Processing of the request has failed because of an unknown error, exception or failure. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The resource requested could not be found. Verify the resource ID and retry your request. </p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> Resource limitations have been exceeded. </p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p> The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related AWS service that's being utilized. </p>
    ValidationException(crate::error::ValidationException),
    /// An unhandled error occurred.
    Unhandled(crate::error::Unhandled)
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f)
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateDatasetError> for Error {
    fn from(err: crate::error::CreateDatasetError) -> Self {
        match err.kind {
            crate::error::CreateDatasetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateDatasetErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateDatasetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDatasetErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateDatasetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateDatasetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateInferenceSchedulerError> for Error {
    fn from(err: crate::error::CreateInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::CreateInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLabelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateLabelError> for Error {
    fn from(err: crate::error::CreateLabelError) -> Self {
        match err.kind {
            crate::error::CreateLabelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateLabelErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateLabelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateLabelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateLabelErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateLabelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateLabelErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateLabelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLabelGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLabelGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateLabelGroupError> for Error {
    fn from(err: crate::error::CreateLabelGroupError) -> Self {
        match err.kind {
            crate::error::CreateLabelGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateLabelGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateLabelGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateLabelGroupErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateLabelGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateLabelGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateLabelGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::CreateModelError> for Error {
    fn from(err: crate::error::CreateModelError) -> Self {
        match err.kind {
            crate::error::CreateModelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateModelErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateModelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateModelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateModelErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateModelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateModelErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateModelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteDatasetError> for Error {
    fn from(err: crate::error::DeleteDatasetError) -> Self {
        match err.kind {
            crate::error::DeleteDatasetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteDatasetErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteDatasetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteDatasetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteDatasetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteInferenceSchedulerError> for Error {
    fn from(err: crate::error::DeleteInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::DeleteInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLabelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteLabelError> for Error {
    fn from(err: crate::error::DeleteLabelError) -> Self {
        match err.kind {
            crate::error::DeleteLabelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteLabelErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteLabelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteLabelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteLabelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteLabelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLabelGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLabelGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteLabelGroupError> for Error {
    fn from(err: crate::error::DeleteLabelGroupError) -> Self {
        match err.kind {
            crate::error::DeleteLabelGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteLabelGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteLabelGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteLabelGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteLabelGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteLabelGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DeleteModelError> for Error {
    fn from(err: crate::error::DeleteModelError) -> Self {
        match err.kind {
            crate::error::DeleteModelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteModelErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteModelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteModelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteModelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteModelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataIngestionJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDataIngestionJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeDataIngestionJobError> for Error {
    fn from(err: crate::error::DescribeDataIngestionJobError) -> Self {
        match err.kind {
            crate::error::DescribeDataIngestionJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeDataIngestionJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeDataIngestionJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDataIngestionJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeDataIngestionJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeDataIngestionJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDatasetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeDatasetError> for Error {
    fn from(err: crate::error::DescribeDatasetError) -> Self {
        match err.kind {
            crate::error::DescribeDatasetErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeDatasetErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeDatasetErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDatasetErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeDatasetErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeDatasetErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeInferenceSchedulerError> for Error {
    fn from(err: crate::error::DescribeInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::DescribeInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLabelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeLabelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeLabelError> for Error {
    fn from(err: crate::error::DescribeLabelError) -> Self {
        match err.kind {
            crate::error::DescribeLabelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeLabelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeLabelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeLabelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeLabelErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeLabelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLabelGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeLabelGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeLabelGroupError> for Error {
    fn from(err: crate::error::DescribeLabelGroupError) -> Self {
        match err.kind {
            crate::error::DescribeLabelGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeLabelGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeLabelGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeLabelGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeLabelGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeLabelGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeModelError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::DescribeModelError> for Error {
    fn from(err: crate::error::DescribeModelError) -> Self {
        match err.kind {
            crate::error::DescribeModelErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DescribeModelErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeModelErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeModelErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeModelErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeModelErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataIngestionJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataIngestionJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDataIngestionJobsError> for Error {
    fn from(err: crate::error::ListDataIngestionJobsError) -> Self {
        match err.kind {
            crate::error::ListDataIngestionJobsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListDataIngestionJobsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDataIngestionJobsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListDataIngestionJobsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDataIngestionJobsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDatasetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListDatasetsError> for Error {
    fn from(err: crate::error::ListDatasetsError) -> Self {
        match err.kind {
            crate::error::ListDatasetsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListDatasetsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListDatasetsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListDatasetsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDatasetsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInferenceEventsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInferenceEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInferenceEventsError> for Error {
    fn from(err: crate::error::ListInferenceEventsError) -> Self {
        match err.kind {
            crate::error::ListInferenceEventsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListInferenceEventsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInferenceEventsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListInferenceEventsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListInferenceEventsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListInferenceEventsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInferenceExecutionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInferenceExecutionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInferenceExecutionsError> for Error {
    fn from(err: crate::error::ListInferenceExecutionsError) -> Self {
        match err.kind {
            crate::error::ListInferenceExecutionsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListInferenceExecutionsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInferenceExecutionsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListInferenceExecutionsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListInferenceExecutionsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListInferenceExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInferenceSchedulersError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInferenceSchedulersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListInferenceSchedulersError> for Error {
    fn from(err: crate::error::ListInferenceSchedulersError) -> Self {
        match err.kind {
            crate::error::ListInferenceSchedulersErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListInferenceSchedulersErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListInferenceSchedulersErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListInferenceSchedulersErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListInferenceSchedulersErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLabelGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLabelGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListLabelGroupsError> for Error {
    fn from(err: crate::error::ListLabelGroupsError) -> Self {
        match err.kind {
            crate::error::ListLabelGroupsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListLabelGroupsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListLabelGroupsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListLabelGroupsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListLabelGroupsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLabelsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLabelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListLabelsError> for Error {
    fn from(err: crate::error::ListLabelsError) -> Self {
        match err.kind {
            crate::error::ListLabelsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListLabelsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListLabelsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListLabelsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListLabelsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListModelsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListModelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListModelsError> for Error {
    fn from(err: crate::error::ListModelsError) -> Self {
        match err.kind {
            crate::error::ListModelsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListModelsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListModelsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListModelsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListModelsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSensorStatisticsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSensorStatisticsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListSensorStatisticsError> for Error {
    fn from(err: crate::error::ListSensorStatisticsError) -> Self {
        match err.kind {
            crate::error::ListSensorStatisticsErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSensorStatisticsErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSensorStatisticsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListSensorStatisticsErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSensorStatisticsErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSensorStatisticsErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err.kind {
            crate::error::ListTagsForResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListTagsForResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListTagsForResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListTagsForResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDataIngestionJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDataIngestionJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartDataIngestionJobError> for Error {
    fn from(err: crate::error::StartDataIngestionJobError) -> Self {
        match err.kind {
            crate::error::StartDataIngestionJobErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartDataIngestionJobErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartDataIngestionJobErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartDataIngestionJobErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartDataIngestionJobErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::StartDataIngestionJobErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartDataIngestionJobErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartDataIngestionJobErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StartInferenceSchedulerError> for Error {
    fn from(err: crate::error::StartInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::StartInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartInferenceSchedulerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StartInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StartInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::StopInferenceSchedulerError> for Error {
    fn from(err: crate::error::StopInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::StopInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StopInferenceSchedulerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::StopInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::StopInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StopInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StopInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StopInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err.kind {
            crate::error::TagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::TagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::TagResourceErrorKind::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::TagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::TagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err.kind {
            crate::error::UntagResourceErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UntagResourceErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UntagResourceErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UntagResourceErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInferenceSchedulerError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateInferenceSchedulerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateInferenceSchedulerError> for Error {
    fn from(err: crate::error::UpdateInferenceSchedulerError) -> Self {
        match err.kind {
            crate::error::UpdateInferenceSchedulerErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateInferenceSchedulerErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLabelGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateLabelGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::Unhandled::new(err.into())),
        }
    }
}
impl From<crate::error::UpdateLabelGroupError> for Error {
    fn from(err: crate::error::UpdateLabelGroupError) -> Self {
        match err.kind {
            crate::error::UpdateLabelGroupErrorKind::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateLabelGroupErrorKind::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateLabelGroupErrorKind::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateLabelGroupErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateLabelGroupErrorKind::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateLabelGroupErrorKind::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateLabelGroupErrorKind::Unhandled(inner) => Error::Unhandled(crate::error::Unhandled::new(inner.into())),
        }
    }
}
impl std::error::Error for Error {}

