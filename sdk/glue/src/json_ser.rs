// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchCreatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
             {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
             {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeletePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
             {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
             {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchDeleteTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
             {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetBlueprintsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
             {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
             {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_entity_types_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetCustomEntityTypesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_39) = &input.names {
        let mut array_40 = object.key("Names").start_array();
        for item_41 in var_39 {
             {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_42) = &input.dev_endpoint_names {
        let mut array_43 = object.key("DevEndpointNames").start_array();
        for item_44 in var_42 {
             {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_45) = &input.job_names {
        let mut array_46 = object.key("JobNames").start_array();
        for item_47 in var_45 {
             {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_48) = &input.catalog_id {
        object.key("CatalogId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.database_name {
        object.key("DatabaseName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.table_name {
        object.key("TableName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.partitions_to_get {
        let mut array_52 = object.key("PartitionsToGet").start_array();
        for item_53 in var_51 {
             {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_55) = &input.trigger_names {
        let mut array_56 = object.key("TriggerNames").start_array();
        for item_57 in var_55 {
             {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchGetWorkflowsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_58) = &input.names {
        let mut array_59 = object.key("Names").start_array();
        for item_60 in var_58 {
             {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchStopJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_62) = &input.job_name {
        object.key("JobName").string(var_62.as_str());
    }
    if let Some(var_63) = &input.job_run_ids {
        let mut array_64 = object.key("JobRunIds").start_array();
        for item_65 in var_63 {
             {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::BatchUpdatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_66) = &input.catalog_id {
        object.key("CatalogId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.database_name {
        object.key("DatabaseName").string(var_67.as_str());
    }
    if let Some(var_68) = &input.table_name {
        object.key("TableName").string(var_68.as_str());
    }
    if let Some(var_69) = &input.entries {
        let mut array_70 = object.key("Entries").start_array();
        for item_71 in var_69 {
             {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelMlTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_73) = &input.transform_id {
        object.key("TransformId").string(var_73.as_str());
    }
    if let Some(var_74) = &input.task_run_id {
        object.key("TaskRunId").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CancelStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_75) = &input.session_id {
        object.key("SessionId").string(var_75.as_str());
    }
     {
        object.key("Id").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.id).into()));
    }
    if let Some(var_76) = &input.request_origin {
        object.key("RequestOrigin").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CheckSchemaVersionValidityInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_77) = &input.data_format {
        object.key("DataFormat").string(var_77.as_str());
    }
    if let Some(var_78) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79.as_str());
    }
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80.as_str());
    }
    if let Some(var_81) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_81.as_str());
    }
    if let Some(var_82) = &input.tags {
        let mut object_83 = object.key("Tags").start_object();
        for (key_84, value_85) in var_82 {
             {
                object_83.key(key_84.as_str()).string(value_85.as_str());
            }
        }
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_86) = &input.grok_classifier {
        let mut object_87 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(&mut object_87, var_86)?;
        object_87.finish();
    }
    if let Some(var_88) = &input.xml_classifier {
        let mut object_89 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(&mut object_89, var_88)?;
        object_89.finish();
    }
    if let Some(var_90) = &input.json_classifier {
        let mut object_91 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.csv_classifier {
        let mut object_93 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(&mut object_93, var_92)?;
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_94) = &input.catalog_id {
        object.key("CatalogId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.connection_input {
        let mut object_96 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
             {
                object_98.key(key_99.as_str()).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.role {
        object.key("Role").string(var_102.as_str());
    }
    if let Some(var_103) = &input.database_name {
        object.key("DatabaseName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.description {
        object.key("Description").string(var_104.as_str());
    }
    if let Some(var_105) = &input.targets {
        let mut object_106 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.schedule {
        object.key("Schedule").string(var_107.as_str());
    }
    if let Some(var_108) = &input.classifiers {
        let mut array_109 = object.key("Classifiers").start_array();
        for item_110 in var_108 {
             {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    if let Some(var_111) = &input.table_prefix {
        object.key("TablePrefix").string(var_111.as_str());
    }
    if let Some(var_112) = &input.schema_change_policy {
        let mut object_113 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(&mut object_113, var_112)?;
        object_113.finish();
    }
    if let Some(var_114) = &input.recrawl_policy {
        let mut object_115 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.lineage_configuration {
        let mut object_117 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(&mut object_117, var_116)?;
        object_117.finish();
    }
    if let Some(var_118) = &input.lake_formation_configuration {
        let mut object_119 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(&mut object_119, var_118)?;
        object_119.finish();
    }
    if let Some(var_120) = &input.configuration {
        object.key("Configuration").string(var_120.as_str());
    }
    if let Some(var_121) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
             {
                object_123.key(key_124.as_str()).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126.as_str());
    }
    if let Some(var_127) = &input.regex_string {
        object.key("RegexString").string(var_127.as_str());
    }
    if let Some(var_128) = &input.context_words {
        let mut array_129 = object.key("ContextWords").start_array();
        for item_130 in var_128 {
             {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_131) = &input.catalog_id {
        object.key("CatalogId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.database_input {
        let mut object_133 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_133, var_132)?;
        object_133.finish();
    }
    if let Some(var_134) = &input.tags {
        let mut object_135 = object.key("Tags").start_object();
        for (key_136, value_137) in var_134 {
             {
                object_135.key(key_136.as_str()).string(value_137.as_str());
            }
        }
        object_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_138) = &input.endpoint_name {
        object.key("EndpointName").string(var_138.as_str());
    }
    if let Some(var_139) = &input.role_arn {
        object.key("RoleArn").string(var_139.as_str());
    }
    if let Some(var_140) = &input.security_group_ids {
        let mut array_141 = object.key("SecurityGroupIds").start_array();
        for item_142 in var_140 {
             {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.subnet_id {
        object.key("SubnetId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.public_key {
        object.key("PublicKey").string(var_144.as_str());
    }
    if let Some(var_145) = &input.public_keys {
        let mut array_146 = object.key("PublicKeys").start_array();
        for item_147 in var_145 {
             {
                array_146.value().string(item_147.as_str());
            }
        }
        array_146.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nodes).into()));
    }
    if let Some(var_148) = &input.worker_type {
        object.key("WorkerType").string(var_148.as_str());
    }
    if let Some(var_149) = &input.glue_version {
        object.key("GlueVersion").string(var_149.as_str());
    }
    if let Some(var_150) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_150).into()));
    }
    if let Some(var_151) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_151.as_str());
    }
    if let Some(var_152) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_152.as_str());
    }
    if let Some(var_153) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_153.as_str());
    }
    if let Some(var_154) = &input.tags {
        let mut object_155 = object.key("Tags").start_object();
        for (key_156, value_157) in var_154 {
             {
                object_155.key(key_156.as_str()).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    if let Some(var_158) = &input.arguments {
        let mut object_159 = object.key("Arguments").start_object();
        for (key_160, value_161) in var_158 {
             {
                object_159.key(key_160.as_str()).string(value_161.as_str());
            }
        }
        object_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162.as_str());
    }
    if let Some(var_163) = &input.description {
        object.key("Description").string(var_163.as_str());
    }
    if let Some(var_164) = &input.log_uri {
        object.key("LogUri").string(var_164.as_str());
    }
    if let Some(var_165) = &input.role {
        object.key("Role").string(var_165.as_str());
    }
    if let Some(var_166) = &input.execution_property {
        let mut object_167 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(&mut object_167, var_166)?;
        object_167.finish();
    }
    if let Some(var_168) = &input.command {
        let mut object_169 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_169, var_168)?;
        object_169.finish();
    }
    if let Some(var_170) = &input.default_arguments {
        let mut object_171 = object.key("DefaultArguments").start_object();
        for (key_172, value_173) in var_170 {
             {
                object_171.key(key_172.as_str()).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    if let Some(var_174) = &input.non_overridable_arguments {
        let mut object_175 = object.key("NonOverridableArguments").start_object();
        for (key_176, value_177) in var_174 {
             {
                object_175.key(key_176.as_str()).string(value_177.as_str());
            }
        }
        object_175.finish();
    }
    if let Some(var_178) = &input.connections {
        let mut object_179 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_179, var_178)?;
        object_179.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_retries).into()));
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_180) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_180).into()));
    }
    if let Some(var_181) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_181).into()));
    }
    if let Some(var_182) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_182.as_str());
    }
    if let Some(var_183) = &input.tags {
        let mut object_184 = object.key("Tags").start_object();
        for (key_185, value_186) in var_183 {
             {
                object_184.key(key_185.as_str()).string(value_186.as_str());
            }
        }
        object_184.finish();
    }
    if let Some(var_187) = &input.notification_property {
        let mut object_188 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_188, var_187)?;
        object_188.finish();
    }
    if let Some(var_189) = &input.glue_version {
        object.key("GlueVersion").string(var_189.as_str());
    }
    if let Some(var_190) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_190).into()));
    }
    if let Some(var_191) = &input.worker_type {
        object.key("WorkerType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.code_gen_configuration_nodes {
        let mut object_193 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_194, value_195) in var_192 {
             {
                let mut object_196 = object_193.key(key_194.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(&mut object_196, value_195)?;
                object_196.finish();
            }
        }
        object_193.finish();
    }
    if let Some(var_197) = &input.execution_class {
        object.key("ExecutionClass").string(var_197.as_str());
    }
    if let Some(var_198) = &input.source_control_details {
        let mut object_199 = object.key("SourceControlDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_source_control_details(&mut object_199, var_198)?;
        object_199.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_200) = &input.name {
        object.key("Name").string(var_200.as_str());
    }
    if let Some(var_201) = &input.description {
        object.key("Description").string(var_201.as_str());
    }
    if let Some(var_202) = &input.input_record_tables {
        let mut array_203 = object.key("InputRecordTables").start_array();
        for item_204 in var_202 {
             {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(&mut object_205, item_204)?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if let Some(var_206) = &input.parameters {
        let mut object_207 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(&mut object_207, var_206)?;
        object_207.finish();
    }
    if let Some(var_208) = &input.role {
        object.key("Role").string(var_208.as_str());
    }
    if let Some(var_209) = &input.glue_version {
        object.key("GlueVersion").string(var_209.as_str());
    }
    if let Some(var_210) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_210).into()));
    }
    if let Some(var_211) = &input.worker_type {
        object.key("WorkerType").string(var_211.as_str());
    }
    if let Some(var_212) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_212).into()));
    }
    if let Some(var_213) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_213).into()));
    }
    if let Some(var_214) = &input.max_retries {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_214).into()));
    }
    if let Some(var_215) = &input.tags {
        let mut object_216 = object.key("Tags").start_object();
        for (key_217, value_218) in var_215 {
             {
                object_216.key(key_217.as_str()).string(value_218.as_str());
            }
        }
        object_216.finish();
    }
    if let Some(var_219) = &input.transform_encryption {
        let mut object_220 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(&mut object_220, var_219)?;
        object_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_221) = &input.catalog_id {
        object.key("CatalogId").string(var_221.as_str());
    }
    if let Some(var_222) = &input.database_name {
        object.key("DatabaseName").string(var_222.as_str());
    }
    if let Some(var_223) = &input.table_name {
        object.key("TableName").string(var_223.as_str());
    }
    if let Some(var_224) = &input.partition_input {
        let mut object_225 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_225, var_224)?;
        object_225.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreatePartitionIndexInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_226) = &input.catalog_id {
        object.key("CatalogId").string(var_226.as_str());
    }
    if let Some(var_227) = &input.database_name {
        object.key("DatabaseName").string(var_227.as_str());
    }
    if let Some(var_228) = &input.table_name {
        object.key("TableName").string(var_228.as_str());
    }
    if let Some(var_229) = &input.partition_index {
        let mut object_230 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_230, var_229)?;
        object_230.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_231) = &input.registry_name {
        object.key("RegistryName").string(var_231.as_str());
    }
    if let Some(var_232) = &input.description {
        object.key("Description").string(var_232.as_str());
    }
    if let Some(var_233) = &input.tags {
        let mut object_234 = object.key("Tags").start_object();
        for (key_235, value_236) in var_233 {
             {
                object_234.key(key_235.as_str()).string(value_236.as_str());
            }
        }
        object_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_237) = &input.registry_id {
        let mut object_238 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_238, var_237)?;
        object_238.finish();
    }
    if let Some(var_239) = &input.schema_name {
        object.key("SchemaName").string(var_239.as_str());
    }
    if let Some(var_240) = &input.data_format {
        object.key("DataFormat").string(var_240.as_str());
    }
    if let Some(var_241) = &input.compatibility {
        object.key("Compatibility").string(var_241.as_str());
    }
    if let Some(var_242) = &input.description {
        object.key("Description").string(var_242.as_str());
    }
    if let Some(var_243) = &input.tags {
        let mut object_244 = object.key("Tags").start_object();
        for (key_245, value_246) in var_243 {
             {
                object_244.key(key_245.as_str()).string(value_246.as_str());
            }
        }
        object_244.finish();
    }
    if let Some(var_247) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateScriptInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_248) = &input.dag_nodes {
        let mut array_249 = object.key("DagNodes").start_array();
        for item_250 in var_248 {
             {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(&mut object_251, item_250)?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    if let Some(var_252) = &input.dag_edges {
        let mut array_253 = object.key("DagEdges").start_array();
        for item_254 in var_252 {
             {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(&mut object_255, item_254)?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    if let Some(var_256) = &input.language {
        object.key("Language").string(var_256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_257) = &input.name {
        object.key("Name").string(var_257.as_str());
    }
    if let Some(var_258) = &input.encryption_configuration {
        let mut object_259 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(&mut object_259, var_258)?;
        object_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_260) = &input.id {
        object.key("Id").string(var_260.as_str());
    }
    if let Some(var_261) = &input.description {
        object.key("Description").string(var_261.as_str());
    }
    if let Some(var_262) = &input.role {
        object.key("Role").string(var_262.as_str());
    }
    if let Some(var_263) = &input.command {
        let mut object_264 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_264, var_263)?;
        object_264.finish();
    }
    if let Some(var_265) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_265).into()));
    }
    if let Some(var_266) = &input.idle_timeout {
        object.key("IdleTimeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_266).into()));
    }
    if let Some(var_267) = &input.default_arguments {
        let mut object_268 = object.key("DefaultArguments").start_object();
        for (key_269, value_270) in var_267 {
             {
                object_268.key(key_269.as_str()).string(value_270.as_str());
            }
        }
        object_268.finish();
    }
    if let Some(var_271) = &input.connections {
        let mut object_272 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_272, var_271)?;
        object_272.finish();
    }
    if let Some(var_273) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_273).into()));
    }
    if let Some(var_274) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_274).into()));
    }
    if let Some(var_275) = &input.worker_type {
        object.key("WorkerType").string(var_275.as_str());
    }
    if let Some(var_276) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_276.as_str());
    }
    if let Some(var_277) = &input.glue_version {
        object.key("GlueVersion").string(var_277.as_str());
    }
    if let Some(var_278) = &input.tags {
        let mut object_279 = object.key("Tags").start_object();
        for (key_280, value_281) in var_278 {
             {
                object_279.key(key_280.as_str()).string(value_281.as_str());
            }
        }
        object_279.finish();
    }
    if let Some(var_282) = &input.request_origin {
        object.key("RequestOrigin").string(var_282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_283) = &input.catalog_id {
        object.key("CatalogId").string(var_283.as_str());
    }
    if let Some(var_284) = &input.database_name {
        object.key("DatabaseName").string(var_284.as_str());
    }
    if let Some(var_285) = &input.table_input {
        let mut object_286 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_286, var_285)?;
        object_286.finish();
    }
    if let Some(var_287) = &input.partition_indexes {
        let mut array_288 = object.key("PartitionIndexes").start_array();
        for item_289 in var_287 {
             {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_290, item_289)?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    if let Some(var_291) = &input.transaction_id {
        object.key("TransactionId").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_292) = &input.name {
        object.key("Name").string(var_292.as_str());
    }
    if let Some(var_293) = &input.workflow_name {
        object.key("WorkflowName").string(var_293.as_str());
    }
    if let Some(var_294) = &input.r#type {
        object.key("Type").string(var_294.as_str());
    }
    if let Some(var_295) = &input.schedule {
        object.key("Schedule").string(var_295.as_str());
    }
    if let Some(var_296) = &input.predicate {
        let mut object_297 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_297, var_296)?;
        object_297.finish();
    }
    if let Some(var_298) = &input.actions {
        let mut array_299 = object.key("Actions").start_array();
        for item_300 in var_298 {
             {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_301, item_300)?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.description {
        object.key("Description").string(var_302.as_str());
    }
    if input.start_on_creation {
        object.key("StartOnCreation").boolean(input.start_on_creation);
    }
    if let Some(var_303) = &input.tags {
        let mut object_304 = object.key("Tags").start_object();
        for (key_305, value_306) in var_303 {
             {
                object_304.key(key_305.as_str()).string(value_306.as_str());
            }
        }
        object_304.finish();
    }
    if let Some(var_307) = &input.event_batching_condition {
        let mut object_308 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(&mut object_308, var_307)?;
        object_308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_309) = &input.catalog_id {
        object.key("CatalogId").string(var_309.as_str());
    }
    if let Some(var_310) = &input.database_name {
        object.key("DatabaseName").string(var_310.as_str());
    }
    if let Some(var_311) = &input.function_input {
        let mut object_312 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(&mut object_312, var_311)?;
        object_312.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::CreateWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_313) = &input.name {
        object.key("Name").string(var_313.as_str());
    }
    if let Some(var_314) = &input.description {
        object.key("Description").string(var_314.as_str());
    }
    if let Some(var_315) = &input.default_run_properties {
        let mut object_316 = object.key("DefaultRunProperties").start_object();
        for (key_317, value_318) in var_315 {
             {
                object_316.key(key_317.as_str()).string(value_318.as_str());
            }
        }
        object_316.finish();
    }
    if let Some(var_319) = &input.tags {
        let mut object_320 = object.key("Tags").start_object();
        for (key_321, value_322) in var_319 {
             {
                object_320.key(key_321.as_str()).string(value_322.as_str());
            }
        }
        object_320.finish();
    }
    if let Some(var_323) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_323).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_324) = &input.name {
        object.key("Name").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_326) = &input.catalog_id {
        object.key("CatalogId").string(var_326.as_str());
    }
    if let Some(var_327) = &input.database_name {
        object.key("DatabaseName").string(var_327.as_str());
    }
    if let Some(var_328) = &input.table_name {
        object.key("TableName").string(var_328.as_str());
    }
    if let Some(var_329) = &input.partition_values {
        let mut array_330 = object.key("PartitionValues").start_array();
        for item_331 in var_329 {
             {
                array_330.value().string(item_331.as_str());
            }
        }
        array_330.finish();
    }
    if let Some(var_332) = &input.column_name {
        object.key("ColumnName").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_333) = &input.catalog_id {
        object.key("CatalogId").string(var_333.as_str());
    }
    if let Some(var_334) = &input.database_name {
        object.key("DatabaseName").string(var_334.as_str());
    }
    if let Some(var_335) = &input.table_name {
        object.key("TableName").string(var_335.as_str());
    }
    if let Some(var_336) = &input.column_name {
        object.key("ColumnName").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_337) = &input.catalog_id {
        object.key("CatalogId").string(var_337.as_str());
    }
    if let Some(var_338) = &input.connection_name {
        object.key("ConnectionName").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_339) = &input.name {
        object.key("Name").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_341) = &input.catalog_id {
        object.key("CatalogId").string(var_341.as_str());
    }
    if let Some(var_342) = &input.name {
        object.key("Name").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_343) = &input.endpoint_name {
        object.key("EndpointName").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_344) = &input.job_name {
        object.key("JobName").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_345) = &input.transform_id {
        object.key("TransformId").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_346) = &input.catalog_id {
        object.key("CatalogId").string(var_346.as_str());
    }
    if let Some(var_347) = &input.database_name {
        object.key("DatabaseName").string(var_347.as_str());
    }
    if let Some(var_348) = &input.table_name {
        object.key("TableName").string(var_348.as_str());
    }
    if let Some(var_349) = &input.partition_values {
        let mut array_350 = object.key("PartitionValues").start_array();
        for item_351 in var_349 {
             {
                array_350.value().string(item_351.as_str());
            }
        }
        array_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeletePartitionIndexInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_352) = &input.catalog_id {
        object.key("CatalogId").string(var_352.as_str());
    }
    if let Some(var_353) = &input.database_name {
        object.key("DatabaseName").string(var_353.as_str());
    }
    if let Some(var_354) = &input.table_name {
        object.key("TableName").string(var_354.as_str());
    }
    if let Some(var_355) = &input.index_name {
        object.key("IndexName").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_356) = &input.registry_id {
        let mut object_357 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_357, var_356)?;
        object_357.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_358) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_358.as_str());
    }
    if let Some(var_359) = &input.resource_arn {
        object.key("ResourceArn").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_360) = &input.schema_id {
        let mut object_361 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_361, var_360)?;
        object_361.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSchemaVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_362) = &input.schema_id {
        let mut object_363 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_363, var_362)?;
        object_363.finish();
    }
    if let Some(var_364) = &input.versions {
        object.key("Versions").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_365) = &input.name {
        object.key("Name").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_366) = &input.id {
        object.key("Id").string(var_366.as_str());
    }
    if let Some(var_367) = &input.request_origin {
        object.key("RequestOrigin").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_368) = &input.catalog_id {
        object.key("CatalogId").string(var_368.as_str());
    }
    if let Some(var_369) = &input.database_name {
        object.key("DatabaseName").string(var_369.as_str());
    }
    if let Some(var_370) = &input.name {
        object.key("Name").string(var_370.as_str());
    }
    if let Some(var_371) = &input.transaction_id {
        object.key("TransactionId").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_372) = &input.catalog_id {
        object.key("CatalogId").string(var_372.as_str());
    }
    if let Some(var_373) = &input.database_name {
        object.key("DatabaseName").string(var_373.as_str());
    }
    if let Some(var_374) = &input.table_name {
        object.key("TableName").string(var_374.as_str());
    }
    if let Some(var_375) = &input.version_id {
        object.key("VersionId").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_376) = &input.name {
        object.key("Name").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_377) = &input.catalog_id {
        object.key("CatalogId").string(var_377.as_str());
    }
    if let Some(var_378) = &input.database_name {
        object.key("DatabaseName").string(var_378.as_str());
    }
    if let Some(var_379) = &input.function_name {
        object.key("FunctionName").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::DeleteWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_380) = &input.name {
        object.key("Name").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_381) = &input.name {
        object.key("Name").string(var_381.as_str());
    }
    if let Some(var_382) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_382);
    }
    if let Some(var_383) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_383);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_384) = &input.blueprint_name {
        object.key("BlueprintName").string(var_384.as_str());
    }
    if let Some(var_385) = &input.run_id {
        object.key("RunId").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetBlueprintRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_386) = &input.blueprint_name {
        object.key("BlueprintName").string(var_386.as_str());
    }
    if let Some(var_387) = &input.next_token {
        object.key("NextToken").string(var_387.as_str());
    }
    if let Some(var_388) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_388).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCatalogImportStatusInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_389) = &input.catalog_id {
        object.key("CatalogId").string(var_389.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_390) = &input.name {
        object.key("Name").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetClassifiersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_391) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_391).into()));
    }
    if let Some(var_392) = &input.next_token {
        object.key("NextToken").string(var_392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_393) = &input.catalog_id {
        object.key("CatalogId").string(var_393.as_str());
    }
    if let Some(var_394) = &input.database_name {
        object.key("DatabaseName").string(var_394.as_str());
    }
    if let Some(var_395) = &input.table_name {
        object.key("TableName").string(var_395.as_str());
    }
    if let Some(var_396) = &input.partition_values {
        let mut array_397 = object.key("PartitionValues").start_array();
        for item_398 in var_396 {
             {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if let Some(var_399) = &input.column_names {
        let mut array_400 = object.key("ColumnNames").start_array();
        for item_401 in var_399 {
             {
                array_400.value().string(item_401.as_str());
            }
        }
        array_400.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_402) = &input.catalog_id {
        object.key("CatalogId").string(var_402.as_str());
    }
    if let Some(var_403) = &input.database_name {
        object.key("DatabaseName").string(var_403.as_str());
    }
    if let Some(var_404) = &input.table_name {
        object.key("TableName").string(var_404.as_str());
    }
    if let Some(var_405) = &input.column_names {
        let mut array_406 = object.key("ColumnNames").start_array();
        for item_407 in var_405 {
             {
                array_406.value().string(item_407.as_str());
            }
        }
        array_406.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_408) = &input.catalog_id {
        object.key("CatalogId").string(var_408.as_str());
    }
    if let Some(var_409) = &input.name {
        object.key("Name").string(var_409.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetConnectionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_410) = &input.catalog_id {
        object.key("CatalogId").string(var_410.as_str());
    }
    if let Some(var_411) = &input.filter {
        let mut object_412 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(&mut object_412, var_411)?;
        object_412.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_413) = &input.next_token {
        object.key("NextToken").string(var_413.as_str());
    }
    if let Some(var_414) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_414).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_415) = &input.name {
        object.key("Name").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlerMetricsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_416) = &input.crawler_name_list {
        let mut array_417 = object.key("CrawlerNameList").start_array();
        for item_418 in var_416 {
             {
                array_417.value().string(item_418.as_str());
            }
        }
        array_417.finish();
    }
    if let Some(var_419) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_419).into()));
    }
    if let Some(var_420) = &input.next_token {
        object.key("NextToken").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_421) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_421).into()));
    }
    if let Some(var_422) = &input.next_token {
        object.key("NextToken").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_entity_type_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetCustomEntityTypeInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_423) = &input.name {
        object.key("Name").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_424) = &input.catalog_id {
        object.key("CatalogId").string(var_424.as_str());
    }
    if let Some(var_425) = &input.name {
        object.key("Name").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDatabasesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_426) = &input.catalog_id {
        object.key("CatalogId").string(var_426.as_str());
    }
    if let Some(var_427) = &input.next_token {
        object.key("NextToken").string(var_427.as_str());
    }
    if let Some(var_428) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_428).into()));
    }
    if let Some(var_429) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataCatalogEncryptionSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_430) = &input.catalog_id {
        object.key("CatalogId").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDataflowGraphInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_431) = &input.python_script {
        object.key("PythonScript").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_432) = &input.endpoint_name {
        object.key("EndpointName").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_433) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_433).into()));
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_435) = &input.job_name {
        object.key("JobName").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobBookmarkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_436) = &input.job_name {
        object.key("JobName").string(var_436.as_str());
    }
    if let Some(var_437) = &input.run_id {
        object.key("RunId").string(var_437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_438) = &input.job_name {
        object.key("JobName").string(var_438.as_str());
    }
    if let Some(var_439) = &input.run_id {
        object.key("RunId").string(var_439.as_str());
    }
    if input.predecessors_included {
        object.key("PredecessorsIncluded").boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_440) = &input.job_name {
        object.key("JobName").string(var_440.as_str());
    }
    if let Some(var_441) = &input.next_token {
        object.key("NextToken").string(var_441.as_str());
    }
    if let Some(var_442) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_442).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_443) = &input.next_token {
        object.key("NextToken").string(var_443.as_str());
    }
    if let Some(var_444) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_444).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMappingInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_445) = &input.source {
        let mut object_446 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_446, var_445)?;
        object_446.finish();
    }
    if let Some(var_447) = &input.sinks {
        let mut array_448 = object.key("Sinks").start_array();
        for item_449 in var_447 {
             {
                let mut object_450 = array_448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_450, item_449)?;
                object_450.finish();
            }
        }
        array_448.finish();
    }
    if let Some(var_451) = &input.location {
        let mut object_452 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_452, var_451)?;
        object_452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_453) = &input.transform_id {
        object.key("TransformId").string(var_453.as_str());
    }
    if let Some(var_454) = &input.task_run_id {
        object.key("TaskRunId").string(var_454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTaskRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_455) = &input.transform_id {
        object.key("TransformId").string(var_455.as_str());
    }
    if let Some(var_456) = &input.next_token {
        object.key("NextToken").string(var_456.as_str());
    }
    if let Some(var_457) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_457).into()));
    }
    if let Some(var_458) = &input.filter {
        let mut object_459 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(&mut object_459, var_458)?;
        object_459.finish();
    }
    if let Some(var_460) = &input.sort {
        let mut object_461 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(&mut object_461, var_460)?;
        object_461.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_462) = &input.transform_id {
        object.key("TransformId").string(var_462.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetMlTransformsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_463) = &input.next_token {
        object.key("NextToken").string(var_463.as_str());
    }
    if let Some(var_464) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_464).into()));
    }
    if let Some(var_465) = &input.filter {
        let mut object_466 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(&mut object_466, var_465)?;
        object_466.finish();
    }
    if let Some(var_467) = &input.sort {
        let mut object_468 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(&mut object_468, var_467)?;
        object_468.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_469) = &input.catalog_id {
        object.key("CatalogId").string(var_469.as_str());
    }
    if let Some(var_470) = &input.database_name {
        object.key("DatabaseName").string(var_470.as_str());
    }
    if let Some(var_471) = &input.table_name {
        object.key("TableName").string(var_471.as_str());
    }
    if let Some(var_472) = &input.partition_values {
        let mut array_473 = object.key("PartitionValues").start_array();
        for item_474 in var_472 {
             {
                array_473.value().string(item_474.as_str());
            }
        }
        array_473.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionIndexesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_475) = &input.catalog_id {
        object.key("CatalogId").string(var_475.as_str());
    }
    if let Some(var_476) = &input.database_name {
        object.key("DatabaseName").string(var_476.as_str());
    }
    if let Some(var_477) = &input.table_name {
        object.key("TableName").string(var_477.as_str());
    }
    if let Some(var_478) = &input.next_token {
        object.key("NextToken").string(var_478.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPartitionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_479) = &input.catalog_id {
        object.key("CatalogId").string(var_479.as_str());
    }
    if let Some(var_480) = &input.database_name {
        object.key("DatabaseName").string(var_480.as_str());
    }
    if let Some(var_481) = &input.table_name {
        object.key("TableName").string(var_481.as_str());
    }
    if let Some(var_482) = &input.expression {
        object.key("Expression").string(var_482.as_str());
    }
    if let Some(var_483) = &input.next_token {
        object.key("NextToken").string(var_483.as_str());
    }
    if let Some(var_484) = &input.segment {
        let mut object_485 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_485, var_484)?;
        object_485.finish();
    }
    if let Some(var_486) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_486).into()));
    }
    if let Some(var_487) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_487);
    }
    if let Some(var_488) = &input.transaction_id {
        object.key("TransactionId").string(var_488.as_str());
    }
    if let Some(var_489) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_489, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetPlanInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_490) = &input.mapping {
        let mut array_491 = object.key("Mapping").start_array();
        for item_492 in var_490 {
             {
                let mut object_493 = array_491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(&mut object_493, item_492)?;
                object_493.finish();
            }
        }
        array_491.finish();
    }
    if let Some(var_494) = &input.source {
        let mut object_495 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_495, var_494)?;
        object_495.finish();
    }
    if let Some(var_496) = &input.sinks {
        let mut array_497 = object.key("Sinks").start_array();
        for item_498 in var_496 {
             {
                let mut object_499 = array_497.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_499, item_498)?;
                object_499.finish();
            }
        }
        array_497.finish();
    }
    if let Some(var_500) = &input.location {
        let mut object_501 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_501, var_500)?;
        object_501.finish();
    }
    if let Some(var_502) = &input.language {
        object.key("Language").string(var_502.as_str());
    }
    if let Some(var_503) = &input.additional_plan_options_map {
        let mut object_504 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_505, value_506) in var_503 {
             {
                object_504.key(key_505.as_str()).string(value_506.as_str());
            }
        }
        object_504.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_507) = &input.registry_id {
        let mut object_508 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_508, var_507)?;
        object_508.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetResourcePoliciesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_509) = &input.next_token {
        object.key("NextToken").string(var_509.as_str());
    }
    if let Some(var_510) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_510).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_511) = &input.resource_arn {
        object.key("ResourceArn").string(var_511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_512) = &input.schema_id {
        let mut object_513 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_513, var_512)?;
        object_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaByDefinitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_514) = &input.schema_id {
        let mut object_515 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_515, var_514)?;
        object_515.finish();
    }
    if let Some(var_516) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_517) = &input.schema_id {
        let mut object_518 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_518, var_517)?;
        object_518.finish();
    }
    if let Some(var_519) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_519.as_str());
    }
    if let Some(var_520) = &input.schema_version_number {
        let mut object_521 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_521, var_520)?;
        object_521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSchemaVersionsDiffInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_522) = &input.schema_id {
        let mut object_523 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_523, var_522)?;
        object_523.finish();
    }
    if let Some(var_524) = &input.first_schema_version_number {
        let mut object_525 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.second_schema_version_number {
        let mut object_527 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_527, var_526)?;
        object_527.finish();
    }
    if let Some(var_528) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_528.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSecurityConfigurationInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_529) = &input.name {
        object.key("Name").string(var_529.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSecurityConfigurationsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_530) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_530).into()));
    }
    if let Some(var_531) = &input.next_token {
        object.key("NextToken").string(var_531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_532) = &input.id {
        object.key("Id").string(var_532.as_str());
    }
    if let Some(var_533) = &input.request_origin {
        object.key("RequestOrigin").string(var_533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_534) = &input.session_id {
        object.key("SessionId").string(var_534.as_str());
    }
     {
        object.key("Id").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.id).into()));
    }
    if let Some(var_535) = &input.request_origin {
        object.key("RequestOrigin").string(var_535.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_536) = &input.catalog_id {
        object.key("CatalogId").string(var_536.as_str());
    }
    if let Some(var_537) = &input.database_name {
        object.key("DatabaseName").string(var_537.as_str());
    }
    if let Some(var_538) = &input.name {
        object.key("Name").string(var_538.as_str());
    }
    if let Some(var_539) = &input.transaction_id {
        object.key("TransactionId").string(var_539.as_str());
    }
    if let Some(var_540) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_540, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTablesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_541) = &input.catalog_id {
        object.key("CatalogId").string(var_541.as_str());
    }
    if let Some(var_542) = &input.database_name {
        object.key("DatabaseName").string(var_542.as_str());
    }
    if let Some(var_543) = &input.expression {
        object.key("Expression").string(var_543.as_str());
    }
    if let Some(var_544) = &input.next_token {
        object.key("NextToken").string(var_544.as_str());
    }
    if let Some(var_545) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_545).into()));
    }
    if let Some(var_546) = &input.transaction_id {
        object.key("TransactionId").string(var_546.as_str());
    }
    if let Some(var_547) = &input.query_as_of_time {
        object.key("QueryAsOfTime").date_time(var_547, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_548) = &input.catalog_id {
        object.key("CatalogId").string(var_548.as_str());
    }
    if let Some(var_549) = &input.database_name {
        object.key("DatabaseName").string(var_549.as_str());
    }
    if let Some(var_550) = &input.table_name {
        object.key("TableName").string(var_550.as_str());
    }
    if let Some(var_551) = &input.version_id {
        object.key("VersionId").string(var_551.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTableVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_552) = &input.catalog_id {
        object.key("CatalogId").string(var_552.as_str());
    }
    if let Some(var_553) = &input.database_name {
        object.key("DatabaseName").string(var_553.as_str());
    }
    if let Some(var_554) = &input.table_name {
        object.key("TableName").string(var_554.as_str());
    }
    if let Some(var_555) = &input.next_token {
        object.key("NextToken").string(var_555.as_str());
    }
    if let Some(var_556) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_556).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTagsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_557) = &input.resource_arn {
        object.key("ResourceArn").string(var_557.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_558) = &input.name {
        object.key("Name").string(var_558.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_559) = &input.next_token {
        object.key("NextToken").string(var_559.as_str());
    }
    if let Some(var_560) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_560.as_str());
    }
    if let Some(var_561) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_561).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredPartitionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_562) = &input.catalog_id {
        object.key("CatalogId").string(var_562.as_str());
    }
    if let Some(var_563) = &input.database_name {
        object.key("DatabaseName").string(var_563.as_str());
    }
    if let Some(var_564) = &input.table_name {
        object.key("TableName").string(var_564.as_str());
    }
    if let Some(var_565) = &input.partition_values {
        let mut array_566 = object.key("PartitionValues").start_array();
        for item_567 in var_565 {
             {
                array_566.value().string(item_567.as_str());
            }
        }
        array_566.finish();
    }
    if let Some(var_568) = &input.audit_context {
        let mut object_569 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_569, var_568)?;
        object_569.finish();
    }
    if let Some(var_570) = &input.supported_permission_types {
        let mut array_571 = object.key("SupportedPermissionTypes").start_array();
        for item_572 in var_570 {
             {
                array_571.value().string(item_572.as_str());
            }
        }
        array_571.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredPartitionsMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_573) = &input.catalog_id {
        object.key("CatalogId").string(var_573.as_str());
    }
    if let Some(var_574) = &input.database_name {
        object.key("DatabaseName").string(var_574.as_str());
    }
    if let Some(var_575) = &input.table_name {
        object.key("TableName").string(var_575.as_str());
    }
    if let Some(var_576) = &input.expression {
        object.key("Expression").string(var_576.as_str());
    }
    if let Some(var_577) = &input.audit_context {
        let mut object_578 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_578, var_577)?;
        object_578.finish();
    }
    if let Some(var_579) = &input.supported_permission_types {
        let mut array_580 = object.key("SupportedPermissionTypes").start_array();
        for item_581 in var_579 {
             {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
    if let Some(var_582) = &input.next_token {
        object.key("NextToken").string(var_582.as_str());
    }
    if let Some(var_583) = &input.segment {
        let mut object_584 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_584, var_583)?;
        object_584.finish();
    }
    if let Some(var_585) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_585).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUnfilteredTableMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_586) = &input.catalog_id {
        object.key("CatalogId").string(var_586.as_str());
    }
    if let Some(var_587) = &input.database_name {
        object.key("DatabaseName").string(var_587.as_str());
    }
    if let Some(var_588) = &input.name {
        object.key("Name").string(var_588.as_str());
    }
    if let Some(var_589) = &input.audit_context {
        let mut object_590 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_590, var_589)?;
        object_590.finish();
    }
    if let Some(var_591) = &input.supported_permission_types {
        let mut array_592 = object.key("SupportedPermissionTypes").start_array();
        for item_593 in var_591 {
             {
                array_592.value().string(item_593.as_str());
            }
        }
        array_592.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_594) = &input.catalog_id {
        object.key("CatalogId").string(var_594.as_str());
    }
    if let Some(var_595) = &input.database_name {
        object.key("DatabaseName").string(var_595.as_str());
    }
    if let Some(var_596) = &input.function_name {
        object.key("FunctionName").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetUserDefinedFunctionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_597) = &input.catalog_id {
        object.key("CatalogId").string(var_597.as_str());
    }
    if let Some(var_598) = &input.database_name {
        object.key("DatabaseName").string(var_598.as_str());
    }
    if let Some(var_599) = &input.pattern {
        object.key("Pattern").string(var_599.as_str());
    }
    if let Some(var_600) = &input.next_token {
        object.key("NextToken").string(var_600.as_str());
    }
    if let Some(var_601) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_601).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_602) = &input.name {
        object.key("Name").string(var_602.as_str());
    }
    if let Some(var_603) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_603);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_604) = &input.name {
        object.key("Name").string(var_604.as_str());
    }
    if let Some(var_605) = &input.run_id {
        object.key("RunId").string(var_605.as_str());
    }
    if let Some(var_606) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_606);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_607) = &input.name {
        object.key("Name").string(var_607.as_str());
    }
    if let Some(var_608) = &input.run_id {
        object.key("RunId").string(var_608.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::GetWorkflowRunsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_609) = &input.name {
        object.key("Name").string(var_609.as_str());
    }
    if let Some(var_610) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_610);
    }
    if let Some(var_611) = &input.next_token {
        object.key("NextToken").string(var_611.as_str());
    }
    if let Some(var_612) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_612).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ImportCatalogToGlueInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_613) = &input.catalog_id {
        object.key("CatalogId").string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListBlueprintsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_614) = &input.next_token {
        object.key("NextToken").string(var_614.as_str());
    }
    if let Some(var_615) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_615).into()));
    }
    if let Some(var_616) = &input.tags {
        let mut object_617 = object.key("Tags").start_object();
        for (key_618, value_619) in var_616 {
             {
                object_617.key(key_618.as_str()).string(value_619.as_str());
            }
        }
        object_617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCrawlersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_620) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_620).into()));
    }
    if let Some(var_621) = &input.next_token {
        object.key("NextToken").string(var_621.as_str());
    }
    if let Some(var_622) = &input.tags {
        let mut object_623 = object.key("Tags").start_object();
        for (key_624, value_625) in var_622 {
             {
                object_623.key(key_624.as_str()).string(value_625.as_str());
            }
        }
        object_623.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawls_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCrawlsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_626) = &input.crawler_name {
        object.key("CrawlerName").string(var_626.as_str());
    }
    if let Some(var_627) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_627).into()));
    }
    if let Some(var_628) = &input.filters {
        let mut array_629 = object.key("Filters").start_array();
        for item_630 in var_628 {
             {
                let mut object_631 = array_629.value().start_object();
                crate::json_ser::serialize_structure_crate_model_crawls_filter(&mut object_631, item_630)?;
                object_631.finish();
            }
        }
        array_629.finish();
    }
    if let Some(var_632) = &input.next_token {
        object.key("NextToken").string(var_632.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_entity_types_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListCustomEntityTypesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_633) = &input.next_token {
        object.key("NextToken").string(var_633.as_str());
    }
    if let Some(var_634) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_634).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListDevEndpointsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_635) = &input.next_token {
        object.key("NextToken").string(var_635.as_str());
    }
    if let Some(var_636) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_636).into()));
    }
    if let Some(var_637) = &input.tags {
        let mut object_638 = object.key("Tags").start_object();
        for (key_639, value_640) in var_637 {
             {
                object_638.key(key_639.as_str()).string(value_640.as_str());
            }
        }
        object_638.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListJobsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_641) = &input.next_token {
        object.key("NextToken").string(var_641.as_str());
    }
    if let Some(var_642) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_642).into()));
    }
    if let Some(var_643) = &input.tags {
        let mut object_644 = object.key("Tags").start_object();
        for (key_645, value_646) in var_643 {
             {
                object_644.key(key_645.as_str()).string(value_646.as_str());
            }
        }
        object_644.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListMlTransformsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_647) = &input.next_token {
        object.key("NextToken").string(var_647.as_str());
    }
    if let Some(var_648) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_648).into()));
    }
    if let Some(var_649) = &input.filter {
        let mut object_650 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(&mut object_650, var_649)?;
        object_650.finish();
    }
    if let Some(var_651) = &input.sort {
        let mut object_652 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(&mut object_652, var_651)?;
        object_652.finish();
    }
    if let Some(var_653) = &input.tags {
        let mut object_654 = object.key("Tags").start_object();
        for (key_655, value_656) in var_653 {
             {
                object_654.key(key_655.as_str()).string(value_656.as_str());
            }
        }
        object_654.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListRegistriesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_657) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_657).into()));
    }
    if let Some(var_658) = &input.next_token {
        object.key("NextToken").string(var_658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSchemasInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_659) = &input.registry_id {
        let mut object_660 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_660, var_659)?;
        object_660.finish();
    }
    if let Some(var_661) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_661).into()));
    }
    if let Some(var_662) = &input.next_token {
        object.key("NextToken").string(var_662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSchemaVersionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_663) = &input.schema_id {
        let mut object_664 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_664, var_663)?;
        object_664.finish();
    }
    if let Some(var_665) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_665).into()));
    }
    if let Some(var_666) = &input.next_token {
        object.key("NextToken").string(var_666.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListSessionsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_667) = &input.next_token {
        object.key("NextToken").string(var_667.as_str());
    }
    if let Some(var_668) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_668).into()));
    }
    if let Some(var_669) = &input.tags {
        let mut object_670 = object.key("Tags").start_object();
        for (key_671, value_672) in var_669 {
             {
                object_670.key(key_671.as_str()).string(value_672.as_str());
            }
        }
        object_670.finish();
    }
    if let Some(var_673) = &input.request_origin {
        object.key("RequestOrigin").string(var_673.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListStatementsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_674) = &input.session_id {
        object.key("SessionId").string(var_674.as_str());
    }
    if let Some(var_675) = &input.request_origin {
        object.key("RequestOrigin").string(var_675.as_str());
    }
    if let Some(var_676) = &input.next_token {
        object.key("NextToken").string(var_676.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListTriggersInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_677) = &input.next_token {
        object.key("NextToken").string(var_677.as_str());
    }
    if let Some(var_678) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_678.as_str());
    }
    if let Some(var_679) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_679).into()));
    }
    if let Some(var_680) = &input.tags {
        let mut object_681 = object.key("Tags").start_object();
        for (key_682, value_683) in var_680 {
             {
                object_681.key(key_682.as_str()).string(value_683.as_str());
            }
        }
        object_681.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ListWorkflowsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_684) = &input.next_token {
        object.key("NextToken").string(var_684.as_str());
    }
    if let Some(var_685) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_685).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutDataCatalogEncryptionSettingsInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_686) = &input.catalog_id {
        object.key("CatalogId").string(var_686.as_str());
    }
    if let Some(var_687) = &input.data_catalog_encryption_settings {
        let mut object_688 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(&mut object_688, var_687)?;
        object_688.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutResourcePolicyInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_689) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_689.as_str());
    }
    if let Some(var_690) = &input.resource_arn {
        object.key("ResourceArn").string(var_690.as_str());
    }
    if let Some(var_691) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_691.as_str());
    }
    if let Some(var_692) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_692.as_str());
    }
    if let Some(var_693) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_693.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutSchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_694) = &input.schema_id {
        let mut object_695 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_695, var_694)?;
        object_695.finish();
    }
    if let Some(var_696) = &input.schema_version_number {
        let mut object_697 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_697, var_696)?;
        object_697.finish();
    }
    if let Some(var_698) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_698.as_str());
    }
    if let Some(var_699) = &input.metadata_key_value {
        let mut object_700 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_700, var_699)?;
        object_700.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::PutWorkflowRunPropertiesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_701) = &input.name {
        object.key("Name").string(var_701.as_str());
    }
    if let Some(var_702) = &input.run_id {
        object.key("RunId").string(var_702.as_str());
    }
    if let Some(var_703) = &input.run_properties {
        let mut object_704 = object.key("RunProperties").start_object();
        for (key_705, value_706) in var_703 {
             {
                object_704.key(key_705.as_str()).string(value_706.as_str());
            }
        }
        object_704.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::QuerySchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_707) = &input.schema_id {
        let mut object_708 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_708, var_707)?;
        object_708.finish();
    }
    if let Some(var_709) = &input.schema_version_number {
        let mut object_710 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_710, var_709)?;
        object_710.finish();
    }
    if let Some(var_711) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_711.as_str());
    }
    if let Some(var_712) = &input.metadata_list {
        let mut array_713 = object.key("MetadataList").start_array();
        for item_714 in var_712 {
             {
                let mut object_715 = array_713.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_715, item_714)?;
                object_715.finish();
            }
        }
        array_713.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_results).into()));
    }
    if let Some(var_716) = &input.next_token {
        object.key("NextToken").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RegisterSchemaVersionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_717) = &input.schema_id {
        let mut object_718 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_718, var_717)?;
        object_718.finish();
    }
    if let Some(var_719) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_719.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RemoveSchemaVersionMetadataInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_720) = &input.schema_id {
        let mut object_721 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_721, var_720)?;
        object_721.finish();
    }
    if let Some(var_722) = &input.schema_version_number {
        let mut object_723 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_723, var_722)?;
        object_723.finish();
    }
    if let Some(var_724) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_724.as_str());
    }
    if let Some(var_725) = &input.metadata_key_value {
        let mut object_726 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(&mut object_726, var_725)?;
        object_726.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResetJobBookmarkInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_727) = &input.job_name {
        object.key("JobName").string(var_727.as_str());
    }
    if let Some(var_728) = &input.run_id {
        object.key("RunId").string(var_728.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::ResumeWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_729) = &input.name {
        object.key("Name").string(var_729.as_str());
    }
    if let Some(var_730) = &input.run_id {
        object.key("RunId").string(var_730.as_str());
    }
    if let Some(var_731) = &input.node_ids {
        let mut array_732 = object.key("NodeIds").start_array();
        for item_733 in var_731 {
             {
                array_732.value().string(item_733.as_str());
            }
        }
        array_732.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::RunStatementInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_734) = &input.session_id {
        object.key("SessionId").string(var_734.as_str());
    }
    if let Some(var_735) = &input.code {
        object.key("Code").string(var_735.as_str());
    }
    if let Some(var_736) = &input.request_origin {
        object.key("RequestOrigin").string(var_736.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::SearchTablesInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_737) = &input.catalog_id {
        object.key("CatalogId").string(var_737.as_str());
    }
    if let Some(var_738) = &input.next_token {
        object.key("NextToken").string(var_738.as_str());
    }
    if let Some(var_739) = &input.filters {
        let mut array_740 = object.key("Filters").start_array();
        for item_741 in var_739 {
             {
                let mut object_742 = array_740.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(&mut object_742, item_741)?;
                object_742.finish();
            }
        }
        array_740.finish();
    }
    if let Some(var_743) = &input.search_text {
        object.key("SearchText").string(var_743.as_str());
    }
    if let Some(var_744) = &input.sort_criteria {
        let mut array_745 = object.key("SortCriteria").start_array();
        for item_746 in var_744 {
             {
                let mut object_747 = array_745.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(&mut object_747, item_746)?;
                object_747.finish();
            }
        }
        array_745.finish();
    }
    if let Some(var_748) = &input.max_results {
        object.key("MaxResults").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_748).into()));
    }
    if let Some(var_749) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_749.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartBlueprintRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_750) = &input.blueprint_name {
        object.key("BlueprintName").string(var_750.as_str());
    }
    if let Some(var_751) = &input.parameters {
        object.key("Parameters").string(var_751.as_str());
    }
    if let Some(var_752) = &input.role_arn {
        object.key("RoleArn").string(var_752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_753) = &input.name {
        object.key("Name").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_754) = &input.crawler_name {
        object.key("CrawlerName").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartExportLabelsTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_755) = &input.transform_id {
        object.key("TransformId").string(var_755.as_str());
    }
    if let Some(var_756) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartImportLabelsTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_757) = &input.transform_id {
        object.key("TransformId").string(var_757.as_str());
    }
    if let Some(var_758) = &input.input_s3_path {
        object.key("InputS3Path").string(var_758.as_str());
    }
    if input.replace_all_labels {
        object.key("ReplaceAllLabels").boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartJobRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_759) = &input.job_name {
        object.key("JobName").string(var_759.as_str());
    }
    if let Some(var_760) = &input.job_run_id {
        object.key("JobRunId").string(var_760.as_str());
    }
    if let Some(var_761) = &input.arguments {
        let mut object_762 = object.key("Arguments").start_object();
        for (key_763, value_764) in var_761 {
             {
                object_762.key(key_763.as_str()).string(value_764.as_str());
            }
        }
        object_762.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_765) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_765).into()));
    }
    if let Some(var_766) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_766).into()));
    }
    if let Some(var_767) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_767.as_str());
    }
    if let Some(var_768) = &input.notification_property {
        let mut object_769 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_769, var_768)?;
        object_769.finish();
    }
    if let Some(var_770) = &input.worker_type {
        object.key("WorkerType").string(var_770.as_str());
    }
    if let Some(var_771) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_771).into()));
    }
    if let Some(var_772) = &input.execution_class {
        object.key("ExecutionClass").string(var_772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMlEvaluationTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_773) = &input.transform_id {
        object.key("TransformId").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartMlLabelingSetGenerationTaskRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_774) = &input.transform_id {
        object.key("TransformId").string(var_774.as_str());
    }
    if let Some(var_775) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_775.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_776) = &input.name {
        object.key("Name").string(var_776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StartWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_777) = &input.name {
        object.key("Name").string(var_777.as_str());
    }
    if let Some(var_778) = &input.run_properties {
        let mut object_779 = object.key("RunProperties").start_object();
        for (key_780, value_781) in var_778 {
             {
                object_779.key(key_780.as_str()).string(value_781.as_str());
            }
        }
        object_779.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_782) = &input.name {
        object.key("Name").string(var_782.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_783) = &input.crawler_name {
        object.key("CrawlerName").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopSessionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_784) = &input.id {
        object.key("Id").string(var_784.as_str());
    }
    if let Some(var_785) = &input.request_origin {
        object.key("RequestOrigin").string(var_785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_786) = &input.name {
        object.key("Name").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::StopWorkflowRunInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_787) = &input.name {
        object.key("Name").string(var_787.as_str());
    }
    if let Some(var_788) = &input.run_id {
        object.key("RunId").string(var_788.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::TagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_789) = &input.resource_arn {
        object.key("ResourceArn").string(var_789.as_str());
    }
    if let Some(var_790) = &input.tags_to_add {
        let mut object_791 = object.key("TagsToAdd").start_object();
        for (key_792, value_793) in var_790 {
             {
                object_791.key(key_792.as_str()).string(value_793.as_str());
            }
        }
        object_791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UntagResourceInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_794) = &input.resource_arn {
        object.key("ResourceArn").string(var_794.as_str());
    }
    if let Some(var_795) = &input.tags_to_remove {
        let mut array_796 = object.key("TagsToRemove").start_array();
        for item_797 in var_795 {
             {
                array_796.value().string(item_797.as_str());
            }
        }
        array_796.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateBlueprintInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_798) = &input.name {
        object.key("Name").string(var_798.as_str());
    }
    if let Some(var_799) = &input.description {
        object.key("Description").string(var_799.as_str());
    }
    if let Some(var_800) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_800.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateClassifierInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_801) = &input.grok_classifier {
        let mut object_802 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(&mut object_802, var_801)?;
        object_802.finish();
    }
    if let Some(var_803) = &input.xml_classifier {
        let mut object_804 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(&mut object_804, var_803)?;
        object_804.finish();
    }
    if let Some(var_805) = &input.json_classifier {
        let mut object_806 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(&mut object_806, var_805)?;
        object_806.finish();
    }
    if let Some(var_807) = &input.csv_classifier {
        let mut object_808 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(&mut object_808, var_807)?;
        object_808.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateColumnStatisticsForPartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_809) = &input.catalog_id {
        object.key("CatalogId").string(var_809.as_str());
    }
    if let Some(var_810) = &input.database_name {
        object.key("DatabaseName").string(var_810.as_str());
    }
    if let Some(var_811) = &input.table_name {
        object.key("TableName").string(var_811.as_str());
    }
    if let Some(var_812) = &input.partition_values {
        let mut array_813 = object.key("PartitionValues").start_array();
        for item_814 in var_812 {
             {
                array_813.value().string(item_814.as_str());
            }
        }
        array_813.finish();
    }
    if let Some(var_815) = &input.column_statistics_list {
        let mut array_816 = object.key("ColumnStatisticsList").start_array();
        for item_817 in var_815 {
             {
                let mut object_818 = array_816.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(&mut object_818, item_817)?;
                object_818.finish();
            }
        }
        array_816.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateColumnStatisticsForTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_819) = &input.catalog_id {
        object.key("CatalogId").string(var_819.as_str());
    }
    if let Some(var_820) = &input.database_name {
        object.key("DatabaseName").string(var_820.as_str());
    }
    if let Some(var_821) = &input.table_name {
        object.key("TableName").string(var_821.as_str());
    }
    if let Some(var_822) = &input.column_statistics_list {
        let mut array_823 = object.key("ColumnStatisticsList").start_array();
        for item_824 in var_822 {
             {
                let mut object_825 = array_823.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(&mut object_825, item_824)?;
                object_825.finish();
            }
        }
        array_823.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_826) = &input.catalog_id {
        object.key("CatalogId").string(var_826.as_str());
    }
    if let Some(var_827) = &input.name {
        object.key("Name").string(var_827.as_str());
    }
    if let Some(var_828) = &input.connection_input {
        let mut object_829 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_829, var_828)?;
        object_829.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCrawlerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_830) = &input.name {
        object.key("Name").string(var_830.as_str());
    }
    if let Some(var_831) = &input.role {
        object.key("Role").string(var_831.as_str());
    }
    if let Some(var_832) = &input.database_name {
        object.key("DatabaseName").string(var_832.as_str());
    }
    if let Some(var_833) = &input.description {
        object.key("Description").string(var_833.as_str());
    }
    if let Some(var_834) = &input.targets {
        let mut object_835 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_835, var_834)?;
        object_835.finish();
    }
    if let Some(var_836) = &input.schedule {
        object.key("Schedule").string(var_836.as_str());
    }
    if let Some(var_837) = &input.classifiers {
        let mut array_838 = object.key("Classifiers").start_array();
        for item_839 in var_837 {
             {
                array_838.value().string(item_839.as_str());
            }
        }
        array_838.finish();
    }
    if let Some(var_840) = &input.table_prefix {
        object.key("TablePrefix").string(var_840.as_str());
    }
    if let Some(var_841) = &input.schema_change_policy {
        let mut object_842 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(&mut object_842, var_841)?;
        object_842.finish();
    }
    if let Some(var_843) = &input.recrawl_policy {
        let mut object_844 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_844, var_843)?;
        object_844.finish();
    }
    if let Some(var_845) = &input.lineage_configuration {
        let mut object_846 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(&mut object_846, var_845)?;
        object_846.finish();
    }
    if let Some(var_847) = &input.lake_formation_configuration {
        let mut object_848 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(&mut object_848, var_847)?;
        object_848.finish();
    }
    if let Some(var_849) = &input.configuration {
        object.key("Configuration").string(var_849.as_str());
    }
    if let Some(var_850) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_850.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateCrawlerScheduleInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_851) = &input.crawler_name {
        object.key("CrawlerName").string(var_851.as_str());
    }
    if let Some(var_852) = &input.schedule {
        object.key("Schedule").string(var_852.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_853) = &input.catalog_id {
        object.key("CatalogId").string(var_853.as_str());
    }
    if let Some(var_854) = &input.name {
        object.key("Name").string(var_854.as_str());
    }
    if let Some(var_855) = &input.database_input {
        let mut object_856 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_856, var_855)?;
        object_856.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateDevEndpointInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_857) = &input.endpoint_name {
        object.key("EndpointName").string(var_857.as_str());
    }
    if let Some(var_858) = &input.public_key {
        object.key("PublicKey").string(var_858.as_str());
    }
    if let Some(var_859) = &input.add_public_keys {
        let mut array_860 = object.key("AddPublicKeys").start_array();
        for item_861 in var_859 {
             {
                array_860.value().string(item_861.as_str());
            }
        }
        array_860.finish();
    }
    if let Some(var_862) = &input.delete_public_keys {
        let mut array_863 = object.key("DeletePublicKeys").start_array();
        for item_864 in var_862 {
             {
                array_863.value().string(item_864.as_str());
            }
        }
        array_863.finish();
    }
    if let Some(var_865) = &input.custom_libraries {
        let mut object_866 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(&mut object_866, var_865)?;
        object_866.finish();
    }
    if input.update_etl_libraries {
        object.key("UpdateEtlLibraries").boolean(input.update_etl_libraries);
    }
    if let Some(var_867) = &input.delete_arguments {
        let mut array_868 = object.key("DeleteArguments").start_array();
        for item_869 in var_867 {
             {
                array_868.value().string(item_869.as_str());
            }
        }
        array_868.finish();
    }
    if let Some(var_870) = &input.add_arguments {
        let mut object_871 = object.key("AddArguments").start_object();
        for (key_872, value_873) in var_870 {
             {
                object_871.key(key_872.as_str()).string(value_873.as_str());
            }
        }
        object_871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_874) = &input.job_name {
        object.key("JobName").string(var_874.as_str());
    }
    if let Some(var_875) = &input.job_update {
        let mut object_876 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_876, var_875)?;
        object_876.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_from_source_control_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateJobFromSourceControlInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_877) = &input.job_name {
        object.key("JobName").string(var_877.as_str());
    }
    if let Some(var_878) = &input.provider {
        object.key("Provider").string(var_878.as_str());
    }
    if let Some(var_879) = &input.repository_name {
        object.key("RepositoryName").string(var_879.as_str());
    }
    if let Some(var_880) = &input.repository_owner {
        object.key("RepositoryOwner").string(var_880.as_str());
    }
    if let Some(var_881) = &input.branch_name {
        object.key("BranchName").string(var_881.as_str());
    }
    if let Some(var_882) = &input.folder {
        object.key("Folder").string(var_882.as_str());
    }
    if let Some(var_883) = &input.commit_id {
        object.key("CommitId").string(var_883.as_str());
    }
    if let Some(var_884) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_884.as_str());
    }
    if let Some(var_885) = &input.auth_token {
        object.key("AuthToken").string(var_885.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateMlTransformInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_886) = &input.transform_id {
        object.key("TransformId").string(var_886.as_str());
    }
    if let Some(var_887) = &input.name {
        object.key("Name").string(var_887.as_str());
    }
    if let Some(var_888) = &input.description {
        object.key("Description").string(var_888.as_str());
    }
    if let Some(var_889) = &input.parameters {
        let mut object_890 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(&mut object_890, var_889)?;
        object_890.finish();
    }
    if let Some(var_891) = &input.role {
        object.key("Role").string(var_891.as_str());
    }
    if let Some(var_892) = &input.glue_version {
        object.key("GlueVersion").string(var_892.as_str());
    }
    if let Some(var_893) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_893).into()));
    }
    if let Some(var_894) = &input.worker_type {
        object.key("WorkerType").string(var_894.as_str());
    }
    if let Some(var_895) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_895).into()));
    }
    if let Some(var_896) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_896).into()));
    }
    if let Some(var_897) = &input.max_retries {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_897).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdatePartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_898) = &input.catalog_id {
        object.key("CatalogId").string(var_898.as_str());
    }
    if let Some(var_899) = &input.database_name {
        object.key("DatabaseName").string(var_899.as_str());
    }
    if let Some(var_900) = &input.table_name {
        object.key("TableName").string(var_900.as_str());
    }
    if let Some(var_901) = &input.partition_value_list {
        let mut array_902 = object.key("PartitionValueList").start_array();
        for item_903 in var_901 {
             {
                array_902.value().string(item_903.as_str());
            }
        }
        array_902.finish();
    }
    if let Some(var_904) = &input.partition_input {
        let mut object_905 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_905, var_904)?;
        object_905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateRegistryInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_906) = &input.registry_id {
        let mut object_907 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_907, var_906)?;
        object_907.finish();
    }
    if let Some(var_908) = &input.description {
        object.key("Description").string(var_908.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSchemaInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_909) = &input.schema_id {
        let mut object_910 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_910, var_909)?;
        object_910.finish();
    }
    if let Some(var_911) = &input.schema_version_number {
        let mut object_912 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(&mut object_912, var_911)?;
        object_912.finish();
    }
    if let Some(var_913) = &input.compatibility {
        object.key("Compatibility").string(var_913.as_str());
    }
    if let Some(var_914) = &input.description {
        object.key("Description").string(var_914.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_source_control_from_job_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateSourceControlFromJobInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_915) = &input.job_name {
        object.key("JobName").string(var_915.as_str());
    }
    if let Some(var_916) = &input.provider {
        object.key("Provider").string(var_916.as_str());
    }
    if let Some(var_917) = &input.repository_name {
        object.key("RepositoryName").string(var_917.as_str());
    }
    if let Some(var_918) = &input.repository_owner {
        object.key("RepositoryOwner").string(var_918.as_str());
    }
    if let Some(var_919) = &input.branch_name {
        object.key("BranchName").string(var_919.as_str());
    }
    if let Some(var_920) = &input.folder {
        object.key("Folder").string(var_920.as_str());
    }
    if let Some(var_921) = &input.commit_id {
        object.key("CommitId").string(var_921.as_str());
    }
    if let Some(var_922) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_922.as_str());
    }
    if let Some(var_923) = &input.auth_token {
        object.key("AuthToken").string(var_923.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_924) = &input.catalog_id {
        object.key("CatalogId").string(var_924.as_str());
    }
    if let Some(var_925) = &input.database_name {
        object.key("DatabaseName").string(var_925.as_str());
    }
    if let Some(var_926) = &input.table_input {
        let mut object_927 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_927, var_926)?;
        object_927.finish();
    }
    if let Some(var_928) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_928);
    }
    if let Some(var_929) = &input.transaction_id {
        object.key("TransactionId").string(var_929.as_str());
    }
    if let Some(var_930) = &input.version_id {
        object.key("VersionId").string(var_930.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateTriggerInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_931) = &input.name {
        object.key("Name").string(var_931.as_str());
    }
    if let Some(var_932) = &input.trigger_update {
        let mut object_933 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_933, var_932)?;
        object_933.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateUserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_934) = &input.catalog_id {
        object.key("CatalogId").string(var_934.as_str());
    }
    if let Some(var_935) = &input.database_name {
        object.key("DatabaseName").string(var_935.as_str());
    }
    if let Some(var_936) = &input.function_name {
        object.key("FunctionName").string(var_936.as_str());
    }
    if let Some(var_937) = &input.function_input {
        let mut object_938 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(&mut object_938, var_937)?;
        object_938.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::input::UpdateWorkflowInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_939) = &input.name {
        object.key("Name").string(var_939.as_str());
    }
    if let Some(var_940) = &input.description {
        object.key("Description").string(var_940.as_str());
    }
    if let Some(var_941) = &input.default_run_properties {
        let mut object_942 = object.key("DefaultRunProperties").start_object();
        for (key_943, value_944) in var_941 {
             {
                object_942.key(key_943.as_str()).string(value_944.as_str());
            }
        }
        object_942.finish();
    }
    if let Some(var_945) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_945).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_946) = &input.values {
        let mut array_947 = object.key("Values").start_array();
        for item_948 in var_946 {
             {
                array_947.value().string(item_948.as_str());
            }
        }
        array_947.finish();
    }
    if let Some(var_949) = &input.last_access_time {
        object.key("LastAccessTime").date_time(var_949, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_950) = &input.storage_descriptor {
        let mut object_951 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(&mut object_951, var_950)?;
        object_951.finish();
    }
    if let Some(var_952) = &input.parameters {
        let mut object_953 = object.key("Parameters").start_object();
        for (key_954, value_955) in var_952 {
             {
                object_953.key(key_954.as_str()).string(value_955.as_str());
            }
        }
        object_953.finish();
    }
    if let Some(var_956) = &input.last_analyzed_time {
        object.key("LastAnalyzedTime").date_time(var_956, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionValueList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_957) = &input.values {
        let mut array_958 = object.key("Values").start_array();
        for item_959 in var_957 {
             {
                array_958.value().string(item_959.as_str());
            }
        }
        array_958.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BatchUpdatePartitionRequestEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_960) = &input.partition_value_list {
        let mut array_961 = object.key("PartitionValueList").start_array();
        for item_962 in var_960 {
             {
                array_961.value().string(item_962.as_str());
            }
        }
        array_961.finish();
    }
    if let Some(var_963) = &input.partition_input {
        let mut object_964 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_964, var_963)?;
        object_964.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateGrokClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_965) = &input.classification {
        object.key("Classification").string(var_965.as_str());
    }
    if let Some(var_966) = &input.name {
        object.key("Name").string(var_966.as_str());
    }
    if let Some(var_967) = &input.grok_pattern {
        object.key("GrokPattern").string(var_967.as_str());
    }
    if let Some(var_968) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_968.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateXmlClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_969) = &input.classification {
        object.key("Classification").string(var_969.as_str());
    }
    if let Some(var_970) = &input.name {
        object.key("Name").string(var_970.as_str());
    }
    if let Some(var_971) = &input.row_tag {
        object.key("RowTag").string(var_971.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateJsonClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_972) = &input.name {
        object.key("Name").string(var_972.as_str());
    }
    if let Some(var_973) = &input.json_path {
        object.key("JsonPath").string(var_973.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CreateCsvClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_974) = &input.name {
        object.key("Name").string(var_974.as_str());
    }
    if let Some(var_975) = &input.delimiter {
        object.key("Delimiter").string(var_975.as_str());
    }
    if let Some(var_976) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_976.as_str());
    }
    if let Some(var_977) = &input.contains_header {
        object.key("ContainsHeader").string(var_977.as_str());
    }
    if let Some(var_978) = &input.header {
        let mut array_979 = object.key("Header").start_array();
        for item_980 in var_978 {
             {
                array_979.value().string(item_980.as_str());
            }
        }
        array_979.finish();
    }
    if let Some(var_981) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_981);
    }
    if let Some(var_982) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_982);
    }
    if let Some(var_983) = &input.custom_datatype_configured {
        object.key("CustomDatatypeConfigured").boolean(*var_983);
    }
    if let Some(var_984) = &input.custom_datatypes {
        let mut array_985 = object.key("CustomDatatypes").start_array();
        for item_986 in var_984 {
             {
                array_985.value().string(item_986.as_str());
            }
        }
        array_985.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_987) = &input.name {
        object.key("Name").string(var_987.as_str());
    }
    if let Some(var_988) = &input.description {
        object.key("Description").string(var_988.as_str());
    }
    if let Some(var_989) = &input.connection_type {
        object.key("ConnectionType").string(var_989.as_str());
    }
    if let Some(var_990) = &input.match_criteria {
        let mut array_991 = object.key("MatchCriteria").start_array();
        for item_992 in var_990 {
             {
                array_991.value().string(item_992.as_str());
            }
        }
        array_991.finish();
    }
    if let Some(var_993) = &input.connection_properties {
        let mut object_994 = object.key("ConnectionProperties").start_object();
        for (key_995, value_996) in var_993 {
             {
                object_994.key(key_995.as_str()).string(value_996.as_str());
            }
        }
        object_994.finish();
    }
    if let Some(var_997) = &input.physical_connection_requirements {
        let mut object_998 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(&mut object_998, var_997)?;
        object_998.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CrawlerTargets) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_999) = &input.s3_targets {
        let mut array_1000 = object.key("S3Targets").start_array();
        for item_1001 in var_999 {
             {
                let mut object_1002 = array_1000.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(&mut object_1002, item_1001)?;
                object_1002.finish();
            }
        }
        array_1000.finish();
    }
    if let Some(var_1003) = &input.jdbc_targets {
        let mut array_1004 = object.key("JdbcTargets").start_array();
        for item_1005 in var_1003 {
             {
                let mut object_1006 = array_1004.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(&mut object_1006, item_1005)?;
                object_1006.finish();
            }
        }
        array_1004.finish();
    }
    if let Some(var_1007) = &input.mongo_db_targets {
        let mut array_1008 = object.key("MongoDBTargets").start_array();
        for item_1009 in var_1007 {
             {
                let mut object_1010 = array_1008.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(&mut object_1010, item_1009)?;
                object_1010.finish();
            }
        }
        array_1008.finish();
    }
    if let Some(var_1011) = &input.dynamo_db_targets {
        let mut array_1012 = object.key("DynamoDBTargets").start_array();
        for item_1013 in var_1011 {
             {
                let mut object_1014 = array_1012.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(&mut object_1014, item_1013)?;
                object_1014.finish();
            }
        }
        array_1012.finish();
    }
    if let Some(var_1015) = &input.catalog_targets {
        let mut array_1016 = object.key("CatalogTargets").start_array();
        for item_1017 in var_1015 {
             {
                let mut object_1018 = array_1016.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(&mut object_1018, item_1017)?;
                object_1018.finish();
            }
        }
        array_1016.finish();
    }
    if let Some(var_1019) = &input.delta_targets {
        let mut array_1020 = object.key("DeltaTargets").start_array();
        for item_1021 in var_1019 {
             {
                let mut object_1022 = array_1020.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(&mut object_1022, item_1021)?;
                object_1022.finish();
            }
        }
        array_1020.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1023) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_1024.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RecrawlPolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1025) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_1025.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LineageConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1026) = &input.crawler_lineage_settings {
        object.key("CrawlerLineageSettings").string(var_1026.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LakeFormationConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1027) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_1027);
    }
    if let Some(var_1028) = &input.account_id {
        object.key("AccountId").string(var_1028.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabaseInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1029) = &input.name {
        object.key("Name").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.description {
        object.key("Description").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.location_uri {
        object.key("LocationUri").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.parameters {
        let mut object_1033 = object.key("Parameters").start_object();
        for (key_1034, value_1035) in var_1032 {
             {
                object_1033.key(key_1034.as_str()).string(value_1035.as_str());
            }
        }
        object_1033.finish();
    }
    if let Some(var_1036) = &input.create_table_default_permissions {
        let mut array_1037 = object.key("CreateTableDefaultPermissions").start_array();
        for item_1038 in var_1036 {
             {
                let mut object_1039 = array_1037.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(&mut object_1039, item_1038)?;
                object_1039.finish();
            }
        }
        array_1037.finish();
    }
    if let Some(var_1040) = &input.target_database {
        let mut object_1041 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(&mut object_1041, var_1040)?;
        object_1041.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ExecutionProperty) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobCommand) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1042) = &input.name {
        object.key("Name").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.script_location {
        object.key("ScriptLocation").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.python_version {
        object.key("PythonVersion").string(var_1044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionsList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1045) = &input.connections {
        let mut array_1046 = object.key("Connections").start_array();
        for item_1047 in var_1045 {
             {
                array_1046.value().string(item_1047.as_str());
            }
        }
        array_1046.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NotificationProperty) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1048) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1048).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_configuration_node(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenConfigurationNode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1049) = &input.athena_connector_source {
        let mut object_1050 = object.key("AthenaConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_connector_source(&mut object_1050, var_1049)?;
        object_1050.finish();
    }
    if let Some(var_1051) = &input.jdbc_connector_source {
        let mut object_1052 = object.key("JDBCConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_source(&mut object_1052, var_1051)?;
        object_1052.finish();
    }
    if let Some(var_1053) = &input.spark_connector_source {
        let mut object_1054 = object.key("SparkConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_source(&mut object_1054, var_1053)?;
        object_1054.finish();
    }
    if let Some(var_1055) = &input.catalog_source {
        let mut object_1056 = object.key("CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_source(&mut object_1056, var_1055)?;
        object_1056.finish();
    }
    if let Some(var_1057) = &input.redshift_source {
        let mut object_1058 = object.key("RedshiftSource").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source(&mut object_1058, var_1057)?;
        object_1058.finish();
    }
    if let Some(var_1059) = &input.s3_catalog_source {
        let mut object_1060 = object.key("S3CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_source(&mut object_1060, var_1059)?;
        object_1060.finish();
    }
    if let Some(var_1061) = &input.s3_csv_source {
        let mut object_1062 = object.key("S3CsvSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_csv_source(&mut object_1062, var_1061)?;
        object_1062.finish();
    }
    if let Some(var_1063) = &input.s3_json_source {
        let mut object_1064 = object.key("S3JsonSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_json_source(&mut object_1064, var_1063)?;
        object_1064.finish();
    }
    if let Some(var_1065) = &input.s3_parquet_source {
        let mut object_1066 = object.key("S3ParquetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_parquet_source(&mut object_1066, var_1065)?;
        object_1066.finish();
    }
    if let Some(var_1067) = &input.relational_catalog_source {
        let mut object_1068 = object.key("RelationalCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_catalog_source(&mut object_1068, var_1067)?;
        object_1068.finish();
    }
    if let Some(var_1069) = &input.dynamo_db_catalog_source {
        let mut object_1070 = object.key("DynamoDBCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_catalog_source(&mut object_1070, var_1069)?;
        object_1070.finish();
    }
    if let Some(var_1071) = &input.jdbc_connector_target {
        let mut object_1072 = object.key("JDBCConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_target(&mut object_1072, var_1071)?;
        object_1072.finish();
    }
    if let Some(var_1073) = &input.spark_connector_target {
        let mut object_1074 = object.key("SparkConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_target(&mut object_1074, var_1073)?;
        object_1074.finish();
    }
    if let Some(var_1075) = &input.catalog_target {
        let mut object_1076 = object.key("CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_catalog_target(&mut object_1076, var_1075)?;
        object_1076.finish();
    }
    if let Some(var_1077) = &input.redshift_target {
        let mut object_1078 = object.key("RedshiftTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_target(&mut object_1078, var_1077)?;
        object_1078.finish();
    }
    if let Some(var_1079) = &input.s3_catalog_target {
        let mut object_1080 = object.key("S3CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_target(&mut object_1080, var_1079)?;
        object_1080.finish();
    }
    if let Some(var_1081) = &input.s3_glue_parquet_target {
        let mut object_1082 = object.key("S3GlueParquetTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_glue_parquet_target(&mut object_1082, var_1081)?;
        object_1082.finish();
    }
    if let Some(var_1083) = &input.s3_direct_target {
        let mut object_1084 = object.key("S3DirectTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_target(&mut object_1084, var_1083)?;
        object_1084.finish();
    }
    if let Some(var_1085) = &input.apply_mapping {
        let mut object_1086 = object.key("ApplyMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_apply_mapping(&mut object_1086, var_1085)?;
        object_1086.finish();
    }
    if let Some(var_1087) = &input.select_fields {
        let mut object_1088 = object.key("SelectFields").start_object();
        crate::json_ser::serialize_structure_crate_model_select_fields(&mut object_1088, var_1087)?;
        object_1088.finish();
    }
    if let Some(var_1089) = &input.drop_fields {
        let mut object_1090 = object.key("DropFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_fields(&mut object_1090, var_1089)?;
        object_1090.finish();
    }
    if let Some(var_1091) = &input.rename_field {
        let mut object_1092 = object.key("RenameField").start_object();
        crate::json_ser::serialize_structure_crate_model_rename_field(&mut object_1092, var_1091)?;
        object_1092.finish();
    }
    if let Some(var_1093) = &input.spigot {
        let mut object_1094 = object.key("Spigot").start_object();
        crate::json_ser::serialize_structure_crate_model_spigot(&mut object_1094, var_1093)?;
        object_1094.finish();
    }
    if let Some(var_1095) = &input.join {
        let mut object_1096 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join(&mut object_1096, var_1095)?;
        object_1096.finish();
    }
    if let Some(var_1097) = &input.split_fields {
        let mut object_1098 = object.key("SplitFields").start_object();
        crate::json_ser::serialize_structure_crate_model_split_fields(&mut object_1098, var_1097)?;
        object_1098.finish();
    }
    if let Some(var_1099) = &input.select_from_collection {
        let mut object_1100 = object.key("SelectFromCollection").start_object();
        crate::json_ser::serialize_structure_crate_model_select_from_collection(&mut object_1100, var_1099)?;
        object_1100.finish();
    }
    if let Some(var_1101) = &input.fill_missing_values {
        let mut object_1102 = object.key("FillMissingValues").start_object();
        crate::json_ser::serialize_structure_crate_model_fill_missing_values(&mut object_1102, var_1101)?;
        object_1102.finish();
    }
    if let Some(var_1103) = &input.filter {
        let mut object_1104 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_filter(&mut object_1104, var_1103)?;
        object_1104.finish();
    }
    if let Some(var_1105) = &input.custom_code {
        let mut object_1106 = object.key("CustomCode").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code(&mut object_1106, var_1105)?;
        object_1106.finish();
    }
    if let Some(var_1107) = &input.spark_sql {
        let mut object_1108 = object.key("SparkSQL").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_sql(&mut object_1108, var_1107)?;
        object_1108.finish();
    }
    if let Some(var_1109) = &input.direct_kinesis_source {
        let mut object_1110 = object.key("DirectKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kinesis_source(&mut object_1110, var_1109)?;
        object_1110.finish();
    }
    if let Some(var_1111) = &input.direct_kafka_source {
        let mut object_1112 = object.key("DirectKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kafka_source(&mut object_1112, var_1111)?;
        object_1112.finish();
    }
    if let Some(var_1113) = &input.catalog_kinesis_source {
        let mut object_1114 = object.key("CatalogKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kinesis_source(&mut object_1114, var_1113)?;
        object_1114.finish();
    }
    if let Some(var_1115) = &input.catalog_kafka_source {
        let mut object_1116 = object.key("CatalogKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kafka_source(&mut object_1116, var_1115)?;
        object_1116.finish();
    }
    if let Some(var_1117) = &input.drop_null_fields {
        let mut object_1118 = object.key("DropNullFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_null_fields(&mut object_1118, var_1117)?;
        object_1118.finish();
    }
    if let Some(var_1119) = &input.merge {
        let mut object_1120 = object.key("Merge").start_object();
        crate::json_ser::serialize_structure_crate_model_merge(&mut object_1120, var_1119)?;
        object_1120.finish();
    }
    if let Some(var_1121) = &input.union {
        let mut object_1122 = object.key("Union").start_object();
        crate::json_ser::serialize_structure_crate_model_union(&mut object_1122, var_1121)?;
        object_1122.finish();
    }
    if let Some(var_1123) = &input.pii_detection {
        let mut object_1124 = object.key("PIIDetection").start_object();
        crate::json_ser::serialize_structure_crate_model_pii_detection(&mut object_1124, var_1123)?;
        object_1124.finish();
    }
    if let Some(var_1125) = &input.aggregate {
        let mut object_1126 = object.key("Aggregate").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate(&mut object_1126, var_1125)?;
        object_1126.finish();
    }
    if let Some(var_1127) = &input.drop_duplicates {
        let mut object_1128 = object.key("DropDuplicates").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_duplicates(&mut object_1128, var_1127)?;
        object_1128.finish();
    }
    if let Some(var_1129) = &input.governed_catalog_target {
        let mut object_1130 = object.key("GovernedCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_target(&mut object_1130, var_1129)?;
        object_1130.finish();
    }
    if let Some(var_1131) = &input.governed_catalog_source {
        let mut object_1132 = object.key("GovernedCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_source(&mut object_1132, var_1131)?;
        object_1132.finish();
    }
    if let Some(var_1133) = &input.microsoft_sql_server_catalog_source {
        let mut object_1134 = object.key("MicrosoftSQLServerCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_source(&mut object_1134, var_1133)?;
        object_1134.finish();
    }
    if let Some(var_1135) = &input.my_sql_catalog_source {
        let mut object_1136 = object.key("MySQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_source(&mut object_1136, var_1135)?;
        object_1136.finish();
    }
    if let Some(var_1137) = &input.oracle_sql_catalog_source {
        let mut object_1138 = object.key("OracleSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_source(&mut object_1138, var_1137)?;
        object_1138.finish();
    }
    if let Some(var_1139) = &input.postgre_sql_catalog_source {
        let mut object_1140 = object.key("PostgreSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_source(&mut object_1140, var_1139)?;
        object_1140.finish();
    }
    if let Some(var_1141) = &input.microsoft_sql_server_catalog_target {
        let mut object_1142 = object.key("MicrosoftSQLServerCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_target(&mut object_1142, var_1141)?;
        object_1142.finish();
    }
    if let Some(var_1143) = &input.my_sql_catalog_target {
        let mut object_1144 = object.key("MySQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_target(&mut object_1144, var_1143)?;
        object_1144.finish();
    }
    if let Some(var_1145) = &input.oracle_sql_catalog_target {
        let mut object_1146 = object.key("OracleSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_target(&mut object_1146, var_1145)?;
        object_1146.finish();
    }
    if let Some(var_1147) = &input.postgre_sql_catalog_target {
        let mut object_1148 = object.key("PostgreSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_target(&mut object_1148, var_1147)?;
        object_1148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_control_details(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SourceControlDetails) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1149) = &input.provider {
        object.key("Provider").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.repository {
        object.key("Repository").string(var_1150.as_str());
    }
    if let Some(var_1151) = &input.owner {
        object.key("Owner").string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.branch {
        object.key("Branch").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.folder {
        object.key("Folder").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.last_commit_id {
        object.key("LastCommitId").string(var_1154.as_str());
    }
    if let Some(var_1155) = &input.auth_strategy {
        object.key("AuthStrategy").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.auth_token {
        object.key("AuthToken").string(var_1156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueTable) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1157) = &input.database_name {
        object.key("DatabaseName").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.table_name {
        object.key("TableName").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.catalog_id {
        object.key("CatalogId").string(var_1159.as_str());
    }
    if let Some(var_1160) = &input.connection_name {
        object.key("ConnectionName").string(var_1160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1161) = &input.transform_type {
        object.key("TransformType").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.find_matches_parameters {
        let mut object_1163 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(&mut object_1163, var_1162)?;
        object_1163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1164) = &input.ml_user_data_encryption {
        let mut object_1165 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(&mut object_1165, var_1164)?;
        object_1165.finish();
    }
    if let Some(var_1166) = &input.task_run_security_configuration_name {
        object.key("TaskRunSecurityConfigurationName").string(var_1166.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PartitionIndex) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1167) = &input.keys {
        let mut array_1168 = object.key("Keys").start_array();
        for item_1169 in var_1167 {
             {
                array_1168.value().string(item_1169.as_str());
            }
        }
        array_1168.finish();
    }
    if let Some(var_1170) = &input.index_name {
        object.key("IndexName").string(var_1170.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RegistryId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1171) = &input.registry_name {
        object.key("RegistryName").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.registry_arn {
        object.key("RegistryArn").string(var_1172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenNode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1173) = &input.id {
        object.key("Id").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.node_type {
        object.key("NodeType").string(var_1174.as_str());
    }
    if let Some(var_1175) = &input.args {
        let mut array_1176 = object.key("Args").start_array();
        for item_1177 in var_1175 {
             {
                let mut object_1178 = array_1176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1178, item_1177)?;
                object_1178.finish();
            }
        }
        array_1176.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.line_number).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenEdge) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1179) = &input.source {
        object.key("Source").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.target {
        object.key("Target").string(var_1180.as_str());
    }
    if let Some(var_1181) = &input.target_parameter {
        object.key("TargetParameter").string(var_1181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionConfiguration) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1182) = &input.s3_encryption {
        let mut array_1183 = object.key("S3Encryption").start_array();
        for item_1184 in var_1182 {
             {
                let mut object_1185 = array_1183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(&mut object_1185, item_1184)?;
                object_1185.finish();
            }
        }
        array_1183.finish();
    }
    if let Some(var_1186) = &input.cloud_watch_encryption {
        let mut object_1187 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(&mut object_1187, var_1186)?;
        object_1187.finish();
    }
    if let Some(var_1188) = &input.job_bookmarks_encryption {
        let mut object_1189 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(&mut object_1189, var_1188)?;
        object_1189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SessionCommand) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1190) = &input.name {
        object.key("Name").string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.python_version {
        object.key("PythonVersion").string(var_1191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TableInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1192) = &input.name {
        object.key("Name").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.description {
        object.key("Description").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.owner {
        object.key("Owner").string(var_1194.as_str());
    }
    if let Some(var_1195) = &input.last_access_time {
        object.key("LastAccessTime").date_time(var_1195, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1196) = &input.last_analyzed_time {
        object.key("LastAnalyzedTime").date_time(var_1196, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.retention).into()));
    }
    if let Some(var_1197) = &input.storage_descriptor {
        let mut object_1198 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(&mut object_1198, var_1197)?;
        object_1198.finish();
    }
    if let Some(var_1199) = &input.partition_keys {
        let mut array_1200 = object.key("PartitionKeys").start_array();
        for item_1201 in var_1199 {
             {
                let mut object_1202 = array_1200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_1202, item_1201)?;
                object_1202.finish();
            }
        }
        array_1200.finish();
    }
    if let Some(var_1203) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1203.as_str());
    }
    if let Some(var_1204) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1204.as_str());
    }
    if let Some(var_1205) = &input.table_type {
        object.key("TableType").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.parameters {
        let mut object_1207 = object.key("Parameters").start_object();
        for (key_1208, value_1209) in var_1206 {
             {
                object_1207.key(key_1208.as_str()).string(value_1209.as_str());
            }
        }
        object_1207.finish();
    }
    if let Some(var_1210) = &input.target_table {
        let mut object_1211 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(&mut object_1211, var_1210)?;
        object_1211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Predicate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1212) = &input.logical {
        object.key("Logical").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.conditions {
        let mut array_1214 = object.key("Conditions").start_array();
        for item_1215 in var_1213 {
             {
                let mut object_1216 = array_1214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(&mut object_1216, item_1215)?;
                object_1216.finish();
            }
        }
        array_1214.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Action) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1217) = &input.job_name {
        object.key("JobName").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.arguments {
        let mut object_1219 = object.key("Arguments").start_object();
        for (key_1220, value_1221) in var_1218 {
             {
                object_1219.key(key_1220.as_str()).string(value_1221.as_str());
            }
        }
        object_1219.finish();
    }
    if let Some(var_1222) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1222).into()));
    }
    if let Some(var_1223) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.notification_property {
        let mut object_1225 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_1225, var_1224)?;
        object_1225.finish();
    }
    if let Some(var_1226) = &input.crawler_name {
        object.key("CrawlerName").string(var_1226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EventBatchingCondition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("BatchSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.batch_size).into()));
    }
    if let Some(var_1227) = &input.batch_window {
        object.key("BatchWindow").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1227).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UserDefinedFunctionInput) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1228) = &input.function_name {
        object.key("FunctionName").string(var_1228.as_str());
    }
    if let Some(var_1229) = &input.class_name {
        object.key("ClassName").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.owner_name {
        object.key("OwnerName").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.owner_type {
        object.key("OwnerType").string(var_1231.as_str());
    }
    if let Some(var_1232) = &input.resource_uris {
        let mut array_1233 = object.key("ResourceUris").start_array();
        for item_1234 in var_1232 {
             {
                let mut object_1235 = array_1233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(&mut object_1235, item_1234)?;
                object_1235.finish();
            }
        }
        array_1233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaId) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1236) = &input.schema_arn {
        object.key("SchemaArn").string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.schema_name {
        object.key("SchemaName").string(var_1237.as_str());
    }
    if let Some(var_1238) = &input.registry_name {
        object.key("RegistryName").string(var_1238.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GetConnectionsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1239) = &input.match_criteria {
        let mut array_1240 = object.key("MatchCriteria").start_array();
        for item_1241 in var_1239 {
             {
                array_1240.value().string(item_1241.as_str());
            }
        }
        array_1240.finish();
    }
    if let Some(var_1242) = &input.connection_type {
        object.key("ConnectionType").string(var_1242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1243) = &input.database_name {
        object.key("DatabaseName").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.table_name {
        object.key("TableName").string(var_1244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Location) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1245) = &input.jdbc {
        let mut array_1246 = object.key("Jdbc").start_array();
        for item_1247 in var_1245 {
             {
                let mut object_1248 = array_1246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1248, item_1247)?;
                object_1248.finish();
            }
        }
        array_1246.finish();
    }
    if let Some(var_1249) = &input.s3 {
        let mut array_1250 = object.key("S3").start_array();
        for item_1251 in var_1249 {
             {
                let mut object_1252 = array_1250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1252, item_1251)?;
                object_1252.finish();
            }
        }
        array_1250.finish();
    }
    if let Some(var_1253) = &input.dynamo_db {
        let mut array_1254 = object.key("DynamoDB").start_array();
        for item_1255 in var_1253 {
             {
                let mut object_1256 = array_1254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(&mut object_1256, item_1255)?;
                object_1256.finish();
            }
        }
        array_1254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskRunFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1257) = &input.task_run_type {
        object.key("TaskRunType").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.status {
        object.key("Status").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.started_before {
        object.key("StartedBefore").date_time(var_1259, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1260) = &input.started_after {
        object.key("StartedAfter").date_time(var_1260, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TaskRunSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1261) = &input.column {
        object.key("Column").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.sort_direction {
        object.key("SortDirection").string(var_1262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformFilterCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1263) = &input.name {
        object.key("Name").string(var_1263.as_str());
    }
    if let Some(var_1264) = &input.transform_type {
        object.key("TransformType").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.status {
        object.key("Status").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.glue_version {
        object.key("GlueVersion").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.created_before {
        object.key("CreatedBefore").date_time(var_1267, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1268) = &input.created_after {
        object.key("CreatedAfter").date_time(var_1268, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1269) = &input.last_modified_before {
        object.key("LastModifiedBefore").date_time(var_1269, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1270) = &input.last_modified_after {
        object.key("LastModifiedAfter").date_time(var_1270, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1271) = &input.schema {
        let mut array_1272 = object.key("Schema").start_array();
        for item_1273 in var_1271 {
             {
                let mut object_1274 = array_1272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(&mut object_1274, item_1273)?;
                object_1274.finish();
            }
        }
        array_1272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TransformSortCriteria) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1275) = &input.column {
        object.key("Column").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.sort_direction {
        object.key("SortDirection").string(var_1276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Segment) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("SegmentNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.segment_number).into()));
    }
     {
        object.key("TotalSegments").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.total_segments).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MappingEntry) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1277) = &input.source_table {
        object.key("SourceTable").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.source_path {
        object.key("SourcePath").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.source_type {
        object.key("SourceType").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.target_table {
        object.key("TargetTable").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.target_path {
        object.key("TargetPath").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.target_type {
        object.key("TargetType").string(var_1282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaVersionNumber) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.version_number).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AuditContext) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1283) = &input.additional_audit_context {
        object.key("AdditionalAuditContext").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.requested_columns {
        let mut array_1285 = object.key("RequestedColumns").start_array();
        for item_1286 in var_1284 {
             {
                array_1285.value().string(item_1286.as_str());
            }
        }
        array_1285.finish();
    }
    if let Some(var_1287) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1287);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawls_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CrawlsFilter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1288) = &input.field_name {
        object.key("FieldName").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.filter_operator {
        object.key("FilterOperator").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.field_value {
        object.key("FieldValue").string(var_1290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataCatalogEncryptionSettings) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1291) = &input.encryption_at_rest {
        let mut object_1292 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(&mut object_1292, var_1291)?;
        object_1292.finish();
    }
    if let Some(var_1293) = &input.connection_password_encryption {
        let mut object_1294 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(&mut object_1294, var_1293)?;
        object_1294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MetadataKeyValuePair) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1295) = &input.metadata_key {
        object.key("MetadataKey").string(var_1295.as_str());
    }
    if let Some(var_1296) = &input.metadata_value {
        object.key("MetadataValue").string(var_1296.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PropertyPredicate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1297) = &input.key {
        object.key("Key").string(var_1297.as_str());
    }
    if let Some(var_1298) = &input.value {
        object.key("Value").string(var_1298.as_str());
    }
    if let Some(var_1299) = &input.comparator {
        object.key("Comparator").string(var_1299.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SortCriterion) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1300) = &input.field_name {
        object.key("FieldName").string(var_1300.as_str());
    }
    if let Some(var_1301) = &input.sort {
        object.key("Sort").string(var_1301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateGrokClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1302) = &input.name {
        object.key("Name").string(var_1302.as_str());
    }
    if let Some(var_1303) = &input.classification {
        object.key("Classification").string(var_1303.as_str());
    }
    if let Some(var_1304) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1304.as_str());
    }
    if let Some(var_1305) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateXmlClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1306) = &input.name {
        object.key("Name").string(var_1306.as_str());
    }
    if let Some(var_1307) = &input.classification {
        object.key("Classification").string(var_1307.as_str());
    }
    if let Some(var_1308) = &input.row_tag {
        object.key("RowTag").string(var_1308.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateJsonClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1309) = &input.name {
        object.key("Name").string(var_1309.as_str());
    }
    if let Some(var_1310) = &input.json_path {
        object.key("JsonPath").string(var_1310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpdateCsvClassifierRequest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1311) = &input.name {
        object.key("Name").string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.delimiter {
        object.key("Delimiter").string(var_1312.as_str());
    }
    if let Some(var_1313) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1313.as_str());
    }
    if let Some(var_1314) = &input.contains_header {
        object.key("ContainsHeader").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.header {
        let mut array_1316 = object.key("Header").start_array();
        for item_1317 in var_1315 {
             {
                array_1316.value().string(item_1317.as_str());
            }
        }
        array_1316.finish();
    }
    if let Some(var_1318) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1318);
    }
    if let Some(var_1319) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1319);
    }
    if let Some(var_1320) = &input.custom_datatype_configured {
        object.key("CustomDatatypeConfigured").boolean(*var_1320);
    }
    if let Some(var_1321) = &input.custom_datatypes {
        let mut array_1322 = object.key("CustomDatatypes").start_array();
        for item_1323 in var_1321 {
             {
                array_1322.value().string(item_1323.as_str());
            }
        }
        array_1322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ColumnStatistics) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1324) = &input.column_name {
        object.key("ColumnName").string(var_1324.as_str());
    }
    if let Some(var_1325) = &input.column_type {
        object.key("ColumnType").string(var_1325.as_str());
    }
    if let Some(var_1326) = &input.analyzed_time {
        object.key("AnalyzedTime").date_time(var_1326, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1327) = &input.statistics_data {
        let mut object_1328 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(&mut object_1328, var_1327)?;
        object_1328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DevEndpointCustomLibraries) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1329) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1331) = &input.description {
        object.key("Description").string(var_1331.as_str());
    }
    if let Some(var_1332) = &input.log_uri {
        object.key("LogUri").string(var_1332.as_str());
    }
    if let Some(var_1333) = &input.role {
        object.key("Role").string(var_1333.as_str());
    }
    if let Some(var_1334) = &input.execution_property {
        let mut object_1335 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(&mut object_1335, var_1334)?;
        object_1335.finish();
    }
    if let Some(var_1336) = &input.command {
        let mut object_1337 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1337, var_1336)?;
        object_1337.finish();
    }
    if let Some(var_1338) = &input.default_arguments {
        let mut object_1339 = object.key("DefaultArguments").start_object();
        for (key_1340, value_1341) in var_1338 {
             {
                object_1339.key(key_1340.as_str()).string(value_1341.as_str());
            }
        }
        object_1339.finish();
    }
    if let Some(var_1342) = &input.non_overridable_arguments {
        let mut object_1343 = object.key("NonOverridableArguments").start_object();
        for (key_1344, value_1345) in var_1342 {
             {
                object_1343.key(key_1344.as_str()).string(value_1345.as_str());
            }
        }
        object_1343.finish();
    }
    if let Some(var_1346) = &input.connections {
        let mut object_1347 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(&mut object_1347, var_1346)?;
        object_1347.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.max_retries).into()));
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.allocated_capacity).into()));
    }
    if let Some(var_1348) = &input.timeout {
        object.key("Timeout").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1348).into()));
    }
    if let Some(var_1349) = &input.max_capacity {
        object.key("MaxCapacity").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1349).into()));
    }
    if let Some(var_1350) = &input.worker_type {
        object.key("WorkerType").string(var_1350.as_str());
    }
    if let Some(var_1351) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1351).into()));
    }
    if let Some(var_1352) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1352.as_str());
    }
    if let Some(var_1353) = &input.notification_property {
        let mut object_1354 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(&mut object_1354, var_1353)?;
        object_1354.finish();
    }
    if let Some(var_1355) = &input.glue_version {
        object.key("GlueVersion").string(var_1355.as_str());
    }
    if let Some(var_1356) = &input.code_gen_configuration_nodes {
        let mut object_1357 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_1358, value_1359) in var_1356 {
             {
                let mut object_1360 = object_1357.key(key_1358.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(&mut object_1360, value_1359)?;
                object_1360.finish();
            }
        }
        object_1357.finish();
    }
    if let Some(var_1361) = &input.execution_class {
        object.key("ExecutionClass").string(var_1361.as_str());
    }
    if let Some(var_1362) = &input.source_control_details {
        let mut object_1363 = object.key("SourceControlDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_source_control_details(&mut object_1363, var_1362)?;
        object_1363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TriggerUpdate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1364) = &input.name {
        object.key("Name").string(var_1364.as_str());
    }
    if let Some(var_1365) = &input.description {
        object.key("Description").string(var_1365.as_str());
    }
    if let Some(var_1366) = &input.schedule {
        object.key("Schedule").string(var_1366.as_str());
    }
    if let Some(var_1367) = &input.actions {
        let mut array_1368 = object.key("Actions").start_array();
        for item_1369 in var_1367 {
             {
                let mut object_1370 = array_1368.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_1370, item_1369)?;
                object_1370.finish();
            }
        }
        array_1368.finish();
    }
    if let Some(var_1371) = &input.predicate {
        let mut object_1372 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1372, var_1371)?;
        object_1372.finish();
    }
    if let Some(var_1373) = &input.event_batching_condition {
        let mut object_1374 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(&mut object_1374, var_1373)?;
        object_1374.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StorageDescriptor) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1375) = &input.columns {
        let mut array_1376 = object.key("Columns").start_array();
        for item_1377 in var_1375 {
             {
                let mut object_1378 = array_1376.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_1378, item_1377)?;
                object_1378.finish();
            }
        }
        array_1376.finish();
    }
    if let Some(var_1379) = &input.location {
        object.key("Location").string(var_1379.as_str());
    }
    if let Some(var_1380) = &input.additional_locations {
        let mut array_1381 = object.key("AdditionalLocations").start_array();
        for item_1382 in var_1380 {
             {
                array_1381.value().string(item_1382.as_str());
            }
        }
        array_1381.finish();
    }
    if let Some(var_1383) = &input.input_format {
        object.key("InputFormat").string(var_1383.as_str());
    }
    if let Some(var_1384) = &input.output_format {
        object.key("OutputFormat").string(var_1384.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_buckets).into()));
    }
    if let Some(var_1385) = &input.serde_info {
        let mut object_1386 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1386, var_1385)?;
        object_1386.finish();
    }
    if let Some(var_1387) = &input.bucket_columns {
        let mut array_1388 = object.key("BucketColumns").start_array();
        for item_1389 in var_1387 {
             {
                array_1388.value().string(item_1389.as_str());
            }
        }
        array_1388.finish();
    }
    if let Some(var_1390) = &input.sort_columns {
        let mut array_1391 = object.key("SortColumns").start_array();
        for item_1392 in var_1390 {
             {
                let mut object_1393 = array_1391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(&mut object_1393, item_1392)?;
                object_1393.finish();
            }
        }
        array_1391.finish();
    }
    if let Some(var_1394) = &input.parameters {
        let mut object_1395 = object.key("Parameters").start_object();
        for (key_1396, value_1397) in var_1394 {
             {
                object_1395.key(key_1396.as_str()).string(value_1397.as_str());
            }
        }
        object_1395.finish();
    }
    if let Some(var_1398) = &input.skewed_info {
        let mut object_1399 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1399, var_1398)?;
        object_1399.finish();
    }
    if input.stored_as_sub_directories {
        object.key("StoredAsSubDirectories").boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1400) = &input.schema_reference {
        let mut object_1401 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(&mut object_1401, var_1400)?;
        object_1401.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PhysicalConnectionRequirements) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1402) = &input.subnet_id {
        object.key("SubnetId").string(var_1402.as_str());
    }
    if let Some(var_1403) = &input.security_group_id_list {
        let mut array_1404 = object.key("SecurityGroupIdList").start_array();
        for item_1405 in var_1403 {
             {
                array_1404.value().string(item_1405.as_str());
            }
        }
        array_1404.finish();
    }
    if let Some(var_1406) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Target) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1407) = &input.path {
        object.key("Path").string(var_1407.as_str());
    }
    if let Some(var_1408) = &input.exclusions {
        let mut array_1409 = object.key("Exclusions").start_array();
        for item_1410 in var_1408 {
             {
                array_1409.value().string(item_1410.as_str());
            }
        }
        array_1409.finish();
    }
    if let Some(var_1411) = &input.connection_name {
        object.key("ConnectionName").string(var_1411.as_str());
    }
    if let Some(var_1412) = &input.sample_size {
        object.key("SampleSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1412).into()));
    }
    if let Some(var_1413) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1413.as_str());
    }
    if let Some(var_1414) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1414.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1415) = &input.connection_name {
        object.key("ConnectionName").string(var_1415.as_str());
    }
    if let Some(var_1416) = &input.path {
        object.key("Path").string(var_1416.as_str());
    }
    if let Some(var_1417) = &input.exclusions {
        let mut array_1418 = object.key("Exclusions").start_array();
        for item_1419 in var_1417 {
             {
                array_1418.value().string(item_1419.as_str());
            }
        }
        array_1418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MongoDbTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1420) = &input.connection_name {
        object.key("ConnectionName").string(var_1420.as_str());
    }
    if let Some(var_1421) = &input.path {
        object.key("Path").string(var_1421.as_str());
    }
    if let Some(var_1422) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1422);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamoDbTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1423) = &input.path {
        object.key("Path").string(var_1423.as_str());
    }
    if let Some(var_1424) = &input.scan_all {
        object.key("scanAll").boolean(*var_1424);
    }
    if let Some(var_1425) = &input.scan_rate {
        object.key("scanRate").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1425).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1426) = &input.database_name {
        object.key("DatabaseName").string(var_1426.as_str());
    }
    if let Some(var_1427) = &input.tables {
        let mut array_1428 = object.key("Tables").start_array();
        for item_1429 in var_1427 {
             {
                array_1428.value().string(item_1429.as_str());
            }
        }
        array_1428.finish();
    }
    if let Some(var_1430) = &input.connection_name {
        object.key("ConnectionName").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1431.as_str());
    }
    if let Some(var_1432) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DeltaTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1433) = &input.delta_tables {
        let mut array_1434 = object.key("DeltaTables").start_array();
        for item_1435 in var_1433 {
             {
                array_1434.value().string(item_1435.as_str());
            }
        }
        array_1434.finish();
    }
    if let Some(var_1436) = &input.connection_name {
        object.key("ConnectionName").string(var_1436.as_str());
    }
    if let Some(var_1437) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1437);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PrincipalPermissions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1438) = &input.principal {
        let mut object_1439 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(&mut object_1439, var_1438)?;
        object_1439.finish();
    }
    if let Some(var_1440) = &input.permissions {
        let mut array_1441 = object.key("Permissions").start_array();
        for item_1442 in var_1440 {
             {
                array_1441.value().string(item_1442.as_str());
            }
        }
        array_1441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DatabaseIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1443) = &input.catalog_id {
        object.key("CatalogId").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.database_name {
        object.key("DatabaseName").string(var_1444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AthenaConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1445) = &input.name {
        object.key("Name").string(var_1445.as_str());
    }
    if let Some(var_1446) = &input.connection_name {
        object.key("ConnectionName").string(var_1446.as_str());
    }
    if let Some(var_1447) = &input.connector_name {
        object.key("ConnectorName").string(var_1447.as_str());
    }
    if let Some(var_1448) = &input.connection_type {
        object.key("ConnectionType").string(var_1448.as_str());
    }
    if let Some(var_1449) = &input.connection_table {
        object.key("ConnectionTable").string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.schema_name {
        object.key("SchemaName").string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.output_schemas {
        let mut array_1452 = object.key("OutputSchemas").start_array();
        for item_1453 in var_1451 {
             {
                let mut object_1454 = array_1452.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1454, item_1453)?;
                object_1454.finish();
            }
        }
        array_1452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1455) = &input.name {
        object.key("Name").string(var_1455.as_str());
    }
    if let Some(var_1456) = &input.connection_name {
        object.key("ConnectionName").string(var_1456.as_str());
    }
    if let Some(var_1457) = &input.connector_name {
        object.key("ConnectorName").string(var_1457.as_str());
    }
    if let Some(var_1458) = &input.connection_type {
        object.key("ConnectionType").string(var_1458.as_str());
    }
    if let Some(var_1459) = &input.additional_options {
        let mut object_1460 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_options(&mut object_1460, var_1459)?;
        object_1460.finish();
    }
    if let Some(var_1461) = &input.connection_table {
        object.key("ConnectionTable").string(var_1461.as_str());
    }
    if let Some(var_1462) = &input.query {
        object.key("Query").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.output_schemas {
        let mut array_1464 = object.key("OutputSchemas").start_array();
        for item_1465 in var_1463 {
             {
                let mut object_1466 = array_1464.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1466, item_1465)?;
                object_1466.finish();
            }
        }
        array_1464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkConnectorSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1467) = &input.name {
        object.key("Name").string(var_1467.as_str());
    }
    if let Some(var_1468) = &input.connection_name {
        object.key("ConnectionName").string(var_1468.as_str());
    }
    if let Some(var_1469) = &input.connector_name {
        object.key("ConnectorName").string(var_1469.as_str());
    }
    if let Some(var_1470) = &input.connection_type {
        object.key("ConnectionType").string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.additional_options {
        let mut object_1472 = object.key("AdditionalOptions").start_object();
        for (key_1473, value_1474) in var_1471 {
             {
                object_1472.key(key_1473.as_str()).string(value_1474.as_str());
            }
        }
        object_1472.finish();
    }
    if let Some(var_1475) = &input.output_schemas {
        let mut array_1476 = object.key("OutputSchemas").start_array();
        for item_1477 in var_1475 {
             {
                let mut object_1478 = array_1476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1478, item_1477)?;
                object_1478.finish();
            }
        }
        array_1476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1479) = &input.name {
        object.key("Name").string(var_1479.as_str());
    }
    if let Some(var_1480) = &input.database {
        object.key("Database").string(var_1480.as_str());
    }
    if let Some(var_1481) = &input.table {
        object.key("Table").string(var_1481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RedshiftSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1482) = &input.name {
        object.key("Name").string(var_1482.as_str());
    }
    if let Some(var_1483) = &input.database {
        object.key("Database").string(var_1483.as_str());
    }
    if let Some(var_1484) = &input.table {
        object.key("Table").string(var_1484.as_str());
    }
    if let Some(var_1485) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1485.as_str());
    }
    if let Some(var_1486) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1486.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1487) = &input.name {
        object.key("Name").string(var_1487.as_str());
    }
    if let Some(var_1488) = &input.database {
        object.key("Database").string(var_1488.as_str());
    }
    if let Some(var_1489) = &input.table {
        object.key("Table").string(var_1489.as_str());
    }
    if let Some(var_1490) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1490.as_str());
    }
    if let Some(var_1491) = &input.additional_options {
        let mut object_1492 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(&mut object_1492, var_1491)?;
        object_1492.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_csv_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CsvSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1493) = &input.name {
        object.key("Name").string(var_1493.as_str());
    }
    if let Some(var_1494) = &input.paths {
        let mut array_1495 = object.key("Paths").start_array();
        for item_1496 in var_1494 {
             {
                array_1495.value().string(item_1496.as_str());
            }
        }
        array_1495.finish();
    }
    if let Some(var_1497) = &input.compression_type {
        object.key("CompressionType").string(var_1497.as_str());
    }
    if let Some(var_1498) = &input.exclusions {
        let mut array_1499 = object.key("Exclusions").start_array();
        for item_1500 in var_1498 {
             {
                array_1499.value().string(item_1500.as_str());
            }
        }
        array_1499.finish();
    }
    if let Some(var_1501) = &input.group_size {
        object.key("GroupSize").string(var_1501.as_str());
    }
    if let Some(var_1502) = &input.group_files {
        object.key("GroupFiles").string(var_1502.as_str());
    }
    if let Some(var_1503) = &input.recurse {
        object.key("Recurse").boolean(*var_1503);
    }
    if let Some(var_1504) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1504).into()));
    }
    if let Some(var_1505) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1505).into()));
    }
    if let Some(var_1506) = &input.additional_options {
        let mut object_1507 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1507, var_1506)?;
        object_1507.finish();
    }
    if let Some(var_1508) = &input.separator {
        object.key("Separator").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.escaper {
        object.key("Escaper").string(var_1509.as_str());
    }
    if let Some(var_1510) = &input.quote_char {
        object.key("QuoteChar").string(var_1510.as_str());
    }
    if let Some(var_1511) = &input.multiline {
        object.key("Multiline").boolean(*var_1511);
    }
    if let Some(var_1512) = &input.with_header {
        object.key("WithHeader").boolean(*var_1512);
    }
    if let Some(var_1513) = &input.write_header {
        object.key("WriteHeader").boolean(*var_1513);
    }
    if let Some(var_1514) = &input.skip_first {
        object.key("SkipFirst").boolean(*var_1514);
    }
    if input.optimize_performance {
        object.key("OptimizePerformance").boolean(input.optimize_performance);
    }
    if let Some(var_1515) = &input.output_schemas {
        let mut array_1516 = object.key("OutputSchemas").start_array();
        for item_1517 in var_1515 {
             {
                let mut object_1518 = array_1516.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1518, item_1517)?;
                object_1518.finish();
            }
        }
        array_1516.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_json_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3JsonSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1519) = &input.name {
        object.key("Name").string(var_1519.as_str());
    }
    if let Some(var_1520) = &input.paths {
        let mut array_1521 = object.key("Paths").start_array();
        for item_1522 in var_1520 {
             {
                array_1521.value().string(item_1522.as_str());
            }
        }
        array_1521.finish();
    }
    if let Some(var_1523) = &input.compression_type {
        object.key("CompressionType").string(var_1523.as_str());
    }
    if let Some(var_1524) = &input.exclusions {
        let mut array_1525 = object.key("Exclusions").start_array();
        for item_1526 in var_1524 {
             {
                array_1525.value().string(item_1526.as_str());
            }
        }
        array_1525.finish();
    }
    if let Some(var_1527) = &input.group_size {
        object.key("GroupSize").string(var_1527.as_str());
    }
    if let Some(var_1528) = &input.group_files {
        object.key("GroupFiles").string(var_1528.as_str());
    }
    if let Some(var_1529) = &input.recurse {
        object.key("Recurse").boolean(*var_1529);
    }
    if let Some(var_1530) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1530).into()));
    }
    if let Some(var_1531) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1531).into()));
    }
    if let Some(var_1532) = &input.additional_options {
        let mut object_1533 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1533, var_1532)?;
        object_1533.finish();
    }
    if let Some(var_1534) = &input.json_path {
        object.key("JsonPath").string(var_1534.as_str());
    }
    if let Some(var_1535) = &input.multiline {
        object.key("Multiline").boolean(*var_1535);
    }
    if let Some(var_1536) = &input.output_schemas {
        let mut array_1537 = object.key("OutputSchemas").start_array();
        for item_1538 in var_1536 {
             {
                let mut object_1539 = array_1537.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1539, item_1538)?;
                object_1539.finish();
            }
        }
        array_1537.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parquet_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3ParquetSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1540) = &input.name {
        object.key("Name").string(var_1540.as_str());
    }
    if let Some(var_1541) = &input.paths {
        let mut array_1542 = object.key("Paths").start_array();
        for item_1543 in var_1541 {
             {
                array_1542.value().string(item_1543.as_str());
            }
        }
        array_1542.finish();
    }
    if let Some(var_1544) = &input.compression_type {
        object.key("CompressionType").string(var_1544.as_str());
    }
    if let Some(var_1545) = &input.exclusions {
        let mut array_1546 = object.key("Exclusions").start_array();
        for item_1547 in var_1545 {
             {
                array_1546.value().string(item_1547.as_str());
            }
        }
        array_1546.finish();
    }
    if let Some(var_1548) = &input.group_size {
        object.key("GroupSize").string(var_1548.as_str());
    }
    if let Some(var_1549) = &input.group_files {
        object.key("GroupFiles").string(var_1549.as_str());
    }
    if let Some(var_1550) = &input.recurse {
        object.key("Recurse").boolean(*var_1550);
    }
    if let Some(var_1551) = &input.max_band {
        object.key("MaxBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1551).into()));
    }
    if let Some(var_1552) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1552).into()));
    }
    if let Some(var_1553) = &input.additional_options {
        let mut object_1554 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(&mut object_1554, var_1553)?;
        object_1554.finish();
    }
    if let Some(var_1555) = &input.output_schemas {
        let mut array_1556 = object.key("OutputSchemas").start_array();
        for item_1557 in var_1555 {
             {
                let mut object_1558 = array_1556.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1558, item_1557)?;
                object_1558.finish();
            }
        }
        array_1556.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RelationalCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1559) = &input.name {
        object.key("Name").string(var_1559.as_str());
    }
    if let Some(var_1560) = &input.database {
        object.key("Database").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.table {
        object.key("Table").string(var_1561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DynamoDbCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1562) = &input.name {
        object.key("Name").string(var_1562.as_str());
    }
    if let Some(var_1563) = &input.database {
        object.key("Database").string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.table {
        object.key("Table").string(var_1564.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1565) = &input.name {
        object.key("Name").string(var_1565.as_str());
    }
    if let Some(var_1566) = &input.inputs {
        let mut array_1567 = object.key("Inputs").start_array();
        for item_1568 in var_1566 {
             {
                array_1567.value().string(item_1568.as_str());
            }
        }
        array_1567.finish();
    }
    if let Some(var_1569) = &input.connection_name {
        object.key("ConnectionName").string(var_1569.as_str());
    }
    if let Some(var_1570) = &input.connection_table {
        object.key("ConnectionTable").string(var_1570.as_str());
    }
    if let Some(var_1571) = &input.connector_name {
        object.key("ConnectorName").string(var_1571.as_str());
    }
    if let Some(var_1572) = &input.connection_type {
        object.key("ConnectionType").string(var_1572.as_str());
    }
    if let Some(var_1573) = &input.additional_options {
        let mut object_1574 = object.key("AdditionalOptions").start_object();
        for (key_1575, value_1576) in var_1573 {
             {
                object_1574.key(key_1575.as_str()).string(value_1576.as_str());
            }
        }
        object_1574.finish();
    }
    if let Some(var_1577) = &input.output_schemas {
        let mut array_1578 = object.key("OutputSchemas").start_array();
        for item_1579 in var_1577 {
             {
                let mut object_1580 = array_1578.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1580, item_1579)?;
                object_1580.finish();
            }
        }
        array_1578.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkConnectorTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1581) = &input.name {
        object.key("Name").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.inputs {
        let mut array_1583 = object.key("Inputs").start_array();
        for item_1584 in var_1582 {
             {
                array_1583.value().string(item_1584.as_str());
            }
        }
        array_1583.finish();
    }
    if let Some(var_1585) = &input.connection_name {
        object.key("ConnectionName").string(var_1585.as_str());
    }
    if let Some(var_1586) = &input.connector_name {
        object.key("ConnectorName").string(var_1586.as_str());
    }
    if let Some(var_1587) = &input.connection_type {
        object.key("ConnectionType").string(var_1587.as_str());
    }
    if let Some(var_1588) = &input.additional_options {
        let mut object_1589 = object.key("AdditionalOptions").start_object();
        for (key_1590, value_1591) in var_1588 {
             {
                object_1589.key(key_1590.as_str()).string(value_1591.as_str());
            }
        }
        object_1589.finish();
    }
    if let Some(var_1592) = &input.output_schemas {
        let mut array_1593 = object.key("OutputSchemas").start_array();
        for item_1594 in var_1592 {
             {
                let mut object_1595 = array_1593.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1595, item_1594)?;
                object_1595.finish();
            }
        }
        array_1593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BasicCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1596) = &input.name {
        object.key("Name").string(var_1596.as_str());
    }
    if let Some(var_1597) = &input.inputs {
        let mut array_1598 = object.key("Inputs").start_array();
        for item_1599 in var_1597 {
             {
                array_1598.value().string(item_1599.as_str());
            }
        }
        array_1598.finish();
    }
    if let Some(var_1600) = &input.database {
        object.key("Database").string(var_1600.as_str());
    }
    if let Some(var_1601) = &input.table {
        object.key("Table").string(var_1601.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RedshiftTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1602) = &input.name {
        object.key("Name").string(var_1602.as_str());
    }
    if let Some(var_1603) = &input.inputs {
        let mut array_1604 = object.key("Inputs").start_array();
        for item_1605 in var_1603 {
             {
                array_1604.value().string(item_1605.as_str());
            }
        }
        array_1604.finish();
    }
    if let Some(var_1606) = &input.database {
        object.key("Database").string(var_1606.as_str());
    }
    if let Some(var_1607) = &input.table {
        object.key("Table").string(var_1607.as_str());
    }
    if let Some(var_1608) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1608.as_str());
    }
    if let Some(var_1609) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1609.as_str());
    }
    if let Some(var_1610) = &input.upsert_redshift_options {
        let mut object_1611 = object.key("UpsertRedshiftOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_upsert_redshift_target_options(&mut object_1611, var_1610)?;
        object_1611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3CatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1612) = &input.name {
        object.key("Name").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.inputs {
        let mut array_1614 = object.key("Inputs").start_array();
        for item_1615 in var_1613 {
             {
                array_1614.value().string(item_1615.as_str());
            }
        }
        array_1614.finish();
    }
    if let Some(var_1616) = &input.partition_keys {
        let mut array_1617 = object.key("PartitionKeys").start_array();
        for item_1618 in var_1616 {
             {
                let mut array_1619 = array_1617.value().start_array();
                for item_1620 in item_1618 {
                     {
                        array_1619.value().string(item_1620.as_str());
                    }
                }
                array_1619.finish();
            }
        }
        array_1617.finish();
    }
    if let Some(var_1621) = &input.table {
        object.key("Table").string(var_1621.as_str());
    }
    if let Some(var_1622) = &input.database {
        object.key("Database").string(var_1622.as_str());
    }
    if let Some(var_1623) = &input.schema_change_policy {
        let mut object_1624 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(&mut object_1624, var_1623)?;
        object_1624.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_glue_parquet_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3GlueParquetTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1625) = &input.name {
        object.key("Name").string(var_1625.as_str());
    }
    if let Some(var_1626) = &input.inputs {
        let mut array_1627 = object.key("Inputs").start_array();
        for item_1628 in var_1626 {
             {
                array_1627.value().string(item_1628.as_str());
            }
        }
        array_1627.finish();
    }
    if let Some(var_1629) = &input.partition_keys {
        let mut array_1630 = object.key("PartitionKeys").start_array();
        for item_1631 in var_1629 {
             {
                let mut array_1632 = array_1630.value().start_array();
                for item_1633 in item_1631 {
                     {
                        array_1632.value().string(item_1633.as_str());
                    }
                }
                array_1632.finish();
            }
        }
        array_1630.finish();
    }
    if let Some(var_1634) = &input.path {
        object.key("Path").string(var_1634.as_str());
    }
    if let Some(var_1635) = &input.compression {
        object.key("Compression").string(var_1635.as_str());
    }
    if let Some(var_1636) = &input.schema_change_policy {
        let mut object_1637 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(&mut object_1637, var_1636)?;
        object_1637.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3DirectTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1638) = &input.name {
        object.key("Name").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.inputs {
        let mut array_1640 = object.key("Inputs").start_array();
        for item_1641 in var_1639 {
             {
                array_1640.value().string(item_1641.as_str());
            }
        }
        array_1640.finish();
    }
    if let Some(var_1642) = &input.partition_keys {
        let mut array_1643 = object.key("PartitionKeys").start_array();
        for item_1644 in var_1642 {
             {
                let mut array_1645 = array_1643.value().start_array();
                for item_1646 in item_1644 {
                     {
                        array_1645.value().string(item_1646.as_str());
                    }
                }
                array_1645.finish();
            }
        }
        array_1643.finish();
    }
    if let Some(var_1647) = &input.path {
        object.key("Path").string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.compression {
        object.key("Compression").string(var_1648.as_str());
    }
    if let Some(var_1649) = &input.format {
        object.key("Format").string(var_1649.as_str());
    }
    if let Some(var_1650) = &input.schema_change_policy {
        let mut object_1651 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(&mut object_1651, var_1650)?;
        object_1651.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_apply_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ApplyMapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1652) = &input.name {
        object.key("Name").string(var_1652.as_str());
    }
    if let Some(var_1653) = &input.inputs {
        let mut array_1654 = object.key("Inputs").start_array();
        for item_1655 in var_1653 {
             {
                array_1654.value().string(item_1655.as_str());
            }
        }
        array_1654.finish();
    }
    if let Some(var_1656) = &input.mapping {
        let mut array_1657 = object.key("Mapping").start_array();
        for item_1658 in var_1656 {
             {
                let mut object_1659 = array_1657.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(&mut object_1659, item_1658)?;
                object_1659.finish();
            }
        }
        array_1657.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelectFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1660) = &input.name {
        object.key("Name").string(var_1660.as_str());
    }
    if let Some(var_1661) = &input.inputs {
        let mut array_1662 = object.key("Inputs").start_array();
        for item_1663 in var_1661 {
             {
                array_1662.value().string(item_1663.as_str());
            }
        }
        array_1662.finish();
    }
    if let Some(var_1664) = &input.paths {
        let mut array_1665 = object.key("Paths").start_array();
        for item_1666 in var_1664 {
             {
                let mut array_1667 = array_1665.value().start_array();
                for item_1668 in item_1666 {
                     {
                        array_1667.value().string(item_1668.as_str());
                    }
                }
                array_1667.finish();
            }
        }
        array_1665.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1669) = &input.name {
        object.key("Name").string(var_1669.as_str());
    }
    if let Some(var_1670) = &input.inputs {
        let mut array_1671 = object.key("Inputs").start_array();
        for item_1672 in var_1670 {
             {
                array_1671.value().string(item_1672.as_str());
            }
        }
        array_1671.finish();
    }
    if let Some(var_1673) = &input.paths {
        let mut array_1674 = object.key("Paths").start_array();
        for item_1675 in var_1673 {
             {
                let mut array_1676 = array_1674.value().start_array();
                for item_1677 in item_1675 {
                     {
                        array_1676.value().string(item_1677.as_str());
                    }
                }
                array_1676.finish();
            }
        }
        array_1674.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::RenameField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1678) = &input.name {
        object.key("Name").string(var_1678.as_str());
    }
    if let Some(var_1679) = &input.inputs {
        let mut array_1680 = object.key("Inputs").start_array();
        for item_1681 in var_1679 {
             {
                array_1680.value().string(item_1681.as_str());
            }
        }
        array_1680.finish();
    }
    if let Some(var_1682) = &input.source_path {
        let mut array_1683 = object.key("SourcePath").start_array();
        for item_1684 in var_1682 {
             {
                array_1683.value().string(item_1684.as_str());
            }
        }
        array_1683.finish();
    }
    if let Some(var_1685) = &input.target_path {
        let mut array_1686 = object.key("TargetPath").start_array();
        for item_1687 in var_1685 {
             {
                array_1686.value().string(item_1687.as_str());
            }
        }
        array_1686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spigot(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Spigot) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1688) = &input.name {
        object.key("Name").string(var_1688.as_str());
    }
    if let Some(var_1689) = &input.inputs {
        let mut array_1690 = object.key("Inputs").start_array();
        for item_1691 in var_1689 {
             {
                array_1690.value().string(item_1691.as_str());
            }
        }
        array_1690.finish();
    }
    if let Some(var_1692) = &input.path {
        object.key("Path").string(var_1692.as_str());
    }
    if let Some(var_1693) = &input.topk {
        object.key("Topk").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1693).into()));
    }
    if let Some(var_1694) = &input.prob {
        object.key("Prob").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1694).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Join) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1695) = &input.name {
        object.key("Name").string(var_1695.as_str());
    }
    if let Some(var_1696) = &input.inputs {
        let mut array_1697 = object.key("Inputs").start_array();
        for item_1698 in var_1696 {
             {
                array_1697.value().string(item_1698.as_str());
            }
        }
        array_1697.finish();
    }
    if let Some(var_1699) = &input.join_type {
        object.key("JoinType").string(var_1699.as_str());
    }
    if let Some(var_1700) = &input.columns {
        let mut array_1701 = object.key("Columns").start_array();
        for item_1702 in var_1700 {
             {
                let mut object_1703 = array_1701.value().start_object();
                crate::json_ser::serialize_structure_crate_model_join_column(&mut object_1703, item_1702)?;
                object_1703.finish();
            }
        }
        array_1701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_split_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SplitFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1704) = &input.name {
        object.key("Name").string(var_1704.as_str());
    }
    if let Some(var_1705) = &input.inputs {
        let mut array_1706 = object.key("Inputs").start_array();
        for item_1707 in var_1705 {
             {
                array_1706.value().string(item_1707.as_str());
            }
        }
        array_1706.finish();
    }
    if let Some(var_1708) = &input.paths {
        let mut array_1709 = object.key("Paths").start_array();
        for item_1710 in var_1708 {
             {
                let mut array_1711 = array_1709.value().start_array();
                for item_1712 in item_1710 {
                     {
                        array_1711.value().string(item_1712.as_str());
                    }
                }
                array_1711.finish();
            }
        }
        array_1709.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_from_collection(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SelectFromCollection) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1713) = &input.name {
        object.key("Name").string(var_1713.as_str());
    }
    if let Some(var_1714) = &input.inputs {
        let mut array_1715 = object.key("Inputs").start_array();
        for item_1716 in var_1714 {
             {
                array_1715.value().string(item_1716.as_str());
            }
        }
        array_1715.finish();
    }
     {
        object.key("Index").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.index).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fill_missing_values(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FillMissingValues) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1717) = &input.name {
        object.key("Name").string(var_1717.as_str());
    }
    if let Some(var_1718) = &input.inputs {
        let mut array_1719 = object.key("Inputs").start_array();
        for item_1720 in var_1718 {
             {
                array_1719.value().string(item_1720.as_str());
            }
        }
        array_1719.finish();
    }
    if let Some(var_1721) = &input.imputed_path {
        object.key("ImputedPath").string(var_1721.as_str());
    }
    if let Some(var_1722) = &input.filled_path {
        object.key("FilledPath").string(var_1722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Filter) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1723) = &input.name {
        object.key("Name").string(var_1723.as_str());
    }
    if let Some(var_1724) = &input.inputs {
        let mut array_1725 = object.key("Inputs").start_array();
        for item_1726 in var_1724 {
             {
                array_1725.value().string(item_1726.as_str());
            }
        }
        array_1725.finish();
    }
    if let Some(var_1727) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1727.as_str());
    }
    if let Some(var_1728) = &input.filters {
        let mut array_1729 = object.key("Filters").start_array();
        for item_1730 in var_1728 {
             {
                let mut object_1731 = array_1729.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_expression(&mut object_1731, item_1730)?;
                object_1731.finish();
            }
        }
        array_1729.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CustomCode) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1732) = &input.name {
        object.key("Name").string(var_1732.as_str());
    }
    if let Some(var_1733) = &input.inputs {
        let mut array_1734 = object.key("Inputs").start_array();
        for item_1735 in var_1733 {
             {
                array_1734.value().string(item_1735.as_str());
            }
        }
        array_1734.finish();
    }
    if let Some(var_1736) = &input.code {
        object.key("Code").string(var_1736.as_str());
    }
    if let Some(var_1737) = &input.class_name {
        object.key("ClassName").string(var_1737.as_str());
    }
    if let Some(var_1738) = &input.output_schemas {
        let mut array_1739 = object.key("OutputSchemas").start_array();
        for item_1740 in var_1738 {
             {
                let mut object_1741 = array_1739.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1741, item_1740)?;
                object_1741.finish();
            }
        }
        array_1739.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_sql(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SparkSql) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1742) = &input.name {
        object.key("Name").string(var_1742.as_str());
    }
    if let Some(var_1743) = &input.inputs {
        let mut array_1744 = object.key("Inputs").start_array();
        for item_1745 in var_1743 {
             {
                array_1744.value().string(item_1745.as_str());
            }
        }
        array_1744.finish();
    }
    if let Some(var_1746) = &input.sql_query {
        object.key("SqlQuery").string(var_1746.as_str());
    }
    if let Some(var_1747) = &input.sql_aliases {
        let mut array_1748 = object.key("SqlAliases").start_array();
        for item_1749 in var_1747 {
             {
                let mut object_1750 = array_1748.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sql_alias(&mut object_1750, item_1749)?;
                object_1750.finish();
            }
        }
        array_1748.finish();
    }
    if let Some(var_1751) = &input.output_schemas {
        let mut array_1752 = object.key("OutputSchemas").start_array();
        for item_1753 in var_1751 {
             {
                let mut object_1754 = array_1752.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(&mut object_1754, item_1753)?;
                object_1754.finish();
            }
        }
        array_1752.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kinesis_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectKinesisSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1755) = &input.name {
        object.key("Name").string(var_1755.as_str());
    }
    if let Some(var_1756) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1756).into()));
    }
    if let Some(var_1757) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1757);
    }
    if let Some(var_1758) = &input.streaming_options {
        let mut object_1759 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(&mut object_1759, var_1758)?;
        object_1759.finish();
    }
    if let Some(var_1760) = &input.data_preview_options {
        let mut object_1761 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1761, var_1760)?;
        object_1761.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kafka_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectKafkaSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1762) = &input.name {
        object.key("Name").string(var_1762.as_str());
    }
    if let Some(var_1763) = &input.streaming_options {
        let mut object_1764 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(&mut object_1764, var_1763)?;
        object_1764.finish();
    }
    if let Some(var_1765) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1765).into()));
    }
    if let Some(var_1766) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1766);
    }
    if let Some(var_1767) = &input.data_preview_options {
        let mut object_1768 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1768, var_1767)?;
        object_1768.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kinesis_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogKinesisSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1769) = &input.name {
        object.key("Name").string(var_1769.as_str());
    }
    if let Some(var_1770) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1770).into()));
    }
    if let Some(var_1771) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1771);
    }
    if let Some(var_1772) = &input.table {
        object.key("Table").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.database {
        object.key("Database").string(var_1773.as_str());
    }
    if let Some(var_1774) = &input.streaming_options {
        let mut object_1775 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(&mut object_1775, var_1774)?;
        object_1775.finish();
    }
    if let Some(var_1776) = &input.data_preview_options {
        let mut object_1777 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1777, var_1776)?;
        object_1777.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kafka_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogKafkaSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1778) = &input.name {
        object.key("Name").string(var_1778.as_str());
    }
    if let Some(var_1779) = &input.window_size {
        object.key("WindowSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1779).into()));
    }
    if let Some(var_1780) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1780);
    }
    if let Some(var_1781) = &input.table {
        object.key("Table").string(var_1781.as_str());
    }
    if let Some(var_1782) = &input.database {
        object.key("Database").string(var_1782.as_str());
    }
    if let Some(var_1783) = &input.streaming_options {
        let mut object_1784 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(&mut object_1784, var_1783)?;
        object_1784.finish();
    }
    if let Some(var_1785) = &input.data_preview_options {
        let mut object_1786 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(&mut object_1786, var_1785)?;
        object_1786.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_null_fields(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropNullFields) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1787) = &input.name {
        object.key("Name").string(var_1787.as_str());
    }
    if let Some(var_1788) = &input.inputs {
        let mut array_1789 = object.key("Inputs").start_array();
        for item_1790 in var_1788 {
             {
                array_1789.value().string(item_1790.as_str());
            }
        }
        array_1789.finish();
    }
    if let Some(var_1791) = &input.null_check_box_list {
        let mut object_1792 = object.key("NullCheckBoxList").start_object();
        crate::json_ser::serialize_structure_crate_model_null_check_box_list(&mut object_1792, var_1791)?;
        object_1792.finish();
    }
    if let Some(var_1793) = &input.null_text_list {
        let mut array_1794 = object.key("NullTextList").start_array();
        for item_1795 in var_1793 {
             {
                let mut object_1796 = array_1794.value().start_object();
                crate::json_ser::serialize_structure_crate_model_null_value_field(&mut object_1796, item_1795)?;
                object_1796.finish();
            }
        }
        array_1794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_merge(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Merge) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1797) = &input.name {
        object.key("Name").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.inputs {
        let mut array_1799 = object.key("Inputs").start_array();
        for item_1800 in var_1798 {
             {
                array_1799.value().string(item_1800.as_str());
            }
        }
        array_1799.finish();
    }
    if let Some(var_1801) = &input.source {
        object.key("Source").string(var_1801.as_str());
    }
    if let Some(var_1802) = &input.primary_keys {
        let mut array_1803 = object.key("PrimaryKeys").start_array();
        for item_1804 in var_1802 {
             {
                let mut array_1805 = array_1803.value().start_array();
                for item_1806 in item_1804 {
                     {
                        array_1805.value().string(item_1806.as_str());
                    }
                }
                array_1805.finish();
            }
        }
        array_1803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_union(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Union) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1807) = &input.name {
        object.key("Name").string(var_1807.as_str());
    }
    if let Some(var_1808) = &input.inputs {
        let mut array_1809 = object.key("Inputs").start_array();
        for item_1810 in var_1808 {
             {
                array_1809.value().string(item_1810.as_str());
            }
        }
        array_1809.finish();
    }
    if let Some(var_1811) = &input.union_type {
        object.key("UnionType").string(var_1811.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pii_detection(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PiiDetection) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1812) = &input.name {
        object.key("Name").string(var_1812.as_str());
    }
    if let Some(var_1813) = &input.inputs {
        let mut array_1814 = object.key("Inputs").start_array();
        for item_1815 in var_1813 {
             {
                array_1814.value().string(item_1815.as_str());
            }
        }
        array_1814.finish();
    }
    if let Some(var_1816) = &input.pii_type {
        object.key("PiiType").string(var_1816.as_str());
    }
    if let Some(var_1817) = &input.entity_types_to_detect {
        let mut array_1818 = object.key("EntityTypesToDetect").start_array();
        for item_1819 in var_1817 {
             {
                array_1818.value().string(item_1819.as_str());
            }
        }
        array_1818.finish();
    }
    if let Some(var_1820) = &input.output_column_name {
        object.key("OutputColumnName").string(var_1820.as_str());
    }
    if let Some(var_1821) = &input.sample_fraction {
        object.key("SampleFraction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1821).into()));
    }
    if let Some(var_1822) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1822).into()));
    }
    if let Some(var_1823) = &input.mask_value {
        object.key("MaskValue").string(var_1823.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Aggregate) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1824) = &input.name {
        object.key("Name").string(var_1824.as_str());
    }
    if let Some(var_1825) = &input.inputs {
        let mut array_1826 = object.key("Inputs").start_array();
        for item_1827 in var_1825 {
             {
                array_1826.value().string(item_1827.as_str());
            }
        }
        array_1826.finish();
    }
    if let Some(var_1828) = &input.groups {
        let mut array_1829 = object.key("Groups").start_array();
        for item_1830 in var_1828 {
             {
                let mut array_1831 = array_1829.value().start_array();
                for item_1832 in item_1830 {
                     {
                        array_1831.value().string(item_1832.as_str());
                    }
                }
                array_1831.finish();
            }
        }
        array_1829.finish();
    }
    if let Some(var_1833) = &input.aggs {
        let mut array_1834 = object.key("Aggs").start_array();
        for item_1835 in var_1833 {
             {
                let mut object_1836 = array_1834.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_operation(&mut object_1836, item_1835)?;
                object_1836.finish();
            }
        }
        array_1834.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_duplicates(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DropDuplicates) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1837) = &input.name {
        object.key("Name").string(var_1837.as_str());
    }
    if let Some(var_1838) = &input.inputs {
        let mut array_1839 = object.key("Inputs").start_array();
        for item_1840 in var_1838 {
             {
                array_1839.value().string(item_1840.as_str());
            }
        }
        array_1839.finish();
    }
    if let Some(var_1841) = &input.columns {
        let mut array_1842 = object.key("Columns").start_array();
        for item_1843 in var_1841 {
             {
                let mut array_1844 = array_1842.value().start_array();
                for item_1845 in item_1843 {
                     {
                        array_1844.value().string(item_1845.as_str());
                    }
                }
                array_1844.finish();
            }
        }
        array_1842.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GovernedCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1846) = &input.name {
        object.key("Name").string(var_1846.as_str());
    }
    if let Some(var_1847) = &input.inputs {
        let mut array_1848 = object.key("Inputs").start_array();
        for item_1849 in var_1847 {
             {
                array_1848.value().string(item_1849.as_str());
            }
        }
        array_1848.finish();
    }
    if let Some(var_1850) = &input.partition_keys {
        let mut array_1851 = object.key("PartitionKeys").start_array();
        for item_1852 in var_1850 {
             {
                let mut array_1853 = array_1851.value().start_array();
                for item_1854 in item_1852 {
                     {
                        array_1853.value().string(item_1854.as_str());
                    }
                }
                array_1853.finish();
            }
        }
        array_1851.finish();
    }
    if let Some(var_1855) = &input.table {
        object.key("Table").string(var_1855.as_str());
    }
    if let Some(var_1856) = &input.database {
        object.key("Database").string(var_1856.as_str());
    }
    if let Some(var_1857) = &input.schema_change_policy {
        let mut object_1858 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(&mut object_1858, var_1857)?;
        object_1858.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GovernedCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1859) = &input.name {
        object.key("Name").string(var_1859.as_str());
    }
    if let Some(var_1860) = &input.database {
        object.key("Database").string(var_1860.as_str());
    }
    if let Some(var_1861) = &input.table {
        object.key("Table").string(var_1861.as_str());
    }
    if let Some(var_1862) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1862.as_str());
    }
    if let Some(var_1863) = &input.additional_options {
        let mut object_1864 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(&mut object_1864, var_1863)?;
        object_1864.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MicrosoftSqlServerCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1865) = &input.name {
        object.key("Name").string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.database {
        object.key("Database").string(var_1866.as_str());
    }
    if let Some(var_1867) = &input.table {
        object.key("Table").string(var_1867.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MySqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1868) = &input.name {
        object.key("Name").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.database {
        object.key("Database").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.table {
        object.key("Table").string(var_1870.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OracleSqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1871) = &input.name {
        object.key("Name").string(var_1871.as_str());
    }
    if let Some(var_1872) = &input.database {
        object.key("Database").string(var_1872.as_str());
    }
    if let Some(var_1873) = &input.table {
        object.key("Table").string(var_1873.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_source(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PostgreSqlCatalogSource) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1874) = &input.name {
        object.key("Name").string(var_1874.as_str());
    }
    if let Some(var_1875) = &input.database {
        object.key("Database").string(var_1875.as_str());
    }
    if let Some(var_1876) = &input.table {
        object.key("Table").string(var_1876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MicrosoftSqlServerCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1877) = &input.name {
        object.key("Name").string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.inputs {
        let mut array_1879 = object.key("Inputs").start_array();
        for item_1880 in var_1878 {
             {
                array_1879.value().string(item_1880.as_str());
            }
        }
        array_1879.finish();
    }
    if let Some(var_1881) = &input.database {
        object.key("Database").string(var_1881.as_str());
    }
    if let Some(var_1882) = &input.table {
        object.key("Table").string(var_1882.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MySqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1883) = &input.name {
        object.key("Name").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.inputs {
        let mut array_1885 = object.key("Inputs").start_array();
        for item_1886 in var_1884 {
             {
                array_1885.value().string(item_1886.as_str());
            }
        }
        array_1885.finish();
    }
    if let Some(var_1887) = &input.database {
        object.key("Database").string(var_1887.as_str());
    }
    if let Some(var_1888) = &input.table {
        object.key("Table").string(var_1888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::OracleSqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1889) = &input.name {
        object.key("Name").string(var_1889.as_str());
    }
    if let Some(var_1890) = &input.inputs {
        let mut array_1891 = object.key("Inputs").start_array();
        for item_1892 in var_1890 {
             {
                array_1891.value().string(item_1892.as_str());
            }
        }
        array_1891.finish();
    }
    if let Some(var_1893) = &input.database {
        object.key("Database").string(var_1893.as_str());
    }
    if let Some(var_1894) = &input.table {
        object.key("Table").string(var_1894.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_target(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::PostgreSqlCatalogTarget) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1895) = &input.name {
        object.key("Name").string(var_1895.as_str());
    }
    if let Some(var_1896) = &input.inputs {
        let mut array_1897 = object.key("Inputs").start_array();
        for item_1898 in var_1896 {
             {
                array_1897.value().string(item_1898.as_str());
            }
        }
        array_1897.finish();
    }
    if let Some(var_1899) = &input.database {
        object.key("Database").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.table {
        object.key("Table").string(var_1900.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FindMatchesParameters) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1901) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1902).into()));
    }
    if let Some(var_1903) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((*var_1903).into()));
    }
    if let Some(var_1904) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1904);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::MlUserDataEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1905) = &input.ml_user_data_encryption_mode {
        object.key("MlUserDataEncryptionMode").string(var_1905.as_str());
    }
    if let Some(var_1906) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1906.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CodeGenNodeArg) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1907) = &input.name {
        object.key("Name").string(var_1907.as_str());
    }
    if let Some(var_1908) = &input.value {
        object.key("Value").string(var_1908.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3Encryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1909) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1909.as_str());
    }
    if let Some(var_1910) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1910.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CloudWatchEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1911) = &input.cloud_watch_encryption_mode {
        object.key("CloudWatchEncryptionMode").string(var_1911.as_str());
    }
    if let Some(var_1912) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1912.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JobBookmarksEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1913) = &input.job_bookmarks_encryption_mode {
        object.key("JobBookmarksEncryptionMode").string(var_1913.as_str());
    }
    if let Some(var_1914) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1914.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Column) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1915) = &input.name {
        object.key("Name").string(var_1915.as_str());
    }
    if let Some(var_1916) = &input.r#type {
        object.key("Type").string(var_1916.as_str());
    }
    if let Some(var_1917) = &input.comment {
        object.key("Comment").string(var_1917.as_str());
    }
    if let Some(var_1918) = &input.parameters {
        let mut object_1919 = object.key("Parameters").start_object();
        for (key_1920, value_1921) in var_1918 {
             {
                object_1919.key(key_1920.as_str()).string(value_1921.as_str());
            }
        }
        object_1919.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::TableIdentifier) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1922) = &input.catalog_id {
        object.key("CatalogId").string(var_1922.as_str());
    }
    if let Some(var_1923) = &input.database_name {
        object.key("DatabaseName").string(var_1923.as_str());
    }
    if let Some(var_1924) = &input.name {
        object.key("Name").string(var_1924.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Condition) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1925) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1925.as_str());
    }
    if let Some(var_1926) = &input.job_name {
        object.key("JobName").string(var_1926.as_str());
    }
    if let Some(var_1927) = &input.state {
        object.key("State").string(var_1927.as_str());
    }
    if let Some(var_1928) = &input.crawler_name {
        object.key("CrawlerName").string(var_1928.as_str());
    }
    if let Some(var_1929) = &input.crawl_state {
        object.key("CrawlState").string(var_1929.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ResourceUri) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1930) = &input.resource_type {
        object.key("ResourceType").string(var_1930.as_str());
    }
    if let Some(var_1931) = &input.uri {
        object.key("Uri").string(var_1931.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1932) = &input.name {
        object.key("Name").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.data_type {
        object.key("DataType").string(var_1933.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::EncryptionAtRest) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1934) = &input.catalog_encryption_mode {
        object.key("CatalogEncryptionMode").string(var_1934.as_str());
    }
    if let Some(var_1935) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ConnectionPasswordEncryption) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("ReturnConnectionPasswordEncrypted").boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1936) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1936.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::ColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1937) = &input.r#type {
        object.key("Type").string(var_1937.as_str());
    }
    if let Some(var_1938) = &input.boolean_column_statistics_data {
        let mut object_1939 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(&mut object_1939, var_1938)?;
        object_1939.finish();
    }
    if let Some(var_1940) = &input.date_column_statistics_data {
        let mut object_1941 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(&mut object_1941, var_1940)?;
        object_1941.finish();
    }
    if let Some(var_1942) = &input.decimal_column_statistics_data {
        let mut object_1943 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(&mut object_1943, var_1942)?;
        object_1943.finish();
    }
    if let Some(var_1944) = &input.double_column_statistics_data {
        let mut object_1945 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(&mut object_1945, var_1944)?;
        object_1945.finish();
    }
    if let Some(var_1946) = &input.long_column_statistics_data {
        let mut object_1947 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(&mut object_1947, var_1946)?;
        object_1947.finish();
    }
    if let Some(var_1948) = &input.string_column_statistics_data {
        let mut object_1949 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(&mut object_1949, var_1948)?;
        object_1949.finish();
    }
    if let Some(var_1950) = &input.binary_column_statistics_data {
        let mut object_1951 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(&mut object_1951, var_1950)?;
        object_1951.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SerDeInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1952) = &input.name {
        object.key("Name").string(var_1952.as_str());
    }
    if let Some(var_1953) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1953.as_str());
    }
    if let Some(var_1954) = &input.parameters {
        let mut object_1955 = object.key("Parameters").start_object();
        for (key_1956, value_1957) in var_1954 {
             {
                object_1955.key(key_1956.as_str()).string(value_1957.as_str());
            }
        }
        object_1955.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Order) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1958) = &input.column {
        object.key("Column").string(var_1958.as_str());
    }
     {
        object.key("SortOrder").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.sort_order).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SkewedInfo) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1959) = &input.skewed_column_names {
        let mut array_1960 = object.key("SkewedColumnNames").start_array();
        for item_1961 in var_1959 {
             {
                array_1960.value().string(item_1961.as_str());
            }
        }
        array_1960.finish();
    }
    if let Some(var_1962) = &input.skewed_column_values {
        let mut array_1963 = object.key("SkewedColumnValues").start_array();
        for item_1964 in var_1962 {
             {
                array_1963.value().string(item_1964.as_str());
            }
        }
        array_1963.finish();
    }
    if let Some(var_1965) = &input.skewed_column_value_location_maps {
        let mut object_1966 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1967, value_1968) in var_1965 {
             {
                object_1966.key(key_1967.as_str()).string(value_1968.as_str());
            }
        }
        object_1966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SchemaReference) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1969) = &input.schema_id {
        let mut object_1970 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1970, var_1969)?;
        object_1970.finish();
    }
    if let Some(var_1971) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1971.as_str());
    }
    if let Some(var_1972) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1972).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DataLakePrincipal) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1973) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_1973.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_schema(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueSchema) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1974) = &input.columns {
        let mut array_1975 = object.key("Columns").start_array();
        for item_1976 in var_1974 {
             {
                let mut object_1977 = array_1975.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_studio_schema_column(&mut object_1977, item_1976)?;
                object_1977.finish();
            }
        }
        array_1975.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JdbcConnectorOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1978) = &input.filter_predicate {
        object.key("FilterPredicate").string(var_1978.as_str());
    }
    if let Some(var_1979) = &input.partition_column {
        object.key("PartitionColumn").string(var_1979.as_str());
    }
    if let Some(var_1980) = &input.lower_bound {
        object.key("LowerBound").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1980).into()));
    }
    if let Some(var_1981) = &input.upper_bound {
        object.key("UpperBound").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1981).into()));
    }
    if let Some(var_1982) = &input.num_partitions {
        object.key("NumPartitions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1982).into()));
    }
    if let Some(var_1983) = &input.job_bookmark_keys {
        let mut array_1984 = object.key("JobBookmarkKeys").start_array();
        for item_1985 in var_1983 {
             {
                array_1984.value().string(item_1985.as_str());
            }
        }
        array_1984.finish();
    }
    if let Some(var_1986) = &input.job_bookmark_keys_sort_order {
        object.key("JobBookmarkKeysSortOrder").string(var_1986.as_str());
    }
    if let Some(var_1987) = &input.data_type_mapping {
        let mut object_1988 = object.key("DataTypeMapping").start_object();
        for (key_1989, value_1990) in var_1987 {
             {
                object_1988.key(key_1989.as_str()).string(value_1990.as_str());
            }
        }
        object_1988.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_additional_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3SourceAdditionalOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1991) = &input.bounded_size {
        object.key("BoundedSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1991).into()));
    }
    if let Some(var_1992) = &input.bounded_files {
        object.key("BoundedFiles").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1992).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_source_additional_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::S3DirectSourceAdditionalOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1993) = &input.bounded_size {
        object.key("BoundedSize").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1993).into()));
    }
    if let Some(var_1994) = &input.bounded_files {
        object.key("BoundedFiles").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_1994).into()));
    }
    if let Some(var_1995) = &input.enable_sample_path {
        object.key("EnableSamplePath").boolean(*var_1995);
    }
    if let Some(var_1996) = &input.sample_path {
        object.key("SamplePath").string(var_1996.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upsert_redshift_target_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::UpsertRedshiftTargetOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1997) = &input.table_location {
        object.key("TableLocation").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.connection_name {
        object.key("ConnectionName").string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.upsert_keys {
        let mut array_2000 = object.key("UpsertKeys").start_array();
        for item_2001 in var_1999 {
             {
                array_2000.value().string(item_2001.as_str());
            }
        }
        array_2000.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::CatalogSchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2002) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_2002);
    }
    if let Some(var_2003) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_2003.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_schema_change_policy(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DirectSchemaChangePolicy) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2004) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_2004);
    }
    if let Some(var_2005) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_2005.as_str());
    }
    if let Some(var_2006) = &input.table {
        object.key("Table").string(var_2006.as_str());
    }
    if let Some(var_2007) = &input.database {
        object.key("Database").string(var_2007.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Mapping) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2008) = &input.to_key {
        object.key("ToKey").string(var_2008.as_str());
    }
    if let Some(var_2009) = &input.from_path {
        let mut array_2010 = object.key("FromPath").start_array();
        for item_2011 in var_2009 {
             {
                array_2010.value().string(item_2011.as_str());
            }
        }
        array_2010.finish();
    }
    if let Some(var_2012) = &input.from_type {
        object.key("FromType").string(var_2012.as_str());
    }
    if let Some(var_2013) = &input.to_type {
        object.key("ToType").string(var_2013.as_str());
    }
    if let Some(var_2014) = &input.dropped {
        object.key("Dropped").boolean(*var_2014);
    }
    if let Some(var_2015) = &input.children {
        let mut array_2016 = object.key("Children").start_array();
        for item_2017 in var_2015 {
             {
                let mut object_2018 = array_2016.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(&mut object_2018, item_2017)?;
                object_2018.finish();
            }
        }
        array_2016.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::JoinColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2019) = &input.from {
        object.key("From").string(var_2019.as_str());
    }
    if let Some(var_2020) = &input.keys {
        let mut array_2021 = object.key("Keys").start_array();
        for item_2022 in var_2020 {
             {
                let mut array_2023 = array_2021.value().start_array();
                for item_2024 in item_2022 {
                     {
                        array_2023.value().string(item_2024.as_str());
                    }
                }
                array_2023.finish();
            }
        }
        array_2021.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_expression(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterExpression) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2025) = &input.operation {
        object.key("Operation").string(var_2025.as_str());
    }
    if let Some(var_2026) = &input.negated {
        object.key("Negated").boolean(*var_2026);
    }
    if let Some(var_2027) = &input.values {
        let mut array_2028 = object.key("Values").start_array();
        for item_2029 in var_2027 {
             {
                let mut object_2030 = array_2028.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_value(&mut object_2030, item_2029)?;
                object_2030.finish();
            }
        }
        array_2028.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_alias(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::SqlAlias) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2031) = &input.from {
        object.key("From").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.alias {
        object.key("Alias").string(var_2032.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_streaming_source_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KinesisStreamingSourceOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2033) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_2033.as_str());
    }
    if let Some(var_2034) = &input.stream_name {
        object.key("StreamName").string(var_2034.as_str());
    }
    if let Some(var_2035) = &input.classification {
        object.key("Classification").string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.delimiter {
        object.key("Delimiter").string(var_2036.as_str());
    }
    if let Some(var_2037) = &input.starting_position {
        object.key("StartingPosition").string(var_2037.as_str());
    }
    if let Some(var_2038) = &input.max_fetch_time_in_ms {
        object.key("MaxFetchTimeInMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2038).into()));
    }
    if let Some(var_2039) = &input.max_fetch_records_per_shard {
        object.key("MaxFetchRecordsPerShard").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2039).into()));
    }
    if let Some(var_2040) = &input.max_record_per_read {
        object.key("MaxRecordPerRead").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2040).into()));
    }
    if let Some(var_2041) = &input.add_idle_time_between_reads {
        object.key("AddIdleTimeBetweenReads").boolean(*var_2041);
    }
    if let Some(var_2042) = &input.idle_time_between_reads_in_ms {
        object.key("IdleTimeBetweenReadsInMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2042).into()));
    }
    if let Some(var_2043) = &input.describe_shard_interval {
        object.key("DescribeShardInterval").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2043).into()));
    }
    if let Some(var_2044) = &input.num_retries {
        object.key("NumRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2044).into()));
    }
    if let Some(var_2045) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2045).into()));
    }
    if let Some(var_2046) = &input.max_retry_interval_ms {
        object.key("MaxRetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2046).into()));
    }
    if let Some(var_2047) = &input.avoid_empty_batches {
        object.key("AvoidEmptyBatches").boolean(*var_2047);
    }
    if let Some(var_2048) = &input.stream_arn {
        object.key("StreamArn").string(var_2048.as_str());
    }
    if let Some(var_2049) = &input.role_arn {
        object.key("RoleArn").string(var_2049.as_str());
    }
    if let Some(var_2050) = &input.role_session_name {
        object.key("RoleSessionName").string(var_2050.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_streaming_data_preview_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StreamingDataPreviewOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2051) = &input.polling_time {
        object.key("PollingTime").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2051).into()));
    }
    if let Some(var_2052) = &input.record_polling_limit {
        object.key("RecordPollingLimit").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2052).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_streaming_source_options(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::KafkaStreamingSourceOptions) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2053) = &input.bootstrap_servers {
        object.key("BootstrapServers").string(var_2053.as_str());
    }
    if let Some(var_2054) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_2054.as_str());
    }
    if let Some(var_2055) = &input.connection_name {
        object.key("ConnectionName").string(var_2055.as_str());
    }
    if let Some(var_2056) = &input.topic_name {
        object.key("TopicName").string(var_2056.as_str());
    }
    if let Some(var_2057) = &input.assign {
        object.key("Assign").string(var_2057.as_str());
    }
    if let Some(var_2058) = &input.subscribe_pattern {
        object.key("SubscribePattern").string(var_2058.as_str());
    }
    if let Some(var_2059) = &input.classification {
        object.key("Classification").string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.delimiter {
        object.key("Delimiter").string(var_2060.as_str());
    }
    if let Some(var_2061) = &input.starting_offsets {
        object.key("StartingOffsets").string(var_2061.as_str());
    }
    if let Some(var_2062) = &input.ending_offsets {
        object.key("EndingOffsets").string(var_2062.as_str());
    }
    if let Some(var_2063) = &input.poll_timeout_ms {
        object.key("PollTimeoutMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2063).into()));
    }
    if let Some(var_2064) = &input.num_retries {
        object.key("NumRetries").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2064).into()));
    }
    if let Some(var_2065) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2065).into()));
    }
    if let Some(var_2066) = &input.max_offsets_per_trigger {
        object.key("MaxOffsetsPerTrigger").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2066).into()));
    }
    if let Some(var_2067) = &input.min_partitions {
        object.key("MinPartitions").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((*var_2067).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_check_box_list(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NullCheckBoxList) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2068) = &input.is_empty {
        object.key("IsEmpty").boolean(*var_2068);
    }
    if let Some(var_2069) = &input.is_null_string {
        object.key("IsNullString").boolean(*var_2069);
    }
    if let Some(var_2070) = &input.is_neg_one {
        object.key("IsNegOne").boolean(*var_2070);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_value_field(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::NullValueField) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2071) = &input.value {
        object.key("Value").string(var_2071.as_str());
    }
    if let Some(var_2072) = &input.datatype {
        let mut object_2073 = object.key("Datatype").start_object();
        crate::json_ser::serialize_structure_crate_model_datatype(&mut object_2073, var_2072)?;
        object_2073.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_operation(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::AggregateOperation) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2074) = &input.column {
        let mut array_2075 = object.key("Column").start_array();
        for item_2076 in var_2074 {
             {
                array_2075.value().string(item_2076.as_str());
            }
        }
        array_2075.finish();
    }
    if let Some(var_2077) = &input.agg_func {
        object.key("AggFunc").string(var_2077.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BooleanColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("NumberOfTrues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_trues).into()));
    }
     {
        object.key("NumberOfFalses").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_falses).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DateColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2078) = &input.minimum_value {
        object.key("MinimumValue").date_time(var_2078, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2079) = &input.maximum_value {
        object.key("MaximumValue").date_time(var_2079, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DecimalColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2080) = &input.minimum_value {
        let mut object_2081 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(&mut object_2081, var_2080)?;
        object_2081.finish();
    }
    if let Some(var_2082) = &input.maximum_value {
        let mut object_2083 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(&mut object_2083, var_2082)?;
        object_2083.finish();
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DoubleColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.minimum_value).into()));
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.maximum_value).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::LongColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.minimum_value).into()));
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_value).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::StringColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaximumLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_length).into()));
    }
     {
        object.key("AverageLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.average_length).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
     {
        object.key("NumberOfDistinctValues").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::BinaryColumnStatisticsData) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
     {
        object.key("MaximumLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.maximum_length).into()));
    }
     {
        object.key("AverageLength").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::Float((input.average_length).into()));
    }
     {
        object.key("NumberOfNulls").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.number_of_nulls).into()));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_studio_schema_column(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::GlueStudioSchemaColumn) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2084) = &input.name {
        object.key("Name").string(var_2084.as_str());
    }
    if let Some(var_2085) = &input.r#type {
        object.key("Type").string(var_2085.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_value(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::FilterValue) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2086) = &input.r#type {
        object.key("Type").string(var_2086.as_str());
    }
    if let Some(var_2087) = &input.value {
        let mut array_2088 = object.key("Value").start_array();
        for item_2089 in var_2087 {
             {
                array_2088.value().string(item_2089.as_str());
            }
        }
        array_2088.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datatype(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::Datatype) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2090) = &input.id {
        object.key("Id").string(var_2090.as_str());
    }
    if let Some(var_2091) = &input.label {
        object.key("Label").string(var_2091.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(object: &mut aws_smithy_json::serialize::JsonObjectWriter, input: &crate::model::DecimalNumber) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_2092) = &input.unscaled_value {
        object.key("UnscaledValue").string_unchecked(&aws_smithy_types::base64::encode(var_2092));
    }
     {
        object.key("Scale").number(#[allow(clippy::useless_conversion)]aws_smithy_types::Number::NegInt((input.scale).into()));
    }
    Ok(())
}

